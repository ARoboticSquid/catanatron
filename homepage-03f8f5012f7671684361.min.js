! function(e) {
    function t(t) {
        for (var i, r, s = t[0], c = t[1], l = t[2], d = 0, u = []; d < s.length; d++) r = s[d], o[r] && u.push(o[r][0]), o[r] = 0;
        for (i in c) Object.prototype.hasOwnProperty.call(c, i) && (e[i] = c[i]);
        for (h && h(t); u.length;) u.shift()();
        return n.push.apply(n, l || []), a()
    }

    function a() {
        for (var e, t = 0; t < n.length; t++) {
            for (var a = n[t], i = !0, s = 1; s < a.length; s++) {
                var c = a[s];
                0 !== o[c] && (i = !1)
            }
            i && (n.splice(t--, 1), e = r(r.s = a[0]))
        }
        return e
    }
    var i = {},
        o = {
            3: 0
        },
        n = [];

    function r(t) {
        if (i[t]) return i[t].exports;
        var a = i[t] = {
            i: t,
            l: !1,
            exports: {}
        };
        return e[t].call(a.exports, a, a.exports, r), a.l = !0, a.exports
    }
    r.m = e, r.c = i, r.d = function(e, t, a) {
        r.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: a
        })
    }, r.r = function(e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }, r.t = function(e, t) {
        if (1 & t && (e = r(e)), 8 & t) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var a = Object.create(null);
        if (r.r(a), Object.defineProperty(a, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e)
            for (var i in e) r.d(a, i, function(t) {
                return e[t]
            }.bind(null, i));
        return a
    }, r.n = function(e) {
        var t = e && e.__esModule ? function() {
            return e.default
        } : function() {
            return e
        };
        return r.d(t, "a", t), t
    }, r.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }, r.p = "/dist";
    var s = window.webpackJsonp = window.webpackJsonp || [],
        c = s.push.bind(s);
    s.push = t, s = s.slice();
    for (var l = 0; l < s.length; l++) t(s[l]);
    var h = c;
    n.push([19, 0]), a()
}([, , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PlayerEnums = t.DiceSettingEnum = t.EventDiceEnum = t.MapSettingEnum = t.OptionalGameMechanicEnum = t.ScenarioSettingEnum = t.ExtensionSettingEnum = t.TemporaryModeSettingEnum = t.isModeCitiesAndKnights = t.ModeSettingEnum = t.GameTypeEnum = t.GameStateEnums = t.NetworkEnums = void 0;
    const i = a(21),
        o = a(7);
    var n, r, s, c, l, h;
    ! function(e) {
        let t, a;
        ! function(e) {
            e[e.Connected = 0] = "Connected", e[e.NewGame = 1] = "NewGame", e[e.ContinueGame = 2] = "ContinueGame", e[e.KickedFromGame = 3] = "KickedFromGame", e[e.BuildGame = 4] = "BuildGame", e[e.ChatText = 5] = "ChatText", e[e.ChatGameLog = 6] = "ChatGameLog", e[e.SessionState = 7] = "SessionState", e[e.GameSetup = 8] = "GameSetup", e[e.CurrentGameState = 9] = "CurrentGameState", e[e.BankState = 10] = "BankState", e[e.DiceState = 11] = "DiceState", e[e.PlayerControllerState = 12] = "PlayerControllerState", e[e.AmountOfCardsToDiscard = 13] = "AmountOfCardsToDiscard", e[e.MapState = 14] = "MapState", e[e.MapEdges = 15] = "MapEdges", e[e.MapCorners = 16] = "MapCorners", e[e.MapTiles = 17] = "MapTiles", e[e.CardsToSelectForDevelopmentCard = 18] = "CardsToSelectForDevelopmentCard", e[e.CardsToSelectForPendingTransaction = 19] = "CardsToSelectForPendingTransaction", e[e.SelectPlayerUsingDevelopmentCard = 20] = "SelectPlayerUsingDevelopmentCard", e[e.ConfirmUseDevelopmentCard = 21] = "ConfirmUseDevelopmentCard", e[e.StealDevelopmentCardFromPlayer = 22] = "StealDevelopmentCardFromPlayer", e[e.StealResourceCardFromPlayer = 23] = "StealResourceCardFromPlayer", e[e.SelectPlayerAndCard = 24] = "SelectPlayerAndCard", e[e.SelectCardsToGiveToPlayer = 25] = "SelectCardsToGiveToPlayer", e[e.SelectDice = 26] = "SelectDice", e[e.ClosePopupUI = 27] = "ClosePopupUI", e[e.GivePlayerResourcesFromTile = 28] = "GivePlayerResourcesFromTile", e[e.SelectPlayer = 29] = "SelectPlayer", e[e.StoleCard = 30] = "StoleCard", e[e.GiveCardFromBank = 31] = "GiveCardFromBank", e[e.HighlightCorners = 32] = "HighlightCorners", e[e.HighlightRoadEdges = 33] = "HighlightRoadEdges", e[e.HighlightShipEdges = 34] = "HighlightShipEdges", e[e.HighlightTiles = 35] = "HighlightTiles", e[e.HighlightDiceNumbersForInventor = 36] = "HighlightDiceNumbersForInventor", e[e.BankTradeRatioState = 37] = "BankTradeRatioState", e[e.GetOffer = 38] = "GetOffer", e[e.EmbargoState = 39] = "EmbargoState", e[e.BoldTextInTradeWindow = 40] = "BoldTextInTradeWindow", e[e.CloseOffer = 41] = "CloseOffer", e[e.OfferError = 42] = "OfferError", e[e.OfferRejected = 43] = "OfferRejected", e[e.OfferAccepted = 44] = "OfferAccepted", e[e.InfoMessage = 45] = "InfoMessage", e[e.UsedMonopoly = 46] = "UsedMonopoly", e[e.UsedCards = 47] = "UsedCards", e[e.ExchangeCards = 48] = "ExchangeCards", e[e.DiscardedCards = 49] = "DiscardedCards", e[e.LobbyGeneralData = 50] = "LobbyGeneralData", e[e.LobbyPlayerData = 51] = "LobbyPlayerData", e[e.LobbyDisconnectData = 52] = "LobbyDisconnectData", e[e.LobbyPublicRooms = 53] = "LobbyPublicRooms", e[e.LobbyRoomUpdate = 54] = "LobbyRoomUpdate", e[e.LobbyRoomRemove = 55] = "LobbyRoomRemove", e[e.LobbyGames = 56] = "LobbyGames", e[e.GameSettings = 57] = "GameSettings", e[e.CustomRoom = 58] = "CustomRoom", e[e.GotKicked = 59] = "GotKicked", e[e.Banned = 60] = "Banned", e[e.SendPopup = 61] = "SendPopup", e[e.SendNotification = 62] = "SendNotification", e[e.SendBroadcast = 63] = "SendBroadcast", e[e.GameEndState = 64] = "GameEndState", e[e.RematchLink = 65] = "RematchLink", e[e.EndGameText = 66] = "EndGameText", e[e.SpectatorCount = 67] = "SpectatorCount", e[e.SendAnalytics = 68] = "SendAnalytics", e[e.PlayersCanceledSpecialBuildPhase = 69] = "PlayersCanceledSpecialBuildPhase", e[e.SpecialBuildPhaseLastPlayerToRollDice = 70] = "SpecialBuildPhaseLastPlayerToRollDice", e[e.Vote = 71] = "Vote", e[e.CityImprovementStateUpdated = 72] = "CityImprovementStateUpdated", e[e.ForceShowCityImprovementButtons = 73] = "ForceShowCityImprovementButtons", e[e.UnlockedCityImprovement = 74] = "UnlockedCityImprovement", e[e.PlayerReceivedMetropolis = 75] = "PlayerReceivedMetropolis", e[e.KnightPieceStateUpdated = 76] = "KnightPieceStateUpdated", e[e.BarbarianStateUpdated = 77] = "BarbarianStateUpdated", e[e.MerchantStateUpdates = 78] = "MerchantStateUpdates", e[e.PlayerReceivedAchievement = 79] = "PlayerReceivedAchievement", e[e.SocketTest = 80] = "SocketTest", e[e.PlayTurnSound = 81] = "PlayTurnSound", e[e.PlayersTakingAction = 82] = "PlayersTakingAction", e[e.PlayersDoneTakingAction = 83] = "PlayersDoneTakingAction", e[e.MatchmakingUpdate = 84] = "MatchmakingUpdate", e[e.MatchmakingError = 85] = "MatchmakingError", e[e.MatchmakingMatchFound = 86] = "MatchmakingMatchFound"
        }(t = e.State || (e.State = {})),
        function(e) {
            e[e.ChatSubmit = 0] = "ChatSubmit", e[e.UpdateNickName = 1] = "UpdateNickName", e[e.ClickedLobbyGameListButton = 2] = "ClickedLobbyGameListButton", e[e.ClickedLobbyRoomRefreshButton = 3] = "ClickedLobbyRoomRefreshButton", e[e.ClickedStartTutorial = 4] = "ClickedStartTutorial", e[e.ClickedStartFastBots = 5] = "ClickedStartFastBots", e[e.ClickedCreateRoom = 6] = "ClickedCreateRoom", e[e.ClickedJoinRoom = 7] = "ClickedJoinRoom", e[e.AccessGameLink = 8] = "AccessGameLink", e[e.ClickedSpectateGame = 9] = "ClickedSpectateGame", e[e.ClickedReconnectGame = 10] = "ClickedReconnectGame", e[e.ClickedChangeIcon = 11] = "ClickedChangeIcon", e[e.EnteredMatchmaking = 12] = "EnteredMatchmaking", e[e.ClickedDice = 13] = "ClickedDice", e[e.SelectedTile = 14] = "SelectedTile", e[e.SelectedTiles = 15] = "SelectedTiles", e[e.SelectedPlayer = 16] = "SelectedPlayer", e[e.PassedTurn = 17] = "PassedTurn", e[e.SelectedCards = 18] = "SelectedCards", e[e.BuyDevelopmentCard = 19] = "BuyDevelopmentCard", e[e.WantToBuildRoad = 20] = "WantToBuildRoad", e[e.ConfirmBuildRoad = 21] = "ConfirmBuildRoad", e[e.ConfirmRemoveRoad = 22] = "ConfirmRemoveRoad", e[e.WantToBuildSettlement = 23] = "WantToBuildSettlement", e[e.ConfirmBuildSettlement = 24] = "ConfirmBuildSettlement", e[e.WantToBuildCity = 25] = "WantToBuildCity", e[e.ConfirmBuildCity = 26] = "ConfirmBuildCity", e[e.WantToBuildShip = 27] = "WantToBuildShip", e[e.ConfirmBuildShip = 28] = "ConfirmBuildShip", e[e.WantToMoveShip = 29] = "WantToMoveShip", e[e.SelectedShipToMove = 30] = "SelectedShipToMove", e[e.ConfirmMoveShip = 31] = "ConfirmMoveShip", e[e.WantToBuildCityWall = 32] = "WantToBuildCityWall", e[e.ConfirmBuildCityWall = 33] = "ConfirmBuildCityWall", e[e.WantToPlaceKnight = 34] = "WantToPlaceKnight", e[e.ConfirmPlaceKnight = 35] = "ConfirmPlaceKnight", e[e.WantToUpgradeKnight = 36] = "WantToUpgradeKnight", e[e.ConfirmUpgradeKnight = 37] = "ConfirmUpgradeKnight", e[e.WantToActivateKnight = 38] = "WantToActivateKnight", e[e.ConfirmActivateKnight = 39] = "ConfirmActivateKnight", e[e.WantToTakeKnightAction = 40] = "WantToTakeKnightAction", e[e.SelectKnightToTakeAction = 41] = "SelectKnightToTakeAction", e[e.ConfirmMoveKnight = 42] = "ConfirmMoveKnight", e[e.ConfirmMoveKnightOffTurn = 43] = "ConfirmMoveKnightOffTurn", e[e.ConfirmRemoveKnight = 44] = "ConfirmRemoveKnight", e[e.ConfirmCityUpgrade = 45] = "ConfirmCityUpgrade", e[e.ConfirmBuildMetropolis = 46] = "ConfirmBuildMetropolis", e[e.ConfirmPillageCity = 47] = "ConfirmPillageCity", e[e.ConfirmDicePair = 48] = "ConfirmDicePair", e[e.CancelAction = 49] = "CancelAction", e[e.ClickedDevelpomentCard = 50] = "ClickedDevelpomentCard", e[e.CreatedPlayerOffer = 51] = "CreatedPlayerOffer", e[e.AcceptedOffer = 52] = "AcceptedOffer", e[e.TakeAcceptedOffer = 53] = "TakeAcceptedOffer", e[e.RejectedOffer = 54] = "RejectedOffer", e[e.CreatedCounterOffer = 55] = "CreatedCounterOffer", e[e.ClickedEmbargo = 56] = "ClickedEmbargo", e[e.RequestActionSwap = 57] = "RequestActionSwap", e[e.RequestSpecialBuildPhase = 58] = "RequestSpecialBuildPhase", e[e.CancelSpecialBuildPhase = 59] = "CancelSpecialBuildPhase", e[e.RoomReadyToStart = 60] = "RoomReadyToStart", e[e.RoomSelectColor = 61] = "RoomSelectColor", e[e.RoomStartGame = 62] = "RoomStartGame", e[e.RoomKickPlayer = 63] = "RoomKickPlayer", e[e.RoomAddBot = 64] = "RoomAddBot", e[e.RoomSettingChangePrivateGame = 65] = "RoomSettingChangePrivateGame", e[e.RoomSettingUpdateGameModeSetting = 66] = "RoomSettingUpdateGameModeSetting", e[e.RoomSettingUpdateMapSetting = 67] = "RoomSettingUpdateMapSetting", e[e.RoomSettingUpdateDiceSetting = 68] = "RoomSettingUpdateDiceSetting", e[e.RoomSettingChangeVictoryPointsToWin = 69] = "RoomSettingChangeVictoryPointsToWin", e[e.RoomSettingChangeKarmaActive = 70] = "RoomSettingChangeKarmaActive", e[e.RoomSettingChangeCardDiscardLimit = 71] = "RoomSettingChangeCardDiscardLimit", e[e.RoomSettingChangeFriendlyRobber = 72] = "RoomSettingChangeFriendlyRobber", e[e.RoomSettingChangeMaxPlayers = 73] = "RoomSettingChangeMaxPlayers", e[e.RoomSettingChangeHideBankCards = 74] = "RoomSettingChangeHideBankCards", e[e.RoomSettingChangeGameSpeed = 75] = "RoomSettingChangeGameSpeed", e[e.RoomSettingChangeBotSpeed = 76] = "RoomSettingChangeBotSpeed", e[e.ClickedRematch = 77] = "ClickedRematch", e[e.Vote = 78] = "Vote", e[e.ClickedFindGame = 79] = "ClickedFindGame", e[e.ClickedCancelFindGame = 80] = "ClickedCancelFindGame", e[e.DisconnectedFromSocketServer = 81] = "DisconnectedFromSocketServer", e[e.RequestToJoinMatchmakingMatch = 82] = "RequestToJoinMatchmakingMatch", e[e.ExitedMatchmaking = 83] = "ExitedMatchmaking"
        }(a = e.Action || (e.Action = {}));
        class i {
            static isSafeToSwapActions(t, a) {
                const i = (0, o.elementInArray)(n.ActionsThatCanBeCancelled.actions, t),
                    r = (0, o.elementInArray)(e.ActionsThatCanBeAutomaticallySwapped.actions, a);
                return !(!i || !r)
            }
        }
        i.actions = [e.Action.WantToBuildRoad, e.Action.WantToBuildSettlement, e.Action.WantToBuildCity, e.Action.BuyDevelopmentCard, e.Action.WantToBuildShip, e.Action.WantToMoveShip, e.Action.WantToBuildCityWall, e.Action.WantToPlaceKnight, e.Action.WantToActivateKnight, e.Action.WantToUpgradeKnight, e.Action.WantToTakeKnightAction, e.Action.ConfirmCityUpgrade, e.Action.TakeAcceptedOffer, e.Action.CreatedPlayerOffer, e.Action.ClickedDevelpomentCard], e.ActionsThatCanBeAutomaticallySwapped = i
    }(t.NetworkEnums || (t.NetworkEnums = {})),
    function(e) {
        let t, a, o, n, r, s, c, l;
        ! function(e) {
            e[e.ResourceBack = 0] = "ResourceBack", e[e.Lumber = 1] = "Lumber", e[e.Brick = 2] = "Brick", e[e.Wool = 3] = "Wool", e[e.Grain = 4] = "Grain", e[e.Ore = 5] = "Ore", e[e.DevelopmentBack = 6] = "DevelopmentBack", e[e.Knight = 7] = "Knight", e[e.VictoryPoint = 8] = "VictoryPoint", e[e.Monopoly = 9] = "Monopoly", e[e.RoadBuilding = 10] = "RoadBuilding", e[e.YearOfPlenty = 11] = "YearOfPlenty", e[e.CommodityBack = 12] = "CommodityBack", e[e.Cloth = 13] = "Cloth", e[e.Coin = 14] = "Coin", e[e.Paper = 15] = "Paper", e[e.ProgressCardTradeBack = 16] = "ProgressCardTradeBack", e[e.ProgressCardTradeCommercialHarbor = 17] = "ProgressCardTradeCommercialHarbor", e[e.ProgressCardTradeMasterMerchant = 18] = "ProgressCardTradeMasterMerchant", e[e.ProgressCardTradeMerchant = 19] = "ProgressCardTradeMerchant", e[e.ProgressCardTradeMerchantFleet = 20] = "ProgressCardTradeMerchantFleet", e[e.ProgressCardTradeResourceMonopoly = 21] = "ProgressCardTradeResourceMonopoly", e[e.ProgressCardTradeCommodityMonopoly = 22] = "ProgressCardTradeCommodityMonopoly", e[e.ProgressCardPoliticsBack = 23] = "ProgressCardPoliticsBack", e[e.ProgressCardPoliticsBishop = 24] = "ProgressCardPoliticsBishop", e[e.ProgressCardPoliticsConstitution = 25] = "ProgressCardPoliticsConstitution", e[e.ProgressCardPoliticsDeserter = 26] = "ProgressCardPoliticsDeserter", e[e.ProgressCardPoliticsDiplomat = 27] = "ProgressCardPoliticsDiplomat", e[e.ProgressCardPoliticsIntrigue = 28] = "ProgressCardPoliticsIntrigue", e[e.ProgressCardPoliticsSaboteur = 29] = "ProgressCardPoliticsSaboteur", e[e.ProgressCardPoliticsSpy = 30] = "ProgressCardPoliticsSpy", e[e.ProgressCardPoliticsWarlord = 31] = "ProgressCardPoliticsWarlord", e[e.ProgressCardPoliticsWedding = 32] = "ProgressCardPoliticsWedding", e[e.ProgressCardScienceBack = 33] = "ProgressCardScienceBack", e[e.ProgressCardScienceAlchemist = 34] = "ProgressCardScienceAlchemist", e[e.ProgressCardScienceCrane = 35] = "ProgressCardScienceCrane", e[e.ProgressCardScienceEngineer = 36] = "ProgressCardScienceEngineer", e[e.ProgressCardScienceInventor = 37] = "ProgressCardScienceInventor", e[e.ProgressCardScienceIrrigation = 38] = "ProgressCardScienceIrrigation", e[e.ProgressCardScienceMedicine = 39] = "ProgressCardScienceMedicine", e[e.ProgressCardScienceMining = 40] = "ProgressCardScienceMining", e[e.ProgressCardSciencePrinter = 41] = "ProgressCardSciencePrinter", e[e.ProgressCardScienceRoadBuilding = 42] = "ProgressCardScienceRoadBuilding", e[e.ProgressCardScienceSmith = 43] = "ProgressCardScienceSmith"
        }(t = e.CardEnum || (e.CardEnum = {})),
        function(e) {
            e[e.Resource = 0] = "Resource", e[e.Commodity = 1] = "Commodity", e[e.Development = 2] = "Development", e[e.ProgressTrade = 3] = "ProgressTrade", e[e.ProgressPolitics = 4] = "ProgressPolitics", e[e.ProgressScience = 5] = "ProgressScience"
        }(a = e.CardTypeEnum || (e.CardTypeEnum = {})),
        function(e) {
            e[e.Settlement = 0] = "Settlement", e[e.City = 1] = "City", e[e.DevelopmentCardVictoryPoint = 2] = "DevelopmentCardVictoryPoint", e[e.LargestArmy = 3] = "LargestArmy", e[e.LongestRoad = 4] = "LongestRoad", e[e.Chits = 5] = "Chits", e[e.Metropolis = 6] = "Metropolis", e[e.DefenderOfColonist = 7] = "DefenderOfColonist", e[e.ProgressCardVictoryPoint = 8] = "ProgressCardVictoryPoint", e[e.Merchant = 9] = "Merchant"
        }(o = e.VictoryPointTypes || (e.VictoryPointTypes = {})),
        function(e) {
            e[e.City = 0] = "City", e[e.Settlement = 1] = "Settlement", e[e.Road = 2] = "Road", e[e.DevelopmentCard = 3] = "DevelopmentCard", e[e.Ship = 4] = "Ship", e[e.CityWall = 5] = "CityWall", e[e.Knight = 6] = "Knight"
        }(n = e.PieceTypes || (e.PieceTypes = {})),
        function(e) {
            e[e.GameSetup = 0] = "GameSetup", e[e.Dice = 1] = "Dice", e[e.Turn = 2] = "Turn", e[e.GameEnd = 3] = "GameEnd", e[e.SpecialBuildPhase = 4] = "SpecialBuildPhase"
        }(r = e.TurnStates || (e.TurnStates = {})),
        function(e) {
            e[e.None = 0] = "None", e[e.GameSetupPlaceSettlement = 1] = "GameSetupPlaceSettlement", e[e.GameSetupPlaceCity = 2] = "GameSetupPlaceCity", e[e.GameSetupRoadPlacement = 3] = "GameSetupRoadPlacement", e[e.PlaceRoad = 4] = "PlaceRoad", e[e.PlaceRoadForFree = 5] = "PlaceRoadForFree", e[e.PlaceSettlement = 6] = "PlaceSettlement", e[e.PlaceCity = 7] = "PlaceCity", e[e.PlaceCityWithDiscount = 8] = "PlaceCityWithDiscount", e[e.PlaceShip = 9] = "PlaceShip", e[e.PlaceShipForFree = 10] = "PlaceShipForFree", e[e.SelectShipToMove = 11] = "SelectShipToMove", e[e.MoveShip = 12] = "MoveShip", e[e.PlaceCityWall = 13] = "PlaceCityWall", e[e.PlaceCityWallForFree = 14] = "PlaceCityWallForFree", e[e.PlaceKnight = 15] = "PlaceKnight", e[e.PlaceKnightForFree = 16] = "PlaceKnightForFree", e[e.UpgradeKnight = 17] = "UpgradeKnight", e[e.UpgradeKnightForFree = 18] = "UpgradeKnightForFree", e[e.ActivateKnight = 19] = "ActivateKnight", e[e.SelectKnightToTakeAction = 20] = "SelectKnightToTakeAction", e[e.SelectKnightAction = 21] = "SelectKnightAction", e[e.MoveKnightOffTurn = 22] = "MoveKnightOffTurn", e[e.SelectKnightToRemove = 23] = "SelectKnightToRemove", e[e.PlaceRobberOrPirate = 24] = "PlaceRobberOrPirate", e[e.PlaceRobberOnly = 25] = "PlaceRobberOnly", e[e.PlacePirateOnly = 26] = "PlacePirateOnly", e[e.SelectWhoToRob = 27] = "SelectWhoToRob", e[e.SelectCardsToDiscard = 28] = "SelectCardsToDiscard", e[e.SelectProgressCardsToDiscard = 29] = "SelectProgressCardsToDiscard", e[e.Place2MoreRoadBuilding = 30] = "Place2MoreRoadBuilding", e[e.Place1MoreRoadBuilding = 31] = "Place1MoreRoadBuilding", e[e.Select2ResourcesForYearOfPlenty = 32] = "Select2ResourcesForYearOfPlenty", e[e.Select1ResourceForMonopoly = 33] = "Select1ResourceForMonopoly", e[e.SelectCardsForPendingDistributions = 34] = "SelectCardsForPendingDistributions", e[e.PlaceMetropolis = 35] = "PlaceMetropolis", e[e.SelectProgressCard = 36] = "SelectProgressCard", e[e.SelectCityToPillage = 37] = "SelectCityToPillage", e[e.PlaceMerchant = 38] = "PlaceMerchant", e[e.SelectDiceForAlchemist = 39] = "SelectDiceForAlchemist", e[e.SelectTileProductionNumbersToSwap = 40] = "SelectTileProductionNumbersToSwap", e[e.SelectPlayerForDeserter = 41] = "SelectPlayerForDeserter", e[e.SelectRoadToRemove = 42] = "SelectRoadToRemove", e[e.DiplomatSelectWhetherToPlaceNewEdgePiece = 43] = "DiplomatSelectWhetherToPlaceNewEdgePiece", e[e.IntrigueSelectKnightToMove = 44] = "IntrigueSelectKnightToMove", e[e.SpySelectPlayer = 45] = "SpySelectPlayer", e[e.SpySelectProgressCard = 46] = "SpySelectProgressCard", e[e.SelectCardsForWedding = 47] = "SelectCardsForWedding", e[e.CommercialHarborSelectPlayerAndResource = 48] = "CommercialHarborSelectPlayerAndResource", e[e.CommercialHarborOpponentSelectsCard = 49] = "CommercialHarborOpponentSelectsCard", e[e.MasterMerchantSelectPlayer = 50] = "MasterMerchantSelectPlayer", e[e.MasterMerchantSelectCards = 51] = "MasterMerchantSelectCards", e[e.MerchantFleetSelectResource = 52] = "MerchantFleetSelectResource", e[e.ResourceMonopolySelectResource = 53] = "ResourceMonopolySelectResource", e[e.CommodityMonopolySelectResource = 54] = "CommodityMonopolySelectResource"
        }(s = e.ActionStates || (e.ActionStates = {}));
        class h {}
        h.actions = [s.None, s.PlaceRoad, s.PlaceSettlement, s.PlaceCity, s.PlaceShip, s.PlaceCityWall, s.Select2ResourcesForYearOfPlenty, s.Select1ResourceForMonopoly, s.SelectShipToMove, s.MoveShip, s.PlaceKnight, s.UpgradeKnight, s.ActivateKnight, s.SelectKnightToTakeAction, s.SelectKnightAction, s.SelectPlayerForDeserter, s.MasterMerchantSelectPlayer, s.MerchantFleetSelectResource, s.SelectTileProductionNumbersToSwap, s.SpySelectPlayer, s.CommodityMonopolySelectResource, s.ResourceMonopolySelectResource], e.ActionsThatCanBeCancelled = h,
            function(e) {
                e[e.StartGame = 0] = "StartGame", e[e.ExecutePreActionChecks = 1] = "ExecutePreActionChecks", e[e.RequestActionSwap = 2] = "RequestActionSwap", e[e.TurnStateChanged = 3] = "TurnStateChanged", e[e.UpdatedPlayersToSteal = 4] = "UpdatedPlayersToSteal", e[e.RolledDice = 5] = "RolledDice", e[e.RolledSeven = 6] = "RolledSeven", e[e.PopulateGoldTileDistributions = 7] = "PopulateGoldTileDistributions", e[e.PopulateAqueductDistributions = 8] = "PopulateAqueductDistributions", e[e.PlayerReconnected = 9] = "PlayerReconnected", e[e.PlayerDisconnected = 10] = "PlayerDisconnected", e[e.PlayerCardsUpdated = 11] = "PlayerCardsUpdated", e[e.SpectatorJoined = 12] = "SpectatorJoined", e[e.CompletedGameSetupCornerBuildingPlaced = 13] = "CompletedGameSetupCornerBuildingPlaced", e[e.CompletedCityPillage = 14] = "CompletedCityPillage", e[e.CompletedRoadPlacement = 15] = "CompletedRoadPlacement", e[e.CompletedSettlementPlacement = 16] = "CompletedSettlementPlacement", e[e.CompletedShipPlacement = 17] = "CompletedShipPlacement", e[e.CompletedShipMovement = 18] = "CompletedShipMovement", e[e.CompletedCityPlacement = 19] = "CompletedCityPlacement", e[e.RobberBlockedDistribution = 20] = "RobberBlockedDistribution", e[e.RobberMoved = 21] = "RobberMoved", e[e.PirateMoved = 22] = "PirateMoved", e[e.RequestMoveRobberOrPirate = 23] = "RequestMoveRobberOrPirate", e[e.StartPlaceRobberOnly = 24] = "StartPlaceRobberOnly", e[e.StartPlacePirate = 25] = "StartPlacePirate", e[e.UsedKnightDevelopmentCard = 26] = "UsedKnightDevelopmentCard", e[e.UsedRoadBuildingDevelopmentCard = 27] = "UsedRoadBuildingDevelopmentCard", e[e.CompletedPlace2MoreRoadBuilding = 28] = "CompletedPlace2MoreRoadBuilding", e[e.PassedTurn = 29] = "PassedTurn", e[e.TimePassedActionState = 30] = "TimePassedActionState", e[e.TimePassedTurnState = 31] = "TimePassedTurnState", e[e.EndOfTurn = 32] = "EndOfTurn", e[e.DeactivateRobberAndPirate = 33] = "DeactivateRobberAndPirate", e[e.ActivateRobberAndPirate = 34] = "ActivateRobberAndPirate", e[e.UpdateKnightActions = 35] = "UpdateKnightActions", e[e.KnightStrengthUpdated = 36] = "KnightStrengthUpdated", e[e.CompletedKnightPlacement = 37] = "CompletedKnightPlacement", e[e.CompletedKnightMovement = 38] = "CompletedKnightMovement", e[e.CompletedKnightUpgrade = 39] = "CompletedKnightUpgrade", e[e.StartMoveKnightOffTurn = 40] = "StartMoveKnightOffTurn", e[e.StartPlayerRemoveKnight = 41] = "StartPlayerRemoveKnight", e[e.KnightRemoved = 42] = "KnightRemoved", e[e.PlaceNewKnightMatchingOpponentKnight = 43] = "PlaceNewKnightMatchingOpponentKnight", e[e.RevealedFogTile = 44] = "RevealedFogTile", e[e.PlayerUnlockedAqueduct = 45] = "PlayerUnlockedAqueduct", e[e.PlayerUnlockedFortress = 46] = "PlayerUnlockedFortress", e[e.BotPlanningMoves = 47] = "BotPlanningMoves", e[e.BarbariansDefeatPlayers = 48] = "BarbariansDefeatPlayers", e[e.PlayersDefeatBarbarians = 49] = "PlayersDefeatBarbarians", e[e.PlayerReceivedProgressCard = 50] = "PlayerReceivedProgressCard", e[e.CompletedDistributingProgressCards = 51] = "CompletedDistributingProgressCards", e[e.GetPlayersWithHighestKnightScore = 52] = "GetPlayersWithHighestKnightScore", e[e.GetPlayersWithLowestKnightScore = 53] = "GetPlayersWithLowestKnightScore", e[e.GetPlayersWithKnightsOnTheMap = 54] = "GetPlayersWithKnightsOnTheMap", e[e.BarbarianAttackComplete = 55] = "BarbarianAttackComplete", e[e.FinishBarbarianAttack = 56] = "FinishBarbarianAttack", e[e.DiscountCityImprovement = 57] = "DiscountCityImprovement", e[e.PurchasedCityImprovement = 58] = "PurchasedCityImprovement", e[e.UsedMerchantProgressCard = 59] = "UsedMerchantProgressCard", e[e.PlaceCityWallForFree = 60] = "PlaceCityWallForFree", e[e.PlaceCityWithDiscount = 61] = "PlaceCityWithDiscount", e[e.UpgradeKnightForFree = 62] = "UpgradeKnightForFree", e[e.RobFromAllPlayers = 63] = "RobFromAllPlayers", e[e.ForcePlayersToDiscardCards = 64] = "ForcePlayersToDiscardCards", e[e.PlayersCompletedDiscarding = 65] = "PlayersCompletedDiscarding", e[e.WarlordActivateAllKnights = 66] = "WarlordActivateAllKnights", e[e.CanPlayerAffordDiscountedCity = 67] = "CanPlayerAffordDiscountedCity", e[e.RemovedEdgePiece = 68] = "RemovedEdgePiece", e[e.PlaceRoadForFree = 69] = "PlaceRoadForFree", e[e.PlaceShipForFree = 70] = "PlaceShipForFree", e[e.UpdatePlayerControllerState = 71] = "UpdatePlayerControllerState", e[e.CheckBotOffTurnMove = 72] = "CheckBotOffTurnMove", e[e.CanPlayerBuildDuringSpecialBuildPhase = 73] = "CanPlayerBuildDuringSpecialBuildPhase"
            }(c = e.ActionNotifications || (e.ActionNotifications = {})),
            function(e) {
                e[e.ContinueGame = 0] = "ContinueGame", e[e.GameStateUpdated = 1] = "GameStateUpdated", e[e.PlayerControllerStateUpdated = 2] = "PlayerControllerStateUpdated", e[e.DiceStateUpdated = 3] = "DiceStateUpdated", e[e.BankStateUpdated = 4] = "BankStateUpdated", e[e.MapStateUpdated = 5] = "MapStateUpdated", e[e.GameSettingsUpdated = 6] = "GameSettingsUpdated", e[e.AmountOfCardsToDiscardUpdated = 7] = "AmountOfCardsToDiscardUpdated", e[e.AmountOfCardsToSelect = 8] = "AmountOfCardsToSelect", e[e.SelectCardsToDiscard = 9] = "SelectCardsToDiscard", e[e.SelectCardsFromBankUsingDevelopmentCard = 10] = "SelectCardsFromBankUsingDevelopmentCard", e[e.SelectCardsForPendingDistribution = 11] = "SelectCardsForPendingDistribution", e[e.SelectCardToGiveToAnotherPlayer = 12] = "SelectCardToGiveToAnotherPlayer", e[e.ConfirmUseDevelopmentCard = 13] = "ConfirmUseDevelopmentCard", e[e.PlayersTakingAction = 14] = "PlayersTakingAction", e[e.PlayersDoneTakingAction = 15] = "PlayersDoneTakingAction", e[e.StealDevelopmentCardFromPlayer = 16] = "StealDevelopmentCardFromPlayer", e[e.StealResourceCardFromPlayer = 17] = "StealResourceCardFromPlayer", e[e.SelectPlayer = 18] = "SelectPlayer", e[e.SelectPlayerForDevelopmentCard = 19] = "SelectPlayerForDevelopmentCard", e[e.SelectPlayerAndCard = 20] = "SelectPlayerAndCard", e[e.SelectDice = 21] = "SelectDice", e[e.GivePlayerCardFromTile = 22] = "GivePlayerCardFromTile", e[e.ExchangeCards = 23] = "ExchangeCards", e[e.CloseTradeUI = 24] = "CloseTradeUI", e[e.ShowTradeUI = 25] = "ShowTradeUI", e[e.EmbargoStatusUpdated = 26] = "EmbargoStatusUpdated", e[e.RemoveTradeOffer = 27] = "RemoveTradeOffer", e[e.TradeOfferRejected = 28] = "TradeOfferRejected", e[e.TradeOfferAccepted = 29] = "TradeOfferAccepted", e[e.NewTradeOfferReceived = 30] = "NewTradeOfferReceived", e[e.BoldTextInTradeWindow = 31] = "BoldTextInTradeWindow", e[e.CloseDiscardCardUI = 32] = "CloseDiscardCardUI", e[e.ShowDiscardCardUI = 33] = "ShowDiscardCardUI", e[e.ClosePopupUI = 34] = "ClosePopupUI", e[e.CancelSpecialBuildPhase = 35] = "CancelSpecialBuildPhase", e[e.SetRoadEdgeHighlight = 36] = "SetRoadEdgeHighlight", e[e.SetShipEdgeHighlight = 37] = "SetShipEdgeHighlight", e[e.SetCornerHighlight = 38] = "SetCornerHighlight", e[e.SetTileHighlight = 39] = "SetTileHighlight", e[e.HighlightDiceNumbersForInventor = 40] = "HighlightDiceNumbersForInventor", e[e.VoteReceived = 41] = "VoteReceived", e[e.PlayerReceivedAchievement = 42] = "PlayerReceivedAchievement", e[e.CavasResized = 43] = "CavasResized", e[e.ClickedMultiButton = 44] = "ClickedMultiButton", e[e.SpectatorCountUpdated = 45] = "SpectatorCountUpdated", e[e.KnightStateReceived = 46] = "KnightStateReceived", e[e.KnightStateUpdated = 47] = "KnightStateUpdated", e[e.BarbarianInvasionStateUpdated = 48] = "BarbarianInvasionStateUpdated", e[e.CityImprovementStateReceived = 49] = "CityImprovementStateReceived", e[e.CityImprovementStateUpdated = 50] = "CityImprovementStateUpdated", e[e.ForceShowCityImprovementButtons = 51] = "ForceShowCityImprovementButtons", e[e.UnlockedCityImprovments = 52] = "UnlockedCityImprovments", e[e.PlayerReceivedMetropolis = 53] = "PlayerReceivedMetropolis", e[e.MerchantStateReceived = 54] = "MerchantStateReceived", e[e.MerchantStateUpdated = 55] = "MerchantStateUpdated", e[e.GameEnd = 56] = "GameEnd", e[e.GameEndRematchTextUpdated = 57] = "GameEndRematchTextUpdated", e[e.GameEndShowMap = 58] = "GameEndShowMap", e[e.GameEndHideMap = 59] = "GameEndHideMap", e[e.ActivateRedDice = 60] = "ActivateRedDice", e[e.HoveredOverPlayerInformationArrow = 61] = "HoveredOverPlayerInformationArrow", e[e.PointerOutPlayerInformationView = 62] = "PointerOutPlayerInformationView", e[e.RobberMoved = 63] = "RobberMoved", e[e.MerchantBankTradeRatioActive = 64] = "MerchantBankTradeRatioActive"
            }(l = e.UIGameEventEnums || (e.UIGameEventEnums = {}));
        class d {
            static getAmountToGiveForCornerPiece(e) {
                switch (e) {
                    case i.TileEnums.CornerBuildingTypes.Empty:
                    case i.TileEnums.CornerBuildingTypes.KnightActiveLevel1:
                    case i.TileEnums.CornerBuildingTypes.KnightActiveLevel2:
                    case i.TileEnums.CornerBuildingTypes.KnightActiveLevel3:
                    case i.TileEnums.CornerBuildingTypes.KnightInactiveLevel1:
                    case i.TileEnums.CornerBuildingTypes.KnightInactiveLevel2:
                    case i.TileEnums.CornerBuildingTypes.KnightInactiveLevel3:
                        return 0;
                    case i.TileEnums.CornerBuildingTypes.DestroyedCity:
                    case i.TileEnums.CornerBuildingTypes.Settlement:
                        return 1;
                    case i.TileEnums.CornerBuildingTypes.City:
                        return 2
                }
            }
            static getCardEnumsForPiece(e) {
                switch (e) {
                    case n.City:
                        return [t.Grain, t.Grain, t.Ore, t.Ore, t.Ore];
                    case n.Settlement:
                        return [t.Lumber, t.Brick, t.Wool, t.Grain];
                    case n.Road:
                        return [t.Lumber, t.Brick];
                    case n.DevelopmentCard:
                        return [t.Wool, t.Grain, t.Ore];
                    case n.Ship:
                        return [t.Lumber, t.Wool];
                    case n.CityWall:
                        return [t.Brick, t.Brick];
                    case n.Knight:
                        return [t.Wool, t.Ore]
                }
            }
            static isCornerBuildingKnight(e) {
                switch (e) {
                    case i.TileEnums.CornerBuildingTypes.KnightActiveLevel1:
                    case i.TileEnums.CornerBuildingTypes.KnightActiveLevel2:
                    case i.TileEnums.CornerBuildingTypes.KnightActiveLevel3:
                    case i.TileEnums.CornerBuildingTypes.KnightInactiveLevel1:
                    case i.TileEnums.CornerBuildingTypes.KnightInactiveLevel2:
                    case i.TileEnums.CornerBuildingTypes.KnightInactiveLevel3:
                        return !0;
                    default:
                        return !1
                }
            }
        }
        d.MIN_BOT_TRADE_REJECT_DELAY_MS = 100, d.MAX_BOT_TRADE_REJECT_DELAY_MS = 200, d.MIN_BOT_ONLY_GAME_TRADE_DELAY_MS = 500, d.MAX_BOT_ONLY_GAME_TRADE_DELAY_MS = 1e3, d.MIN_PLAYER_GAME_TRADE_DELAY_MS = 4e3, d.MAX_PLAYER_GAME_TRADE_DELAY_MS = 6e3, d.MIN_BOT_ACTION_DELAY_MS = 500, d.MAX_BOT_ACTION_DELAY_MS = 1e3, d.BOTS_GAME_WAIT_TIME_MULTIPICATION = 4, d.BOTS_MAX_TRADE_AMOUNT_IN_BATCH = 3, d.FRIENDLY_ROBBER_ACTIVE_VP = 3, e.GameConstants = d
    }(n = t.GameStateEnums || (t.GameStateEnums = {})),
    function(e) {
        e[e.Unknown = 0] = "Unknown", e[e.Tutorial = 1] = "Tutorial", e[e.BotGame = 2] = "BotGame", e[e.CreatedRoomGame = 3] = "CreatedRoomGame", e[e.RematchGame = 4] = "RematchGame", e[e.MatchmakingGame = 5] = "MatchmakingGame"
    }(t.GameTypeEnum || (t.GameTypeEnum = {})),
    function(e) {
        e[e.Classic4P = 0] = "Classic4P", e[e.TutorialClassic4P = 1] = "TutorialClassic4P", e[e.Classic56P = 2] = "Classic56P", e[e.Classic78P = 3] = "Classic78P", e[e.Seafarers4P = 4] = "Seafarers4P", e[e.Seafarers56P = 5] = "Seafarers56P", e[e.CitiesAndKnights4P = 6] = "CitiesAndKnights4P", e[e.CitiesAndKnights56P = 7] = "CitiesAndKnights56P", e[e.CitiesAndKnightsSeafarers4P = 8] = "CitiesAndKnightsSeafarers4P", e[e.CitiesAndKnightsSeafarers56P = 9] = "CitiesAndKnightsSeafarers56P"
    }(r = t.ModeSettingEnum || (t.ModeSettingEnum = {})), t.isModeCitiesAndKnights = function(e) {
            return e == r.CitiesAndKnights4P || (e == r.CitiesAndKnights56P || (e == r.CitiesAndKnightsSeafarers4P || e == r.CitiesAndKnightsSeafarers56P))
        },
        function(e) {
            e[e.Classic = 0] = "Classic", e[e.Seafarers = 1] = "Seafarers", e[e.CitiesAndKnights = 2] = "CitiesAndKnights", e[e.CitiesAndKnightsSeafarers = 3] = "CitiesAndKnightsSeafarers", e[e.Inactive = 4] = "Inactive"
        }(t.TemporaryModeSettingEnum || (t.TemporaryModeSettingEnum = {})),
        function(e) {
            e[e.Players4 = 0] = "Players4", e[e.Players56 = 1] = "Players56", e[e.Players78 = 2] = "Players78"
        }(s = t.ExtensionSettingEnum || (t.ExtensionSettingEnum = {})),
        function(e) {
            e[e.None = 0] = "None", e[e.SS1HeadingForNewShores = 1] = "SS1HeadingForNewShores", e[e.SS2TheFourIslands = 2] = "SS2TheFourIslands", e[e.SS3TheFogIslands = 3] = "SS3TheFogIslands", e[e.SS4ThroughTheDesert = 4] = "SS4ThroughTheDesert"
        }(c = t.ScenarioSettingEnum || (t.ScenarioSettingEnum = {})),
        function(e) {
            e[e.Tutorial = 0] = "Tutorial", e[e.SpecialBuildPhase = 1] = "SpecialBuildPhase", e[e.IslandExploration = 2] = "IslandExploration", e[e.IslandExplorationWithDesertAsForeignLand = 3] = "IslandExplorationWithDesertAsForeignLand", e[e.Robber = 4] = "Robber", e[e.Pirate = 5] = "Pirate", e[e.Ships = 6] = "Ships", e[e.GoldTiles = 7] = "GoldTiles", e[e.FogTiles = 8] = "FogTiles", e[e.Knights = 9] = "Knights", e[e.Barbarians = 10] = "Barbarians", e[e.CityWall = 11] = "CityWall", e[e.CityImprovements = 12] = "CityImprovements", e[e.DevelopmentCards = 13] = "DevelopmentCards", e[e.ProgressCards = 14] = "ProgressCards", e[e.EventDice = 15] = "EventDice", e[e.Merchant = 16] = "Merchant", e[e.RedDice = 17] = "RedDice", e[e.InventorProgressCard = 18] = "InventorProgressCard", e[e.LongestRoad = 19] = "LongestRoad", e[e.LargestArmy = 20] = "LargestArmy", e[e.PlayerInformationArrowView = 21] = "PlayerInformationArrowView"
        }(t.OptionalGameMechanicEnum || (t.OptionalGameMechanicEnum = {})),
        function(e) {
            e[e.Classic4P = 0] = "Classic4P", e[e.TutorialClassic4P = 1] = "TutorialClassic4P", e[e.Classic4PRandom = 2] = "Classic4PRandom", e[e.Classic56P = 3] = "Classic56P", e[e.Classic78P = 4] = "Classic78P", e[e.SS1HeadingForNewShores3P = 5] = "SS1HeadingForNewShores3P", e[e.SS1HeadingForNewShores4P = 6] = "SS1HeadingForNewShores4P", e[e.SS1HeadingForNewShores56P = 7] = "SS1HeadingForNewShores56P", e[e.TutorialSS1HeadingForNewShores4P = 8] = "TutorialSS1HeadingForNewShores4P", e[e.SS2FourIslands3P = 9] = "SS2FourIslands3P", e[e.SS2FourIslands4P = 10] = "SS2FourIslands4P", e[e.SS2SixIslands56P = 11] = "SS2SixIslands56P", e[e.TutorialSS2FourIslands4P = 12] = "TutorialSS2FourIslands4P", e[e.SS3FogIslands3P = 13] = "SS3FogIslands3P", e[e.SS3FogIslands4P = 14] = "SS3FogIslands4P", e[e.SS3FogIslands56P = 15] = "SS3FogIslands56P", e[e.TutorialSS3FogIsland4P = 16] = "TutorialSS3FogIsland4P", e[e.SS4ThroughTheDesert3P = 17] = "SS4ThroughTheDesert3P", e[e.SS4ThroughTheDesert4P = 18] = "SS4ThroughTheDesert4P", e[e.SS4ThroughTheDesert56P = 19] = "SS4ThroughTheDesert56P", e[e.TutorialSS4ThroughTheDesert4P = 20] = "TutorialSS4ThroughTheDesert4P", e[e.KingOfTheHill = 21] = "KingOfTheHill", e[e.Earth = 22] = "Earth", e[e.EarthSeafarers = 23] = "EarthSeafarers", e[e.USA = 24] = "USA", e[e.UK = 25] = "UK", e[e.UKSeafarers = 26] = "UKSeafarers", e[e.Diamond = 27] = "Diamond", e[e.Gear = 28] = "Gear", e[e.Lakes = 29] = "Lakes", e[e.Pond = 30] = "Pond", e[e.Twirl = 31] = "Twirl", e[e.ShuffleBoard = 32] = "ShuffleBoard", e[e.BlackForest = 33] = "BlackForest", e[e.Volcano = 34] = "Volcano", e[e.Circle = 35] = "Circle", e[e.Kite = 36] = "Kite", e[e.Romania = 37] = "Romania", e[e.MiniBase = 38] = "MiniBase", e[e.Monopoly = 39] = "Monopoly", e[e.MountainOfRiches = 40] = "MountainOfRiches", e[e.Doggo = 41] = "Doggo", e[e.Duel = 42] = "Duel", e[e.TradeIslands = 43] = "TradeIslands", e[e.TradeIslandsSeafarers = 44] = "TradeIslandsSeafarers", e[e.Vietnam = 45] = "Vietnam", e[e.TurningTidesSeafarers = 46] = "TurningTidesSeafarers", e[e.TurningTidesClassic = 47] = "TurningTidesClassic", e[e.TwoIsles = 48] = "TwoIsles", e[e.JellyFish = 49] = "JellyFish", e[e.GoldRush = 50] = "GoldRush", e[e.Istanbul = 51] = "Istanbul", e[e.IstanbulSeafarers = 52] = "IstanbulSeafarers", e[e.Europe = 53] = "Europe", e[e.EuropeSeafarers = 54] = "EuropeSeafarers"
        }(l = t.MapSettingEnum || (t.MapSettingEnum = {})),
        function(e) {
            e[e.Science = 4] = "Science", e[e.Trade = 5] = "Trade", e[e.Politics = 6] = "Politics"
        }(t.EventDiceEnum || (t.EventDiceEnum = {})),
        function(e) {
            e[e.Random = 0] = "Random", e[e.Balanced = 1] = "Balanced"
        }(h = t.DiceSettingEnum || (t.DiceSettingEnum = {})),
        function(e) {
            let t, a, i, o, n;
            ! function(e) {
                e[e.Connecting = 0] = "Connecting", e[e.Lobby = 1] = "Lobby", e[e.Room = 2] = "Room", e[e.Game = 3] = "Game", e[e.DisconnectedFromGame = 4] = "DisconnectedFromGame", e[e.DisconnectedFromRoom = 5] = "DisconnectedFromRoom", e[e.DisconnectedFromSpectating = 6] = "DisconnectedFromSpectating", e[e.SpectateGame = 7] = "SpectateGame", e[e.CompletedGame = 8] = "CompletedGame", e[e.Matchmaking = 9] = "Matchmaking"
            }(t = e.Location || (e.Location = {})),
            function(e) {
                e[e.VeryFast = 0] = "VeryFast", e[e.Fast = 1] = "Fast", e[e.Normal = 2] = "Normal", e[e.Slow = 3] = "Slow", e[e.VerySlow = 4] = "VerySlow"
            }(a = e.GameSpeedSettings || (e.GameSpeedSettings = {})),
            function(e) {
                e[e.Fast = .25] = "Fast", e[e.Normal = 2] = "Normal", e[e.Slow = 4] = "Slow"
            }(i = e.BotSpeedSettings || (e.BotSpeedSettings = {})),
            function(e) {
                e[e.Standard = 0] = "Standard", e[e.FreeMap = 1] = "FreeMap", e[e.CustomLink = 2] = "CustomLink"
            }(o = e.RoomType || (e.RoomType = {})),
            function(e) {
                e[e.CanJoin = 0] = "CanJoin", e[e.CannotJoinKicked = 1] = "CannotJoinKicked", e[e.CannotJoinFull = 2] = "CannotJoinFull"
            }(n = e.RoomJoinStatus || (e.RoomJoinStatus = {}));
            class d {}
            d.MIN_USERNAME_LENGTH = 3, d.MAX_USERNAME_LENGTH = 12, d.MAX_GUEST_USERNAME_LENGTH = 6, e.PlayerConstants = d;
            class u {}
            u.MIN_VP_TO_WIN = 3, u.DEFAULT_VP_TO_WIN = 10, u.MAX_VP_TO_WIN = 20, u.MIN_CARD_DISCARD_LIMIT = 2, u.DEFAULT_CARD_DISCARD_LIMIT = 7, u.MAX_CARD_DISCARD_LIMIT = 99, u.MIN_PLAYER_COUNT = 1, u.DEFAULT_PLAYER_COUNT = 4, u.MAX_PLAYER_COUNT = 8, u.DEFAULT_GAME_SPEED_SETTING = a.Normal, u.DEFAULT_BOT_SPEED_SETTING = i.Normal, u.DEFAULT_HIDE_BANK_CARDS = !1, u.DEFAULT_FRIENDLY_ROBBER = !1, u.DEFAULT_MODE_SETTING = r.Classic4P, u.DEFAULT_EXTENSION_SETTING = s.Players4, u.DEFAULT_SCENARIO_SETTING = c.None, u.DEFAULT_MAP_SETTING = l.Classic4P, u.DEFAULT_DICE_SETTING = h.Random, e.RoomSettingConstants = u
        }(t.PlayerEnums || (t.PlayerEnums = {}))
}, , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.AnimatedSprite = t.Text = t.BitmapText = t.Sprite = t.Graphics = t.Container = t.ApplicationDebug = t.ApplicationOptions = t.Application = t.interaction = t.Point = t.DisplayObject = t.Ticker = t.Circle = t.utils = t.Matrix = t.Texture = t.Loader = void 0;
    var i = a(8);
    Object.defineProperty(t, "Loader", {
        enumerable: !0,
        get: function() {
            return i.Loader
        }
    }), Object.defineProperty(t, "Texture", {
        enumerable: !0,
        get: function() {
            return i.Texture
        }
    }), Object.defineProperty(t, "Matrix", {
        enumerable: !0,
        get: function() {
            return i.Matrix
        }
    }), Object.defineProperty(t, "utils", {
        enumerable: !0,
        get: function() {
            return i.utils
        }
    }), Object.defineProperty(t, "Circle", {
        enumerable: !0,
        get: function() {
            return i.Circle
        }
    }), Object.defineProperty(t, "Ticker", {
        enumerable: !0,
        get: function() {
            return i.Ticker
        }
    }), Object.defineProperty(t, "DisplayObject", {
        enumerable: !0,
        get: function() {
            return i.DisplayObject
        }
    }), Object.defineProperty(t, "Point", {
        enumerable: !0,
        get: function() {
            return i.Point
        }
    }), Object.defineProperty(t, "interaction", {
        enumerable: !0,
        get: function() {
            return i.interaction
        }
    });
    var o = a(53);
    Object.defineProperty(t, "Application", {
        enumerable: !0,
        get: function() {
            return o.Application
        }
    }), Object.defineProperty(t, "ApplicationOptions", {
        enumerable: !0,
        get: function() {
            return o.ApplicationOptions
        }
    });
    var n = a(67);
    Object.defineProperty(t, "ApplicationDebug", {
        enumerable: !0,
        get: function() {
            return n.ApplicationDebug
        }
    });
    var r = a(68);
    Object.defineProperty(t, "Container", {
        enumerable: !0,
        get: function() {
            return r.Container
        }
    });
    var s = a(69);
    Object.defineProperty(t, "Graphics", {
        enumerable: !0,
        get: function() {
            return s.Graphics
        }
    });
    var c = a(71);
    Object.defineProperty(t, "Sprite", {
        enumerable: !0,
        get: function() {
            return c.Sprite
        }
    });
    var l = a(72);
    Object.defineProperty(t, "BitmapText", {
        enumerable: !0,
        get: function() {
            return l.BitmapText
        }
    });
    var h = a(73);
    Object.defineProperty(t, "Text", {
        enumerable: !0,
        get: function() {
            return h.Text
        }
    });
    var d = a(74);
    Object.defineProperty(t, "AnimatedSprite", {
        enumerable: !0,
        get: function() {
            return d.AnimatedSprite
        }
    })
}, function(e, t, a) {
    "use strict";
    var i;

    function o(e, t) {
        return Math.floor(Math.random() * (t - e + 1)) + e
    }

    function n(e) {
        return e[Math.floor(Math.random() * e.length)]
    }

    function r(e) {
        if (null == e || "object" != typeof e) return e;
        const t = e.constructor();
        for (const a in e) {
            Object.prototype.hasOwnProperty.call(e, a) && (t[a] = e[a])
        }
        return t
    }

    function s(e, t) {
        const a = e.indexOf(t);
        return a > -1 && (e.splice(a, 1), !0)
    }

    function c(e) {
        const t = e / i.MILLISECONDS,
            a = Math.floor(t / (i.MINUTES_IN_HOUR * i.SECONDS_IN_MINUTE)),
            o = Math.floor(t % i.SECONDS_IN_HOUR / i.SECONDS_IN_MINUTE),
            n = Math.floor(t % i.SECONDS_IN_MINUTE);
        let r = "";
        return r = a < 10 ? ("0" + a).slice(-2) : a.toString(), r + ":" + ("0" + o).slice(-2) + ":" + ("0" + n).slice(-2)
    }
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.valueIsValidEnum = t.isObjectEqual = t.isStringLengthBetween = t.sleep = t.elementInArray = t.replaceStringAt = t.getIpAddress = t.doesEnumHaveThisNumberAsValue = t.enumElementCount = t.asyncIterateEnum = t.iterateEnum = t.loopEnums = t.getWeekNumber = t.yesterdayDate = t.isThisLastYear = t.isThisLastMonth = t.millisecondsPassedSince = t.minutesPassedSince = t.getUTCTimeString = t.timePadding = t.timeToStringMMSS = t.timeToString = t.getHoursAgoInTimestampFormat = t.countOccurenceOfValueInArray = t.removeDuplicatesFromArray = t.removeElementsFromArray = t.removeElementFromArray = t.clone = t.randomNegativePositive = t.randomAngle = t.randomElementsThrowFromArray = t.randomElementsKeepInArray = t.randomElementFromArray = t.arrayStandardError = t.arrayStandardDeviation = t.arrayMean = t.shuffle = t.arraysDeepEqual = t.arraysEqual = t.randomPercentForTrue = t.randomBool = t.randomNumberExcept = t.isFirstLetterVowel = t.randomStringId = t.randomUniqueIndicesFromLength = t.randomNumberBetweenFloat = t.randomNumberBetween = t.Utils = void 0,
        function(e) {
            e.MILLISECONDS = 1e3, e.SECONDS_IN_MINUTE = 60, e.SECONDS_IN_HOUR = 3600, e.MINUTES_IN_HOUR = 60, e.HOURS_IN_DAY = 24, e.MILLISECONDS_IN_DAY = e.HOURS_IN_DAY * e.SECONDS_IN_HOUR * e.MILLISECONDS, e.MILLISECONDS_IN_HOUR = e.SECONDS_IN_HOUR * e.MILLISECONDS, e.DAYS_IN_MONTH = 30, e.MONTHS_IN_YEAR = 12, e.isDatePassed = function(e) {
                const t = new Date(e);
                return new Date > t
            }
        }(i = t.Utils || (t.Utils = {})), t.randomNumberBetween = o, t.randomNumberBetweenFloat = function(e, t) {
            return Math.random() * (t - e) + e
        }, t.randomUniqueIndicesFromLength = function(e, t) {
            const a = new Set;
            if (0 === e) return [];
            t > e && (t = e);
            for (let i = 0; i < t; i += 1) {
                const t = o(0, e - 1);
                a.has(t) ? i -= 1 : a.add(t)
            }
            return Array.from(a)
        }, t.randomStringId = function(e) {
            let t = "";
            const a = (i = ["1", "I", "l", "O", "0"], ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"].filter(e => !i.includes(e)));
            var i;
            for (let i = 0; i < e; i += 1) t += a[Math.floor(Math.random() * a.length)];
            return t
        }, t.isFirstLetterVowel = function(e) {
            const t = e.charAt(0).toLowerCase();
            return "a" == t || ("e" == t || ("i" == t || ("o" == t || "u" == t)))
        }, t.randomNumberExcept = function e(t, a, i) {
            const n = o(t, a);
            return n != i ? n : e(t, a, i)
        }, t.randomBool = function() {
            return Math.random() >= .5
        }, t.randomPercentForTrue = function(e) {
            return o(1, 100) <= e
        }, t.arraysEqual = function(e, t) {
            if (e === t) return !0;
            if (null == e || null == t) return !1;
            if (e.length != t.length) return !1;
            for (let a = 0; a < e.length; a += 1)
                if (e[a] !== t[a]) return !1;
            return !0
        }, t.arraysDeepEqual = function(e, t) {
            return JSON.stringify(e) === JSON.stringify(t)
        }, t.shuffle = function(e) {
            const t = r(e);
            let a = t.length;
            for (; a > 0;) {
                const e = Math.floor(Math.random() * a);
                a -= 1;
                const i = t[a];
                t[a] = t[e], t[e] = i
            }
            return t
        }, t.arrayMean = function(e, t) {
            return e.length < 1 ? 0 : e.reduce((e, t) => e + t) / t
        }, t.arrayStandardDeviation = function(e, t, a) {
            return e.length < 2 ? 1 : Math.sqrt(e.map(e => Math.pow(e - t, 2)).reduce((e, t) => e + t) / (a - 1))
        }, t.arrayStandardError = function(e, t) {
            return e / Math.sqrt(t)
        }, t.randomElementFromArray = n, t.randomElementsKeepInArray = function e(t, a) {
            if (a == t.length) return t;
            const i = r(t);
            return i.splice(i.indexOf(n(i)), 1), e(i, a)
        }, t.randomElementsThrowFromArray = function e(t, a) {
            if (0 == a) return t;
            const i = r(t);
            return i.splice(i.indexOf(n(i)), 1), e(i, a - 1)
        }, t.randomAngle = function() {
            return 2 * Math.PI * Math.random()
        }, t.randomNegativePositive = function(e) {
            return e * Math.random() * (Math.random() < .5 ? -1 : 1)
        }, t.clone = r, t.removeElementFromArray = s, t.removeElementsFromArray = function(e, t) {
            for (const a of t) s(e, a)
        }, t.removeDuplicatesFromArray = function(e) {
            return e.filter((e, t, a) => t == a.indexOf(e))
        }, t.countOccurenceOfValueInArray = function(e, t) {
            return e.reduce((e, a) => a === t ? e + 1 : e, 0)
        }, t.getHoursAgoInTimestampFormat = function(e) {
            const t = e * i.MINUTES_IN_HOUR * i.SECONDS_IN_MINUTE * i.MILLISECONDS;
            return Math.floor((Date.now() - t) / i.MILLISECONDS)
        }, t.timeToString = c, t.timeToStringMMSS = function(e) {
            const t = c(e);
            return t.slice(3, t.length)
        }, t.timePadding = function(e) {
            return e < 10 ? "0" + e.toString() : e.toString()
        }, t.getUTCTimeString = function(e) {
            return new Date(e).toUTCString()
        }, t.minutesPassedSince = function(e) {
            const t = (Date.now() - e) / i.MILLISECONDS;
            return Math.round(t / i.SECONDS_IN_MINUTE)
        }, t.millisecondsPassedSince = function(e) {
            return Date.now() - e
        }, t.isThisLastMonth = function(e, t = Date.now()) {
            return e > t - i.MILLISECONDS * i.SECONDS_IN_MINUTE * i.MINUTES_IN_HOUR * i.HOURS_IN_DAY * i.DAYS_IN_MONTH
        }, t.isThisLastYear = function(e, t = Date.now()) {
            return e > t - i.MILLISECONDS * i.SECONDS_IN_MINUTE * i.MINUTES_IN_HOUR * i.HOURS_IN_DAY * i.DAYS_IN_MONTH * i.MONTHS_IN_YEAR
        }, t.yesterdayDate = function() {
            return new Date((new Date).getTime() - i.MILLISECONDS_IN_DAY)
        }, t.getWeekNumber = function(e) {
            const t = new Date(e);
            t.setUTCDate(t.getUTCDate() + 4 - (t.getUTCDay() || 7));
            const a = new Date(Date.UTC(t.getUTCFullYear(), 0, 1));
            return [Math.ceil(((+t - +a) / 864e5 + 1) / 7), t.getUTCFullYear()]
        }, t.loopEnums = function(e, t) {
            for (const a in e) {
                const e = Number(a);
                isNaN(e) || t(a, e)
            }
        }, t.iterateEnum = function(e, t) {
            for (const a in e) isNaN(Number(a)) && t(e[a])
        }, t.asyncIterateEnum = async function(e, t) {
            for (const a in e) isNaN(Number(a)) && await t(e[a])
        }, t.enumElementCount = function(e) {
            let t = 0;
            for (const a in e) isNaN(Number(a)) && (t += 1);
            return t
        }, t.doesEnumHaveThisNumberAsValue = function(e, t) {
            return "number" == typeof t && null != e[t]
        }, t.getIpAddress = function(e) {
            return e.headers["x-forwarded-for"] || e.connection.remoteAddress || e.socket.remoteAddress || (null != e.connection.socket ? e.connection.socket.remoteAddress : "")
        }, t.replaceStringAt = function(e, t, a) {
            const i = e.split("");
            return i[t] = a, i.join("")
        }, t.elementInArray = function(e, t) {
            for (const a of e)
                if (a == t) return !0;
            return !1
        }, t.sleep = function(e) {
            return new Promise(t => setTimeout(t, e))
        }, t.isStringLengthBetween = function(e, t, a) {
            return a >= e.length && e.length >= t
        }, t.isObjectEqual = function(e, t) {
            const a = Object.getOwnPropertyNames(e),
                i = Object.getOwnPropertyNames(t);
            if (a.length != i.length) return !1;
            for (const i of a)
                if (e[i] !== t[i]) return !1;
            return !0
        }, t.valueIsValidEnum = function(e, t) {
            return "number" == typeof e && null != t[e]
        }
}, , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.constructImgTagSize = t.constructImgTag = t.constructImgCard = t.removeIdsFromHTMLCollection = t.createCanvasIn = t.createIframeIn = t.createButtonIn = t.createTextIn = t.populateSelectElementWithLoopEnums = t.updateSelectElement = t.createSelectIn = t.createOptionIn = t.createImgIn = t.createLinkIn = t.createParagraphIn = t.createH4In = t.createHeaderIn = t.createCheckboxIn = t.createInputIn = t.createFormIn = t.createSpanIn = t.createDivIn = t.createTDIn = t.createTRIn = t.createTableIn = t.createScriptIn = void 0;
    const i = a(16),
        o = a(7);

    function n(e, t, a, i) {
        t.appendChild(e), e.className = a, e.id = i
    }

    function r(e, t, a = "") {
        const i = document.createElement("INPUT");
        return n(i, e, t, a), i
    }
    t.createScriptIn = function(e, t) {
        const a = document.createElement("script");
        return n(a, e, "", ""), a.src = t, a
    }, t.createTableIn = function(e, t = "") {
        const a = document.createElement("TABLE");
        return n(a, e, "", t), a
    }, t.createTRIn = function(e, t) {
        const a = document.createElement("TR");
        return n(a, e, "", t), a
    }, t.createTDIn = function(e, t = "") {
        const a = document.createElement("TD");
        return n(a, e, t, ""), a
    }, t.createDivIn = function(e, t, a = "") {
        const i = document.createElement("DIV");
        return n(i, e, t, a), i
    }, t.createSpanIn = function(e, t, a) {
        const i = document.createElement("SPAN");
        return n(i, e, t, ""), i.innerHTML = a, i
    }, t.createFormIn = function(e, t, a = "") {
        const i = document.createElement("FORM");
        return n(i, e, t, a), i
    }, t.createInputIn = r, t.createCheckboxIn = function(e, t, a = "", i) {
        const o = r(e, t, a);
        return o.type = "checkbox", o.onchange = () => {
            i(o.checked)
        }, o
    }, t.createHeaderIn = function(e, t, a, i = "", o = "H3") {
        const r = document.createElement(o);
        return n(r, e, a, i), r.innerHTML = t, r
    }, t.createH4In = function(e, t, a, i = "") {
        const o = document.createElement("H4");
        return n(o, e, a, i), o.innerHTML = t, o
    }, t.createParagraphIn = function(e, t, a, i = "") {
        const o = document.createElement("P");
        return n(o, e, a, i), o.innerHTML = t, o
    }, t.createLinkIn = function(e, t, a, i, o = "") {
        const r = document.createElement("A");
        return n(r, e, i, o), r.href = t, r.innerHTML = a, r
    }, t.createImgIn = function(e, t, a, i, o) {
        const r = document.createElement("IMG");
        return n(r, e, t, a), r.src = i, r.alt = o, r
    }, t.createOptionIn = function(e, t, a) {
        const i = document.createElement("OPTION");
        return e.appendChild(i), i.value = t, i.innerText = a, i
    }, t.createSelectIn = function(e, t, a = "", i) {
        const o = document.createElement("SELECT");
        return n(o, e, t, a), o.onchange = () => {
            i(o.value)
        }, o
    }, t.updateSelectElement = function(e, t) {
        if (e.options[e.selectedIndex].value != t)
            for (const a of Array.from(e.options))
                if (a.value == t) {
                    a.selected = !0;
                    break
                }
    }, t.populateSelectElementWithLoopEnums = function(e, t, a, i) {
        (0, o.loopEnums)(t, (o, n) => {
            o != i && (e.options[e.options.length] = new Option(String(t[o]), String(t[o])), o == a && (e.options[e.options.length - 1].selected = !0))
        })
    }, t.createTextIn = function(e, t, a = "") {
        const i = document.createElement("P");
        return i.className = t, "" != a && (i.innerHTML = a), e.appendChild(i), i
    }, t.createButtonIn = function(e, t, a) {
        const i = document.createElement("BUTTON");
        i.className = t;
        const o = document.createTextNode(a);
        return i.appendChild(o), e.appendChild(i), i
    }, t.createIframeIn = function(e, t, a, i, o) {
        const r = document.createElement("IFRAME");
        return n(r, e, o, ""), r.width = t.toString(), r.height = a.toString(), r.src = i, r.frameBorder = "0", r
    }, t.createCanvasIn = function(e, t, a, i) {
        const o = document.createElement("CANVAS");
        return n(o, e, "", i), o.width = t, o.height = a, o
    }, t.removeIdsFromHTMLCollection = function(e, t) {
        for (const a of Array.from(e))
            if (a.id == t) return void a.remove()
    }, t.constructImgCard = function(e, t, a, o) {
        return "<img src="" + e + "" alt="" + t + ("" height="" + a + "" width="" + a / i.UIGameConstants.CARD_RATIO) + """ + (" class="" + o + """) + ">"
    }, t.constructImgTag = function(e, t, a, i = "") {
        return "<img src="" + e + "" alt="" + t + (null != a ? "" height="" + a + "" width="" + a : "") + """ + ("" == i ? "" : " class="" + i + """) + ">"
    }, t.constructImgTagSize = function(e, t, a, i, o = "") {
        return "<img src="" + e + "" alt="" + t + ("" height="" + a + "" width="" + i) + "" class="" + o + "">"
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Sound = void 0;
    const i = a(6),
        o = a(117),
        n = a(46),
        r = a(16);
    ! function(e) {
        let t;
        ! function(e) {
            e[e.DiceRoll = 0] = "DiceRoll", e[e.YourTurn = 1] = "YourTurn", e[e.FirstReminder = 2] = "FirstReminder", e[e.SecondReminder = 3] = "SecondReminder", e[e.Notification = 4] = "Notification", e[e.Offer = 5] = "Offer", e[e.Tick = 6] = "Tick", e[e.MessageNotification = 7] = "MessageNotification", e[e.Click = 8] = "Click", e[e.LeaveRoom = 9] = "LeaveRoom", e[e.Confetti = 10] = "Confetti", e[e.Victory = 11] = "Victory"
        }(t = e.SoundType || (e.SoundType = {}));
        const a = {
            DiceRoll: r.UIGameConstants.getSoundPath("dice_roll.mp3"),
            YourTurn: r.UIGameConstants.getSoundPath("bell.mp3"),
            FirstReminder: r.UIGameConstants.getSoundPath("bell.mp3"),
            Notification: r.UIGameConstants.getSoundPath("notification.mp3"),
            Offer: r.UIGameConstants.getSoundPath("offer.mp3"),
            Tick: r.UIGameConstants.getSoundPath("tick.mp3"),
            MessageNotification: r.UIGameConstants.getSoundPath("message_notification.mp3"),
            Click: r.UIGameConstants.getSoundPath("click.mp3"),
            LeaveRoom: r.UIGameConstants.getSoundPath("leave_room.mp3"),
            Confetti: r.UIGameConstants.getSoundPath("achievement.mp3"),
            Victory: r.UIGameConstants.getSoundPath("victory.mp3")
        };

        function s(e) {
            if (o.default.volumeAll = e, 0 == e) return o.default.muteAll(), void n.StorageWrapper.setSound(!0);
            o.default.unmuteAll(), n.StorageWrapper.setSound(!1)
        }

        function c() {
            const e = n.StorageWrapper.getSound();
            if (null != e) return e
        }
        e.loadSounds = function() {
            for (const e of Object.keys(a)) i.Loader.shared.add(e, a[e]);
            s(n.StorageWrapper.getVolume())
        }, e.setVolume = s, e.getStatus = c, e.init = function() {
            const e = c();
            null != e && (e ? o.default.unmuteAll() : o.default.muteAll())
        }, e.playSound = function(e) {
            null != o.default ? o.default.exists(t[e]) && o.default.play(t[e]) : console.log("sound is undefined")
        }, e.toggleSound = function() {
            const e = o.default.toggleMuteAll();
            return n.StorageWrapper.setVolume(e ? 0 : .3), n.StorageWrapper.setSound(e), e
        }
    }(t.Sound || (t.Sound = {}))
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SpriteView = void 0;
    const i = a(19),
        o = a(6);
    class n extends o.Sprite {
        constructor(e, t, a, i, o, n, r = 0) {
            super(), this.x = e + r, this.y = t + r, this.width = a - 2 * r, this.height = i - 2 * r, this.texture = n, o.addChild(this)
        }
        updateTexture(e) {
            this.texture != e && (this.texture = e)
        }
        centerXInParent() {
            null != this.parent && (this.x = this.parent.width / 2 - this.width / 2)
        }
        centerYInParent() {
            null != this.parent && (this.y = this.parent.height / 2 - this.height / 2)
        }
        rotate(e) {
            .5 !== this.anchor.x && (this.anchor.set(.5), this.x += this.width / 2, this.y += this.height / 2), this.rotation = e * Math.PI / 180
        }
        setClickAction(e) {
            this.buttonMode || (this.buttonMode = !0), this.interactive || (this.interactive = !0), this.on("click", t => {
                e(t)
            }), this.on("tap", t => {
                e(t)
            })
        }
        setHoverAction(e, t) {
            this.buttonMode || (this.buttonMode = !0), this.interactive || (this.interactive = !0), this.on("pointerover", t => {
                e(t)
            }), this.on("pointerout", e => {
                t(e)
            })
        }
        setTip(e, t) {
            i.uiGameManager.toolTipController.createTip(e, t, this)
        }
    }
    t.SpriteView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CA = void 0;
    const i = a(24),
        o = a(75),
        n = a(76),
        r = a(41),
        s = a(49);
    var c;

    function l(e) {
        c.sendEvent(e.type, e.category, e.label, e.amount)
    }! function(e) {
        let t, a, c;
        ! function(e) {
            e.Click = "click", e.General = "general", e.Funnel = "funnel"
        }(t = e.Type || (e.Type = {})),
        function(e) {
            e.Funnel = "Funnel", e.General = "General", e.LandingPage = "LandingPage", e.Lobby = "Lobby", e.Room = "Room", e.Game = "Game", e.EndGame = "EndGame", e.Profile = "Profile", e.Store = "Store", e.Community = "Community", e.Mobile = "Mobile", e.HeaderProfile = "HeaderProfile"
        }(a = e.Category || (e.Category = {})),
        function(e) {
            e.FunnelNewUserEnteredSite = "funnel_new_user_entered_site", e.FunnelStartedGame = "funnel_started_game", e.FunnelGameGetResources = "funnel_game_get_resources", e.FunnelGameClickDice = "funnel_game_click_dice", e.FunnelGameClickPassTurn = "funnel_game_click_pass_turn", e.FunnelGameConfirmBuild = "funnel_game_confirm_build", e.FunnelFinishedGameCount = "funnel_finished_game_", e.FunnelStartedMultiplayerRoom = "funnel_started_multiplayer_room", e.FunnelLoggedIn = "funnel_logged_in", e.FunnelPurchasedPack = "funnel_purchased_pack", e.GeneralBrokenInternetConnection = "general_broken_internet_connection", e.ClickedAdblockAd = "clicked_adblock_ad", e.GeneralPatchNotePopupSeconds = "general_patch_note_popup_seconds", e.GeneralShowingPatchNotePopup = "general_showing_patch_note_popup", e.GeneralUsesAdBlock = "general_uses_ad_block", e.GeneralDoesntUseAdBlock = "general_doesnt_use_ad_block", e.GeneralWebGLEnabled = "general_webgl_enabled", e.GeneralWebGLDisabled = "general_webgl_disabled", e.ClickedLobbyMainCTA = "clicked_lobby_maincta", e.ClickedCreateRoom = "clicked_create_room", e.ClickedVSBots = "clicked_vs_bots", e.ClickedFastRandomBotGame = "clicked_fast_random_bot_game", e.ClickedJoinRoom = "clicked_join_room", e.ClickedSpectate = "clicked_spectate", e.ClickedReconnectGame = "clicked_reconnect_game", e.ClickedPassTutorial = "clicked_pass_tutorial", e.ClickedStore = "clicked_store", e.ClickedLobbyPatchnotes = "clicked_patchnotes", e.ClickedLobbyGames = "clicked_lobby_games", e.ClickedLobbyRefresh = "clicked_lobby_refresh", e.ClickedLobbyRoomsTab = "clicked_lobby_roomstab", e.ClickedLobbySpectateTab = "clicked_lobby_spectatetab", e.ClickedEnterLobby = "clicked_enter_lobby", e.ClickedLandingPageMainCTA = "clicked_landingpage_maincta", e.ClickedLandingPageVSBots = "clicked_landingpage_vsbots", e.ClickedRoomReadyToStart = "clicked_room_ready_to_start", e.ClickedRoomStartGame = "clicked_room_start_game", e.ClickedRoomKickPlayer = "clicked_room_kick_player", e.ClickedRoomAddBot = "clicked_room_add_bot", e.ClickedRoomSettingChangePrivateGame = "clicked_room_setting_change_private_game", e.ClickedRoomSettingUpdateGameModeSetting = "clicked_room_setting_update_game_mode_setting", e.ClickedRoomSettingUpdateMapSetting = "clicked_room_setting_update_map_setting", e.ClickedRoomSettingUpdateDiceSetting = "clicked_room_setting_update_dice_setting", e.ClickedRoomSettingChangeVictoryPointsToWin = "clicked_room_setting_change_victory_points_to_win", e.ClickedRoomSettingChangeGameSpeed = "clicked_room_setting_change_game_speed", e.ClickedRoomSettingChangeBotSpeed = "clicked_room_setting_change_bot_speed", e.ClickedRoomSettingChangeCardDiscardLimit = "clicked_room_setting_change_card_discard_limit", e.ClickedRoomSettingChangeFriendlyRobber = "clicked_room_setting_change_friendly_robber", e.ClickedRoomSettingChangeHideBankCards = "clicked_room_setting_change_hide_bank_cards", e.ClickedRoomSettingChangeMaxPlayers = "clicked_room_setting_change_max_players", e.ClickedGameLobbyButton = "clicked_game_lobby_button", e.ClickedGameLobbyButtonAccept = "clicked_game_lobby_button_accept", e.ClickedGameSoundButton = "clicked_game_sound_button", e.ClickedGameSettingsButton = "clicked_game_settings_button", e.ClickedGameRulesButton = "clicked_game_rules_button", e.GameChatMessagesSent = "game_chat_messages_sent", e.ClickedEndGameOverview = "clicked_endgame_overview", e.ClickedEndGameDiceStats = "clicked_endgame_dice_stats", e.ClickedEndGameResourceCardStats = "clicked_endgame_resource_card_stats", e.ClickedEndGameDevelopmentCardStats = "clicked_endgame_development_card_stats", e.ClickedEndGameResourceStats = "clicked_endgame_resource_stats", e.ClickedEndGameActivityStats = "clicked_endgame_activity_stats", e.ClickedEndGameReturnToMap = "clicked_endgame_return_to_map", e.ClickedEndGameRematch = "clicked_endgame_rematch", e.ClickedEndGameLobby = "clicked_endgame_lobby", e.ClickedLoginToView = "clicked_profile_login_to_view", e.ClickedDisableAdBlock = "clicked_profile_disable_adblock", e.ClickedProfilePrivateAd = "clicked_profile_private_ad", e.ClickedProfileSearch = "clicked_profile_search", e.StoreClickedPurchaseCoin = "store_clicked_purchase_coin", e.StoreRequestedLogin = "store_requested_login", e.StoreClickedLoginTrue = "store_clicked_login_true", e.StoreClickedCategory = "store_clicked_category", e.StoreClickedPurchaseItem = "store_clicked_purchase_item", e.StoreClickedApprovePurchaseItem = "store_clicked_approve_purchase_item", e.StoreSuccessfullyPurchasedItem = "store_successfully_purchased_item", e.CommunityClickedSubmitVideo = "community_clicked_submit_video", e.CommunityClickedSubmitTournament = "community_clicked_submit_tournament", e.CommunityClickedTournaments = "community_clicked_tournaments", e.MobileClickedBurgeButton = "mobile_clicked_burger_button", e.HeaderProfileClickedLogin = "header_profile_clicked_login", e.HeaderProfileClickedDropdown = "header_profile_clicked_dropdown", e.HeaderProfileClickedViewStats = "header_profile_clicked_viewstats", e.HeaderProfileClickedEditName = "header_profile_clicked_editname", e.HeaderProfileClickedEditAvatar = "header_profile_clicked_editavatar", e.HeaderProfileClickedLogout = "header_profile_clicked_logout", e.HeaderProfileClickedChangeIcon = "header_profile_clicked_changeicon"
        }(c = e.Label || (e.Label = {}));
        const h = {};

        function d(e, t, a, o) {
            i.KatanConfigs.CLIENT_ANALYTICS_ACTIVE && ((0, n.isCrawler)() || (function(e, t, a, i) {
                gtag("event", e, {
                    event_category: t,
                    event_label: a,
                    value: i
                })
            }(e, t, a, o), function(e, t) {
                null == t ? indicativeActive && Indicative.buildEvent(e) : indicativeActive && Indicative.buildEvent(e, {
                    value: t
                })
            }(a, o)))
        }
        e.onEvent = function(e, t) {
            for (const e in h) {
                const a = h[e];
                a.resetOn === t && (a.amount > 0 && l(a), delete h[e])
            }
        }, e.init = function(t, a, i) {
            e.logRocket = new o.LogRocketController(t, a, i), e.logRocket.init()
        }, e.sendEvent = d, e.sendEventOnce = function(e, t, a, i) {
            void 0 === h[a] && (u(e, t, a, i), d(e, t, a))
        }, e.sendEventSummed = function(e, t, a, i) {
            var o;
            (null !== (o = h[a]) && void 0 !== o ? o : u(e, t, a, i)).amount += 1
        };
        const u = (e, t, a, i) => {
            const o = {
                type: e,
                category: t,
                label: a,
                resetOn: i,
                amount: 0
            };
            return h[a] = o, o
        };
        e.sendCustomEvent = function(e) {
            if (!i.KatanConfigs.CLIENT_ANALYTICS_ACTIVE) return;
            if ((0, n.isCrawler)()) return;
            const t = JSON.stringify(e);
            s.UIAjaxWrapper.postRequest(r.UIAPIEndpoints.apiAnalytics(), void 0, t, console.log, "application/json")
        }
    }(c = t.CA || (t.CA = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.LobbyImage = void 0,
        function(e) {
            e[e.Pencil = 0] = "Pencil", e[e.Bot = 1] = "Bot", e[e.CheckMark = 2] = "CheckMark", e[e.XMark = 3] = "XMark", e[e.Logo = 4] = "Logo", e[e.Lightning = 5] = "Lightning", e[e.Plus = 6] = "Plus", e[e.Mail = 7] = "Mail", e[e.Admin = 8] = "Admin", e[e.Moderator = 9] = "Moderator", e[e.User = 10] = "User", e[e.Guest = 11] = "Guest", e[e.QuestionMark = 12] = "QuestionMark", e[e.InfoIcon = 13] = "InfoIcon", e[e.KarmaWhite = 14] = "KarmaWhite", e[e.KarmaRed = 15] = "KarmaRed", e[e.KarmaOrange = 16] = "KarmaOrange", e[e.KarmaGreen = 17] = "KarmaGreen", e[e.DisableAdBlock = 18] = "DisableAdBlock", e[e.ColonistCoin = 19] = "ColonistCoin", e[e.RoadBronze = 20] = "RoadBronze", e[e.SettlementBronze = 21] = "SettlementBronze", e[e.CityBronze = 22] = "CityBronze", e[e.MapDiamondPreview = 23] = "MapDiamondPreview", e[e.MapLakesPreview = 24] = "MapLakesPreview", e[e.MapPondPreview = 25] = "MapPondPreview", e[e.MapGearPreview = 26] = "MapGearPreview", e[e.MapUSAPreview = 27] = "MapUSAPreview", e[e.MapTwirlPreview = 28] = "MapTwirlPreview", e[e.MapEarthPreview = 29] = "MapEarthPreview", e[e.MapUKPreview = 30] = "MapUKPreview", e[e.MapCyclopsPreview = 31] = "MapCyclopsPreview", e[e.MapClassic56PPreview = 32] = "MapClassic56PPreview", e[e.MapClassic78PPreview = 33] = "MapClassic78PPreview", e[e.MapPangaeaPreview = 34] = "MapPangaeaPreview", e[e.MapSpinnerPreview = 35] = "MapSpinnerPreview", e[e.MapRandomBasePreview = 36] = "MapRandomBasePreview", e[e.MapRomaniaPreview = 37] = "MapRomaniaPreview", e[e.MapHourglassPreview = 38] = "MapHourglassPreview", e[e.MapHourglassXLPreview = 39] = "MapHourglassXLPreview", e[e.MapSnowflakePreview = 40] = "MapSnowflakePreview", e[e.MapShuffleBoardPreview = 41] = "MapShuffleBoardPreview", e[e.MapMiniBasePreview = 42] = "MapMiniBasePreview", e[e.MapAustraliaPreview = 43] = "MapAustraliaPreview", e[e.MapDuelPreview = 44] = "MapDuelPreview", e[e.MapMonopolyPreview = 45] = "MapMonopolyPreview", e[e.MapKingOfTheHillPreview = 46] = "MapKingOfTheHillPreview", e[e.MapMountainOfRichesPreview = 47] = "MapMountainOfRichesPreview", e[e.MapDoggoPreview = 48] = "MapDoggoPreview", e[e.MapTradeIslandsPreview = 49] = "MapTradeIslandsPreview", e[e.MapTurningTidesPreview = 50] = "MapTurningTidesPreview", e[e.MapBlackForestPreview = 51] = "MapBlackForestPreview", e[e.MapVolcanoPreview = 52] = "MapVolcanoPreview", e[e.MapCirclePreview = 53] = "MapCirclePreview", e[e.MapKitePreview = 54] = "MapKitePreview", e[e.MapVietnamPreview = 55] = "MapVietnamPreview", e[e.MapTwoIslesPreview = 56] = "MapTwoIslesPreview", e[e.MapJellyFishPreview = 57] = "MapJellyFishPreview", e[e.MapGoldRushPreview = 58] = "MapGoldRushPreview", e[e.MapIstanbulPreview = 59] = "MapIstanbulPreview", e[e.MapEuropePreview = 60] = "MapEuropePreview", e[e.MapSS1HeadingForNewShores3PPreview = 61] = "MapSS1HeadingForNewShores3PPreview", e[e.MapSS1HeadingForNewShores4PPreview = 62] = "MapSS1HeadingForNewShores4PPreview", e[e.MapSS1HeadingForNewShores56PPreview = 63] = "MapSS1HeadingForNewShores56PPreview", e[e.MapSS2FourIslands3PPreview = 64] = "MapSS2FourIslands3PPreview", e[e.MapSS2FourIslands4PPreview = 65] = "MapSS2FourIslands4PPreview", e[e.MapSS2SixIslands56PPreview = 66] = "MapSS2SixIslands56PPreview", e[e.MapSS3FogIslands3PPreview = 67] = "MapSS3FogIslands3PPreview", e[e.MapSS3FogIslands4PPreview = 68] = "MapSS3FogIslands4PPreview", e[e.MapSS3FogIslands56PPreview = 69] = "MapSS3FogIslands56PPreview", e[e.MapSS4ThroughTheDesert3PPreview = 70] = "MapSS4ThroughTheDesert3PPreview", e[e.MapSS4ThroughTheDesert4PPreview = 71] = "MapSS4ThroughTheDesert4PPreview", e[e.MapSS4ThroughTheDesert56PPreview = 72] = "MapSS4ThroughTheDesert56PPreview", e[e.StoreItemExpansionClassic56P = 73] = "StoreItemExpansionClassic56P", e[e.StoreItemExpansionClassic78P = 74] = "StoreItemExpansionClassic78P", e[e.StoreItemSeafarers4P = 75] = "StoreItemSeafarers4P", e[e.StoreItemSeafarers56P = 76] = "StoreItemSeafarers56P", e[e.StoreItemCitiesAndKnights4P = 77] = "StoreItemCitiesAndKnights4P", e[e.StoreItemCitiesAndKnights56P = 78] = "StoreItemCitiesAndKnights56P", e[e.StoreItemCitiesAndKnightsSeafarers4P = 79] = "StoreItemCitiesAndKnightsSeafarers4P", e[e.StoreItemCitiesAndKnightsSeafarers56P = 80] = "StoreItemCitiesAndKnightsSeafarers56P", e[e.StoreColorBlack = 81] = "StoreColorBlack", e[e.StoreColorPurple = 82] = "StoreColorPurple", e[e.StoreColorMysticBlue = 83] = "StoreColorMysticBlue", e[e.StoreColorWhite = 84] = "StoreColorWhite", e[e.StoreColorBronze = 85] = "StoreColorBronze", e[e.StoreColorSilver = 86] = "StoreColorSilver", e[e.StoreColorGold = 87] = "StoreColorGold", e[e.IconElephant = 88] = "IconElephant", e[e.IconSombrero = 89] = "IconSombrero", e[e.IconFarmer = 90] = "IconFarmer", e[e.IconAvocado = 91] = "IconAvocado", e[e.IconCactus = 92] = "IconCactus", e[e.IconCrown = 93] = "IconCrown", e[e.IconSwords = 94] = "IconSwords", e[e.IconHelmet = 95] = "IconHelmet", e[e.IconSnorkel = 96] = "IconSnorkel", e[e.IconScarf = 97] = "IconScarf", e[e.IconTie = 98] = "IconTie", e[e.IconWorker = 99] = "IconWorker", e[e.IconSettlerHat = 100] = "IconSettlerHat", e[e.IconColonistHat = 101] = "IconColonistHat", e[e.IconFounderHat = 102] = "IconFounderHat", e[e.IconChristmasHat = 103] = "IconChristmasHat", e[e.IconPirateShip = 104] = "IconPirateShip", e[e.IconMedalGold = 105] = "IconMedalGold", e[e.IconMedalSilver = 106] = "IconMedalSilver", e[e.IconMedalBronze = 107] = "IconMedalBronze", e[e.IconRobberSanta = 108] = "IconRobberSanta", e[e.SettlerPack = 109] = "SettlerPack", e[e.ColonistPack = 110] = "ColonistPack", e[e.FounderPack = 111] = "FounderPack"
        }(t.LobbyImage || (t.LobbyImage = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameConstants = void 0;
    const i = a(24),
        o = a(20),
        n = a(7);
    class r {
        static getVersionString() {
            return "?" + i.KatanConfigs.versionString()
        }
        static getImageExtension(e) {
            return e + this.getVersionString()
        }
        static getImagePath(e) {
            return this.STATIC_IMAGE_PATH + this.getImageExtension(e)
        }
        static getSoundPath(e) {
            return this.STATIC_SOUND_PATH + e + this.getVersionString()
        }
        static getImagePathsForColor(e) {
            const t = o.PlayerColors[e].toLowerCase();
            return [this.getImagePath("road_" + t + ".svg"), this.getImagePath("settlement_" + t + ".svg"), this.getImagePath("city_" + t + ".svg")]
        }
    }
    t.UIGameConstants = r, r.AB_IMG_VERTICAL = abImgVertical, r.AB_URL = abUrl, r.GAME_TICK = 25, r.GAME_FPS = n.Utils.MILLISECONDS / r.GAME_TICK, r.CARD_RATIO = 400 / 285, r.STATIC_IMAGE_PATH = "../dist/images/", r.STATIC_SOUND_PATH = "../dist/sounds/", r.GAME_RENDERER_STATS = !1, r.GAME_WORLD_ZOOM_CLAMP_MULTIPLIER = 2.5
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SectionBgView = void 0;
    const i = a(6),
        o = a(155),
        n = a(27);
    class r extends n.SectionView {
        constructor(e, t, a, i, o, n = !1) {
            super(e, t, a, i, o, n), this.initialPosition = {
                x: this.x,
                y: this.y,
                w: this.width,
                h: this.height
            }
        }
        drawBg() {
            this.removeRoundedBg(), this.bg = new i.Graphics, this.bg.beginFill(0, .8), this.bg.drawRoundedRect(0, 0, this.width, this.height, 5), this.bg.endFill(), this.addChild(this.bg)
        }
        drawRoundedBg(e = i.Loader.shared.resources.bg_section.texture, t = !1) {
            if (this.sameRoundedBg(e)) return;
            this.removeRoundedBg();
            const a = t ? this.initialPosition.w : this.width,
                n = t ? this.initialPosition.h : this.height;
            this.roundedBg = new o.RoundedBgView(a, n, this, e)
        }
        sameRoundedBg(e) {
            return null != this.roundedBg && this.roundedBg.isSameBg(e)
        }
        removeRoundedBg() {
            null != this.roundedBg && null != this.roundedBg.parent && this.roundedBg.parent.removeChild(this.roundedBg)
        }
        makeRoundedBgInvisibleToTrackMouseActions() {
            this.drawRoundedBg(), this.roundedBg.alpha = 0
        }
    }
    t.SectionBgView = r
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.uiGameManager = t.loadTest = t.uiManager = void 0;
    const i = a(39),
        o = a(24),
        n = a(46),
        r = a(393),
        s = a(15),
        c = a(11),
        l = a(23),
        h = a(394),
        d = a(14),
        u = a(422),
        g = a(101),
        m = a(296),
        p = a(587),
        C = a(54),
        y = a(40),
        S = a(3),
        v = a(588),
        _ = a(35),
        P = a(41),
        T = a(589),
        b = a(292);
    v.UIDocument.directPage(), d.CA.init(_.UIUtilsEjsVariables.IS_PRODUCTION, n.StorageWrapper.getLogRocket(), n.StorageWrapper.setLogRocket);
    const f = new r.Version(n.StorageWrapper.getVersionNo, o.KatanConfigs.VERSION_NUMBER, n.StorageWrapper.setVersionNo);
    if (f.hasNoVersion() && (d.CA.sendEvent(d.CA.Type.Funnel, d.CA.Category.Funnel, d.CA.Label.FunnelNewUserEnteredSite), f.setVersion()), !f.isSameVersion()) {
        const e = new g.PatchNoteData;
        n.StorageWrapper.setStoreNotificationBadgeVisible(!0), d.CA.sendEvent(d.CA.Type.General, d.CA.Category.Lobby, d.CA.Label.GeneralShowingPatchNotePopup);
        new m.ViewPopupPatchNotes(e.getLast5(), e.getAnnouncements(), () => {});
        f.setVersion()
    }
    new T.UIVLIAdController;
    if (t.uiManager = new h.UIManager, _.UIUtilsEjsVariables.IS_PRODUCTION || b.UICornerPopupController.showPopup(s.LobbyImage.Admin, o.KatanConfigs.KATAN_SETTINGS.TEST_SERVER_MESSAGE), t.loadTest = new p.SocketLoadTest(_.UIUtilsEjsVariables.IS_PRODUCTION), i.SocketController.init(P.UIAPIEndpoints.socketURL(), ""), !n.StorageWrapper.getBanned()) {
        "1" == (0, C.getParameterByName)("fastbotgame") && (y.SocketLobbySend.clickedStartFastBotGame(), window.history.pushState({}, document.title, "/"));
        "1" == (0, C.getParameterByName)("tutorial") && (y.SocketLobbySend.clickedTutorialGameButton(), window.history.pushState({}, document.title, "/"));
        "1" == (0, C.getParameterByName)("room") && (y.SocketLobbySend.clickedCreateRoom(S.PlayerEnums.RoomType.Standard), window.history.pushState({}, document.title, "/"))
    }
    c.Sound.loadSounds(), l.GameUIImages.loadImages(), t.uiGameManager = new u.UIGameManager(_.UIUtilsEjsVariables.IS_PRODUCTION, i.SocketController.gameListener.gameState), v.UIDocument.webGLCheck(), v.UIDocument.debugOptions()
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.UserStatTypeEnum = t.UserStatCategoryEnum = t.AnalyticEventCategory = t.AnalyticEventType = t.AccessLevel = t.PlayerColors = t.AchievementType = void 0,
        function(e) {
            e[e.August2019TournamentWinner = 0] = "August2019TournamentWinner", e[e.August2019TournamentFinalist = 1] = "August2019TournamentFinalist", e[e.August2019TournamentSemifinalist = 2] = "August2019TournamentSemifinalist", e[e.August2019TournamentParticipant = 3] = "August2019TournamentParticipant", e[e.November2019TournamentWinner = 4] = "November2019TournamentWinner", e[e.November2019TournamentFinalist = 5] = "November2019TournamentFinalist", e[e.November2019TournamentSemifinalist = 6] = "November2019TournamentSemifinalist", e[e.November2019TournamentParticipant = 7] = "November2019TournamentParticipant", e[e.January2020TournamentWinner = 8] = "January2020TournamentWinner", e[e.January2020TournamentFinalist = 9] = "January2020TournamentFinalist", e[e.January2020TournamentSemifinalist = 10] = "January2020TournamentSemifinalist", e[e.January2020TournamentParticipant = 11] = "January2020TournamentParticipant", e[e.February2020TournamentWinner = 12] = "February2020TournamentWinner", e[e.February2020TournamentFinalist = 13] = "February2020TournamentFinalist", e[e.February2020TournamentSemifinalist = 14] = "February2020TournamentSemifinalist", e[e.February2020TournamentParticipant = 15] = "February2020TournamentParticipant", e[e.April2020TournamentWinner = 16] = "April2020TournamentWinner", e[e.April2020TournamentFinalist = 17] = "April2020TournamentFinalist", e[e.April2020TournamentSemifinalist = 18] = "April2020TournamentSemifinalist", e[e.April2020TournamentParticipant = 19] = "April2020TournamentParticipant"
        }(t.AchievementType || (t.AchievementType = {})),
        function(e) {
            e[e.None = 0] = "None", e[e.Red = 1] = "Red", e[e.Blue = 2] = "Blue", e[e.Orange = 3] = "Orange", e[e.Green = 4] = "Green", e[e.Black = 5] = "Black", e[e.Bronze = 6] = "Bronze", e[e.Silver = 7] = "Silver", e[e.Gold = 8] = "Gold", e[e.White = 9] = "White", e[e.Purple = 10] = "Purple", e[e.MysticBlue = 11] = "MysticBlue"
        }(t.PlayerColors || (t.PlayerColors = {})),
        function(e) {
            e[e.Administrator = 0] = "Administrator", e[e.User = 1] = "User", e[e.Guest = 2] = "Guest", e[e.Customer = 3] = "Customer", e[e.Manager = 4] = "Manager", e[e.Moderator = 5] = "Moderator"
        }(t.AccessLevel || (t.AccessLevel = {})),
        function(e) {
            e[e.StartedGame = 0] = "StartedGame", e[e.ClickedStore = 1] = "ClickedStore", e[e.FinishedGame = 2] = "FinishedGame", e[e.QuitMatchmakingQueue = 3] = "QuitMatchmakingQueue", e[e.StoreClickedPurchaseItem = 4] = "StoreClickedPurchaseItem", e[e.LobbyClickedStoreAd = 5] = "LobbyClickedStoreAd", e[e.MatchmakingFoundGame = 6] = "MatchmakingFoundGame", e[e.MatchmakingDisconnected = 7] = "MatchmakingDisconnected", e[e.MatchmakingForceMatched = 8] = "MatchmakingForceMatched", e[e.MatchmakingRequestRate = 9] = "MatchmakingRequestRate"
        }(t.AnalyticEventType || (t.AnalyticEventType = {})),
        function(e) {
            e[e.Game = 0] = "Game", e[e.Store = 1] = "Store", e[e.Matchmaking = 2] = "Matchmaking", e[e.Lobby = 3] = "Lobby", e[e.MatchmakingUnrankedClassic4P = 4] = "MatchmakingUnrankedClassic4P", e[e.MatchmakingUnrankedClassic1v1 = 5] = "MatchmakingUnrankedClassic1v1", e[e.MatchmakingUnrankedClassicFreeMapRotation = 6] = "MatchmakingUnrankedClassicFreeMapRotation"
        }(t.AnalyticEventCategory || (t.AnalyticEventCategory = {})), t.UserStatCategoryEnum || (t.UserStatCategoryEnum = {}), t.UserStatTypeEnum || (t.UserStatTypeEnum = {})
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TileHex = t.TileEdge = t.TileCorner = t.TileEnums = void 0;
    const i = a(7);
    var o;
    ! function(e) {
        let t, a, i, o, n, r;
        ! function(e) {
            e[e.Desert = 0] = "Desert", e[e.Lumber = 1] = "Lumber", e[e.Brick = 2] = "Brick", e[e.Wool = 3] = "Wool", e[e.Grain = 4] = "Grain", e[e.Ore = 5] = "Ore", e[e.Gold = 6] = "Gold", e[e.Fog = 7] = "Fog", e[e.Sea = 8] = "Sea"
        }(t = e.TileTypes || (e.TileTypes = {})),
        function(e) {
            e[e.None = 0] = "None", e[e.Robber = 1] = "Robber", e[e.Pirate = 2] = "Pirate"
        }(a = e.TilePieceTypes || (e.TilePieceTypes = {})),
        function(e) {
            e[e.Empty = 0] = "Empty", e[e.Settlement = 1] = "Settlement", e[e.City = 2] = "City", e[e.DestroyedCity = 3] = "DestroyedCity", e[e.KnightActiveLevel1 = 4] = "KnightActiveLevel1", e[e.KnightActiveLevel2 = 5] = "KnightActiveLevel2", e[e.KnightActiveLevel3 = 6] = "KnightActiveLevel3", e[e.KnightInactiveLevel1 = 7] = "KnightInactiveLevel1", e[e.KnightInactiveLevel2 = 8] = "KnightInactiveLevel2", e[e.KnightInactiveLevel3 = 9] = "KnightInactiveLevel3"
        }(i = e.CornerBuildingTypes || (e.CornerBuildingTypes = {})),
        function(e) {
            e[e.IslandSettlingChits = 0] = "IslandSettlingChits", e[e.CityWall = 1] = "CityWall", e[e.MetropolisScience = 2] = "MetropolisScience", e[e.MetropolisTrade = 3] = "MetropolisTrade", e[e.MetropolisPolitics = 4] = "MetropolisPolitics"
        }(o = e.CornerBonusTypes || (e.CornerBonusTypes = {})),
        function(e) {
            e[e.Empty = 0] = "Empty", e[e.Port = 1] = "Port", e[e.PortLumber = 2] = "PortLumber", e[e.PortBrick = 3] = "PortBrick", e[e.PortWool = 4] = "PortWool", e[e.PortGrain = 5] = "PortGrain", e[e.PortOre = 6] = "PortOre"
        }(n = e.CornerPortTypes || (e.CornerPortTypes = {})),
        function(e) {
            e[e.Empty = 0] = "Empty", e[e.Road = 1] = "Road", e[e.Ship = 2] = "Ship"
        }(r = e.EdgeTypes || (e.EdgeTypes = {}))
    }(o = t.TileEnums || (t.TileEnums = {}));
    t.TileCorner = class {
        constructor(e, t, a, i, o = !1) {
            this.hexCorner = e, this.owner = t, this.buildingType = a, this.portType = i, this.restrictedStartingPlacement = o, this.bonuses = []
        }
        sameCornerLocation(e) {
            return this.hexCorner.x == e.hexCorner.x && (this.hexCorner.y == e.hexCorner.y && this.hexCorner.z == e.hexCorner.z)
        }
        sameCorner(e) {
            return this.owner == e.owner && (this.buildingType == e.buildingType && this.sameCornerLocation(e))
        }
        checkForBonusOfType(e) {
            for (const t of this.bonuses)
                if (t == e) return !0;
            return !1
        }
        doesCornerHaveMetropolis() {
            return !!(0, i.elementInArray)(this.bonuses, o.CornerBonusTypes.MetropolisPolitics) || (!!(0, i.elementInArray)(this.bonuses, o.CornerBonusTypes.MetropolisScience) || !!(0, i.elementInArray)(this.bonuses, o.CornerBonusTypes.MetropolisTrade))
        }
        getMetropolis() {
            return (0, i.elementInArray)(this.bonuses, o.CornerBonusTypes.MetropolisPolitics) ? o.CornerBonusTypes.MetropolisPolitics : (0, i.elementInArray)(this.bonuses, o.CornerBonusTypes.MetropolisScience) ? o.CornerBonusTypes.MetropolisScience : (0, i.elementInArray)(this.bonuses, o.CornerBonusTypes.MetropolisTrade) ? o.CornerBonusTypes.MetropolisTrade : void 0
        }
        removeCornerBonus(e) {
            (0, i.removeElementFromArray)(this.bonuses, e)
        }
        deserialize(e) {
            for (const t of Object.keys(e)) "hexCorner" != t && (this[t] = e[t])
        }
    };
    t.TileEdge = class {
        constructor(e, t, a) {
            this.hexEdge = e, this.owner = t, this.type = a
        }
        sameEdge(e) {
            return this.owner == e.owner && (this.type == e.type && (this.hexEdge.x == e.hexEdge.x && (this.hexEdge.y == e.hexEdge.y && this.hexEdge.z == e.hexEdge.z)))
        }
        deserialize(e) {
            for (const t of Object.keys(e)) "hexEdge" != t && (this[t] = e[t])
        }
    };
    t.TileHex = class {
        constructor(e, t, a, i = o.TilePieceTypes.None) {
            this.hexFace = e, this.tileType = t, this._diceNumber = a, this.setDiceProbability(a), this.tilePieceTypes = i
        }
        get diceProbability() {
            return this._diceProbability
        }
        get diceNumber() {
            return this._diceNumber
        }
        set diceNumber(e) {
            this._diceNumber = e, this.setDiceProbability(e)
        }
        setDiceProbability(e) {
            switch (e) {
                case 2:
                    this._diceProbability = 1;
                    break;
                case 3:
                    this._diceProbability = 2;
                    break;
                case 4:
                    this._diceProbability = 3;
                    break;
                case 5:
                    this._diceProbability = 4;
                    break;
                case 6:
                case 8:
                    this._diceProbability = 5;
                    break;
                case 9:
                    this._diceProbability = 4;
                    break;
                case 10:
                    this._diceProbability = 3;
                    break;
                case 11:
                    this._diceProbability = 2;
                    break;
                case 12:
                    this._diceProbability = 1
            }
        }
        sameTileHex(e) {
            return e.hexFace.x == this.hexFace.x && e.hexFace.y == this.hexFace.y
        }
        isTileHexNeighbor(e) {
            const t = e.hexFace.neighbors();
            for (const e of t)
                if (e.x == this.hexFace.x && e.y == this.hexFace.y) return !0;
            return !1
        }
        isTileLand() {
            return this.tileType != o.TileTypes.Sea && this.tileType != o.TileTypes.Fog
        }
        deserialize(e) {
            for (const t of Object.keys(e)) "hexFace" != t && (this[t] = e[t])
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.EnglishTexts = void 0;
    const i = a(15),
        o = a(24);
    class n {
        static getPlayerInformationVictoryPointBody(e) {
            return "Shows the amount of victory points this player has. First player to reach " + e + " wins."
        }
    }
    t.EnglishTexts = n, n.COULDNT_SEND_MESSAGE = "Chat: Couldn"t send the above message", n.SEPARATOR_TEXT = {
        text: "<hr>",
        icon: void 0
    }, n.UPDATE_TEXT = {
        text: `Server will update in a few minutes, new games are blocked until the update starts. For more details join our <a href="${o.KatanConfigs.DISCORD_CHANNEL}" target="_blank">discord community</a>`,
        icon: i.LobbyImage.Lightning
    }, n.CANCEL_UPDATE_TEXT = {
        text: "⚠️ Server update canceled, you can start new games! 🎉",
        icon: i.LobbyImage.Lightning
    }, n.UNABLE_TO_FIND_PLAYER = "Unable to find player ", n.CHAT_IS_DISABLED = "Chat is disabled, write "/disablechat" again to enable it", n.PLAYER_CHAT_IS_DISABLED = "This player has disabled their chat", n.LOBBY_CHAT_IS_DISABLED = "Lobby Chat Disabled", n.LOBBY_CHAT_IS_ENABLED = "Lobby Chat Enabled", n.PM_IS_DISABLED = "PM Disabled", n.PM_IS_ENABLED = "PM Enabled", n.WRONG_COMMAND = "Wrong command type /help", n.SIGN_IN_TO_CHAT_IN_LOBBY = "Please sign in to use lobby chat", n.ACCEPT = "Accept", n.DECLINE = "Decline", n.MOVE_SHIP_TIP = "Reposition 1 ship per turn", n.LIVE_HEAPSNAPSHOT_STARTED = {
        text: "Live maintenance ongoing.<p> Actions might be paused for approximately 30 seconds.</p><p> All games given 30 seconds of bonus time.</p><p> Thank you for your patience.</p>",
        icon: i.LobbyImage.Lightning
    }, n.LIVE_HEAPSNAPSHOT_FINISHED = {
        text: "Maintenance complete. You may resume your game.<p> Thank you for your patience.</p>",
        icon: i.LobbyImage.Lightning
    }, n.PLAYER_INFORMATION_RESOURCE_CARD_TITLE = "Resource Cards", n.PLAYER_INFORMATION_RESOURCE_CARD_BODY = "Shows the amount of resource cards this player has. Resources: Lumber, Brick, Wool, Grain, Ore.", n.CITIES_AND_KNIGHTS_OVERRIDE_PLAYER_INFORMATION_RESOURCE_CARD_BODY = "Shows the amount of resource cards this player has. Resources: Lumber, Brick, Wool, Grain, Ore, Cloth, Coin, Paper.", n.PLAYER_INFORMATION_DEVELOPMENT_CARD_TITLE = "Development Cards", n.PLAYER_INFORMATION_DEVELOPMENT_CARD_BODY = "Shows the amount of development cards this player has. See settings -> How to Play for more detail on development cards.", n.PLAYER_INFORMATION_VICTORY_POINT_TITLE = "Victory Points", n.PLAYER_INFORMATION_LARGEST_ARMY_TITLE = "Largest Army", n.PLAYER_INFORMATION_LARGEST_ARMY_BODY = "Total Knight cards the player has used. The person to use the most amount of Knight cards earns 2 victory points. A minimum of 3 Knight cards needs to be used in order to get this bonus.", n.PLAYER_INFORMATION_LONGEST_ROAD_TITLE = "Longest Road", n.PLAYER_INFORMATION_LONGEST_ROAD_BODY = "Total consecutive roads this player has constructed. The player with the longest consecutive road earns 2 victory points. A minimum of 5 consecutive roads need to be placed in order to get this bonus.", n.SEAFARERS_OVERRIDE_PLAYER_INFORMATION_LONGEST_TRADE_ROUTE_TITLE = "Longest Trade Route", n.SEAFARERS_OVERRIDE_PLAYER_INFORMATION_LONGEST_TRADE_ROUTE_BODY = "Shows how many consecutive road and ships this player has constructed. The player with the longest consecutive road earns 2 victory points. A minimum of 5 consecutive roads need to be placed in order to get this bonus. Ships connected to roads only count if there is a settlement in between.", n.PLAYER_INFORMATION_KNIGHT_STRENGTH_TITLE = "Active Knights", n.PLAYER_INFORMATION_KNIGHT_STRENGTH_BODY = "Total active knights. Each active level 1 knight counts as 1, each level 2 as 2, and each level 3 as 3.", n.PLAYER_INFORMATION_DEFENDER_OF_COLONIST_TITLE = "Defender of Colonist", n.PLAYER_INFORMATION_DEFENDER_OF_COLONIST_BODY = "Total Defender victory points. Each time the Barbarians are defeated, the player with most active knights is awarded 1 extra victory point.", n.PLAYER_INFORMATION_PROGRESS_CARD_VICTORY_POINT_TITLE = "Points from Progress Cards", n.PLAYER_INFORMATION_PROGRESS_CARD_VICTORY_POINT_BODY = "Earn an extra victory point by getting Printer (Science) or Constitution (Politics). There is 1 of each in the deck. They are automatically played when obtained.", n.RESOURCE_CARD_BACK_TIP_TITLE = "Resource Card", n.RESOURCE_CARD_BACK_TIP_BODY = "Can be used to make purchases.", n.RESOURCE_CARD_LUMBER_TIP_TITLE = "Lumber", n.DEAFULT_RESOURCE_CARD_LUMBER_TIP_BODY = "Can be used to build roads & settlements.", n.OVERRIDE_SEAFARERES_RESOURCE_CARD_LUMBER_TIP_BODY = "Can be used to build roads, settlements & ships.", n.RESOURCE_CARD_BRICK_TIP_TITLE = "Brick", n.DEAFULT_RESOURCE_CARD_BRICK_TIP_BODY = "Can be used to build roads & settlements.", n.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_BRICK_TIP_BODY = "Can be used to build roads, settlements & city walls.", n.RESOURCE_CARD_WOOL_TIP_TITLE = "Wool", n.DEAFULT_RESOURCE_CARD_WOOL_TIP_BODY = "Can be used to build settlements & purchase development cards.", n.OVERRIDE_SEAFARERES_RESOURCE_CARD_WOOL_TIP_BODY = "Can be used to build settlements, purchase development cards & build ships.", n.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_WOOL_TIP_BODY = "Can be used to build settlements, purchase & upgrade knights.", n.OVERRIDE_SEAFARERES_CITIES_AND_KNIGHTS_RESOURCE_CARD_WOOL_TIP_BODY = "Can be used to build settlements, build ships, purchase & upgrade knights.", n.RESOURCE_CARD_GRAIN_TIP_TITLE = "Grain", n.DEAFULT_RESOURCE_CARD_GRAIN_TIP_BODY = "Can be used to build settlements, cities & purchase development cards.", n.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_GRAIN_TIP_BODY = "Can be used to build settlements, cities & activate knights.", n.RESOURCE_CARD_ORE_TIP_TITLE = "Ore", n.DEAFULT_RESOURCE_CARD_ORE_TIP_BODY = "Can be used to build cities & purchase development cards.", n.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_ORE_TIP_BODY = "Can be used to build cities, purchase & upgrade knights.", n.COMMODITY_CARD_PAPER_TIP_TITLE = "Paper", n.COMMODITY_CARD_PAPER_TIP_BODY = "Can be used to purchase Science city improvements.", n.COMMODITY_CARD_CLOTH_TIP_TITLE = "Cloth", n.COMMODITY_CARD_CLOTH_TIP_BODY = "Can be used to purchase Trade city improvements.", n.COMMODITY_CARD_COIN_TIP_TITLE = "Coin", n.COMMODITY_CARD_COIN_TIP_BODY = "Can be used to purchase Politics city improvements.", n.DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_TITLE = "Road Building", n.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_BODY = "Place 2 roads for free.", n.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDING_POPUP_BODY = "Place 2 free roads.", n.OVERRIDE_SEAFARERES_DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_BODY = "Place any combination of 2 roads or ships for free.", n.OVERRIDE_SEFARERES_DEVELOPMENT_CARD_ROAD_BUILDING_POPUP_BODY = "Place any combination of 2 roads or ships for free.", n.DEVELOPMENT_CARD_MONOPOLY_TIP_TITLE = "Monopoly", n.DEVELOPMENT_CARD_MONOPOLY_TIP_BODY = "Steal all cards of a single type of resource from every player.", n.DEVELOPMENT_CARD_MONOPOLY_POPUP_BODY = n.DEVELOPMENT_CARD_MONOPOLY_TIP_BODY, n.DEVELOPMENT_CARD_YEAR_OF_PLENTY_TIP_TITLE = "Year of Plenty", n.DEVELOPMENT_CARD_YEAR_OF_PLENTY_TIP_BODY = "Select any 2 resources from the bank.", n.DEVELOPMENT_CARD_YEAR_OF_PLENTY_POPUP_BODY = n.DEVELOPMENT_CARD_YEAR_OF_PLENTY_TIP_BODY, n.DEVELOPMENT_CARD_KNIGHT_TIP_TITLE = "Knight", n.DEFAULT_DEVELOPMENT_CARD_KNIGHT_TIP_BODY = "Place the robber on any tile and steal 1 card from another player.", n.DEFAULT_DEVELOPMENT_CARD_KNGIHT_POPUP_BODY = "Place the robber anywhere on the map and steal a random card from a player with a settlement or city on that tile.", n.OVERRIDE_SEAFARERS_DEVELOPMENT_CARD_KNIGHT_TIP_BODY = "Place the robber or pirate ship on any tile and steal 1 card from another player.", n.OVERRIDE_SEAFARERS_DEVELOPMENT_CARD_KNIGHT_POPUP_BODY = "Place the robber or pirate ship anywhere on the map and steal a random card from a player with a settlement or city on that tile.", n.DEVELOPMENT_CARD_VICTORY_POINT_TIP_TITLE = "Victory Point", n.DEVELOPMENT_CARD_VICTORY_POINT_TIP_BODY = "Secretly gives 1 victory point.", n.DEVELOPMENT_CARD_VICTORY_POINT_POPUP_BODY = "Secretly awards 1 victory point; it is automatically used.", n.DEVELOPMENT_CARD_BACK_TIP_TITLE = "Development Card", n.DEVELOPMENT_CARD_BACK_TIP_BODY = "Can be purchased for wool, grain, ore. There are 5 types; see rules for more.", n.PROGRESS_CARD_SCIENCE_BACK_TIP_TITLE = "Science Progress Card", n.PROGRESS_CARD_SCIENCE_BACK_TIP_BODY = "Science progress cards are obtained by unlocking green city improvements, depending on the number rolled by the red dice.", n.PROGRESS_CARD_SCIENCE_BACK_POPUP_BODY = "Science progress cards are obtained by unlocking green city improvements, depending on the number rolled by the red dice.", n.PROGRESS_CARD_SCIENCE_ALCHEMIST_TIP_TITLE = "Alchemist", n.PROGRESS_CARD_SCIENCE_ALCHEMIST_TIP_BODY = "Select the result of the numbered dice. This card must be played before rolling the dice.", n.PROGRESS_CARD_SCIENCE_ALCHEMIST_POPUP_BODY = "Select the result of the numbered dice. Confirm the selection and the dice will be rolled automatically. This card must be played before rolling the dice.", n.PROGRESS_CARD_SCIENCE_CRANE_TIP_TITLE = "Crane", n.PROGRESS_CARD_SCIENCE_CRANE_TIP_BODY = "A city improvement costs one commodity less.", n.PROGRESS_CARD_SCIENCE_CRANE_POPUP_BODY = "Build a city improvement using 1 commodity less than normal.", n.PROGRESS_CARD_SCIENCE_ENGINEER_TIP_TITLE = "Engineer", n.PROGRESS_CARD_SCIENCE_ENGINEER_TIP_BODY = "Build 1 city wall for free.", n.PROGRESS_CARD_SCIENCE_ENGINEER_POPUP_BODY = "Build 1 city wall for free.", n.PROGRESS_CARD_SCIENCE_INVENTOR_TIP_TITLE = "Inventor", n.PROGRESS_CARD_SCIENCE_INVENTOR_TIP_BODY = "Switch 2 numbers in the board.", n.PROGRESS_CARD_SCIENCE_INVENTOR_POPUP_BODY = "Select 2 numbers in the board to switch their positions. You cannot select 6, 8, 2 nor 12.", n.PROGRESS_CARD_SCIENCE_IRRIGATION_TIP_TITLE = "Irrigation", n.PROGRESS_CARD_SCIENCE_IRRIGATION_TIP_BODY = "Get 2 grain cards for each grain tile you are on.", n.PROGRESS_CARD_SCIENCE_IRRIGATION_POPUP_BODY = "Get 2 grain cards for each grain tile you have a settlement or city on.", n.PROGRESS_CARD_SCIENCE_MEDICINE_TIP_TITLE = "Medicine", n.PROGRESS_CARD_SCIENCE_MEDICINE_TIP_BODY = "Upgrade a settlement to a city for 2 ores and 1 wheat.", n.PROGRESS_CARD_SCIENCE_MEDICINE_POPUP_BODY = "Upgrade a settlement to a city for 2 ores and 1 wheat.", n.PROGRESS_CARD_SCIENCE_MINING_TIP_TITLE = "Mining", n.PROGRESS_CARD_SCIENCE_MINING_TIP_BODY = "Get 2 ore cards for each ore tile you are on.", n.PROGRESS_CARD_SCIENCE_MINING_POPUP_BODY = "Get 2 ore cards for each ore tile you have a settlement or city on.", n.PROGRESS_CARD_SCIENCE_PRINTER_TIP_TITLE = "Printer", n.PROGRESS_CARD_SCIENCE_PRINTER_TIP_BODY = "Awards 1 victory point.", n.PROGRESS_CARD_SCIENCE_PRINTER_POPUP_BODY = "This card awards 1 victory point; it is automatically used and shown to the other players.", n.PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_TITLE = "Road Building", n.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_BODY = "Place 2 roads for free.", n.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_POPUP_BODY = "Place 2 free roads.", n.OVERRIDE_SEAFARERS_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_BODY = "Place any combination of 2 roads or ships for free.", n.OVERRIDE_SEAFARERS_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_POPUP_BODY = "Place any combination of 2 roads or 2 ships for free.", n.PROGRESS_CARD_SCIENCE_SMITH_TIP_TITLE = "Smith", n.PROGRESS_CARD_SCIENCE_SMITH_TIP_BODY = "Upgrade up to 2 separate knights for free.", n.PROGRESS_CARD_SCIENCE_SMITH_POPUP_BODY = "Upgrade up to 2 separate knights for free. Upgrading to a level 3 knight requires Fortress city improvements (Politics level 3).", n.PROGRESS_CARD_POLITICS_BACK_TIP_TITLE = "Politics Progress Card", n.PROGRESS_CARD_POLITICS_BACK_TIP_BODY = "Politics progress cards are obtained by unlocking blue city improvements, depending on the number rolled by the red dice.", n.PROGRESS_CARD_POLITICS_BACK_POPUP_BODY = "Politics progress cards are obtained by unlocking blue city improvements, depending on the number rolled by the red dice.", n.PROGRESS_CARD_POLITICS_BISHOP_TIP_TITLE = "Bishop", n.PROGRESS_CARD_POLITICS_BISHOP_TIP_BODY = "Move the robber and steal a random card from all players on the selected tile.", n.PROGRESS_CARD_POLITICS_BISHOP_POPUP_BODY = "Move the robber, and steal a random card from all players that have a settlement or city on the selected tile.", n.PROGRESS_CARD_POLITICS_CONSTITUTION_TIP_TITLE = "Constitution", n.PROGRESS_CARD_POLITICS_CONSTITUTION_TIP_BODY = "Awards 1 victory point.", n.PROGRESS_CARD_POLITICS_CONSTITUTION_POPUP_BODY = "This card awards 1 victory point; it is automatically used and shown to the other players.", n.PROGRESS_CARD_POLITICS_DESERTER_TIP_TITLE = "Deserter", n.PROGRESS_CARD_POLITICS_DESERTER_TIP_BODY = "Force an opponent to remove a knight of their choice. You shall place a knight of equal strength if possible.", n.PROGRESS_CARD_POLITICS_DESERTER_POPUP_BODY = "Choose an opponent, they must select one of their knights to remove from the board. You shall place a knight of the same level for free, if you have any available and if there is an open spot in the board.", n.PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_TITLE = "Diplomat", n.DEFAULT_PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_BODY = "Remove an open road.", n.DEAFULT_PROGRESS_CARD_POLITICS_DIPLOMAT_POPUP_BODY = "Remove an opponent"s open road from the board, or remove/relocate an open road of your own.", n.OVERRIDE_SEAFARERS_PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_BODY = "Remove an open road or ship", n.OVERRIDE_SEAFARERS_PROGRESS_CARD_POLITICS_DIPLOMAT_POPUP_BODY = "Remove an opponent"s open road or ship from the board, or remove/relocate an open road or ship of your own.", n.PROGRESS_CARD_POLITICS_INTRIGUE_TIP_TITLE = "Intrigue", n.PROGRESS_CARD_POLITICS_INTRIGUE_TIP_BODY = "Reposition an opponent"s knight that is touching one of your roads.", n.PROGRESS_CARD_POLITICS_INTRIGUE_POPUP_BODY = "Using this card allows you to reposition an opponent"s knight. The knight must be on an intersection connected to at least one of your roads.", n.PROGRESS_CARD_POLITICS_SABOTEUR_TIP_TITLE = "Saboteur", n.PROGRESS_CARD_POLITICS_SABOTEUR_TIP_BODY = "All players with the same or more victory points than you, are forced to discard half their cards.", n.PROGRESS_CARD_POLITICS_SABOTEUR_POPUP_BODY = "All players with the same or more victory points than you, are forced to discard half their cards.", n.PROGRESS_CARD_POLITICS_SPY_TIP_TITLE = "Spy", n.PROGRESS_CARD_POLITICS_SPY_TIP_BODY = "Steal 1 progress card from an opponent.", n.PROGRESS_CARD_POLITICS_SPY_POPUP_BODY = "You may see an opponent"s hand of progress card, and steal one of them.", n.PROGRESS_CARD_POLITICS_WARLORD_TIP_TITLE = "Warlord", n.PROGRESS_CARD_POLITICS_WARLORD_TIP_BODY = "Activate all of your knights for free.", n.PROGRESS_CARD_POLITICS_WARLORD_POPUP_BODY = "Activate all of your knights for free.", n.PROGRESS_CARD_POLITICS_WEDDING_TIP_TITLE = "Wedding", n.PROGRESS_CARD_POLITICS_WEDDING_TIP_BODY = "Force all players with more victory points than you to give you 2 cards of their choice.", n.PROGRESS_CARD_POLITICS_WEDDING_POPUP_BODY = "Force all players with more victory points than you to give you 2 resources or commodities of their choice.", n.PROGRESS_CARD_TRADE_BACK_TIP_TITLE = "Trade Progress Card", n.PROGRESS_CARD_TRADE_BACK_TIP_BODY = "Trade progress cards are obtained by unlocking yellow city improvements, depending on the number rolled by the red dice.", n.PROGRESS_CARD_TRADE_BACK_POPUP_BODY = "Trade progress cards are obtained by unlocking yellow city improvements, depending on the number rolled by the red dice.", n.PROGRESS_CARD_TRADE_COMMERCIAL_HARBOR_TIP_TITLE = "Commercial Harbor", n.PROGRESS_CARD_TRADE_COMMERCIAL_HARBOR_TIP_BODY = "Offer each opponent a resource from your hand and get a commodity of their choice in return.", n.PROGRESS_CARD_TRADE_COMMERCIAL_HARBOR_POPUP_BODY = "Offer each opponent 1 resource card from your hand. In exchange, each player must give you a commodity card of their choice, if they have any.", n.PROGRESS_CARD_TRADE_MASTER_MERCHANT_TIP_TITLE = "Master Merchant", n.PROGRESS_CARD_TRADE_MASTER_MERCHANT_TIP_BODY = "Select an opponent with more victory points than you, see their entire hand, and steal 2 cards of your choice.", n.PROGRESS_CARD_TRADE_MASTER_MERCHANT_POPUP_BODY = "Select an opponent who has more victory points than you. You will see their entire hand and steal any 2 cards to add to your hand.", n.PROGRESS_CARD_TRADE_MERCHANT_TIP_TITLE = "Merchant", n.PROGRESS_CARD_TRADE_MERCHANT_TIP_BODY = "Allows to trade a resource at a 2:1 rate. Grants 1 victory point.", n.PROGRESS_CARD_TRADE_MERCHANT_POPUP_BODY = "Place the Merchant on one of your tiles. You may trade that resource with the bank at a 2:1 rate while the Merchant remains in your possession. Having an active Merchant grants 1 victory point.", n.PROGRESS_CARD_TRADE_MERCHANT_FLEET_TIP_TITLE = "Merchant Fleet", n.PROGRESS_CARD_TRADE_MERCHANT_FLEET_TIP_BODY = "For 1 turn, you may trade one resource or commodity of your choice with the bank at a 2:1 rate.", n.PROGRESS_CARD_TRADE_MERCHANT_FLEET_POPUP_BODY = "For 1 turn, you may trade with the bank one resource or commodity of your choice at a 2:1 rate.", n.PROGRESS_CARD_TRADE_RESOURCE_MONOPOLY_TIP_TITLE = "Resource Monopoly", n.PROGRESS_CARD_TRADE_RESOURCE_MONOPOLY_TIP_BODY = "Get 2 cards of a single resource from each of the other players.", n.PROGRESS_CARD_TRADE_RESOURCE_MONOPOLY_POPUP_BODY = "Select a resource. Each opponent must give you 2 cards of that type of resource, if they have any.", n.PROGRESS_CARD_TRADE_COMMODITY_MONOPOLY_TIP_TITLE = "Commodity Monopoly", n.PROGRESS_CARD_TRADE_COMMODITY_MONOPOLY_TIP_BODY = "Get 1 card of a single commodity from each of the other players.", n.PROGRESS_CARD_TRADE_COMMODITY_MONOPOLY_POPUP_BODY = "Select a commodity. Each opponent must give you 1 card of that type of commodity, if they have any.", n.BARBARIAN_TOOL_TIP_TITLE = "Barbarian Strength", n.BARBARIAN_TOOL_TIP_BODY_1 = "Number of cities on the board.", n.BARBARIAN_TOOL_TIP_BODY_2 = "If it is higher than the number of active knights when the ship gets to the end of the track, the player with the least amount of active knights loses a city.", n.KNIGHT_TOOL_TIP_TITLE = "Active Knights", n.KNIGHT_TOOL_TIP_BODY_1 = "Number of active knights.", n.KNIGHT_TOOL_TIP_BODY_2 = "If it is higher than the barbarian strength when the ship gets to the end of the track, the player with the highest amount of active knights gets the Defender of Colonist victory point. If there is a tie, players get a free progress card instead.", n.CITY_IMPROVEMENT_BUTTON_TIP_TITLE = "City Improvements", n.CITY_IMPROVEMENT_BUTTON_TIP_BODY_1 = "Use Commodities to buy City Improvements, which will get you Progress Cards (depending on the event dice and red dice).", n.CITY_IMPROVEMENT_BUTTON_TIP_BODY_2 = "Getting to level 4 first in the City Improvement type will get you a Metropolis worth 2 VP.", n.EVENT_DICE_TIP_TITLE = "Event Dice", n.EVENT_DICE_TIP_BODY_1 = "Determine what type of Progress Card you get, as long as you have at least 1 City Improvement of the same type.", n.EVENT_DICE_TIP_BODY_2 = "If it is a Ship, the Barbarians advance one tile of the track.", n.END_GAME_OVERVIEW_SETTLEMENT_VP = "Victory points from settlements", n.END_GAME_OVERVIEW_CITY_VP = "Victory points from cities", n.END_GAME_OVERVIEW_DEV_CARD_VP = "Victory points from VP cards", n.END_GAME_OVERVIEW_LARGEST_ARMY = "Victory points from largest army", n.END_GAME_OVERVIEW_LONGEST_ROAD = "Victory points from longest road", n.END_GAME_OVERVIEW_CHIT_VP = "Victory points from foreign land", n.END_GAME_OVERVIEW_METROPOLIS = "Victory points from metropolis", n.END_GAME_OVERVIEW_DEFENDER_OF_COLONIST = "Victory points from Defender Of Colonist", n.END_GAME_OVERVIEW_MERCHANT = "Victory points from merchant", n.END_GAME_ACTIVITY_PROPOSED_TRADES = "Total times proposed to trade", n.END_GAME_ACTIVITY_SUCCESSFUL_TRADES = "Total times traded successfully", n.END_GAME_ACTIVITY_RESOURCES_USED = "Amount of resources used", n.END_GAME_ACTIVITY_RESOURCE_INCOME_BLOCKED = "Amount of resource income blocked", n.END_GAME_ACTIVITY_DEV_CARDS_BOUGHT = "Amount of development cards bought", n.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_ACTIVITY_DEV_CARDS_BOUGHT = "Amount of progress cards received", n.END_GAME_ACTIVITY_DEV_CARDS_USED = "Amount of development cards used", n.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_ACTIVITY_DEV_CARDS_USED = "Amount of progress cards used", n.ERROR_TRADING_DISABLED = "Trading disabled", n.ERROR_DEFAULT_DEVELOPMENT_CARDS_DISABLED = "Development cards disabled", n.ERROR_OVERRIDE_CITIES_AND_KNIGHTS_DEVELOPMENT_CARDS_DISABLED = "Progress cards disabled", n.END_GAME_TOTAL_RESOURCE_INCOME = "Total resource income", n.END_GAME_TOTAL_RESOURCE_LOSS = "Total resource loss", n.END_GAME_TOTAL_RESOURCE_SCORE = "Total resource score", n.END_GAME_ROLLING_INCOME = "Resource gained by rolling dice", n.END_GAME_ROBBING_INCOME = "Resource gained by robbing", n.END_GAME_DEV_CARD_INCOME = "Resource gained by using development cards", n.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEV_CARD_INCOME = "Resource gained by using progress cards", n.END_GAME_TRADE_INCOME = "Resource gained by trading", n.END_GAME_ROLLING_LOSS = "Resource lost by rolling 7", n.END_GAME_ROBBING_LOSS = "Resource lost by getting robbed", n.END_GAME_DEV_CARD_LOSS = "Resource lost by development cards", n.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEV_CARD_LOSS = "Resource lost by progress cards", n.END_GAME_TRADE_LOSS = "Resource lost by trading", n.END_GAME_GOLD_INCOME = "Total resource gained by gold tiles", n.END_GAME_DEVELOPMENT_CARDS_DRAWN = "Development Cards Drawn", n.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEVELOPMENT_CARDS_DRAWN = "Progress Cards Drawn", n.ERROR_DIPLOMAT_NO_ROAD_TO_REMOVE = "No open roads to remove", n.OVVERRIDE_SEAFARERS_ERROR_DIPLOMAT_NO_SHIPS_TO_REMOVE = "No open roads or ships to remove", n.BOT_OVER_STATUS = "Bots never quit and have maximum karma", n.TRADE_ERROR_NO_SUCH_OFFER = "There is no such offer", n.TRADE_ERROR_YOU_ARE_NOT_IN_THE_GAME = "You are not in this game", n.TRADE_ERROR_SELECTED_TARGETS_ARE_NOT_IN_GAME = "Selected targets are not in the game", n.TRADE_ERROR_CANT_EMBARGO_SELF = "You cannot embargo yourself", n.TRADE_ERROR_CANT_CREATE_THAT_MANY_OFFERS = "Cannot create that many offers", n.TRADE_ERROR_CANT_REQUEST_THAT_MANY_CARDS = "Cannot request that many cards", n.TRADE_ERROR_CANT_CREATE_EMPTY_OFFER = "Cannot create empty offer", n.TRADE_ERROR_YOU_HAVE_ALREADY_RESPONDED = "You have already responded to this offer", n.TRADE_ERROR_ONLY_CREATOR_CAN_ACCEPT = "Only creator of an offer can take accept offers", n.TRADE_ERROR_OFFER_HAS_NOT_BEEN_ACCEPTED = "This offer has not been accepted by that player", n.TRADE_ERROR_IT_IS_NOT_YOUR_TURN = "It is not your turn", n.TRADE_ERROR_TRADING_SAME_TYPE_CARDS = "Cannot trade same type of cards", n.TRADE_ERROR_DOES_NOT_HAVE_OFFERED_CARDS = "You do not have the offered cards", n.TRADE_ERROR_DOES_NOT_HAVE_WANTED_CARDS = "You do not have the wanted cards", n.TRADE_ERROR_YOU_HAVENT_BEEN_TARGETED = "You have not been targeted for this trade", n.TRADE_ERROR_EVERYONE_EMBARGOED = "Everyone embargoed you, cannot create new trade offers", n.TRADE_ERROR_EMPTY_TARGETS = "Pick a target to trade with", n.TRADE_ERROR_CREATED_OFFER_BEFORE = "You have already created that offer before", n.TRADE_ERROR_NO_ONE_HAS_THAT_RESOURCE = "No one has the resource you requested", n.TRADE_ERROR_OFFER_INCOMPLETE = "Offer is incomplete", n.PURCHASE_ERROR_SERVER_UPDATING = "Store Error - Cannot buy while server is waiting for an update", n.PURCHASE_ERROR_COULD_NOT_FIND_USER = "Store Error - Could not find user", n.PURCHASE_ERROR_NEED_TO_LOGIN = "Store Error - You need to login", n.PURCHASE_ERROR_ALREADY_HAVE_ITEM = "Store Error - You already have this item", n.PURCHASE_ERROR_UNSUPPORTED_PURCHASE = "Store Error - Unsupported purchase", n.PURCHASE_ERROR_COULD_NOT_ADD_COINS = "Store Error - Charged but could not add coins, contact support", n.PURCHASE_ERROR_COULD_NOT_ADD_ITEM = "Store Error - Could not add item, contact support", n.PURCHASE_ERROR_NOT_ENOUGH_COINS = "Store Error - You do not have enough coins, get coins from the button at top right", n.PURCHASE_ERROR_NO_STRIPE_SESSION = "Payment Error - Could not get Stripe checkout session. Please email us at with the details", n.PURCHASE_ERROR_PAYMENT_SUCCESS = "Payment Successful - Item Purchased - Refresh Page", n.PURCHASE_ERROR_NO_ERROR = "Store - Received stripe session", n.PURCHASE_ERROR_PURCHASE_SUCCESS = "Payment Successful - Item purchased", n.AUTH_ERROR_LOGGED_IN_FROM_ANOTHER_TAB = "Logged in from another tab", n.MATCHMAKING_ERROR_TITLE = "Matchmaking Error", n.MATCHMAKING_ERROR_DISABLED = "System undergoing maintenance. Try again in a few minutes.", n.MATCHMAKING_ERROR_ALREADY_SEARCHING_FOR_MATCH = "Already searching for game in another tab", n.MATCHMAKING_ERROR_ALREADY_COULD_NOT_FIND_SOCKET_CONNECTION = "Could not connect to matchmaker", n.MATCHMAKING_ERROR_PLAYERS_FAILED_CONNECT = "A player failed to connect to match. Please try again.", n.MATCHMAKING_ERROR_FAILED_TO_FIND_GAME = "Failed to find game"
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameUIImages = void 0;
    const i = a(6),
        o = a(21),
        n = a(3),
        r = a(31),
        s = a(16),
        c = a(358),
        l = a(359),
        h = a(20),
        d = a(15);
    var u = a(26).HexShapeEnums.EdgeVariables;
    const g = a(61);
    ! function(e) {
        let t, a = !1;

        function m() {
            a = !0, null != t && t.finishedLoading()
        }

        function p(e, a) {
            null != a.error && console.error("PIXI encountered an error loading this resource. Image name wrong " + a.name), null != t && t.updateLoadPercentage(e.progress)
        }

        function C(e) {
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.settlement_blue.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.settlement_red.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.settlement_orange.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.settlement_green.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.settlement_bronze.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.settlement_silver.texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.settlement_gold.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.settlement_black.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.settlement_purple.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.settlement_mysticblue.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.settlement_white.texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getSettlementForPlayer", [e]), i.Loader.shared.resources.settlement_green.texture
        }

        function y(e) {
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.city_blue.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.city_red.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.city_orange.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.city_green.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.city_bronze.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.city_silver.texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.city_gold.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.city_black.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.city_purple.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.city_mysticblue.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.city_white.texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getCityForPlayer", [e]), i.Loader.shared.resources.city_green.texture
        }

        function S(e) {
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.city_destroyed_blue.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.city_destroyed_red.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.city_destroyed_orange.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.city_destroyed_green.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.city_destroyed_bronze.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.city_destroyed_silver.texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.city_destroyed_gold.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.city_destroyed_black.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.city_destroyed_purple.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.city_destroyed_mysticblue.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.city_destroyed_white.texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getDestroyedCityForPlayer", [e]), i.Loader.shared.resources.city_destroyed_green.texture
        }

        function v(e, t) {
            let a = "";
            const n = i.Loader.shared.resources;
            switch (t) {
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel1:
                    a = "level1_active_";
                    break;
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel2:
                    a = "level2_active_";
                    break;
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel3:
                    a = "level3_active_";
                    break;
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel1:
                    a = "level1_inactive_";
                    break;
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel2:
                    a = "level2_inactive_";
                    break;
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel3:
                    a = "level3_inactive_"
            }
            if ("" == a) return (0, r.logError)("getKnightForPlayer", [e]), n.knight_level1_inactive_green.texture;
            const s = "knight_" + a;
            switch (e) {
                case h.PlayerColors.Black:
                    return n[s + "black"].texture;
                case h.PlayerColors.Blue:
                    return n[s + "blue"].texture;
                case h.PlayerColors.Bronze:
                    return n[s + "bronze"].texture;
                case h.PlayerColors.Gold:
                    return n[s + "gold"].texture;
                case h.PlayerColors.Green:
                    return n[s + "green"].texture;
                case h.PlayerColors.MysticBlue:
                    return n[s + "mysticblue"].texture;
                case h.PlayerColors.Orange:
                    return n[s + "orange"].texture;
                case h.PlayerColors.Purple:
                    return n[s + "purple"].texture;
                case h.PlayerColors.Red:
                    return n[s + "red"].texture;
                case h.PlayerColors.Silver:
                    return n[s + "silver"].texture;
                case h.PlayerColors.White:
                    return n[s + "white"].texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getKnightForPlayer", [e]), n.knight_level1_inactive_green.texture
        }
        e.loadImages = function() {
            for (const e of (0, c.getAllImages)()) i.Loader.shared.add(e.name, s.UIGameConstants.getImagePath(e.name + e.extension), {
                crossOrigin: !0
            });
            i.Loader.shared.on("progress", p).load(m)
        }, e.continueAfterAssetsLoad = function(e, i = (() => {})) {
            a ? e() : (null == t || t.isRemoved()) && (t = new l.ViewPopupLoading(e, i), t.show())
        }, e.getProbabilityImage = function(e) {
            switch (e) {
                case 2:
                    return i.Loader.shared.resources.prob_2.texture;
                case 3:
                    return i.Loader.shared.resources.prob_3.texture;
                case 4:
                    return i.Loader.shared.resources.prob_4.texture;
                case 5:
                    return i.Loader.shared.resources.prob_5.texture;
                case 6:
                    return i.Loader.shared.resources.prob_6.texture;
                case 8:
                    return i.Loader.shared.resources.prob_8.texture;
                case 9:
                    return i.Loader.shared.resources.prob_9.texture;
                case 10:
                    return i.Loader.shared.resources.prob_10.texture;
                case 11:
                    return i.Loader.shared.resources.prob_11.texture;
                case 12:
                    return i.Loader.shared.resources.prob_12.texture
            }
        }, e.getHexImage = function(e) {
            switch (e) {
                case o.TileEnums.TileTypes.Lumber:
                    return i.Loader.shared.resources.tile_lumber.texture;
                case o.TileEnums.TileTypes.Brick:
                    return i.Loader.shared.resources.tile_brick.texture;
                case o.TileEnums.TileTypes.Wool:
                    return i.Loader.shared.resources.tile_wool.texture;
                case o.TileEnums.TileTypes.Desert:
                    return i.Loader.shared.resources.tile_desert.texture;
                case o.TileEnums.TileTypes.Grain:
                    return i.Loader.shared.resources.tile_grain.texture;
                case o.TileEnums.TileTypes.Ore:
                    return i.Loader.shared.resources.tile_ore.texture;
                case o.TileEnums.TileTypes.Gold:
                    return i.Loader.shared.resources.tile_gold.texture;
                case o.TileEnums.TileTypes.Fog:
                    return i.Loader.shared.resources.tile_fog.texture;
                case o.TileEnums.TileTypes.Sea:
                    return i.Loader.shared.resources.tile_sea.texture
            }
        }, e.getCornerImage = function(e) {
            switch (e.buildingType) {
                case o.TileEnums.CornerBuildingTypes.Settlement:
                    return C(e.owner);
                case o.TileEnums.CornerBuildingTypes.City:
                    return y(e.owner);
                case o.TileEnums.CornerBuildingTypes.DestroyedCity:
                    return S(e.owner);
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel1:
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel2:
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel3:
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel1:
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel2:
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel3:
                    return v(e.owner, e.buildingType);
                case o.TileEnums.CornerBuildingTypes.Empty:
                    return
            }
        }, e.getPortImage = function(e) {
            switch (e) {
                case o.TileEnums.CornerPortTypes.Empty:
                    return;
                case o.TileEnums.CornerPortTypes.Port:
                    return i.Loader.shared.resources.port.texture;
                case o.TileEnums.CornerPortTypes.PortLumber:
                    return i.Loader.shared.resources.port_lumber.texture;
                case o.TileEnums.CornerPortTypes.PortBrick:
                    return i.Loader.shared.resources.port_brick.texture;
                case o.TileEnums.CornerPortTypes.PortWool:
                    return i.Loader.shared.resources.port_wool.texture;
                case o.TileEnums.CornerPortTypes.PortGrain:
                    return i.Loader.shared.resources.port_grain.texture;
                case o.TileEnums.CornerPortTypes.PortOre:
                    return i.Loader.shared.resources.port_ore.texture
            }
        }, e.getSettlementForPlayer = C, e.getCityForPlayer = y, e.getDestroyedCityForPlayer = S, e.getCityWallForPlayer = function(e) {
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.city_wall_blue.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.city_wall_red.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.city_wall_orange.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.city_wall_green.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.city_wall_bronze.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.city_wall_silver.texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.city_wall_gold.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.city_wall_black.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.city_wall_purple.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.city_wall_mysticblue.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.city_wall_white.texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getCityWallForPlayer", [e]), i.Loader.shared.resources.city_wall_green.texture
        }, e.getRoadForPlayer = function(e) {
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.road_blue.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.road_red.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.road_orange.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.road_green.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.road_bronze.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.road_silver.texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.road_gold.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.road_black.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.road_purple.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.road_mysticblue.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.road_white.texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getRoadForPlayer", [e]), i.Loader.shared.resources.road_green.texture
        }, e.getShipForPlayer = function(e, t) {
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources["ship_blue_" + u[t]].texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources["ship_red_" + u[t]].texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources["ship_orange_" + u[t]].texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources["ship_green_" + u[t]].texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources["ship_bronze_" + u[t]].texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources["ship_silver_" + u[t]].texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources["ship_gold_" + u[t]].texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources["ship_black_" + u[t]].texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources["ship_purple_" + u[t]].texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources["ship_mysticblue_" + u[t]].texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources["ship_white_" + u[t]].texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getShipForPlayer", [e]), i.Loader.shared.resources["ship_green_" + u[t]].texture
        }, e.getKnightForPlayer = v, e.getMetropolisForCityImprovementType = function(e) {
            switch (e) {
                case g.CityImprovementTypes.Politics:
                    return i.Loader.shared.resources.metropolis_politics.texture;
                case g.CityImprovementTypes.Trade:
                    return i.Loader.shared.resources.metropolis_trade.texture;
                case g.CityImprovementTypes.Science:
                    return i.Loader.shared.resources.metropolis_science.texture
            }
        }, e.getMetropolisForCornerBonusType = function(e) {
            switch (e) {
                case o.TileEnums.CornerBonusTypes.MetropolisPolitics:
                    return i.Loader.shared.resources.metropolis_politics.texture;
                case o.TileEnums.CornerBonusTypes.MetropolisTrade:
                    return i.Loader.shared.resources.metropolis_trade.texture;
                case o.TileEnums.CornerBonusTypes.MetropolisScience:
                    return i.Loader.shared.resources.metropolis_science.texture;
                default:
                    return (0, r.logError)("getMetropolisForCornerBonusType", []), i.Loader.shared.resources.metropolis_science.texture
            }
        }, e.textureIsDevelopmentCard = function(e) {
            return e == i.Loader.shared.resources.card_devcardback.texture || (e == i.Loader.shared.resources.card_roadbuilding.texture || (e == i.Loader.shared.resources.card_monopoly.texture || (e == i.Loader.shared.resources.card_yearofplenty.texture || (e == i.Loader.shared.resources.card_knight.texture || e == i.Loader.shared.resources.card_vp.texture))))
        }, e.getDiceImage = function(e, t) {
            const a = t ? "_red" : "";
            switch (e) {
                case 1:
                    return i.Loader.shared.resources[`dice${a}_1`].texture;
                case 2:
                    return i.Loader.shared.resources[`dice${a}_2`].texture;
                case 3:
                    return i.Loader.shared.resources[`dice${a}_3`].texture;
                case 4:
                    return i.Loader.shared.resources[`dice${a}_4`].texture;
                case 5:
                    return i.Loader.shared.resources[`dice${a}_5`].texture;
                case 6:
                    return i.Loader.shared.resources[`dice${a}_6`].texture
            }
            return (0, r.logError)("getDiceImage", [e]), i.Loader.shared.resources[`dice${a}_1`].texture
        }, e.getEventDiceBackground = function(e) {
            switch (e) {
                case 1:
                case 2:
                case 3:
                    return i.Loader.shared.resources.dice.texture;
                case n.EventDiceEnum.Science:
                    return i.Loader.shared.resources.dice_background_science.texture;
                case n.EventDiceEnum.Trade:
                    return i.Loader.shared.resources.dice_background_trade.texture;
                case n.EventDiceEnum.Politics:
                    return i.Loader.shared.resources.dice_background_politics.texture
            }
            return (0, r.logError)("getEventDiceBackground", [e]), i.Loader.shared.resources.dice.texture
        }, e.getEventDiceIcon = function(e) {
            switch (e) {
                case 1:
                case 2:
                case 3:
                    return i.Loader.shared.resources.icon_barbarian_ship.texture;
                case n.EventDiceEnum.Science:
                case n.EventDiceEnum.Trade:
                case n.EventDiceEnum.Politics:
                    return i.Loader.shared.resources.castle_roof.texture
            }
            return (0, r.logError)("getEventDiceIcon", [e]), i.Loader.shared.resources.icon_barbarian_ship.texture
        }, e.getBannerForPlayer = function(e) {
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.banner_blue.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.banner_red.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.banner_orange.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.banner_green.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.banner_bronze.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.banner_silver.texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.banner_gold.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.banner_black.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.banner_purple.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.banner_mysticblue.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.banner_white.texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getBannerForPlayer", [e]), i.Loader.shared.resources.banner_green.texture
        }, e.getButtonBadgeForPlayer = function(e) {
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.button_badge_background_blue.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.button_badge_background_red.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.button_badge_background_orange.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.button_badge_background_green.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.button_badge_background_bronze.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.button_badge_background_silver.texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.button_badge_background_gold.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.button_badge_background_black.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.button_badge_background_purple.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.button_badge_background_mysticblue.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.button_badge_background_white.texture;
                case h.PlayerColors.None:
            }
            return (0, r.logError)("getBannerForPlayer", [e]), i.Loader.shared.resources.banner_green.texture
        }, e.getPlayerIcon = function(e) {
            switch (e) {
                case d.LobbyImage.User:
                    return i.Loader.shared.resources.icon_player_loggedin.texture;
                case d.LobbyImage.Bot:
                    return i.Loader.shared.resources.icon_bot.texture;
                case d.LobbyImage.Guest:
                    return i.Loader.shared.resources.icon_player.texture;
                case d.LobbyImage.IconSettlerHat:
                    return i.Loader.shared.resources.icon_settler.texture;
                case d.LobbyImage.IconColonistHat:
                    return i.Loader.shared.resources.icon_colonist.texture;
                case d.LobbyImage.IconFounderHat:
                    return i.Loader.shared.resources.icon_founder.texture;
                case d.LobbyImage.IconChristmasHat:
                    return i.Loader.shared.resources.icon_christmas_hat.texture;
                case d.LobbyImage.IconRobberSanta:
                    return i.Loader.shared.resources.icon_robber_santa.texture;
                case d.LobbyImage.IconPirateShip:
                    return i.Loader.shared.resources.icon_pirate_ship.texture;
                case d.LobbyImage.IconMedalGold:
                    return i.Loader.shared.resources.medal_gold.texture;
                case d.LobbyImage.IconMedalSilver:
                    return i.Loader.shared.resources.medal_silver.texture;
                case d.LobbyImage.IconMedalBronze:
                    return i.Loader.shared.resources.medal_bronze.texture;
                case d.LobbyImage.IconElephant:
                    return i.Loader.shared.resources.icon_elephant.texture;
                case d.LobbyImage.IconSombrero:
                    return i.Loader.shared.resources.icon_sombrero.texture;
                case d.LobbyImage.IconFarmer:
                    return i.Loader.shared.resources.icon_farmer.texture;
                case d.LobbyImage.IconAvocado:
                    return i.Loader.shared.resources.icon_avocado.texture;
                case d.LobbyImage.IconCactus:
                    return i.Loader.shared.resources.icon_cactus.texture;
                case d.LobbyImage.IconCrown:
                    return i.Loader.shared.resources.icon_crown.texture;
                case d.LobbyImage.IconSwords:
                    return i.Loader.shared.resources.icon_swords.texture;
                case d.LobbyImage.IconHelmet:
                    return i.Loader.shared.resources.icon_helmet.texture;
                case d.LobbyImage.IconSnorkel:
                    return i.Loader.shared.resources.icon_snorkel.texture;
                case d.LobbyImage.IconScarf:
                    return i.Loader.shared.resources.icon_scarf.texture;
                case d.LobbyImage.IconTie:
                    return i.Loader.shared.resources.icon_tie.texture;
                case d.LobbyImage.IconWorker:
                    return i.Loader.shared.resources.icon_worker.texture;
                default:
                    return (0, r.logError)("getPlayerIconn", [e]), i.Loader.shared.resources.icon_player.texture
            }
        }, e.getMedal = function(e) {
            switch (e) {
                case 0:
                    return i.Loader.shared.resources.medal_gold.texture;
                case 1:
                    return i.Loader.shared.resources.medal_silver.texture;
                case 2:
                    return i.Loader.shared.resources.medal_bronze.texture
            }
        }, e.getPlayerBg = function(e) {
            switch (e) {
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.player_bg_gold.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.player_bg_silver.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.player_bg_bronze.texture;
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.player_bg_blue.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.player_bg_green.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.player_bg_orange.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.player_bg_red.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.player_bg_black.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.player_bg_mysticblue.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.player_bg_purple.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.player_bg_white.texture;
                case h.PlayerColors.None:
                    return i.Loader.shared.resources.player_bg_red.texture
            }
        }
    }(t.GameUIImages || (t.GameUIImages = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.KatanConfigs = void 0;
    const i = a(45),
        o = a(51);
    class n {
        static appEnvironment() {
            return "production"
        }
        static appEnvironmentIsProduction() {
            return "production" === n.appEnvironment()
        }
        static appEnvironmentIsStaging() {
            return "staging" === n.appEnvironment()
        }
        static appEnvironmentIsDevelopment() {
            return "development" === n.appEnvironment()
        }
        static versionString() {
            return "v" + n.VERSION_NUMBER
        }
        static getServerType() {
            return i.ServerTypes.Static
        }
        static siteURL() {
            return "https://colonist.io/"
        }
        static socketURL() {
            return "wss://socket.colonist.io/"
        }
        static matchmakingURL() {
            return "wss://matchmaking.colonist.io/"
        }
        static indicativePublicKey() {
            return "6c6fed44-919c-432e-af43-659159a6fb82"
        }
        static publicStripeKey() {
            return "pk_live_Y3bLAADDblv7VZ8RVzEiYk8o00tWoBQAlH"
        }
        static stripe0499PriceId() {
            return "price_1HS0EjCFAohqegr7I1Z5Tw7Z"
        }
        static stripe0999PriceId() {
            return "price_1HS0EjCFAohqegr7zEkuf2h5"
        }
        static stripe1999PriceId() {
            return "price_1HS0EjCFAohqegr7gx9S1uGo"
        }
        static stripe3499PriceId() {
            return "price_1HS0EjCFAohqegr7puLNd9gc"
        }
        static stripe4999PriceId() {
            return "price_1HS0EjCFAohqegr7PfESV7hR"
        }
        static stripe9999PriceId() {
            return "price_1HS0EjCFAohqegr71sW10lfJ"
        }
    }
    t.KatanConfigs = n, n.VERSION_NUMBER = 123.1, n.COLORED_LOGS = !1, n.CLIENT_ANALYTICS_ACTIVE = !0, n.SITE_NAME = "Colonist.io", n.EMAIL = "help@colonist.io", n.TUTORIAL_VIDEO = "https://www.youtube.com/embed/XUcO2wYcIEY", n.DISCORD_CHANNEL = o.KatanSettings.DISCORD_CHANNEL, n.PLACE_HOLDER_ENV_VARIABLE = "variable not set", n.KATAN_SETTINGS = new o.KatanSettings(n.socketURL())
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameFont = void 0;
    const i = a(19);
    ! function(e) {
        let t;
        ! function(e) {
            e[e.Small = 10] = "Small", e[e.Normal = 12] = "Normal", e[e.L = 14] = "L", e[e.XL = 16] = "XL", e[e.XXL = 26] = "XXL", e[e.Giant = 60] = "Giant"
        }(t = e.Size || (e.Size = {})), e.getResponsiveSize = function(e) {
            return e * i.uiGameManager.canvasController.appH / 700
        }
    }(t.GameFont || (t.GameFont = {}))
}, function(e, t, a) {
    "use strict";
    var i;
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.HexEdge = t.HexCorner = t.HexFace = t.Point = t.HexShapeEnums = void 0,
        function(e) {
            let t, a;
            ! function(e) {
                e[e.North = 0] = "North", e[e.South = 1] = "South"
            }(t = e.CornerVariables || (e.CornerVariables = {})),
            function(e) {
                e[e.NorthWest = 0] = "NorthWest", e[e.West = 1] = "West", e[e.SouthWest = 2] = "SouthWest"
            }(a = e.EdgeVariables || (e.EdgeVariables = {}))
        }(i = t.HexShapeEnums || (t.HexShapeEnums = {}));
    class o {
        constructor(e, t) {
            this.x = e, this.y = t
        }
    }
    t.Point = o;
    class n {
        constructor(e, t) {
            this.x = e, this.y = t
        }
        neighbors() {
            const e = [];
            return e.push(new n(this.x + 1, this.y - 1)), e.push(new n(this.x + 1, this.y)), e.push(new n(this.x, this.y + 1)), e.push(new n(this.x - 1, this.y + 1)), e.push(new n(this.x - 1, this.y)), e.push(new n(this.x, this.y - 1)), e
        }
        corners() {
            const e = [];
            return e.push(new r(this.x, this.y, i.CornerVariables.North)), e.push(new r(this.x + 1, this.y - 1, i.CornerVariables.South)), e.push(new r(this.x, this.y + 1, i.CornerVariables.North)), e.push(new r(this.x, this.y, i.CornerVariables.South)), e.push(new r(this.x - 1, this.y + 1, i.CornerVariables.North)), e.push(new r(this.x, this.y - 1, i.CornerVariables.South)), e
        }
        edges() {
            const e = [];
            return e.push(new s(this.x + 1, this.y - 1, i.EdgeVariables.SouthWest)), e.push(new s(this.x + 1, this.y, i.EdgeVariables.West)), e.push(new s(this.x, this.y + 1, i.EdgeVariables.NorthWest)), e.push(new s(this.x, this.y, i.EdgeVariables.SouthWest)), e.push(new s(this.x, this.y, i.EdgeVariables.West)), e.push(new s(this.x, this.y, i.EdgeVariables.NorthWest)), e
        }
        sameFace(e) {
            return this.x == e.x && this.y == e.y
        }
        toPixel(e, t) {
            const a = t * Math.sqrt(3) * (this.x + this.y / 2) + e.x,
                i = 3 * t / 2 * this.y + e.y;
            return new o(a, i)
        }
    }
    t.HexFace = n;
    class r {
        constructor(e, t, a) {
            this.x = e, this.y = t, this.z = a
        }
        toPixel(e, t) {
            const a = new n(this.x, this.y).toPixel(e, t);
            switch (this.z) {
                case i.CornerVariables.North:
                    return new o(a.x, a.y - t);
                case i.CornerVariables.South:
                    return new o(a.x, a.y + t)
            }
        }
        touchingFaces() {
            const e = [];
            switch (this.z) {
                case i.CornerVariables.North:
                    e.push(new n(this.x + 1, this.y - 1)), e.push(new n(this.x, this.y)), e.push(new n(this.x, this.y - 1));
                    break;
                case i.CornerVariables.South:
                    e.push(new n(this.x, this.y)), e.push(new n(this.x, this.y + 1)), e.push(new n(this.x - 1, this.y + 1))
            }
            return e
        }
        touchingEdges() {
            const e = [];
            switch (this.z) {
                case i.CornerVariables.North:
                    e.push(new s(this.x + 1, this.y - 1, i.EdgeVariables.West)), e.push(new s(this.x + 1, this.y - 1, i.EdgeVariables.SouthWest)), e.push(new s(this.x, this.y, i.EdgeVariables.NorthWest));
                    break;
                case i.CornerVariables.South:
                    e.push(new s(this.x, this.y + 1, i.EdgeVariables.NorthWest)), e.push(new s(this.x, this.y + 1, i.EdgeVariables.West)), e.push(new s(this.x, this.y, i.EdgeVariables.SouthWest))
            }
            return e
        }
        adjacentCorners() {
            const e = [];
            switch (this.z) {
                case i.CornerVariables.North:
                    e.push(new r(this.x + 1, this.y - 2, i.CornerVariables.South)), e.push(new r(this.x + 1, this.y - 1, i.CornerVariables.South)), e.push(new r(this.x, this.y - 1, i.CornerVariables.South));
                    break;
                case i.CornerVariables.South:
                    e.push(new r(this.x, this.y + 1, i.CornerVariables.North)), e.push(new r(this.x - 1, this.y + 2, i.CornerVariables.North)), e.push(new r(this.x - 1, this.y + 1, i.CornerVariables.North))
            }
            return e
        }
        sameCorner(e) {
            return this.x == e.x && (this.y == e.y && this.z == e.z)
        }
    }
    t.HexCorner = r;
    class s {
        constructor(e, t, a) {
            this.x = e, this.y = t, this.z = a
        }
        endPoints() {
            const e = [];
            switch (this.z) {
                case i.EdgeVariables.NorthWest:
                    e.push(new r(this.x, this.y - 1, i.CornerVariables.South)), e.push(new r(this.x, this.y, i.CornerVariables.North));
                    break;
                case i.EdgeVariables.West:
                    e.push(new r(this.x - 1, this.y + 1, i.CornerVariables.North)), e.push(new r(this.x, this.y - 1, i.CornerVariables.South));
                    break;
                case i.EdgeVariables.SouthWest:
                    e.push(new r(this.x, this.y, i.CornerVariables.South)), e.push(new r(this.x - 1, this.y + 1, i.CornerVariables.North))
            }
            return e
        }
        centerPointToPixel(e, t) {
            const a = new n(this.x, this.y).toPixel(e, t),
                r = t / 2 * Math.sqrt(3),
                s = 3 * t / 4;
            switch (this.z) {
                case i.EdgeVariables.NorthWest:
                    return new o(a.x - r / 2, a.y - s);
                case i.EdgeVariables.SouthWest:
                    return new o(a.x - r / 2, a.y + s);
                case i.EdgeVariables.West:
                    return new o(a.x - r, a.y)
            }
        }
        touchingFaces() {
            const e = [];
            switch (e.push(new n(this.x, this.y)), this.z) {
                case i.EdgeVariables.NorthWest:
                    e.push(new n(this.x, this.y - 1));
                    break;
                case i.EdgeVariables.West:
                    e.push(new n(this.x - 1, this.y));
                    break;
                case i.EdgeVariables.SouthWest:
                    e.push(new n(this.x - 1, this.y + 1))
            }
            return e
        }
        sameEdge(e) {
            return this.x == e.x && (this.y == e.y && this.z == e.z)
        }
    }
    t.HexEdge = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SectionView = void 0;
    const i = a(19),
        o = a(6),
        n = a(119);
    class r extends o.Container {
        constructor(e, t, a, i, o, r = !1) {
            super();
            const s = r ? 0 : n.UICanvasConfig.margin;
            this.x = e + s, this.y = t + s;
            const c = a - 2 * s,
                l = i - 2 * s;
            this.drawInitial(c, l), null != o && o.addChild(this)
        }
        drawInitial(e, t) {
            this.bg = new o.Graphics, this.bg.drawRoundedRect(0, 0, e, t, 5), this.addChild(this.bg)
        }
        setTip(e, t) {
            i.uiGameManager.toolTipController.createTip(e, t, this)
        }
    }
    t.SectionView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameColor = void 0;
    const i = a(20);
    ! function(e) {
        let t;

        function a(e) {
            switch (e) {
                case t.Primary0:
                    return "#328DC0";
                case t.Primary1:
                    return "#c2e6f2";
                case t.Primary2:
                    return "#5cc3e5";
                case t.Primary3:
                    return "#2a748c";
                case t.Primary4:
                    return "#263940";
                case t.Gray0:
                    return "#323232";
                case t.Gray1:
                    return "#666666";
                case t.Gray2:
                    return "#cccccc";
                case t.Gray3:
                    return "#f8f8f8";
                case t.Gray4:
                    return "#FFFFFF";
                case t.PlayerBlueBgDark:
                    return "#223697";
                case t.PlayerRedBgDark:
                    return "#E27174";
                case t.PlayerGreenBgDark:
                    return "#62B95D";
                case t.PlayerOrangeBgDark:
                    return "#E09742";
                case t.PlayerBlackBgDark:
                    return "#3e3e3e";
                case t.PlayerBronzeBgDark:
                    return "#a86755";
                case t.PlayerSilverBgDark:
                    return "#848484";
                case t.PlayerGoldBgDark:
                    return "#c7ae61";
                case t.PlayerPurpleDark:
                    return "#9D55AF";
                case t.PlayerMyscticBlueDark:
                    return "#256CA7";
                case t.PlayerWhiteDark:
                    return "#9E9E9E";
                case t.Primary0Complementary:
                    return "#FF8300";
                case t.Primary1Complementary:
                    return "#FFE5CA";
                case t.Primary2Complementary:
                    return "#FFB261";
                case t.GreenLight:
                    return "#DAFFD8";
                case t.GreenDark:
                    return "#0bb000";
                case t.RedLight:
                    return "#FFD8D9";
                case t.RedDark:
                    return "#c00006";
                case t.DarkGrey:
                    return "#46616E";
                case t.OffWhite:
                    return "#fffde1";
                case t.Sea:
                    return "#0967A6";
                case t.GrayScale0:
                    return "#000000";
                case t.GrayScale1:
                    return "#0A0A0A";
                case t.GrayScale2:
                    return "#141414";
                case t.GrayScale3:
                    return "#1F1F1F";
                case t.GrayScale4:
                    return "#292929";
                case t.GrayScale5:
                    return "#333333";
                case t.GrayScale6:
                    return "#3D3D3D";
                case t.GrayScale7:
                    return "#474747";
                case t.GrayScale8:
                    return "#525252";
                case t.GrayScale9:
                    return "#5C5C5C";
                case t.GrayScale10:
                    return "#666666";
                case t.GrayScale11:
                    return "#707070";
                case t.GrayScale12:
                    return "#7A7A7A";
                case t.GrayScale13:
                    return "#858585";
                case t.GrayScale14:
                    return "#8F8F8F";
                case t.GrayScale15:
                    return "#999999";
                case t.GrayScale16:
                    return "#A3A3A3";
                case t.GrayScale17:
                    return "#ADADAD";
                case t.GrayScale18:
                    return "#B8B8B8";
                case t.GrayScale19:
                    return "#C2C2C2";
                case t.GrayScale20:
                    return "#CCCCCC";
                case t.GrayScale21:
                    return "#D6D6D6";
                case t.GrayScale22:
                    return "#E0E0E0";
                case t.GrayScale23:
                    return "#EBEBEB";
                case t.GrayScale24:
                    return "#F5F5F5";
                case t.GrayScale25:
                    return "#FFFFFF";
                case t.CardViewFadedTint:
                    return "#ADADAD"
            }
        }! function(e) {
            e[e.Primary0 = 0] = "Primary0", e[e.Primary1 = 1] = "Primary1", e[e.Primary2 = 2] = "Primary2", e[e.Primary3 = 3] = "Primary3", e[e.Primary4 = 4] = "Primary4", e[e.Gray0 = 5] = "Gray0", e[e.Gray1 = 6] = "Gray1", e[e.Gray2 = 7] = "Gray2", e[e.Gray3 = 8] = "Gray3", e[e.Gray4 = 9] = "Gray4", e[e.PlayerRedBgDark = 10] = "PlayerRedBgDark", e[e.PlayerBlueBgDark = 11] = "PlayerBlueBgDark", e[e.PlayerGreenBgDark = 12] = "PlayerGreenBgDark", e[e.PlayerOrangeBgDark = 13] = "PlayerOrangeBgDark", e[e.PlayerBlackBgDark = 14] = "PlayerBlackBgDark", e[e.PlayerBronzeBgDark = 15] = "PlayerBronzeBgDark", e[e.PlayerSilverBgDark = 16] = "PlayerSilverBgDark", e[e.PlayerGoldBgDark = 17] = "PlayerGoldBgDark", e[e.PlayerWhiteDark = 18] = "PlayerWhiteDark", e[e.PlayerPurpleDark = 19] = "PlayerPurpleDark", e[e.PlayerMyscticBlueDark = 20] = "PlayerMyscticBlueDark", e[e.Primary0Complementary = 21] = "Primary0Complementary", e[e.Primary1Complementary = 22] = "Primary1Complementary", e[e.Primary2Complementary = 23] = "Primary2Complementary", e[e.GreenLight = 24] = "GreenLight", e[e.GreenDark = 25] = "GreenDark", e[e.RedLight = 26] = "RedLight", e[e.RedDark = 27] = "RedDark", e[e.Sea = 28] = "Sea", e[e.DarkGrey = 29] = "DarkGrey", e[e.OffWhite = 30] = "OffWhite", e[e.GrayScale0 = 31] = "GrayScale0", e[e.GrayScale1 = 32] = "GrayScale1", e[e.GrayScale2 = 33] = "GrayScale2", e[e.GrayScale3 = 34] = "GrayScale3", e[e.GrayScale4 = 35] = "GrayScale4", e[e.GrayScale5 = 36] = "GrayScale5", e[e.GrayScale6 = 37] = "GrayScale6", e[e.GrayScale7 = 38] = "GrayScale7", e[e.GrayScale8 = 39] = "GrayScale8", e[e.GrayScale9 = 40] = "GrayScale9", e[e.GrayScale10 = 41] = "GrayScale10", e[e.GrayScale11 = 42] = "GrayScale11", e[e.GrayScale12 = 43] = "GrayScale12", e[e.GrayScale13 = 44] = "GrayScale13", e[e.GrayScale14 = 45] = "GrayScale14", e[e.GrayScale15 = 46] = "GrayScale15", e[e.GrayScale16 = 47] = "GrayScale16", e[e.GrayScale17 = 48] = "GrayScale17", e[e.GrayScale18 = 49] = "GrayScale18", e[e.GrayScale19 = 50] = "GrayScale19", e[e.GrayScale20 = 51] = "GrayScale20", e[e.GrayScale21 = 52] = "GrayScale21", e[e.GrayScale22 = 53] = "GrayScale22", e[e.GrayScale23 = 54] = "GrayScale23", e[e.GrayScale24 = 55] = "GrayScale24", e[e.GrayScale25 = 56] = "GrayScale25", e[e.CardViewFadedTint = 57] = "CardViewFadedTint"
        }(t = e.Color || (e.Color = {})), e.getColor = a, e.getColorHexValue = function(e) {
            const t = a(e);
            return parseInt(t.slice(1), 16)
        }, e.getPlayerBGDarkHash = function(e) {
            switch (e) {
                case i.PlayerColors.Blue:
                    return a(t.PlayerBlueBgDark);
                case i.PlayerColors.Red:
                    return a(t.PlayerRedBgDark);
                case i.PlayerColors.Orange:
                    return a(t.PlayerOrangeBgDark);
                case i.PlayerColors.Green:
                    return a(t.PlayerGreenBgDark);
                case i.PlayerColors.Black:
                    return a(t.PlayerBlackBgDark);
                case i.PlayerColors.Bronze:
                    return a(t.PlayerBronzeBgDark);
                case i.PlayerColors.Silver:
                    return a(t.PlayerSilverBgDark);
                case i.PlayerColors.Gold:
                    return a(t.PlayerGoldBgDark);
                case i.PlayerColors.MysticBlue:
                    return a(t.PlayerMyscticBlueDark);
                case i.PlayerColors.White:
                    return a(t.PlayerWhiteDark);
                case i.PlayerColors.Purple:
                    return a(t.PlayerPurpleDark);
                case i.PlayerColors.None:
                    return a(t.Gray4)
            }
        }
    }(t.GameColor || (t.GameColor = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Transform = void 0;
    const i = a(8);
    class o extends i.Transform {
        constructor() {
            super(), this.dirty = !0
        }
        onChange() {
            super.onChange(), this.dirty = !0
        }
        updateSkew() {
            super.updateSkew(), this.dirty = !0
        }
    }
    t.Transform = o
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.usernameClickAction = t.drawPixiCircle = t.removePixiObject = t.logError = t.isElement = t.isCloseTo = t.INACTIVE_OPACITY = t.ACTIVE_OPACITY = void 0;
    const i = a(6),
        o = a(24),
        n = a(33),
        r = a(40);
    var s = a(3).PlayerEnums.PlayerConstants;
    t.ACTIVE_OPACITY = 1, t.INACTIVE_OPACITY = .3, t.isCloseTo = function(e, t, a) {
        return e + a > t && e - a < t
    }, t.isElement = function(e) {
        return "object" == typeof HTMLElement ? e instanceof HTMLElement : null != e && "object" == typeof e && null !== e && 1 === e.nodeType && "string" == typeof e.nodeName
    }, t.logError = function(e, t) {
        const a = "Something went wrong, please contact admins at " + o.KatanConfigs.EMAIL + "  with copying this log and explaining what actions you took right before this error.";
        console.log(a), console.log(e);
        for (const e of t) console.log(e)
    }, t.removePixiObject = function(e) {
        var t;
        null === (t = null == e ? void 0 : e.parent) || void 0 === t || t.removeChild(e)
    }, t.drawPixiCircle = function(e, t, a, o) {
        const n = new i.Graphics;
        return n.beginFill(o), n.drawCircle(e, t, a), n.endFill(), n
    }, t.usernameClickAction = function(e) {
        n.UIPopupController.createInputPopup("Change Username", "Change your username to: ", e => {
            r.SocketLobbySend.updateNickName(e)
        }, s.MIN_USERNAME_LENGTH, s.MAX_USERNAME_LENGTH, e)
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.StorePlayerColor = t.StoreIconType = t.StoreMapType = t.StoreExpansionType = t.StorePresalePackType = t.StoreItemCategory = t.StoreTransactionType = void 0,
        function(e) {
            e[e.BoughtFromPackPresale = 0] = "BoughtFromPackPresale", e[e.GiftFromAdmin = 1] = "GiftFromAdmin", e[e.DeletedByManager = 2] = "DeletedByManager", e[e.PurchasedCoinFromStripe = 3] = "PurchasedCoinFromStripe", e[e.RefundedCoinToStripe = 4] = "RefundedCoinToStripe", e[e.PurchasedItemFromStore = 5] = "PurchasedItemFromStore", e[e.RefundedItemToStore = 6] = "RefundedItemToStore", e[e.EarnedFromAchievement = 7] = "EarnedFromAchievement", e[e.EarnedFromTournament = 8] = "EarnedFromTournament"
        }(t.StoreTransactionType || (t.StoreTransactionType = {})),
        function(e) {
            e[e.PresalePack = 0] = "PresalePack", e[e.Expansion = 1] = "Expansion", e[e.Map = 2] = "Map", e[e.Icon = 3] = "Icon", e[e.Color = 4] = "Color"
        }(t.StoreItemCategory || (t.StoreItemCategory = {})),
        function(e) {
            e[e.SettlerPack = 0] = "SettlerPack", e[e.ColonistPack = 1] = "ColonistPack", e[e.FounderPack = 2] = "FounderPack"
        }(t.StorePresalePackType || (t.StorePresalePackType = {})),
        function(e) {
            e[e.Seafarers4P = 0] = "Seafarers4P", e[e.CitiesAndKnights4P = 1] = "CitiesAndKnights4P", e[e.TradersAndBarbarians = 2] = "TradersAndBarbarians", e[e.ExplorersAndPirates = 3] = "ExplorersAndPirates", e[e.Classic56P = 4] = "Classic56P", e[e.Classic78P = 5] = "Classic78P", e[e.Seafarers56P = 6] = "Seafarers56P", e[e.CitiesAndKnights56P = 7] = "CitiesAndKnights56P", e[e.CitiesAndKnightsSeafarers4P = 8] = "CitiesAndKnightsSeafarers4P", e[e.CitiesAndKnightsSeafarers56P = 9] = "CitiesAndKnightsSeafarers56P"
        }(t.StoreExpansionType || (t.StoreExpansionType = {})),
        function(e) {
            e[e.Earth = 0] = "Earth", e[e.USA = 1] = "USA", e[e.UK = 2] = "UK", e[e.Diamond = 3] = "Diamond", e[e.Gear = 4] = "Gear", e[e.Lakes = 5] = "Lakes", e[e.Pond = 6] = "Pond", e[e.Twirl = 7] = "Twirl", e[e.Classic4PRandom = 8] = "Classic4PRandom", e[e.ShuffleBoard = 9] = "ShuffleBoard", e[e.BlackForest = 10] = "BlackForest", e[e.Volcano = 11] = "Volcano"
        }(t.StoreMapType || (t.StoreMapType = {})),
        function(e) {
            e[e.FounderHat = 0] = "FounderHat", e[e.ColonistHat = 1] = "ColonistHat", e[e.SettlerHat = 2] = "SettlerHat", e[e.ChristmasHat = 3] = "ChristmasHat", e[e.Player = 4] = "Player", e[e.PirateShip = 5] = "PirateShip", e[e.MedalGold = 6] = "MedalGold", e[e.MedalSilver = 7] = "MedalSilver", e[e.MedalBronze = 8] = "MedalBronze", e[e.Elephant = 9] = "Elephant", e[e.Avocado = 10] = "Avocado", e[e.Cactus = 11] = "Cactus", e[e.Crown = 12] = "Crown", e[e.Swords = 13] = "Swords", e[e.Helmet = 14] = "Helmet", e[e.Snorkel = 15] = "Snorkel", e[e.Scarf = 16] = "Scarf", e[e.Tie = 17] = "Tie", e[e.Worker = 18] = "Worker", e[e.Sombrero = 19] = "Sombrero", e[e.Farmer = 20] = "Farmer", e[e.RobberSanta = 21] = "RobberSanta"
        }(t.StoreIconType || (t.StoreIconType = {})),
        function(e) {
            e[e.Gold = 0] = "Gold", e[e.Silver = 1] = "Silver", e[e.Bronze = 2] = "Bronze", e[e.Black = 3] = "Black", e[e.Purple = 4] = "Purple", e[e.MysticBlue = 5] = "MysticBlue", e[e.White = 6] = "White"
        }(t.StorePlayerColor || (t.StorePlayerColor = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIPopupController = void 0;
    const i = a(36),
        o = a(87);
    t.UIPopupController = class {
        static createSimplePopup(e, t) {
            this.create(e, t, () => {}, () => {}, !0), this.popup.removeXButton()
        }
        static createLargePopup(e, t) {
            this.create(e, t, () => {}, () => {}, !0), this.popup.removeXButton(), this.popup.makeLarge()
        }
        static create(e, t, a, o, n = !0) {
            this.canShowNewPopup() && (this.popup = new i.ViewPopup(e, t, a, o, n), this.popup.show())
        }
        static createInputPopup(e, t, a, i, n, r) {
            const s = new o.ViewPopupInput(e, t, a, () => {}, !0);
            s.setLengthLimits(i, n), s.setDefaultValue(r), s.show()
        }
        static canShowNewPopup() {
            return null == this.popup || (!!this.popup.isRemoved() || (console.log("Tried to show another popup but failed"), !1))
        }
    }
}, function(e, t, a) {
    "use strict";
    var i;
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.RulebookDictionary = t.stringToLanguage = t.rulebookDefaultLanguage = t.RulebookLanguage = t.RULEBOOK_LANGUAGES = void 0, t.RULEBOOK_LANGUAGES = ["en", "es"],
        function(e) {
            e.English = "en", e.Spanish = "es"
        }(i = t.RulebookLanguage || (t.RulebookLanguage = {})), t.rulebookDefaultLanguage = i.English, t.stringToLanguage = function(e) {
            for (const t in i)
                if (i[t] == e) return i[t];
            return t.rulebookDefaultLanguage
        };
    class o {
        static getLanguage() {
            return this.currentLanguage
        }
        static setLanguage(e) {
            this.currentLanguage = e
        }
        static get(e, ...t) {
            return this.getPhrase(e, ...t)
        }
        static getPhrase(e, ...t) {
            const a = e.split("."),
                i = [this.languageData[this.currentLanguage]];
            for (let e = 0; e < a.length; e++) {
                const o = i[e][a[e]];
                if (null == o) return this.placeholder;
                if ("string" == typeof o && e < a.length - 1) return this.placeholder;
                if ("string" == typeof o) return this.embedInString(o, t);
                i.push(o)
            }
            return this.placeholder
        }
        static embedInString(e, t) {
            const a = e.split("{}");
            if (1 == a.length) return e;
            let i = "";
            for (let e = 0; e < a.length - 1; e++) {
                let o = t[e];
                null == o && (o = this.placeholderMissingArgument), i += a[e] + o
            }
            return i += a[a.length - 1], i
        }
    }
    t.RulebookDictionary = o, o.placeholder = "THIS PHRASE DOES NOT EXIST", o.placeholderMissingArgument = "PHRASE MISSING ARGUMENT", o.languageData = {
        [i.English]: a(132),
        [i.Spanish]: a(133)
    }, o.currentLanguage = t.rulebookDefaultLanguage
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIUtilsEjsVariables = void 0;
    class i {}
    t.UIUtilsEjsVariables = i, i.IS_PRODUCTION = isProduction, i.FREE_MAP = freeMap, i.SEND_PLAYER_TO_HEX = sendPlayerToHexs, i.SEND_PLAYER_TO_COLONIST = sendPlayerToColonist, i.DISCORD_CHANNEL_URL = discordChannelUrl, i.SOCKET_DEBUG_ACTIVE = socketDebugActive, i.SOCKET_URL = socketURL, i.MATCHMAKING_URL = matchmakingURL, i.colonistConAdActive = colonistConAdActive, i.SERVER_TYPE = serverType, i.PLAYER_LOGGEDIN = playerLoggedin
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewPopup = void 0;
    const i = a(10),
        o = a(37),
        n = a(15),
        r = a(11);
    t.ViewPopup = class {
        constructor(e, t, a, s, c) {
            if (this.removeAction = () => {}, this.container = (0, i.createDivIn)(document.body, "popup"), this.contentContainer = (0, i.createDivIn)(this.container, "popup-content"), this.header = (0, i.createDivIn)(this.contentContainer, "popup-header"), this.body = (0, i.createDivIn)(this.contentContainer, "popup-body"), this.footer = (0, i.createDivIn)(this.contentContainer, "popup-footer"), this.xButton = (0, i.createDivIn)(this.footer, "btn_general btn_general_x"), this.xButton.onclick = () => {
                    r.Sound.playSound(r.Sound.SoundType.Click), s(), this.removePopup()
                }, this.checkButton = (0, i.createDivIn)(this.footer, "btn_general btn_general_check"), this.checkButton.onclick = () => {
                    r.Sound.playSound(r.Sound.SoundType.Click), a(), this.removePopup()
                }, this.preventClicksOutsideOfPopupFromClosingPopup = !1, c) {
                o.LobbyImages.getLobbyImagePath(n.LobbyImage.XMark), o.LobbyImages.getLobbyImageAlt(n.LobbyImage.XMark);
                this.setCancel()
            }(0, i.createHeaderIn)(this.header, e, "", "", "H4"), (0, i.createParagraphIn)(this.body, t, "")
        }
        makeLarge() {
            this.body.className = "popup-body-large", this.contentContainer.className = "popup-content-large"
        }
        changeCheckButtonText(e) {
            this.checkButton.innerText = e, this.checkButton.className = "btn_general"
        }
        changeXButtonText(e) {
            this.xButton.innerText = e, this.xButton.className = "btn_general"
        }
        isRemoved() {
            return "none" == this.container.style.display
        }
        show() {
            this.container.style.display = "block"
        }
        removePopup() {
            this.removeAction(), this.container.style.display = "none", null != this.container.parentElement && this.container.parentElement.removeChild(this.container)
        }
        setCancel() {
            window.addEventListener("click", e => {
                if (e.target == this.container) {
                    if (this.preventClicksOutsideOfPopupFromClosingPopup) return;
                    this.removePopup()
                }
            })
        }
        removeCheckButton() {
            this.checkButton.style.display = "none"
        }
        removeXButton() {
            this.xButton.style.display = "none"
        }
        removeFooter() {
            this.footer.style.display = "none", this.body.style.border = "0px"
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.LobbyImages = void 0;
    const i = a(16),
        o = a(10),
        n = a(15);
    t.LobbyImages = class {
        static getImgPath(e) {
            switch (e) {
                case n.LobbyImage.Pencil:
                    return "icon_pencil.svg";
                case n.LobbyImage.Bot:
                    return "icon_bot.svg";
                case n.LobbyImage.CheckMark:
                    return "icon_check.svg";
                case n.LobbyImage.XMark:
                    return "icon_x.svg";
                case n.LobbyImage.Logo:
                    return "logo.png";
                case n.LobbyImage.Lightning:
                    return "icon_lightning.svg";
                case n.LobbyImage.Plus:
                    return "icon_plus.svg";
                case n.LobbyImage.Mail:
                    return "icon_mail.svg";
                case n.LobbyImage.Admin:
                    return "icon_admin.svg";
                case n.LobbyImage.Moderator:
                    return "moderator.svg";
                case n.LobbyImage.User:
                    return "icon_player_loggedin.svg";
                case n.LobbyImage.Guest:
                    return "icon_player.svg";
                case n.LobbyImage.QuestionMark:
                    return "icon_question_mark.svg";
                case n.LobbyImage.InfoIcon:
                    return "icon_info.svg";
                case n.LobbyImage.KarmaWhite:
                    return "karma_white.svg";
                case n.LobbyImage.KarmaRed:
                    return "karma_red.svg";
                case n.LobbyImage.KarmaOrange:
                    return "karma_orange.svg";
                case n.LobbyImage.KarmaGreen:
                    return "karma_green.svg";
                case n.LobbyImage.DisableAdBlock:
                    return "disable_abblock.png";
                case n.LobbyImage.ColonistCoin:
                    return "icon_colonist_coin.svg";
                case n.LobbyImage.MapDiamondPreview:
                    return "map_diamond_preview.png";
                case n.LobbyImage.MapIstanbulPreview:
                    return "map_istanbul_preview.png";
                case n.LobbyImage.MapLakesPreview:
                    return "map_lakes_preview.png";
                case n.LobbyImage.MapPondPreview:
                    return "map_pond_preview.png";
                case n.LobbyImage.MapGearPreview:
                    return "map_gear_preview.png";
                case n.LobbyImage.MapUSAPreview:
                    return "map_usa_preview.png";
                case n.LobbyImage.MapTwirlPreview:
                    return "map_twirl_preview.png";
                case n.LobbyImage.MapEarthPreview:
                    return "map_earth_preview.png";
                case n.LobbyImage.MapUKPreview:
                    return "map_uk_preview.png";
                case n.LobbyImage.MapShuffleBoardPreview:
                    return "map_shuffleboard_preview.png";
                case n.LobbyImage.MapPangaeaPreview:
                    return "map_pangaea_preview.png";
                case n.LobbyImage.MapSpinnerPreview:
                    return "map_spinner_preview.png";
                case n.LobbyImage.MapCyclopsPreview:
                    return "map_cyclops_preview.png";
                case n.LobbyImage.MapRandomBasePreview:
                    return "map_random_base_preview.png";
                case n.LobbyImage.MapRomaniaPreview:
                    return "map_romania_preview.png";
                case n.LobbyImage.MapHourglassPreview:
                    return "map_hourglass_preview.png";
                case n.LobbyImage.MapHourglassXLPreview:
                    return "map_hourglassxl_preview.png";
                case n.LobbyImage.MapSnowflakePreview:
                    return "map_snowflake_preview.png";
                case n.LobbyImage.MapMiniBasePreview:
                    return "map_mini_base_preview.png";
                case n.LobbyImage.MapAustraliaPreview:
                    return "map_australia_preview.png";
                case n.LobbyImage.MapCirclePreview:
                    return "map_circle_preview.png";
                case n.LobbyImage.MapDuelPreview:
                    return "map_duel_preview.png";
                case n.LobbyImage.MapMonopolyPreview:
                    return "map_monopoly_preview.png";
                case n.LobbyImage.MapKingOfTheHillPreview:
                    return "map_king_of_the_hill_preview.png";
                case n.LobbyImage.MapEuropePreview:
                    return "map_europe_preview.png";
                case n.LobbyImage.MapMountainOfRichesPreview:
                    return "map_mountain_of_riches_preview.png";
                case n.LobbyImage.MapDoggoPreview:
                    return "map_doggo_preview.png";
                case n.LobbyImage.MapTradeIslandsPreview:
                    return "map_trade_islands_preview.png";
                case n.LobbyImage.MapTurningTidesPreview:
                    return "map_turning_tides_preview.png";
                case n.LobbyImage.MapBlackForestPreview:
                    return "map_blackforest_preview.png";
                case n.LobbyImage.MapVolcanoPreview:
                    return "map_volcano_preview.png";
                case n.LobbyImage.MapKitePreview:
                    return "map_kite_preview.png";
                case n.LobbyImage.MapVietnamPreview:
                    return "map_vietnam_preview.png";
                case n.LobbyImage.MapTwoIslesPreview:
                    return "map_two_isles_preview.png";
                case n.LobbyImage.MapJellyFishPreview:
                    return "map_jellyfish_preview.png";
                case n.LobbyImage.MapGoldRushPreview:
                    return "map_goldrush_preview.png";
                case n.LobbyImage.MapClassic56PPreview:
                    return "map_5_6_player_preview.png";
                case n.LobbyImage.MapClassic78PPreview:
                    return "map_7_8_player_preview.png";
                case n.LobbyImage.MapSS1HeadingForNewShores3PPreview:
                    return "map_ss1_3p_preview.png";
                case n.LobbyImage.MapSS1HeadingForNewShores4PPreview:
                    return "map_ss1_4p_preview.png";
                case n.LobbyImage.MapSS1HeadingForNewShores56PPreview:
                    return "map_ss1_6p_preview.png";
                case n.LobbyImage.MapSS2FourIslands3PPreview:
                    return "map_ss2_3p_preview.png";
                case n.LobbyImage.MapSS2FourIslands4PPreview:
                    return "map_ss2_4p_preview.png";
                case n.LobbyImage.MapSS2SixIslands56PPreview:
                    return "map_ss2_6p_preview.png";
                case n.LobbyImage.MapSS3FogIslands3PPreview:
                    return "map_ss3_3p_preview.png";
                case n.LobbyImage.MapSS3FogIslands4PPreview:
                    return "map_ss3_4p_preview.png";
                case n.LobbyImage.MapSS3FogIslands56PPreview:
                    return "map_ss3_6p_preview.png";
                case n.LobbyImage.MapSS4ThroughTheDesert3PPreview:
                    return "map_ss4_3p_preview.png";
                case n.LobbyImage.MapSS4ThroughTheDesert4PPreview:
                    return "map_ss4_4p_preview.png";
                case n.LobbyImage.MapSS4ThroughTheDesert56PPreview:
                    return "map_ss4_6p_preview.png";
                case n.LobbyImage.SettlerPack:
                    return "pack_settler.svg";
                case n.LobbyImage.ColonistPack:
                    return "pack_colonist.svg";
                case n.LobbyImage.FounderPack:
                    return "pack_founder.svg";
                case n.LobbyImage.RoadBronze:
                    return "road_bronze.svg";
                case n.LobbyImage.SettlementBronze:
                    return "settlement_bronze.svg";
                case n.LobbyImage.CityBronze:
                    return "city_bronze.svg";
                case n.LobbyImage.StoreItemExpansionClassic56P:
                    return "store_item_56player.png";
                case n.LobbyImage.StoreItemExpansionClassic78P:
                    return "store_item_78player.png";
                case n.LobbyImage.StoreItemSeafarers4P:
                    return "store_item_seafarers.png";
                case n.LobbyImage.StoreItemSeafarers56P:
                    return "store_item_seafarers56.png";
                case n.LobbyImage.StoreItemCitiesAndKnights4P:
                    return "store_item_cities_and_knights.png";
                case n.LobbyImage.StoreItemCitiesAndKnights56P:
                    return "store_item_cities_and_knights56.png";
                case n.LobbyImage.StoreItemCitiesAndKnightsSeafarers4P:
                    return "store_item_seafarers_cities_and_knights.png";
                case n.LobbyImage.StoreItemCitiesAndKnightsSeafarers56P:
                    return "store_item_seafarers_cities_and_knights56.png";
                case n.LobbyImage.StoreColorBlack:
                    return "store_color_black.png";
                case n.LobbyImage.StoreColorPurple:
                    return "store_color_purple.png";
                case n.LobbyImage.StoreColorMysticBlue:
                    return "store_color_mysticblue.png";
                case n.LobbyImage.StoreColorWhite:
                    return "store_color_white.png";
                case n.LobbyImage.StoreColorBronze:
                    return "store_color_bronze.png";
                case n.LobbyImage.StoreColorSilver:
                    return "store_color_silver.png";
                case n.LobbyImage.StoreColorGold:
                    return "store_color_gold.png";
                case n.LobbyImage.IconSettlerHat:
                    return "icon_settler.svg";
                case n.LobbyImage.IconColonistHat:
                    return "icon_colonist.svg";
                case n.LobbyImage.IconFounderHat:
                    return "icon_founder.svg";
                case n.LobbyImage.IconChristmasHat:
                    return "icon_christmas_hat.svg";
                case n.LobbyImage.IconRobberSanta:
                    return "icon_robber_santa.svg";
                case n.LobbyImage.IconPirateShip:
                    return "icon_pirate_ship.svg";
                case n.LobbyImage.IconMedalGold:
                    return "medal_gold.svg";
                case n.LobbyImage.IconMedalSilver:
                    return "medal_silver.svg";
                case n.LobbyImage.IconMedalBronze:
                    return "medal_bronze.svg";
                case n.LobbyImage.IconElephant:
                    return "icon_elephant.svg";
                case n.LobbyImage.IconSombrero:
                    return "icon_sombrero.svg";
                case n.LobbyImage.IconFarmer:
                    return "icon_farmer.svg";
                case n.LobbyImage.IconAvocado:
                    return "icon_avocado.svg";
                case n.LobbyImage.IconCactus:
                    return "icon_cactus.svg";
                case n.LobbyImage.IconCrown:
                    return "icon_crown.svg";
                case n.LobbyImage.IconSwords:
                    return "icon_swords.svg";
                case n.LobbyImage.IconHelmet:
                    return "icon_helmet.svg";
                case n.LobbyImage.IconSnorkel:
                    return "icon_snorkel.svg";
                case n.LobbyImage.IconScarf:
                    return "icon_scarf.svg";
                case n.LobbyImage.IconTie:
                    return "icon_tie.svg";
                case n.LobbyImage.IconWorker:
                    return "icon_worker.svg"
            }
        }
        static getImgAlt(e) {
            switch (e) {
                case n.LobbyImage.Pencil:
                    return "edit";
                case n.LobbyImage.Bot:
                    return "bot";
                case n.LobbyImage.CheckMark:
                    return "check";
                case n.LobbyImage.XMark:
                    return "X";
                case n.LobbyImage.Logo:
                    return "Katan.io";
                case n.LobbyImage.Lightning:
                    return "Instant Play";
                case n.LobbyImage.Plus:
                    return "Create Room";
                case n.LobbyImage.Mail:
                    return "Subscribe";
                case n.LobbyImage.Admin:
                    return "Admin";
                case n.LobbyImage.Moderator:
                    return "Moderator";
                case n.LobbyImage.User:
                    return "User";
                case n.LobbyImage.Guest:
                    return "Guest";
                case n.LobbyImage.InfoIcon:
                    return "info";
                case n.LobbyImage.IconSettlerHat:
                    return "Settler";
                case n.LobbyImage.IconColonistHat:
                    return "Colonist";
                case n.LobbyImage.IconFounderHat:
                    return "Founder";
                case n.LobbyImage.IconChristmasHat:
                    return "Christmas";
                case n.LobbyImage.IconRobberSanta:
                    return "Robber Santa";
                case n.LobbyImage.IconPirateShip:
                    return "Pirate";
                case n.LobbyImage.IconMedalGold:
                    return "Gold";
                case n.LobbyImage.IconMedalSilver:
                    return "Silver";
                case n.LobbyImage.IconMedalBronze:
                    return "Bronze";
                case n.LobbyImage.IconElephant:
                    return "icon_elephant";
                case n.LobbyImage.IconSombrero:
                    return "icon_sombrero";
                case n.LobbyImage.IconFarmer:
                    return "icon_farmer";
                case n.LobbyImage.IconAvocado:
                    return "icon_avocado";
                case n.LobbyImage.IconCactus:
                    return "icon_cactus";
                case n.LobbyImage.IconCrown:
                    return "icon_crown";
                case n.LobbyImage.IconSwords:
                    return "icon_swords";
                case n.LobbyImage.IconHelmet:
                    return "icon_helmet";
                case n.LobbyImage.IconSnorkel:
                    return "icon_snorkel";
                case n.LobbyImage.IconScarf:
                    return "icon_scarf";
                case n.LobbyImage.IconTie:
                    return "icon_tie";
                case n.LobbyImage.IconWorker:
                    return "icon_worker";
                case n.LobbyImage.QuestionMark:
                    return "Info";
                case n.LobbyImage.KarmaWhite:
                    return "Karma";
                case n.LobbyImage.KarmaRed:
                    return "Bad Karma";
                case n.LobbyImage.KarmaOrange:
                    return "Okay Karma";
                case n.LobbyImage.KarmaGreen:
                    return "Good Karma";
                case n.LobbyImage.DisableAdBlock:
                    return "Disable Ad Block";
                case n.LobbyImage.ColonistCoin:
                    return "Sheep";
                case n.LobbyImage.MapDiamondPreview:
                    return "Fun Map Diamond";
                case n.LobbyImage.MapIstanbulPreview:
                    return "Fun Map Istanbul";
                case n.LobbyImage.MapLakesPreview:
                    return "Fun Map Lakes";
                case n.LobbyImage.MapPondPreview:
                    return "Fun Map Pond";
                case n.LobbyImage.MapGearPreview:
                    return "Fun Map Gear";
                case n.LobbyImage.MapUSAPreview:
                    return "Fun Map USA";
                case n.LobbyImage.MapTwirlPreview:
                    return "Fun Map Panda Twirl";
                case n.LobbyImage.MapEarthPreview:
                    return "Fun Map Earth";
                case n.LobbyImage.MapUKPreview:
                    return "Fun Map UK and Ireland";
                case n.LobbyImage.MapShuffleBoardPreview:
                    return "Fun Map Shuffle Board";
                case n.LobbyImage.MapPangaeaPreview:
                    return "Fun Map Pangaea";
                case n.LobbyImage.MapSpinnerPreview:
                    return "Fun Map Spinner";
                case n.LobbyImage.MapCyclopsPreview:
                    return "Fun Map Cyclops";
                case n.LobbyImage.MapRandomBasePreview:
                    return "Fun Map Random Base";
                case n.LobbyImage.MapRomaniaPreview:
                    return "Fun Map Romania";
                case n.LobbyImage.MapCirclePreview:
                    return "Fun Map Circle";
                case n.LobbyImage.MapDuelPreview:
                    return "Fun Map Duel";
                case n.LobbyImage.MapMonopolyPreview:
                    return "Fub Map Monopoly";
                case n.LobbyImage.MapKingOfTheHillPreview:
                    return "Fun Map King of the Hill";
                case n.LobbyImage.MapMountainOfRichesPreview:
                    return "Fun Map Mountain of Riches";
                case n.LobbyImage.MapDoggoPreview:
                    return "Fun Map Doggo";
                case n.LobbyImage.MapTradeIslandsPreview:
                    return "Fun Map Trade Islands";
                case n.LobbyImage.MapBlackForestPreview:
                    return "Fun Map Black Forest";
                case n.LobbyImage.MapVolcanoPreview:
                    return "Fun Map Volcano";
                case n.LobbyImage.MapKitePreview:
                    return "Fun Map Kite";
                case n.LobbyImage.MapVietnamPreview:
                    return "Fun Map Vietnam";
                case n.LobbyImage.MapTwoIslesPreview:
                case n.LobbyImage.MapJellyFishPreview:
                    return "Fun Map Two Isles";
                case n.LobbyImage.MapTurningTidesPreview:
                    return "Fun Map Turning Tides";
                case n.LobbyImage.MapGoldRushPreview:
                    return "Gold Rush";
                case n.LobbyImage.MapEuropePreview:
                    return "Europe";
                case n.LobbyImage.MapHourglassPreview:
                    return "Fun Map Hourglass";
                case n.LobbyImage.MapHourglassXLPreview:
                    return "Fun Map HourglassXL";
                case n.LobbyImage.MapSnowflakePreview:
                    return "Fun Map Snowflake";
                case n.LobbyImage.MapMiniBasePreview:
                    return "Fun Map MiniBase";
                case n.LobbyImage.MapAustraliaPreview:
                    return "Fun Map Australia";
                case n.LobbyImage.MapClassic56PPreview:
                    return "5-6 Player Map";
                case n.LobbyImage.MapClassic78PPreview:
                    return "7-8 Player Map";
                case n.LobbyImage.MapSS1HeadingForNewShores3PPreview:
                case n.LobbyImage.MapSS1HeadingForNewShores4PPreview:
                case n.LobbyImage.MapSS2FourIslands3PPreview:
                case n.LobbyImage.MapSS2FourIslands4PPreview:
                case n.LobbyImage.MapSS3FogIslands3PPreview:
                case n.LobbyImage.MapSS3FogIslands4PPreview:
                case n.LobbyImage.MapSS4ThroughTheDesert3PPreview:
                case n.LobbyImage.MapSS4ThroughTheDesert4PPreview:
                    return "seafarers scenario map";
                case n.LobbyImage.MapSS1HeadingForNewShores56PPreview:
                case n.LobbyImage.MapSS2SixIslands56PPreview:
                case n.LobbyImage.MapSS3FogIslands56PPreview:
                case n.LobbyImage.MapSS4ThroughTheDesert56PPreview:
                    return "Seafarers 5-6 player scenario map";
                case n.LobbyImage.SettlerPack:
                    return "Settler Pack";
                case n.LobbyImage.ColonistPack:
                    return "Colonist Pack";
                case n.LobbyImage.FounderPack:
                    return "Founder Pack";
                case n.LobbyImage.RoadBronze:
                    return "Road";
                case n.LobbyImage.SettlementBronze:
                    return "Settlement";
                case n.LobbyImage.CityBronze:
                    return "City";
                case n.LobbyImage.StoreItemExpansionClassic56P:
                    return "5/6 player expansion";
                case n.LobbyImage.StoreItemExpansionClassic78P:
                    return "7/8 player expansion";
                case n.LobbyImage.StoreItemSeafarers4P:
                    return "Seafarers expansion";
                case n.LobbyImage.StoreItemSeafarers56P:
                    return "Seafarers 5-6 Player expansion";
                case n.LobbyImage.StoreItemCitiesAndKnights4P:
                    return "Cities and Knights Expansion";
                case n.LobbyImage.StoreItemCitiesAndKnights56P:
                    return "Cities and Knights 5-6 Player Expansion";
                case n.LobbyImage.StoreItemCitiesAndKnightsSeafarers4P:
                    return "Cities and Knights Seafarers Expansion";
                case n.LobbyImage.StoreItemCitiesAndKnightsSeafarers56P:
                    return "Cities and Knights Seafarers 5-6 Player Expansion";
                case n.LobbyImage.StoreColorBlack:
                    return "Black";
                case n.LobbyImage.StoreColorPurple:
                    return "Purple";
                case n.LobbyImage.StoreColorMysticBlue:
                    return "Mystic Blue";
                case n.LobbyImage.StoreColorWhite:
                    return "White";
                case n.LobbyImage.StoreColorBronze:
                    return "Bronze";
                case n.LobbyImage.StoreColorSilver:
                    return "Silver";
                case n.LobbyImage.StoreColorGold:
                    return "Gold"
            }
        }
        static getLobbyImageExtension(e) {
            return i.UIGameConstants.getImageExtension(this.getImgPath(e))
        }
        static getLobbyImagePath(e) {
            return i.UIGameConstants.getImagePath(this.getImgPath(e))
        }
        static getLobbyImageAlt(e) {
            return this.getImgAlt(e)
        }
        static getImage(e, t, a = "") {
            const i = this.getLobbyImagePath(e),
                n = this.getLobbyImageAlt(e);
            return (0, o.constructImgTag)(i, n, t, a)
        }
        static createImageIn(e, t, a) {
            const i = document.createElement("IMG");
            return e.appendChild(i), i.src = this.getLobbyImagePath(t), i.alt = this.getLobbyImageAlt(t), i.width = a, i.height = a, i
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TextView = void 0;
    const i = a(6),
        o = a(28),
        n = a(25),
        r = a(19);
    class s extends i.Text {
        constructor(e, t, a, i, r, s, c = n.GameFont.Size.Normal, l = o.GameColor.getColor(o.GameColor.Color.Gray0), h = !0) {
            super(e), this.resolution = 2, this.roundPixels = !0, this.initialX = t, this.initialY = a, this.initialW = i, this.initialH = r, this.style.fontFamily = "Arial", this.style.fontSize = n.GameFont.getResponsiveSize(c), this.style.fill = l, this.style.wordWrap = !0, this.style.wordWrapWidth = i, this.style.align = "center", this.style.breakWords = !0, this.x = t, this.repositionY(h), this.clickAction = e => {}, this.initClick(), s.addChild(this)
        }
        changeTextColor(e) {
            this.style.fill = e
        }
        repositionY(e) {
            this.y = e ? this.initialY + (this.initialH - this.height) / 2 : this.initialY
        }
        centerX() {
            this.x = this.initialX + (this.initialW - this.width) / 2
        }
        setTip(e, t) {
            r.uiGameManager.toolTipController.createTip(e, t, this)
        }
        initClick() {
            this.on("click", e => {
                this.clickAction(e)
            }), this.on("tap", e => {
                this.clickAction(e)
            })
        }
        setClickAction(e) {
            this.interactive = !0, this.buttonMode = !0, this.clickAction = e
        }
        removeClickAction() {
            this.interactive = !1, this.buttonMode = !1
        }
        centerXInParent() {
            null != this.parent && (this.x = this.parent.width / 2 - this.width / 2)
        }
    }
    t.TextView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketController = void 0;
    const i = a(147),
        o = a(3),
        n = a(148),
        r = a(287),
        s = a(99),
        c = a(14),
        l = a(19),
        h = a(46),
        d = a(391),
        u = a(35),
        g = a(45),
        m = a(41),
        p = a(392),
        C = a(96),
        y = a(100),
        S = a(98);
    class v {
        static init(e, t) {
            this.socket = new i.SocketClient(e, e => {
                c.CA.sendEvent(c.CA.Type.General, c.CA.Category.General, c.CA.Label.GeneralBrokenInternetConnection), y.SocketMatchmakingSend.disconnectedFromSocketServer(), C.UITopNotificationController.show(e, S.UITopNotificationType.Error, "Refresh", () => {
                    location.reload()
                })
            }, () => {}), h.StorageWrapper.getBanned() || v.setupSocketConnections(t)
        }
        static initMatchmakingSocket() {
            if (u.UIUtilsEjsVariables.SERVER_TYPE != g.ServerTypes.Static) return;
            if (!this.socket.isSocketOpen()) return;
            this.matchmakingSocket = new i.SocketClient(m.UIAPIEndpoints.matchmakingURL(), e => {
                l.uiManager.matchmakingController.removePopups(), y.SocketMatchmakingSend.exitedMatchmaking()
            }, () => {}), this.matchmakingListener = new p.SocketMatchmakingListen(this.matchmakingSocket)
        }
        static killMatchmakingSocket() {
            this.matchmakingSocket = void 0, this.matchmakingListener = void 0
        }
        static setSession(e) {
            this.session = e, this.session.userState.isLoggedIn && c.CA.sendEvent(c.CA.Type.Funnel, c.CA.Category.Funnel, c.CA.Label.FunnelLoggedIn), this.session.userState.adsEnabled || c.CA.sendEvent(c.CA.Type.Funnel, c.CA.Category.Funnel, c.CA.Label.FunnelPurchasedPack), l.loadTest.activateLoadTest(e), c.CA.logRocket.set(this.session)
        }
        static setupSocketConnections(e) {
            this.gameListener = new n.SocketGameListen(this.socket, e), this.lobbyListener = new r.SocketLobbyListen(this.socket), this.chatListener = new s.SocketChat(this.socket), u.UIUtilsEjsVariables.SERVER_TYPE == g.ServerTypes.Single && (this.matchmakingListener = new p.SocketMatchmakingListen(this.socket)), this.socket.setSocketId(o.NetworkEnums.State.InfoMessage.toString(), e => {
                new d.ViewPopupTemporary("Note", e)
            })
        }
    }
    t.SocketController = v
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketLobbySend = void 0;
    const i = a(3),
        o = a(39);
    var n = i.PlayerEnums.GameSpeedSettings,
        r = i.PlayerEnums.BotSpeedSettings;
    const s = a(14),
        c = a(23),
        l = a(35);
    class h {
        static sendPlayerToColonist() {
            return !window.location.host.includes("colonist") && !!l.UIUtilsEjsVariables.SEND_PLAYER_TO_COLONIST
        }
        static canSendToHexs() {
            return !!l.UIUtilsEjsVariables.SEND_PLAYER_TO_HEX && (!window.location.host.includes("hexs") && (null == o.SocketController.session || !o.SocketController.session.userState.isLoggedIn))
        }
        static updateNickName(e) {
            o.SocketController.socket.send(i.NetworkEnums.Action.UpdateNickName.toString(), e)
        }
        static clickedTutorialGameButton() {
            this.canSendToHexs() ? window.location.href = "https://hexs.io?tutorial=1" : this.sendPlayerToColonist() ? window.location.href = "https://colonist.io?tutorial=1" : c.GameUIImages.continueAfterAssetsLoad(() => {
                o.SocketController.socket.send(i.NetworkEnums.Action.ClickedStartTutorial.toString(), !0)
            })
        }
        static clickedGamesListButton() {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Lobby, s.CA.Label.ClickedLobbyGames), o.SocketController.socket.send(i.NetworkEnums.Action.ClickedLobbyGameListButton.toString(), !0)
        }
        static clickedRoomsListButton() {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Lobby, s.CA.Label.ClickedLobbyRefresh), o.SocketController.socket.send(i.NetworkEnums.Action.ClickedLobbyRoomRefreshButton.toString(), !0)
        }
        static clickedStartFastBotGame() {
            this.canSendToHexs() ? window.location.href = "https://hexs.io?fastbotgame=1" : this.sendPlayerToColonist() ? window.location.href = "https://colonist.io?fastbotgame=1" : c.GameUIImages.continueAfterAssetsLoad(() => {
                o.SocketController.socket.send(i.NetworkEnums.Action.ClickedStartFastBots.toString(), !0)
            })
        }
        static clickedCreateRoom(e) {
            this.canSendToHexs() ? window.location.href = "https://hexs.io?room=1" : this.sendPlayerToColonist() ? window.location.href = "https://colonist.io?room=1" : (s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Lobby, s.CA.Label.ClickedCreateRoom), o.SocketController.socket.send(i.NetworkEnums.Action.ClickedCreateRoom.toString(), e))
        }
        static clickedJoinRoom(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Lobby, s.CA.Label.ClickedJoinRoom), o.SocketController.socket.send(i.NetworkEnums.Action.ClickedJoinRoom.toString(), e)
        }
        static clickedSpectateGame(e) {
            c.GameUIImages.continueAfterAssetsLoad(() => {
                s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Lobby, s.CA.Label.ClickedSpectate), o.SocketController.socket.send(i.NetworkEnums.Action.ClickedSpectateGame.toString(), e)
            })
        }
        static clickedReconnectGame(e) {
            c.GameUIImages.continueAfterAssetsLoad(() => {
                s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Lobby, s.CA.Label.ClickedReconnectGame), o.SocketController.socket.send(i.NetworkEnums.Action.ClickedReconnectGame.toString(), e), h.updateURLToRoom(e)
            })
        }
        static updateURLToRoom(e) {
            window.location.hash != "#" + e && window.location.assign("#" + e)
        }
        static accessGameFromLink(e) {
            c.GameUIImages.continueAfterAssetsLoad(() => {
                o.SocketController.socket.send(i.NetworkEnums.Action.AccessGameLink.toString(), e)
            }, () => {
                this.updateURLToRoom("")
            })
        }
        static clickedRoomReadyToStart(e) {
            c.GameUIImages.continueAfterAssetsLoad(() => {
                s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomReadyToStart), o.SocketController.socket.send(i.NetworkEnums.Action.RoomReadyToStart.toString(), e)
            })
        }
        static clickedRoomSelectColor(e, t) {
            const a = {
                playerId: e,
                color: t
            };
            o.SocketController.socket.send(i.NetworkEnums.Action.RoomSelectColor.toString(), a)
        }
        static clickedRoomStartGame() {
            c.GameUIImages.continueAfterAssetsLoad(() => {
                s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomStartGame), o.SocketController.socket.send(i.NetworkEnums.Action.RoomStartGame.toString(), !0)
            })
        }
        static clickedRoomKickPlayer(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomKickPlayer), o.SocketController.socket.send(i.NetworkEnums.Action.RoomKickPlayer.toString(), e)
        }
        static clickedRoomAddBot() {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomAddBot), o.SocketController.socket.send(i.NetworkEnums.Action.RoomAddBot.toString(), !0)
        }
        static clickedRoomSettingChangePrivateGame(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingChangePrivateGame, Number(e)), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangePrivateGame.toString(), e)
        }
        static clickedRoomSettingUpdateGameModeSetting(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingUpdateGameModeSetting, Number(e)), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingUpdateGameModeSetting.toString(), i.ModeSettingEnum[e])
        }
        static clickedRoomSettingUpdateMapSetting(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingUpdateMapSetting, Number(e)), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingUpdateMapSetting.toString(), i.MapSettingEnum[e])
        }
        static clickedRoomSettingUpdateDiceSetting(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingUpdateDiceSetting, Number(e)), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingUpdateDiceSetting.toString(), i.DiceSettingEnum[e])
        }
        static clickedRoomSettingChangeVictoryPointsToWin(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingChangeVictoryPointsToWin, e), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangeVictoryPointsToWin.toString(), e)
        }
        static clickedRoomSettingChangeGameSpeed(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingChangeGameSpeed, Number(e)), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangeGameSpeed.toString(), n[e])
        }
        static clickedRoomSettingChangeBotSpeed(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingChangeBotSpeed, Number(e)), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangeBotSpeed.toString(), r[e])
        }
        static clickedRoomSettingChangeKarmaActive(e) {
            o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangeKarmaActive.toString(), e)
        }
        static clickedRoomSettingChangeCardDiscardLimit(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingChangeCardDiscardLimit, e), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangeCardDiscardLimit.toString(), e)
        }
        static clickedRoomSettingChangeFriendlyRobber(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingChangeFriendlyRobber, Number(e)), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangeFriendlyRobber.toString(), e)
        }
        static clickedRoomSettingChangeHideBankCards(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingChangeHideBankCards, Number(e)), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangeHideBankCards.toString(), e)
        }
        static clickedRoomSettingChangeMaxPlayers(e) {
            s.CA.sendEvent(s.CA.Type.Click, s.CA.Category.Room, s.CA.Label.ClickedRoomSettingChangeMaxPlayers, e), o.SocketController.socket.send(i.NetworkEnums.Action.RoomSettingChangeMaxPlayers.toString(), e)
        }
        static clickedChangeIconButton(e) {
            o.SocketController.socket.send(i.NetworkEnums.Action.ClickedChangeIcon.toString(), e)
        }
        static requestToJoinMatchmakingMatch() {
            o.SocketController.socket.send(i.NetworkEnums.Action.RequestToJoinMatchmakingMatch.toString(), !0)
        }
        static enteredMatchmaking() {
            o.SocketController.socket.send(i.NetworkEnums.Action.EnteredMatchmaking.toString(), !0)
        }
    }
    t.SocketLobbySend = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIAPIEndpoints = void 0;
    const i = a(35);
    t.UIAPIEndpoints = class {
        static socketURL() {
            return i.UIUtilsEjsVariables.SOCKET_URL
        }
        static matchmakingURL() {
            return i.UIUtilsEjsVariables.MATCHMAKING_URL
        }
        static googleAuth() {
            return "/auth/google"
        }
        static googleLogout() {
            return "/logout"
        }
        static apiUser() {
            return "api/user"
        }
        static apiPayGetStoreStripeSession() {
            return "api/pay/getstorestripesession"
        }
        static apiPayPurchaseItem() {
            return "api/pay/purchaseitem"
        }
        static apiVLIEmailHash() {
            return "api/user/vliemailhash"
        }
        static apiAnalytics() {
            return "api/analyticEvents"
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.generateRulebookContent = t.generateRulebook = t.getRulebookPageGenerator = t.urlToPage = t.RulebookPage = t.RulebookStyle = void 0;
    const i = a(131),
        o = a(92),
        n = a(134),
        r = a(135),
        s = a(136),
        c = a(137),
        l = a(43),
        h = a(34);
    var d, u;

    function g(e) {
        return {
            [u.Classic4P]: n.RulebookPageBG,
            [u.Classic56P]: s.RulebookPageClassic56P,
            [u.Seafarers4P]: c.RulebookPageSF,
            [u.CitiesAndKnights4P]: r.RulebookPageCK
        } [e]
    }

    function m(e) {
        const t = g(e).createPageContent();
        return t.classList.add("rulebook-content-container"), t
    }! function(e) {
        e[e.Popup = 0] = "Popup", e[e.Fullscreen = 1] = "Fullscreen", e[e.Mobile = 2] = "Mobile"
    }(d = t.RulebookStyle || (t.RulebookStyle = {})),
    function(e) {
        e.Classic4P = "bg", e.Classic56P = "56p", e.Seafarers4P = "sf", e.CitiesAndKnights4P = "ck"
    }(u = t.RulebookPage || (t.RulebookPage = {})), t.urlToPage = function(e) {
        if (void 0 === e) return u.Classic4P;
        for (const t in u) {
            const a = u[t] + ".html.href",
                i = h.RulebookDictionary.get(a);
            if (e.includes(i) && i.length > 0) return u[t]
        }
        return u.Classic4P
    }, t.getRulebookPageGenerator = g, t.generateRulebook = function(e, t, a = d.Popup) {
        l.RulebookElements.setDocument(e);
        const n = l.RulebookElements.createElement("div", "rulebook");
        n.appendChild((0, i.generateRulebookTopNavigation)(t, a));
        const r = l.RulebookElements.createDivIn(n, "rulebook-page"),
            s = l.RulebookElements.createDivIn(r, "rulebook-side-navigation", "rulebook-side-navigation"),
            c = l.RulebookElements.createDivIn(r, "rulebook-content", "rulebook-content");
        return s.appendChild((0, o.generateRulebookSideNavigation)(t)), c.appendChild(m(t)), n
    }, t.generateRulebookContent = m
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RulebookElements = void 0;
    const i = a(55),
        o = a(34);
    t.RulebookElements = class {
        static setDocument(e) {
            this.document = e
        }
        static createElement(e = "div", t, a, i = "") {
            const o = this.document.createElement(e);
            return t && o.classList.add(t), a && (o.id = a), o.innerHTML = i, o
        }
        static createElementIn(e, t = "div", a, i, o = "") {
            const n = this.createElement(t, a, i, o);
            return e && e.appendChild(n), n
        }
        static createDiv(e, t, a = "") {
            return this.createElement("div", e, t, a)
        }
        static createDivIn(e, t, a, i = "") {
            return this.createElementIn(e, "div", t, a, i)
        }
        static createParagraphIn(e, t = "", a, i) {
            return this.createElementIn(e, "p", a, i, t)
        }
        static createSpanIn(e, t, a = "", i) {
            return this.createElementIn(e, "span", t, i, a)
        }
        static createPageNavigationLink(e, t, a, n, r) {
            const s = this.createElementIn(a, "a", n, r, t),
                c = o.RulebookDictionary.get(e + ".html.href");
            return s.href = "/" + c, s.setAttribute(i.RulebookConfig.navigationPageLinkAttribute, ""), s
        }
        static createImgIn(e, t = "", a, i) {
            const n = this.createElementIn(e, "img", a, i),
                r = "/dist/images/" + t;
            n.src = r;
            const s = t.split(".")[0],
                c = o.RulebookDictionary.getPhrase("html.imgAlt." + s);
            return c !== o.RulebookDictionary.placeholder && (n.alt = c), n
        }
        static createImg(e) {
            return this.createImgIn(void 0, e)
        }
        static createVideoIn(e, t) {
            const a = this.createDivIn(e, "iframe-container"),
                i = this.createElementIn(a, "iframe");
            return i.src = t, i.width = "560", i.height = "315", i.title = "YouTube video player", i.frameBorder = "0", i.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture", i.allowFullscreen = !0, i
        }
        static generateRulebookURLPath(e, t) {
            const a = o.RulebookDictionary.getLanguage(),
                i = `${e}.${t}.href`;
            t = null == t ? "" : "#" + o.RulebookDictionary.get(i);
            const n = o.RulebookDictionary.get("html.href"),
                r = o.RulebookDictionary.get(e + ".html.href"),
                s = `${a}/${n}/${r}${t}`,
                c = `${n}/${r}${t}`;
            return a == o.rulebookDefaultLanguage ? c : s
        }
    }
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.ServerTypes = void 0,
        function(e) {
            e[e.Single = 0] = "Single", e[e.Static = 1] = "Static", e[e.Socket = 2] = "Socket", e[e.Matchmaking = 3] = "Matchmaking"
        }(t.ServerTypes || (t.ServerTypes = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.StorageWrapper = void 0,
        function(e) {
            let t;

            function a() {
                return "undefined" != typeof Storage
            }! function(e) {
                e.Low = "low-power", e.Default = "default", e.High = "high-performance"
            }(t = e.PowerPreference || (e.PowerPreference = {})), e.storageAvailable = a, e.setLogRocket = function(e) {
                a() && localStorage.setItem("logrocket", String(e))
            }, e.getLogRocket = function() {
                return a() ? null == localStorage.getItem("logrocket") ? null : "true" == String(localStorage.getItem("logrocket")) : null
            }, e.setAntialias = function(e) {
                a() && localStorage.setItem("antialias", String(e))
            }, e.getAntialias = function() {
                return a() ? null == localStorage.getItem("antialias") ? null : "true" == String(localStorage.getItem("antialias")) : null
            }, e.setResolution = function(e) {
                a() && localStorage.setItem("resolution", String(e))
            }, e.getResolution = function() {
                return a() ? null == localStorage.getItem("resolution") ? null : Number(localStorage.getItem("resolution")) : null
            }, e.setPowerPreference = function(e) {
                a() && localStorage.setItem("powerpreference", e)
            }, e.getPowerPreference = function() {
                return a() ? localStorage.getItem("powerpreference") : null
            }, e.setAnimation = function(e) {
                a() && localStorage.setItem("animationstatus", String(e))
            }, e.getAnimation = function() {
                return a() ? null == localStorage.getItem("animationstatus") ? null : "true" == String(localStorage.getItem("animationstatus")) : null
            }, e.setVersionNo = function(e) {
                return !!a() && (localStorage.setItem("versionno", String(e)), !0)
            }, e.getVersionNo = function() {
                if (!a()) return null;
                const e = localStorage.getItem("versionno");
                return Number(e)
            }, e.setStoreNotificationBadgeVisible = function(e) {
                a() && localStorage.setItem("lobbynavigationstorebadgevisible", String(e))
            }, e.getStoreNotificationBadgeVisible = function() {
                if (!a()) return null;
                if (null == localStorage.getItem("lobbynavigationstorebadgevisible")) return null;
                const e = localStorage.getItem("lobbynavigationstorebadgevisible");
                return "true" == String(e)
            }, e.setBanned = function(e) {
                return !!a() && (localStorage.setItem("weakbanned", String(e)), !0)
            }, e.getBanned = function() {
                return a() ? "true" == String(localStorage.getItem("weakbanned")) : null
            }, e.deleteBanned = function() {
                return !!a() && (localStorage.removeItem("weakbanned"), !0)
            }, e.setVolume = function(e) {
                a() && localStorage.setItem("volume", String(e))
            }, e.getVolume = function() {
                if (!a()) return .3;
                const e = localStorage.getItem("volume");
                if (null == e) return .3;
                let t = parseFloat(e);
                return t < 0 && (t = 0), t > 1 && (t = 1), t
            }, e.setSound = function(e) {
                return !!a() && (e ? localStorage.setItem("soundstatus", "off") : localStorage.setItem("soundstatus", "on"), !0)
            }, e.getSound = function() {
                if (!a()) return null;
                const e = localStorage.getItem("soundstatus");
                return "on" == e || "off" != e && null
            }, e.deleteName = function() {
                return !!a() && (localStorage.removeItem("nickname"), !0)
            }, e.patchForV26 = function() {
                e.deleteName()
            }
        }(t.StorageWrapper || (t.StorageWrapper = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.linkify = t.getProfileURI = void 0, t.getProfileURI = function(e) {
        return "/profile/" + encodeURIComponent(e)
    }, t.linkify = function(e) {
        if (e.includes("<a")) return e;
        let t = e.replace(/(\b(https?|ftp):\/\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/gim, "<a href="$1" target="_blank">$1</a>");
        return t = t.replace(/(^|[^/])(www\.[\S]+(\b|$))/gim, "$1<a href="http://$2" target="_blank">$2</a>"), t = t.replace(/(([a-zA-Z0-9\-_.])+@[a-zA-Z_]+?(\.[a-zA-Z]{2,6})+)/gim, "<a href="mailto:$1">$1</a>"), t
    }
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIAjaxWrapper = void 0;
    t.UIAjaxWrapper = class {
        static getRequest(e, t, a) {
            let i = e;
            t && (i += "/" + t);
            const o = new XMLHttpRequest;
            o.onreadystatechange = function() {
                if (4 == this.readyState && 200 == this.status) {
                    const e = JSON.parse(this.responseText);
                    a(e)
                }
            }, o.open("GET", i, !0), o.send()
        }
        static postRequest(e, t, a, i, o = "application/x-www-form-urlencoded") {
            let n = e;
            t && (n += "/" + t);
            const r = new XMLHttpRequest;
            r.onreadystatechange = function() {
                if (4 == this.readyState && 200 == this.status) {
                    const e = JSON.parse(this.responseText);
                    i(e)
                }
            }, r.open("POST", n, !0), r.setRequestHeader("Content-type", o), r.send(a)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerAvatarView = t.UIGamePlayerAvatarStatus = void 0;
    const i = a(6),
        o = a(28),
        n = a(31),
        r = a(13),
        s = a(23),
        c = a(19),
        l = a(126),
        h = a(25);
    var d;
    ! function(e) {
        e[e.None = 0] = "None", e[e.Accepted = 1] = "Accepted", e[e.Declined = 2] = "Declined", e[e.Waiting = 3] = "Waiting"
    }(d = t.UIGamePlayerAvatarStatus || (t.UIGamePlayerAvatarStatus = {}));
    class u extends i.Container {
        constructor(e, t, a, i, o, n = !1) {
            super(), this.x = e, this.y = t, this.playerState = o, this.size = a, this.iconSize = n ? .7 * this.size : this.size, this.playerNameH = n ? .3 * this.size : 0, this._status = d.None, this.drawBg(), this.drawPlayerIcon(), i.addChild(this), n && this.drawPlayerName()
        }
        drawPlayerIcon() {
            const e = .6 * this.bgIcon.width,
                t = .2 * this.bgIcon.width,
                a = s.GameUIImages.getPlayerIcon(this.playerState.icon);
            this.playerIcon = new r.SpriteView(t, t, e, e, this, a)
        }
        drawPlayerName() {
            const e = this.bgIcon.y + this.bgIcon.height,
                t = this.bgIcon.x - (this.size - this.bgIcon.width) / 2;
            this.playerName = new l.TextMaskedView(this.playerState.username, t, e, this.size, this.playerNameH, this, h.GameFont.Size.Small), this.playerName.centerX(), this.playerName.repositionY(!1)
        }
        updatePlayerIcon(e) {
            this.playerIcon.texture = e
        }
        udpatePlayerColor(e) {
            this.playerState = e, this.drawBg();
            const t = s.GameUIImages.getPlayerIcon(this.playerState.icon);
            this.playerIcon.texture = t, null != this.playerName && this.drawPlayerName()
        }
        removeBgIcon() {
            null != this.bgIcon && null != this.bgIcon.parent && this.bgIcon.parent.removeChild(this.bgIcon)
        }
        drawBg() {
            this.removeBgIcon(), this.bgIcon = new r.SpriteView(0, 0, this.iconSize, this.iconSize, this, s.GameUIImages.getPlayerBg(this.playerState.color)), this.removeBgIcon(), this.addChildAt(this.bgIcon, 0)
        }
        setClickAction(e) {
            this.interactive = !0, this.buttonMode = !0, this.on("click", () => {
                e(this.playerState.color)
            }), this.on("tap", () => {
                e(this.playerState.color)
            })
        }
        centerYInParent(e = !1) {
            null != this.parent && (this.y = this.parent.height / 2 - this.height / 2, e && (this.y += c.uiGameManager.canvasController.margin))
        }
        get status() {
            return this._status
        }
        set status(e) {
            if (e == d.None) return void this.removeStatus();
            if (this._status == e) return;
            let t, a;
            switch (e) {
                case d.Accepted:
                    t = i.Loader.shared.resources.icon_check.texture, a = o.GameColor.getColorHexValue(o.GameColor.Color.GreenLight);
                    break;
                case d.Declined:
                    t = i.Loader.shared.resources.icon_x.texture, a = o.GameColor.getColorHexValue(o.GameColor.Color.RedLight);
                    break;
                case d.Waiting:
                    t = i.Loader.shared.resources.icon_hourglass.texture, a = o.GameColor.getColorHexValue(o.GameColor.Color.RedLight)
            }
            this.createStatusIcon(a, t), this._status = e
        }
        createStatusIcon(e, t) {
            this.thisStatusIconExists(t) || (this.removeStatus(), this.drawStatusBg(e), this.drawStatusIcon(t))
        }
        removeStatus() {
            this.removeStatusIcon(), this.removeStatusBg()
        }
        thisStatusIconExists(e) {
            return !!this.statusIcon && this.statusIcon.texture == e
        }
        removeStatusIcon() {
            this.statusIcon && (this.removeChild(this.statusIcon), this.statusIcon = void 0)
        }
        drawStatusIcon(e) {
            const t = .4 * this.bgIcon.width,
                a = this.bgIcon.width / 2 + (this.bgIcon.width / 2 - t) / 2;
            this.statusIcon = new r.SpriteView(a, a, t, t, this, e)
        }
        removeStatusBg() {
            (0, n.removePixiObject)(this.statusBg)
        }
        drawStatusBg(e) {
            this.statusBg = (0, n.drawPixiCircle)(.75 * this.bgIcon.width, .75 * this.bgIcon.width, this.bgIcon.width * (1 / 4), e), this.addChild(this.statusBg)
        }
        setToolTip(e) {
            c.uiGameManager.toolTipController.createTip("", e, this)
        }
        unmuteIfPlayer(e) {
            for (const t of e)
                if (this.playerState.color == t) return this.status = d.Accepted, !0;
            return !1
        }
    }
    t.UIGamePlayerAvatarView = u
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.KatanSettings = void 0;
    const i = a(7);
    var o = i.Utils.SECONDS_IN_MINUTE,
        n = i.Utils.MILLISECONDS,
        r = i.Utils.SECONDS_IN_HOUR;
    class s {
        constructor(e) {
            this.LOGIN_MESSAGE_LINE_1 = "List of Commands: /help", this.LOGIN_MESSAGE_LINE_2 = s.DEFAULT_LOGIN_MESSAGE, this.TEST_SERVER_MESSAGE = "This is a test server, play at https://colonist.io/", this.SENTRY_ACTIVE = !0, this.AB_IMG_VERTICAL = "ab_contributor2.png", this.AB_URL = "/contribute", this.COLONIST_CON_AD = !1, this.CAN_START_NEW_GAMES = !0, this.PM_ACTIVE = !0, this.LANDING_PAGE_ACTIVE = !0, this.LOGS_ACTIVE = !0, this.LOBBY_REFRESH_MS = n * o * 10, this.CLEAN_GAMES_WAIT_MS = n * o * 10, this.PROFILE_ACTIVE = !0, this.CHANGE_USERNAME_ACTIVE = !0, this.SEND_PLAYER_TO_HEXS = !1, this.SEND_PLAYER_TO_HEXS_LIMIT = 5e3, this.SEND_PLAYER_TO_COLONIST = !1, this.PROFILE_ACCESS_LIMIT = 5e3, this.SERVER_LAST_UPDATE_TIME = 0, this.TOURNAMENT_MAP_TYPE = 1, this.STORE_REDIRECT_TO_COLONIST = !0, this.EXPANSIONS_AND_MAPS_FREE_TO_TEST_IN_STAGING = !1, this.GET_CARD_COMMANDS_ACTIVE_IN_TEST_SERVER = !1, this.DEFAULT_HEAP_SAMPLING_FREQUENCY = n * r, this.HEAP_SNAPSHOT_ENABLED = !1, this.HEAP_MEMORY_MONITORING_DANGER_LEVEL_IN_MB = 1024, this.HEAP_MEMORY_MONITORING_FREQUENCY = n * r, this.CLIENT_SOCKET_DEBUG_ACTIVE = !1, this.MATCHMAKING_ENABLED = !0, this.SOCKET_URL = "", this.ANALYTICS_ENABLED = !0, this.SOCKET_URL = e
        }
        deserialize(e) {
            const t = Object.assign(new s(""), e);
            return t.LOGIN_MESSAGE_LINE_2 = e.LOGIN_MESSAGE_LINE_2, t.SOCKET_URL = this.SOCKET_URL, t
        }
        useDefaultLoginMessage() {
            this.LOGIN_MESSAGE_LINE_2 = s.DEFAULT_LOGIN_MESSAGE
        }
    }
    t.KatanSettings = s, s.DISCORD_CHANNEL = "https://discord.gg/uzCKAWV6qm", s.DEFAULT_LOGIN_MESSAGE = `Info/Help at our <a href="${s.DISCORD_CHANNEL}" target="_blank">Discord</a>`
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardDataController = void 0;
    const i = a(3),
        o = a(7),
        n = a(335);
    var r = i.GameStateEnums.CardTypeEnum;
    class s {
        static getCardDataForCard(e) {
            for (const t of s.cardDataList)
                if (t.cardEnum == e) return t.getNewInstanceOfData()
        }
        static getBaseCardDataForType(e) {
            const t = s.getCardEnumsOfTypes(e),
                a = [];
            for (const e of t) {
                const t = s.getCardDataForCard(e);
                null != t && a.push(t)
            }
            return a
        }
        static getCardBackOfCard(e) {
            const t = s.getCardDataForCard(e);
            if (null != t)
                for (const e of s.cardDataList)
                    if (e.cardTypeEnum == t.cardTypeEnum && e.isCardBack) return e.cardEnum
        }
        static getCardEnumsOfTypes(e) {
            const t = [];
            for (const a of s.cardDataList) a.isCardBack || (0, o.elementInArray)(e, a.cardTypeEnum) && t.push(a.cardEnum);
            return t
        }
        static convertArrayOfCardsToString(e) {
            let t = " ";
            for (const a of e) {
                const e = s.getCardDataForCard(a);
                null != e && (t += `:${e.imageFileName}:`)
            }
            return t
        }
        static areCardsValidInputForType(e, t) {
            const a = (0, o.removeDuplicatesFromArray)(e);
            for (const e of a) {
                const a = s.getCardDataForCard(e);
                if (null != a) {
                    if (a.isCardBack) return !1;
                    if (!(0, o.elementInArray)(t, a.cardTypeEnum)) return !1
                }
            }
            return !0
        }
        static isResourceCard(e) {
            const t = s.getCardDataForCard(e);
            return null != t && (t.cardTypeEnum == r.Resource || t.cardTypeEnum == r.Commodity)
        }
    }
    t.CardDataController = s, s.cardDataList = [new n.CardResourceBack, new n.CardLumber, new n.CardBrick, new n.CardWool, new n.CardGrain, new n.CardOre, new n.CardDevelopmentCardBack, new n.CardKnight, new n.CardVictoryPoint, new n.CardMonopoly, new n.CardRoadBuilding, new n.CardYearOfPlenty, new n.CardCommodityBack, new n.CardCommodityCloth, new n.CardCommodityCoin, new n.CardCommodityPaper, new n.CardProgressScienceCardBack, new n.CardProgressScienceAlchemist, new n.CardProgressScienceCrane, new n.CardProgressScienceEngineer, new n.CardProgressScienceInventor, new n.CardProgressScienceIrrigation, new n.CardProgressScienceMedicine, new n.CardProgressScienceMining, new n.CardProgressSciencePrinter, new n.CardProgressScienceRoadBuilding, new n.CardProgressScienceSmith, new n.CardProgressPoliticsCardBack, new n.CardProgressPoliticsBishop, new n.CardProgressPoliticsConstitution, new n.CardProgressPoliticsDeserter, new n.CardProgressPoliticsDiplomat, new n.CardProgressPoliticsIntrigue, new n.CardProgressPoliticsSaboteur, new n.CardProgressPoliticsSpy, new n.CardProgressPoliticsWarlord, new n.CardProgressPoliticsWedding, new n.CardProgressTradeCardBack, new n.CardProgressTradeCommercialHarbor, new n.CardProgressTradeMasterMerchant, new n.CardProgressTradeMerchant, new n.CardProgressTradeMerchantFleet, new n.CardProgressTradeResourceMonopoly, new n.CardProgressTradeCommodityMonopoly]
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Application = void 0;
    const i = a(8),
        o = a(6);
    class n extends i.Renderer {
        constructor(e) {
            e.autoDensity = !0, super(e), this.ticker = i.Ticker.shared, this.stage = new o.Container, this.ticker.add(() => this.loop())
        }
        checkDirtyOfSingleElement(e) {
            e.dirty && (this.dirty = !0, e.dirty = !1)
        }
        checkDirty(e) {
            this.checkDirtyOfSingleElement(e);
            for (const t of e.children) this.checkDirtyOfSingleElement(t), this.checkDirty(t)
        }
        loop() {
            this.dirty = !1, this.checkDirty(this.stage), this.dirty && (this.render(this.stage), this.dirty = !1)
        }
    }
    t.Application = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getQuestionMarkAmountForCard = t.loginAction = t.getParameterByName = t.turnSecondsInToTimerFormat = t.getDisableAdBlock = t.getNameFromText = void 0;
    const i = a(7),
        o = a(41);

    function n(e, t) {
        const a = e.split("><b>").pop();
        if (null == a) return;
        const i = a.split(t)[0];
        return null == i || i.indexOf("<b>") >= 0 || i.indexOf("<img") >= 0 ? void 0 : i
    }
    t.getNameFromText = function(e) {
        const t = n(e, ":</b>");
        if (null != t) return t;
        const a = n(e, "</b>");
        return null != a ? a : void 0
    }, t.getDisableAdBlock = function() {
        return "<h2>Google Chrome / Firefox</h2>\n    <p><strong>AdBlock Plus</strong></p>\n    <ul>\n        <li style="list-style-type:disc;">Click on the AdBlock Plus icon next to the browser’s address bar</li>\n        <img class="alignnone size-full wp-image-4026016" src="https://i.imgur.com/RK1uKd9.jpeg?quality=70&amp;strip=all&amp;w=170&amp;h=57" alt="" width="172" height="57" style="border:solid 1px #cccccc;">\n        <li style="list-style-type:disc;">Click on <strong>Enabled on this site</strong></li>\n        <img class="alignnone size-full wp-image-4026063" src="https://i.imgur.com/2G4prUd.jpeg?quality=70&amp;strip=all&amp;w=242&amp;h=195" alt="" width="244" height="195" style="border:solid 1px #cccccc;">\n        <li style="list-style-type:disc;">Once disabled, the menu option should read <strong>Disabled on this site</strong></li>\n        <img class="alignnone size-full wp-image-4026066" src="https://i.imgur.com/aJHByoV.jpeg?quality=70&amp;strip=all&amp;w=244&amp;h=199" alt="" width="246" height="199" style="border:solid 1px #cccccc;">\n        <li style="list-style-type:disc;">Refresh this page and you\"re all good to go.</li>\n    </ul>\n    <p><strong>AdBlock</strong></p>\n    <ul>\n        <li style="list-style-type:disc;">Click on the AdBlock icon next to the browser’s address bar</li>\n        <img class="alignnone size-full wp-image-4026016" src="https://i.imgur.com/hDaayK7.png?quality=70&amp;strip=all&amp;w=170&amp;h=57" alt="" width="172" height="57" style="border:solid 1px #cccccc;">\n        <li style="list-style-type:disc;">Click on <strong>Don’t run on pages on this domain</strong></li>\n        <img class="alignnone size-medium wp-image-4026077" src="https://i.imgur.com/8EaW5mi.jpeg?quality=70&amp;strip=all&amp;w=260&amp;h=295" alt="" width="262" height="295" style="border:solid 1px #cccccc;">\n        <li style="list-style-type:disc;">A settings dialog box will come up to confirm turning off ad blocking for <strong>colonist.io</strong></li>\n        <img class="alignnone size-medium wp-image-4026136" src="https://i.imgur.com/qlXjHKL.png?quality=70&amp;strip=all&amp;w=296&amp;h=126" alt="" width="298" height="126" style="border:solid 1px #cccccc;">\n        <li style="list-style-type:disc;">Click <strong>Exclude</strong></li>\n        <img class="alignnone size-full wp-image-4026138" src="https://i.imgur.com/Y9p6GeB.jpeg?quality=70&amp;strip=all&amp;w=130&amp;h=49" alt="" width="132" height="49" style="border:solid 1px #cccccc;">\n        <li style="list-style-type:disc;">Refresh this page and you\"re all good to go.</li>\n    </ul>\n    <h2>Safari</h2>\n    <ul>\n        <li style="list-style-type:disc;">Click on Safari located in the menu bar of your browser and select <strong>Preferences</strong></li>\n        <li style="list-style-type:disc;">Select the <strong>Websites</strong> section in the Preference window, which brings up a list of <strong>General</strong><br>\n            options on the left.</li>\n        <li style="list-style-type:disc;">Select <strong>Content Blockers</strong>. A list of websites will come up with options to turn “on” or “off” content blockers. Select “Off” for <strong>colonist.io</strong></li>\n        <li style="list-style-type:disc;">Close the Preference window</li>\n        <li style="list-style-type:disc;">Refresh this page and you\"re all good to go.</li>\n    </ul>\n    <h2>Safari on iPhone / iPad</h2>\n    <ul>\n        <li style="list-style-type:disc;">Open iPhone / iPad <strong>Settings</strong></li>\n        <li style="list-style-type:disc;">Select <strong>Safari</strong> from the list of settings</li>\n        <li style="list-style-type:disc;">Under the <strong>General</strong> section, select <strong>Content Blockers</strong></li>\n        <li style="list-style-type:disc;">Toggle off the ad blocker</li>\n        <li style="list-style-type:disc;">Refresh this page and you\"re all good to go.</li>\n        <li style="list-style-type:disc;">If ad blocker is still detected, restart Safari and try again</li>\n    </ul>\n    <h2>Internet Explorer</h2>\n    <ul>\n        <li style="list-style-type:disc;">Click the gear icon to open Settings.</li>\n        <li style="list-style-type:disc;">Select the Manage Add-ons option on the drop-down list.</li>\n        <li style="list-style-type:disc;">Click the Toolbars and Extensions link in the left navigation pane.</li>\n        <li style="list-style-type:disc;">Right-click the AdBlock add-on name in the list, then click the Disable button.</li>\n        <li style="list-style-type:disc;">Click the Disable button in the confirmation window to disable the Adblock add-on.</li>\n        <li style="list-style-type:disc;">Refresh this page and you\"re all good to go.</li>\n    </ul>"
    }, t.turnSecondsInToTimerFormat = function(e) {
        const t = Math.floor(e / i.Utils.MINUTES_IN_HOUR / i.Utils.SECONDS_IN_MINUTE),
            a = Math.floor(e % (i.Utils.SECONDS_IN_MINUTE * i.Utils.MINUTES_IN_HOUR) / i.Utils.SECONDS_IN_MINUTE),
            o = Math.floor(e % i.Utils.SECONDS_IN_MINUTE);
        let n = "";
        return t > 0 && (n += t + ":"), n += a >= 10 ? a : a > 0 ? "0" + a : "00", n += ":", n += o > 9 ? o : "0" + o, n
    }, t.getParameterByName = function(e, t) {
        t || (t = window.location.href), e = e.replace(/[[\]]/g, "\\$&");
        const a = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)").exec(t);
        return a ? a[2] ? decodeURIComponent(a[2].replace(/\+/g, " ")) : "" : null
    }, t.loginAction = function() {
        window.location.href = o.UIAPIEndpoints.googleAuth()
    }, t.getQuestionMarkAmountForCard = function(e, t) {
        return t ? 0 == e ? "0" : e <= 7 ? "?" : e <= 13 ? "??" : "???" : String(e)
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.RulebookConfig = void 0,
        function(e) {
            e.rulebookRoute = "catan-rules", e.setLanguageRoute = "setlanguage", e.navigationCurrentPageClass = "top-navigation-link-current-page", e.navigationPageLinkAttribute = "rulebook-page-link", e.navigationSectionLinkAttribute = "rulebook-section-link", e.navigationCurrentSectionClass = "side-navigation-link-current-section", e.navigationCloseID = "rulebook-navigation-close", e.languageSelectorID = "rulebook-language-selector", e.languageSelectorClass = "rulebook-language-selector"
        }(t.RulebookConfig || (t.RulebookConfig = {}))
}, , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewWithBadge = void 0;
    const i = a(13),
        o = a(38),
        n = a(25),
        r = a(28),
        s = a(80),
        c = a(23);
    class l extends s.UIGameActionButtonView {
        constructor(e, t, a, o) {
            super(e, t, a);
            const n = this.height / 3,
                r = .075 * this.width,
                s = .04 * this.height,
                l = this.width - n,
                h = c.GameUIImages.getButtonBadgeForPlayer(this.uiGameManager.gameState.myColor);
            this.numberBadge = new i.SpriteView(l - r, s, n, n, this.viewContainer, h), this.countTextView = this.createCardCountText(o), this.uiGameManager.gameState.isPlayerSpectator() && this.removeButtonBadge()
        }
        createCardCountText(e) {
            const t = .08 * this.width,
                a = .04 * this.height,
                i = new o.TextView(String(e), .8 * this.width - t, a, this.width, this.height, this.viewContainer, void 0, void 0, !1),
                s = n.GameFont.getResponsiveSize(n.GameFont.Size.L);
            e > 9 && (i.x -= this.width / 15);
            const c = r.GameColor.getColor(r.GameColor.Color.DarkGrey),
                l = r.GameColor.getColor(r.GameColor.Color.OffWhite);
            return i.style = {
                fontSize: s + "px",
                display: "block",
                fill: l,
                fontStyle: "bold",
                stroke: c,
                strokeThickness: 2
            }, i
        }
        updateBadgeCount(e) {
            if (e < 0 && (e = 0), this.countTextView.text == String(e)) return;
            this.countTextView.text = String(e);
            const t = n.GameFont.getResponsiveSize(n.GameFont.Size.L),
                a = .08 * this.width;
            this.countTextView.x = .8 * this.width - a, e > 9 && (this.countTextView.x -= this.width / 15), this.countTextView.style.fontSize = t + "px"
        }
        removeButtonBadge() {
            this.removeNumberBadge(), this.removeNumberText()
        }
        removeNumberBadge() {
            null != this.numberBadge.parent && this.numberBadge.parent.removeChild(this.numberBadge)
        }
        removeNumberText() {
            null != this.countTextView.parent && this.countTextView.parent.removeChild(this.countTextView)
        }
        updateOpacity(e) {
            super.updateOpacity(e), this.numberBadge.alpha != e && (this.numberBadge.alpha = e)
        }
    }
    t.UIGameActionButtonViewWithBadge = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RulebookPageGenerator = void 0;
    const i = a(24),
        o = a(55),
        n = a(43),
        r = a(34);
    t.RulebookPageGenerator = class {
        static setRulebookPage(e) {
            this.rulebookPage = e
        }
        static createPageContent() {
            return n.RulebookElements.createElement()
        }
        static createPageNavigation() {
            return n.RulebookElements.createElement()
        }
        static generatePageNavigationOption(e, t, a, i, r, s = !1) {
            const c = this.createPageSectionLink(e, t),
                l = n.RulebookElements.createDivIn(c, "rulebook-side-nav-option"),
                h = n.RulebookElements.createDivIn(l, "rulebook-side-nav-option-img");
            return n.RulebookElements.createImgIn(h, a), n.RulebookElements.createSpanIn(l, "rulebook-side-nav-option-text", i), r && n.RulebookElements.createSpanIn(l, "rulebook-side-nav-option-subtext", r), s && c.classList.add(o.RulebookConfig.navigationCurrentSectionClass), c
        }
        static createPageSectionLink(e, t, a = "") {
            const i = `${this.rulebookPage}.${t}.href`,
                s = null == t ? "" : r.RulebookDictionary.get(i),
                c = n.RulebookElements.createElementIn(e, "a");
            return c.setAttribute(o.RulebookConfig.navigationSectionLinkAttribute, ""), c.innerHTML = a, c.href = "#" + s, c
        }
        static createPageSection(e, t) {
            const a = `${this.rulebookPage}.${t}.href`,
                i = r.RulebookDictionary.get(a);
            return n.RulebookElements.createElementIn(e, "section", void 0, i)
        }
        static createPageTitle(e, t) {
            const a = n.RulebookElements.createElementIn(e, "h1");
            return a.innerHTML = t, a
        }
        static createPageSectionTitle(e, t, a) {
            const i = n.RulebookElements.createElementIn(e, "div", "rulebook-section-title-container");
            n.RulebookElements.createElementIn(i, "h2", "rulebook-section-title", void 0, t);
            const o = n.RulebookElements.createDivIn(i, "rulebook-section-title-link-icon"),
                r = `(async () => { await navigator.clipboard.writeText("${a}"); })();`;
            return n.RulebookElements.createImgIn(o, "rulebook/icon_link.svg").setAttribute("onclick", r), i
        }
        static createPageSectionSubtitle(e, t) {
            return n.RulebookElements.createElementIn(e, "h3", void 0, void 0, t)
        }
        static createPageSectionParagraph(e, t) {
            return n.RulebookElements.createElementIn(e, "p", "rulebook-content-section-paragraph", void 0, t)
        }
        static createPageSectionTable(e, t) {
            const a = n.RulebookElements.createElementIn(e, "table");
            if (null == t) return a;
            for (const e of t) {
                const t = n.RulebookElements.createElementIn(a, "tr");
                for (const a of e) {
                    const e = n.RulebookElements.createElementIn(t, "td");
                    if ("string" == typeof a) e.innerHTML = a;
                    else if (Array.isArray(a))
                        for (const t of a) e.appendChild(t);
                    else e.appendChild(a)
                }
            }
            return a
        }
        static createPageSectionNote(e, t) {
            return n.RulebookElements.createDivIn(e, "rulebook-content-note", void 0, t)
        }
        static createPageSectionGrid(e, t) {
            const a = n.RulebookElements.createDivIn(e, "rulebook-content-grid");
            return t.forEach(e => {
                a.appendChild(e)
            }), a
        }
        static createPageSectionImageSpread(e, t) {
            return n.RulebookElements.createImgIn(e, t, "rulebook-content-image-spread")
        }
        static createPageSectionImageSpreadFull(e, t) {
            const a = this.createPageSectionImageSpread(e, t);
            return a.classList.add("rulebook-content-image-spread-fullscreen"), a
        }
        static createPageSectionSpacer(e, t) {
            const a = n.RulebookElements.createDivIn(e);
            return a.style.height = t + "px", a
        }
        static createPageSectionList(e, t, a) {
            const i = n.RulebookElements.createElementIn(e, t);
            for (const e of a) {
                n.RulebookElements.createElementIn(i, "li").innerHTML = e
            }
            return i
        }
        static createPageSectionDiv(e, t) {
            const a = n.RulebookElements.createDivIn(e);
            return t && a.appendChild(t), a
        }
        static generateSharableLinkToPage(e) {
            const t = n.RulebookElements.generateRulebookURLPath(this.rulebookPage, e);
            return `${i.KatanConfigs.siteURL()}${t}`
        }
    }
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CityImprovement = t.CityImprovementTypes = void 0;
    const i = a(3),
        o = a(21);
    var n, r = i.GameStateEnums.CardEnum;
    ! function(e) {
        e[e.Trade = 0] = "Trade", e[e.Politics = 1] = "Politics", e[e.Science = 2] = "Science"
    }(n = t.CityImprovementTypes || (t.CityImprovementTypes = {}));
    t.CityImprovement = class {
        constructor(e) {
            this.improvementType = e, this.level = 0, this.hasMetropolis = !1, this.canPlayerPurchaseUpgrade = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            }, this.cityImprovementUpgradeDiscount = 0
        }
        getCostForNextUpgrade() {
            if (5 == this.level) return;
            const e = this.level + 1 - this.cityImprovementUpgradeDiscount,
                t = this.getCommodityRequiredForUpgrade();
            return new Array(e).fill(t)
        }
        getCommodityRequiredForUpgrade() {
            switch (this.improvementType) {
                case n.Politics:
                    return r.Coin;
                case n.Science:
                    return r.Paper;
                case n.Trade:
                    return r.Cloth
            }
        }
        static convertCityImprovementTypeToMetropolisType(e) {
            switch (e) {
                case n.Politics:
                    return o.TileEnums.CornerBonusTypes.MetropolisPolitics;
                case n.Science:
                    return o.TileEnums.CornerBonusTypes.MetropolisScience;
                case n.Trade:
                    return o.TileEnums.CornerBonusTypes.MetropolisTrade
            }
        }
        static isCornerBonusMetropolis(e) {
            switch (e) {
                case o.TileEnums.CornerBonusTypes.MetropolisPolitics:
                case o.TileEnums.CornerBonusTypes.MetropolisTrade:
                case o.TileEnums.CornerBonusTypes.MetropolisScience:
                    return !0;
                default:
                    return !1
            }
        }
        deserialize(e) {
            Object.assign(this, e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SpriteButtonView = void 0;
    const i = a(6),
        o = a(13),
        n = a(31),
        r = a(156);
    class s extends r.GeneralButtonView {
        constructor(e, t, a, i, o) {
            super(e, t, a, i, o), this.iconDefaultSizeRatio = .6, this.assets = []
        }
        addCenteredIcon(e, t) {
            const a = null == t ? this.iconDefaultSizeRatio : t,
                i = this.height * a,
                n = e.width / e.height * i,
                r = (this.width - n) / 2,
                s = (this.height - i) / 2,
                c = new o.SpriteView(r, s, n, i, this.viewContainer, e);
            this.assets.push(c), this.centerIconInX(c), this.centerIconInY(c)
        }
        centerIconInX(e) {
            const t = .02 * this.width,
                a = (this.width - t - e.width) / 2;
            e.x = a
        }
        centerIconInY(e) {
            const t = .02 * this.height,
                a = (this.height - t - e.height) / 2;
            e.y = a
        }
        addAsset(e) {
            this.assets.push(e), null != e.parent && e.parent.removeChild(e), this.viewContainer.addChild(e)
        }
        highlight() {
            this.viewContainer.drawRoundedBg(i.Loader.shared.resources.bg_button_highlight.texture)
        }
        removeHighlight() {
            this.viewContainer.drawRoundedBg(i.Loader.shared.resources.bg_button.texture)
        }
        isSameTexture(e) {
            for (const t of this.assets)
                if (!(t instanceof i.Container) && t.texture == e) return !0;
            return !1
        }
        updateTexture(e) {
            this.removeAllAssets(), this.addCenteredIcon(e)
        }
        activateOpacity() {
            this.updateOpacity(n.ACTIVE_OPACITY)
        }
        inactivateOpacity() {
            this.updateOpacity(n.INACTIVE_OPACITY)
        }
        isButtonOpactityActive() {
            for (const e of this.assets)
                if (e.alpha == n.ACTIVE_OPACITY) return !0;
            return !1
        }
        updateOpacity(e) {
            for (const t of this.assets) t.alpha != e && (t.alpha = e)
        }
        removeAllAssets() {
            for (const e of this.assets) null != e.parent && e.parent.removeChild(e)
        }
    }
    t.SpriteButtonView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupConfirmationButtons = void 0;
    const i = a(127),
        o = a(6),
        n = a(62),
        r = a(27),
        s = a(19);
    class c extends r.SectionView {
        constructor(e, t, a, r, c, l, h, d = !0) {
            super(e, t, a, r, h);
            const u = s.uiGameManager.canvasController.margin,
                g = r - 2 * u,
                m = a - g - 2 * u,
                p = m - g,
                C = o.Loader.shared.resources;
            this.checkButton = new n.SpriteButtonView(m, 0, g, g, this), this.checkButton.addCenteredIcon(C.icon_check.texture), this.checkButton.updateAction(() => {
                c(), i.GameUIToolTips.remove(this.checkButton)
            }), this.checkButton.inactivateOpacity(), this.cancelButton = new n.SpriteButtonView(p, 0, g, g, this), this.cancelButton.addCenteredIcon(C.icon_x.texture), this.cancelButton.updateAction(() => {
                l(), i.GameUIToolTips.remove(this.cancelButton)
            }), d || this.hideCancelButton()
        }
        hideCancelButton() {
            null != this.cancelButton.parent && this.cancelButton.parent.removeChild(this.cancelButton)
        }
        showCancelButton() {
            null == this.cancelButton.parent && this.addChild(this.cancelButton)
        }
    }
    t.UIGamePopupConfirmationButtons = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SectionBgAdaptiveView = void 0;
    const i = a(6),
        o = a(17),
        n = a(119);
    class r extends i.Container {
        drawSectionBgAroundContent(e = 0, t = 0) {
            var a, i;
            null === (i = null === (a = this.sectionBgView) || void 0 === a ? void 0 : a.parent) || void 0 === i || i.removeChild(this.sectionBgView);
            const r = this.absoluteWidth + n.UICanvasConfig.margin + e,
                s = this.absoluteHeight + n.UICanvasConfig.margin + t;
            this.sectionBgView = new o.SectionBgView(0, 0, r, s, this), this.sectionBgView.drawRoundedBg(), this.sectionBgView.zIndex = -1, this.sortChildren()
        }
    }
    t.SectionBgAdaptiveView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.BaseCardData = t.CardClickPopupType = void 0,
        function(e) {
            e[e.None = 0] = "None", e[e.NormalClick = 1] = "NormalClick", e[e.TradeWindow = 2] = "TradeWindow", e[e.InformationPopup = 3] = "InformationPopup", e[e.ConfirmationPopup = 4] = "ConfirmationPopup"
        }(t.CardClickPopupType || (t.CardClickPopupType = {}));
    t.BaseCardData = class {
        getNewInstanceOfData() {
            return new this.constructor
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameModeDataController = void 0;
    const i = a(7),
        o = a(108),
        n = a(113);
    class r {
        static getModeDataForMode(e) {
            for (const t of r.gameModeDataList)
                if (t.modeSetting == e) return t.getNewInstanceOfData()
        }
        static getScenarioDataForScenario(e) {
            for (const t of r.scenarioDataList)
                if (t.scenarioSetting == e) return t.getNewInstanceOfData()
        }
        static getAllowablePlayerCountForMode(e) {
            const t = [],
                a = r.getAvailableGameModeDataForTemporaryMode(e);
            for (const e of a) {
                const a = e.getAllowablePlayerCount();
                t.push(...a)
            }
            return (0, i.removeDuplicatesFromArray)(t.sort((e, t) => e - t))
        }
        static getAvailableGameModeDataForTemporaryMode(e) {
            const t = [],
                a = r.getModeDataForMode(e);
            if (null == a) return t;
            const i = a.temporaryModeSetting;
            for (const e of r.gameModeDataList) e.temporaryModeSetting == i && t.push(e);
            return t
        }
        static getAvailableExtensionsForTemporaryMode(e) {
            const t = [];
            for (const a of r.gameModeDataList) a.temporaryModeSetting == e && ((0, i.elementInArray)(t, a.extensionSetting) || t.push(a.extensionSetting));
            return t
        }
        static getGameModeDataForPlayerCountAndMode(e, t) {
            const a = r.getAvailableGameModeDataForTemporaryMode(t);
            for (const t of a) {
                const a = t.getAllowablePlayerCount();
                if ((0, i.elementInArray)(a, e)) return t
            }
        }
    }
    t.GameModeDataController = r, r.gameModeDataList = [new o.ModeClassic4PData, new o.ModeClassicTutorial4PData, new o.ModeClassic56PData, new o.ModeClassic78PData, new o.ModeSeafarers4PData, new o.ModeSeafarers56PData, new o.ModeCitiesAndKnights4PData, new o.ModeCitiesAndKnights56PData, new o.ModeSeafarersAndCitiesAndKnights4PData, new o.ModeSeafarersAndCitiesAndKnights56PData], r.scenarioDataList = [new n.ScenarioDataNone, new n.ScenarioDataHeadingForNewShores, new n.ScenarioDataFourIslands, new n.ScenarioDataFogIsland, new n.ScenarioDataThroughTheDesert]
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ApplicationDebug = void 0;
    const i = a(53);
    class o extends i.Application {
        constructor(e) {
            super(e), this.totalFrames = 0, this.renderedFrames = 0, this.lastReportCount = 0, this.renderedFrameCount = 0
        }
        checkDirtyOfSingleElement(e) {
            e.dirty && (this.dirty = !0, e.dirty = !1)
        }
        checkDirty(e) {
            this.checkDirtyOfSingleElement(e), this.objectCount += e.children.length;
            for (const t of e.children) this.checkDirtyOfSingleElement(t), this.checkDirty(t)
        }
        loop() {
            this.dirty = !1, this.objectCount = 0, this.checkDirty(this.stage), this.dirty && (this.render(this.stage), this.renderedFrames += 1, this.renderedFrameCount += 1), this.totalFrames += 1, this.lastReportCount += 1, 120 === this.lastReportCount && this.report()
        }
        report() {
            this.lastReportCount = 0;
            const e = Math.round(this.renderedFrames / this.totalFrames * 100);
            console.log(`${e}% frames rendered w/${this.objectCount} objects(${this.renderedFrameCount} rendered since last report.)`), this.renderedFrameCount = 0, this.totalFrames >= Number.MAX_SAFE_INTEGER && (this.totalFrames = 0, this.renderedFrames = 0)
        }
    }
    t.ApplicationDebug = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Container = void 0;
    const i = a(8),
        o = a(29);
    class n extends i.Container {
        constructor() {
            super(), this.transform = new o.Transform, this._dirty = !0
        }
        get alpha() {
            return this._alpha
        }
        set alpha(e) {
            this._alpha = e, this._dirty = !0
        }
        get visible() {
            return this._visible
        }
        set visible(e) {
            this._visible = e, this._dirty = !0
        }
        onChildrenChange() {
            this._dirty = !0
        }
        get absoluteHeight() {
            return this.getLocalBounds().top + this.height
        }
        get absoluteWidth() {
            return this.getLocalBounds().left + this.width
        }
        get dirty() {
            return this._dirty || this.transform.dirty
        }
        set dirty(e) {
            this._dirty = e, e || (this.transform.dirty = !1)
        }
    }
    t.Container = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Graphics = void 0;
    const i = a(8),
        o = a(29),
        n = a(70);
    class r extends i.Graphics {
        constructor() {
            super(), this.transform = new o.Transform, this._geometry = new n.GraphicsGeometry, this._dirty = !0
        }
        get alpha() {
            return this._alpha
        }
        set alpha(e) {
            this._alpha = e, this._dirty = !0
        }
        get visible() {
            return this._visible
        }
        set visible(e) {
            this._visible = e, this._dirty = !0
        }
        get dirty() {
            return this._dirty || this.transform.dirty || this._geometry.graphicsDirty
        }
        set dirty(e) {
            this._dirty = e, e || (this.transform.dirty = !1, this._geometry.graphicsDirty = !1)
        }
        get tint() {
            return this._tint
        }
        set tint(e) {
            this._tint = e, this.dirty = !0
        }
        onChildrenChange() {
            this._dirty = !0
        }
    }
    t.Graphics = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GraphicsGeometry = void 0;
    const i = a(8);
    class o extends i.GraphicsGeometry {
        constructor() {
            super(), this.graphicsDirty = !0
        }
        set dirty(e) {
            this._dirty = e, this.graphicsDirty = !0
        }
        get dirty() {
            return this._dirty
        }
    }
    t.GraphicsGeometry = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Sprite = void 0;
    const i = a(8),
        o = a(29);
    class n extends i.Sprite {
        constructor(e) {
            super(e), this.transform = new o.Transform, this._dirty = !0
        }
        get alpha() {
            return this._alpha
        }
        set alpha(e) {
            this._alpha = e, this._dirty = !0
        }
        get visible() {
            return this._visible
        }
        set visible(e) {
            this._visible = e, this._dirty = !0
        }
        get dirty() {
            return this._dirty || this.transform.dirty
        }
        set dirty(e) {
            this._dirty = e, e || (this.transform.dirty = !1)
        }
        _onTextureUpdate() {
            super._onTextureUpdate(), this._dirty = !0
        }
        get tint() {
            return this._tint
        }
        set tint(e) {
            e !== this._tint && (this._tint = e, this._tintRGB = (e >> 16) + (65280 & e) + ((255 & e) << 16), this._dirty = !0)
        }
        onChildrenChange() {
            this._dirty = !0
        }
    }
    t.Sprite = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BitmapText = void 0;
    const i = a(8),
        o = a(29);
    class n extends i.BitmapText {
        constructor(e, t) {
            super(e, t), this.transform = new o.Transform, this._dirty = !0
        }
        set text(e) {
            super.text = e, this.dirty = !0
        }
        get alpha() {
            return this._alpha
        }
        set alpha(e) {
            this._alpha = e, this._dirty = !0
        }
        get visible() {
            return this._visible
        }
        set visible(e) {
            this._visible = e, this._dirty = !0
        }
        get dirty() {
            return this._dirty || this.transform.dirty
        }
        set dirty(e) {
            this._dirty = e, e || (this.transform.dirty = !1)
        }
        set tint(e) {
            super.tint = e, this.dirty = !0
        }
        onChildrenChange() {
            this._dirty = !0
        }
    }
    t.BitmapText = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Text = void 0;
    const i = a(8),
        o = a(29);
    class n extends i.Text {
        constructor(e, t, a) {
            super(e, t, a), this.transform = new o.Transform, this._dirty = !0
        }
        set text(e) {
            super.text != e && (super.text = e, this._dirty = !0)
        }
        get alpha() {
            return this._alpha
        }
        set alpha(e) {
            this._alpha = e, this._dirty = !0
        }
        get visible() {
            return this._visible
        }
        set visible(e) {
            this._visible = e, this._dirty = !0
        }
        get dirty() {
            return this._dirty || this.transform.dirty
        }
        set dirty(e) {
            this._dirty = e, e || (this.transform.dirty = !1)
        }
        set tint(e) {
            super.tint = e, this.dirty = !0
        }
        onChildrenChange() {
            this._dirty = !0
        }
    }
    t.Text = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.AnimatedSprite = void 0;
    const i = a(8);
    class o extends i.AnimatedSprite {
        constructor(e) {
            super(e), this._dirty = !0, this.animationActive = !1
        }
        get dirty() {
            return this._dirty
        }
        set dirty(e) {
            this._dirty = e, this.animationActive && this.forceAppToContinueRendering()
        }
        forceAppToContinueRendering() {
            this._dirty = !0
        }
        play() {
            super.play(), this._dirty = !0, this.animationActive = !0
        }
        stop() {
            super.stop(), this._dirty = !1, this.animationActive = !1
        }
    }
    t.AnimatedSprite = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.LogRocketController = void 0;
    const i = a(97),
        o = a(7),
        n = a(15);
    t.LogRocketController = class {
        constructor(e, t, a) {
            if (this.active = !1, this.USER_SELECTION_DENOMINATOR = 1e4, !e) return;
            if (0 == t) return;
            if (t) return void(this.active = !0);
            1 == (0, o.randomNumberBetween)(0, this.USER_SELECTION_DENOMINATOR) && (this.active = !0), a(this.active)
        }
        init() {
            this.active && i.init("pt522i/colonist")
        }
        set(e) {
            this.active && i.identify(e.id, {
                name: e.userState.username,
                loggedIn: String(e.userState.isLoggedIn),
                karmaTextStatus: e.userState.karmaTextStatus,
                icon: String(n.LobbyImage[e.userState.icon])
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.isCrawler = void 0;
    const i = a(86),
        o = a(7),
        n = [{
            browserName: "Chrome",
            browserVersion: "15.0.87",
            osName: "Linux"
        }];
    t.isCrawler = function() {
        const e = {
            browserName: i.name,
            browserVersion: i.version,
            osName: null === (t = i.os) || void 0 === t ? void 0 : t.family
        };
        var t;
        for (const t of n)
            if ((0, o.isObjectEqual)(t, e)) return !0;
        return !1
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.AnnouncementView = void 0;
    const i = a(10);
    t.AnnouncementView = class {
        constructor(e, t, a, o, n, r) {
            if (0 == t.length) return;
            const s = (0, i.createDivIn)(a, o),
                c = (0, i.createDivIn)(s, n),
                l = ((0, i.createHeaderIn)(c, e, "pn-title-announcement", "", "H4"), (0, i.createDivIn)(s, r, ""));
            for (const e of t)(0, i.createParagraphIn)(l, e, "")
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.FloatingText = void 0;
    const i = a(25),
        o = a(125),
        n = a(19),
        r = a(102),
        s = a(26);
    class c extends o.BitmapText {
        constructor(e, t) {
            super(e, 0, 0, 0, 0, n.uiGameManager.canvasController.app.stage, i.GameFont.Size.XL, !1), this.valpha = .016;
            const a = n.uiGameManager.canvasController,
                o = t.getGlobalPosition();
            this.x = o.x - this.width / 2 + t.width / 2, this.y = o.y - this.height / 2;
            this.x < 0 && (this.x = 10);
            const c = a.itemSize / 60;
            this.animationController = new r.ViewAnimationController(this, 0, c);
            const l = this.y - a.itemSize;
            this.animationController.animationCompleteCallBack = () => {
                null != this.parent && this.parent.removeChild(this)
            }, this.animationController.animationLoopCallBack = () => {
                this.adjustAlpha()
            };
            const h = new s.Point(this.x, l);
            this.animationController.animateTo(h)
        }
        adjustAlpha() {
            this.alpha -= this.valpha
        }
    }
    t.FloatingText = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCardContainerView = void 0;
    const i = a(6),
        o = a(82);
    var n = a(3).GameStateEnums.CardTypeEnum;
    const r = a(16),
        s = a(17),
        c = a(298),
        l = a(7),
        h = a(26),
        d = a(13);
    class u extends s.SectionBgView {
        constructor(e, t, a, o, n, r, s = !1, l = !1) {
            super(t, a, o, n, r, l), this.cardMarginBetweenTypes = 0, this.cardAddAction = () => {}, this.cardRemoveAction = () => {}, this.cardClickAction = () => {}, this.expandedCardScale = 1.2, this.expandedCardOffsetY = .2, this.initialContainerWidth = o, this.defaultCardMarginBetweenSameType = .1 * this.height + e.canvasController.margin, this.uiGameManager = e, this.cardInventory = new c.UIGameCardViewInventory, s || this.drawRoundedBg(), this.initSizes();
            const h = i.Loader.shared.resources.partition.texture,
                u = .8 * this.cardH,
                g = (n - u) / 2,
                m = h.width / h.height * u;
            this.resourceCardToDevelopmentCardPartition = new d.SpriteView(0, g, m, u, this, h), this.resourceCardToDevelopmentCardPartition.centerYInParent(), this.hidePartition()
        }
        setCardClickAction(e) {
            this.cardClickAction = e
        }
        setCardAddAction(e) {
            this.cardAddAction = e
        }
        setCardRemoveAction(e) {
            this.cardRemoveAction = e
        }
        initSizes() {
            const e = this.initialPosition.h;
            this.cardH = .8 * e, this.cardY = .1 * e, this.cardW = this.cardH / r.UIGameConstants.CARD_RATIO, this.cardMarginBetweenSameType = this.defaultCardMarginBetweenSameType, this.cardMarginBetweenTypes = this.cardW
        }
        addNewCardOfType(e, t = !0) {
            const a = this.cardInventory.getCardTypeCount(e),
                i = new o.CardView(this.uiGameManager, a, this.defaultCardMarginBetweenSameType, this.cardY, this.cardW, this.cardH, e, this);
            i.view.setClickAction(() => {
                this.cardClickAction(e)
            }), this.addCardView(i, t), this.sortChildren()
        }
        addExistingCard(e, t = !0) {
            e.animationController.animationCompleteCallBack = () => {}, e.y = this.cardY, this.addCardView(e, t), this.addChild(e), this.sortChildren();
            const a = this.cardInventory.getCardTypeCount(e.cardData.cardEnum);
            e.updateBadge(a)
        }
        addCardView(e, t = !0) {
            this.cardInventory.addCardView(e), this.rebalanceHand(t), this.cardAddAction(e.cardData.cardEnum), this.addCardExpandFunctionality(e)
        }
        addCardExpandFunctionality(e) {
            if (!e.canCardExpand()) return;
            if (i.utils.isMobile.any) return;
            e.view.setHoverAction(() => {
                this.setCardExpanded(e.cardData.cardEnum)
            }, this.resetExpandedCard.bind(this))
        }
        resetExpandedCard() {
            void 0 !== this.currentlyExpandedCard && (this.currentlyExpandedCard.scale.set(1), this.currentlyExpandedCard.position.y = this.cardY, this.currentlyExpandedCard = void 0, this.sortChildren())
        }
        setCardExpanded(e) {
            const t = this.cardInventory.getTopCardWithType(e);
            void 0 !== t && this.currentlyExpandedCard !== t && (this.resetExpandedCard(), this.currentlyExpandedCard = t, this.currentlyExpandedCard.scale.set(this.expandedCardScale), this.currentlyExpandedCard.position.y -= this.cardH * this.expandedCardOffsetY, this.currentlyExpandedCard.bringCardToFrontOfParent())
        }
        addMultipleCards(e, t = !0) {
            for (const a of e) this.addNewCardOfType(a, t)
        }
        removeCard(e) {
            const t = this.cardInventory.getTopCardWithType(e);
            null != t && (t.parent.removeChild(t), (0, l.removeElementFromArray)(this.cardInventory.cardViews, t), this.rebalanceHand(), this.cardRemoveAction(t.cardData.cardEnum))
        }
        removeAllCards() {
            this.cardInventory.cardViews.length > 0 && (this.removeCard(this.cardInventory.cardViews[0].cardData.cardEnum), this.removeAllCards())
        }
        rebalanceHand(e = !0) {
            if (0 == this.cardInventory.cardViews.length) return;
            const t = this.getPartitionCardIndex();
            null == t ? this.hidePartition() : this.showPartition(), this.calculateNewMargin();
            let a = this.cardInventory.cardViews[0].cardData.cardEnum,
                i = this.defaultCardMarginBetweenSameType;
            for (const [o, n] of this.cardInventory.cardViews.entries()) {
                let r = 0 == o ? this.defaultCardMarginBetweenSameType : this.getNewXOfCard(i, a, n);
                if (a = n.cardData.cardEnum, null != t && o == t && (r = i + this.cardW + this.getPartitionWidth(), this.setPartitionPosition(i)), i = r, e) {
                    const e = new h.Point(r, this.cardY);
                    n.animationController.animateTo(e)
                } else n.x = r
            }
        }
        calculateNewMargin() {
            if (0 == this.cardInventory.cardViews.length) return;
            this.initSizes(), this.resetBadgeForAllCards();
            const e = this.cardInventory.getAllCardEnums(),
                t = this.cardInventory.getAmountOfDifferentTypes(),
                a = e.length - t,
                i = 2 * (this.cardMarginBetweenSameType + this.uiGameManager.canvasController.margin),
                o = t * this.cardMarginBetweenTypes + i,
                n = a * this.cardMarginBetweenSameType,
                r = this.getPartitionWidth();
            if (o + n + r <= this.initialContainerWidth) return;
            let s = (this.initialContainerWidth - o - r) / a;
            const c = s < 0;
            if (s < .2 * this.cardMarginBetweenSameType && this.showBadgeForAllCards(), c) {
                s = 0;
                const e = null != this.resourceCardToDevelopmentCardPartition && null != this.resourceCardToDevelopmentCardPartition.parent ? 2 : 1,
                    a = this.initialContainerWidth - i - this.cardW * e - r;
                this.cardMarginBetweenTypes = a / (t - e)
            }
            this.cardMarginBetweenSameType = s
        }
        getNewXOfCard(e, t, a) {
            return a.cardData.cardEnum == t ? e + this.cardMarginBetweenSameType : e + this.cardMarginBetweenTypes
        }
        getXOfType(e) {
            if (0 == this.cardInventory.cardViews.length) return this.cardMarginBetweenSameType;
            for (const t of this.cardInventory.cardViews)
                if (!(t.cardData.cardEnum < e)) return t.x;
            return this.cardInventory.cardViews[this.cardInventory.cardViews.length - 1].x + this.cardMarginBetweenTypes
        }
        getPartitionCardIndex() {
            if (!(null != this.resourceCardToDevelopmentCardPartition)) return;
            const e = n.Commodity;
            if (this.cardInventory.cardViews.length <= 0) return;
            if (!(this.cardInventory.cardViews[0].cardData.cardTypeEnum > e))
                for (const [t, a] of this.cardInventory.cardViews.entries())
                    if (!(a.cardData.cardTypeEnum <= e)) return t
        }
        setPartitionPosition(e) {
            if (null == this.resourceCardToDevelopmentCardPartition) return;
            const t = this.defaultCardMarginBetweenSameType,
                a = e + this.cardW + t;
            this.resourceCardToDevelopmentCardPartition.x = a, this.showPartition()
        }
        getPartitionWidth() {
            if (null == this.resourceCardToDevelopmentCardPartition) return 0;
            if (!(null != this.resourceCardToDevelopmentCardPartition.parent)) return 0;
            const e = this.defaultCardMarginBetweenSameType;
            return this.resourceCardToDevelopmentCardPartition.width + 2 * e
        }
        hidePartition() {
            null != this.resourceCardToDevelopmentCardPartition && null != this.resourceCardToDevelopmentCardPartition.parent && this.resourceCardToDevelopmentCardPartition.parent.removeChild(this.resourceCardToDevelopmentCardPartition)
        }
        showPartition() {
            null != this.resourceCardToDevelopmentCardPartition && null == this.resourceCardToDevelopmentCardPartition.parent && this.addChild(this.resourceCardToDevelopmentCardPartition)
        }
        resetBadgeForAllCards() {
            for (const e of this.cardInventory.cardViews) e.showBadgeForDefaultCards()
        }
        showBadgeForAllCards() {
            for (const e of this.cardInventory.cardViews) this.showCardCountForDevelopmentCardsLessThanTwo(e)
        }
        showCardCountForDevelopmentCardsLessThanTwo(e) {
            e.showBadgeForDefaultCards();
            this.cardInventory.getCardTypeCount(e.cardData.cardEnum) < 2 || e.showBadge()
        }
        closeUI() {
            null != this.parent && this.parent.removeChild(this)
        }
        fadeAllCardsExcludingCardsOfType(e) {
            for (const t of this.cardInventory.cardViews)(0, l.elementInArray)(e, t.cardData.cardEnum) || t.fadeCard()
        }
    }
    t.UIGameCardContainerView = u
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonView = void 0;
    const i = a(62),
        o = a(78),
        n = a(3);
    var r = n.GameStateEnums.TurnStates,
        s = n.GameStateEnums.UIGameEventEnums;
    const c = a(302),
        l = a(7);
    class h extends i.SpriteButtonView {
        constructor(e, t, a) {
            const i = e.canvasController.itemSize;
            super(0, 0, i, i, a), this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.myPlayer = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor), this.preferedPosition = t, this.repositionedButton = () => {}
        }
        onEvent(e, t) {
            switch (this.buttonSpecificEvents(e, t), t) {
                case s.GameStateUpdated:
                    this.removeCardHoverIfGameOver()
            }
        }
        canPerformBuyAction(e) {
            if (this.uiGameManager.gameState.currentTurnPlayerColor != this.uiGameManager.gameState.myColor) return new o.FloatingText("It"s not your turn", this), !1;
            if (this.uiGameManager.gameState.isGameSetup()) return new o.FloatingText("Finish game setup", this), !1;
            if (this.uiGameManager.gameState.currentTurnState == r.Dice) {
                const e = this.uiGameManager.gameState.diceThrown ? "Finish current action" : "Roll dice first";
                return new o.FloatingText(e, this), !1
            }
            return this.uiGameManager.gameState.currentTurnState == r.SpecialBuildPhase || ((0, l.elementInArray)(n.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) ? this.uiGameManager.gameState.currentTurnState != r.Turn ? (new o.FloatingText("Finish current action", this), !1) : !!e.canTakeAction || (new o.FloatingText(e.errorMessageIfCantTakeAction, this), !1) : (new o.FloatingText("Finish current action", this), !1))
        }
        setHoverAction(e) {
            null != this.hoverResourceInfoLabel && this.hoverResourceInfoLabel.removeHover(), this.updateHover(() => {
                this.hoverResourceInfoLabel = new c.UIGameHoverResourceInfo(e, this, this.uiGameManager.canvasController.app.stage)
            }, () => {
                this.removeCardHover()
            })
        }
        removeCardHover() {
            null != this.hoverResourceInfoLabel && this.hoverResourceInfoLabel.removeHover()
        }
        removeCardHoverIfGameOver() {
            this.uiGameManager.gameState.currentTurnState == r.GameEnd && this.removeCardHover()
        }
    }
    t.UIGameActionButtonView = h
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardView = void 0;
    const i = a(6),
        o = a(3);
    var n = o.GameStateEnums.CardEnum,
        r = o.GameStateEnums.CardTypeEnum,
        s = o.GameStateEnums.UIGameEventEnums;
    const c = a(425),
        l = a(52),
        h = a(65),
        d = a(78),
        u = a(33),
        g = a(102),
        m = a(13),
        p = a(31),
        C = a(7),
        y = a(103),
        S = a(22),
        v = a(28);
    class _ extends i.Container {
        constructor(e, t, a, i, o, r, s, h, d = !1, u = !1) {
            super(), this.x = a, this.y = i, this.width = o, this.height = r, h.addChild(this), this.uiGameManager = e, this.animationController = new g.ViewAnimationController(this);
            const p = l.CardDataController.getCardDataForCard(s),
                C = _.getTextureForCard(s);
            if (this.view = new m.SpriteView(0, 0, o, r, this, C), null == p) return;
            this.cardData = p;
            const y = Object.keys(n).length / 2,
                S = -this.cardData.cardEnum + y;
            this.zIndex = S, this.cardBadgeView = new c.UIGameCardCountBadgeView(t + 1, this), this.hideBadge(), (this.doesCardHaveBadge() || u) && this.showBadge(), d && this.setTip()
        }
        doesCardHaveBadge() {
            return this.cardData.cardTypeEnum != r.Development && (this.cardData.cardTypeEnum != r.ProgressPolitics && (this.cardData.cardTypeEnum != r.ProgressScience && this.cardData.cardTypeEnum != r.ProgressTrade))
        }
        updateBadge(e) {
            null != this.cardBadgeView && this.cardBadgeView.resetCardBadge(e)
        }
        updateTexture(e) {
            e != this.view.texture && (this.view.texture = e)
        }
        hideBadge() {
            this.cardBadgeView.hideBadge()
        }
        showBadge() {
            this.cardBadgeView.showBadge()
        }
        showBadgeForDefaultCards() {
            this.showBadge(), this.doesCardHaveBadge() || this.hideBadge()
        }
        setTip() {
            this.view.setTip(this.cardData.tipTitle, [this.cardData.tipBody])
        }
        canCardExpand() {
            return this.cardData.cardTypeEnum === r.ProgressPolitics || (this.cardData.cardTypeEnum === r.ProgressScience || this.cardData.cardTypeEnum === r.ProgressTrade)
        }
        bringCardToFrontOfParent() {
            if (null == this.parent) return;
            const e = this.parent;
            e.removeChild(this), e.addChild(this)
        }
        activateInventoryCard() {
            this.view.setClickAction(() => {
                this.tappedPlayerCard()
            })
        }
        showTradeWindow() {
            this.uiGameManager.tradeController.clickedTrade(this.view), setTimeout(() => {
                this.uiGameManager.tradeController.addCardToLeftContainer(this.cardData.cardEnum)
            }, 100)
        }
        tappedPlayerCard() {
            if (this.canClickCard()) switch (this.uiGameManager.toolTipController.removeTip(), this.cardData.clickPopupType) {
                case h.CardClickPopupType.None:
                    break;
                case h.CardClickPopupType.NormalClick:
                    this.clickedDevelopmentCard();
                    break;
                case h.CardClickPopupType.TradeWindow:
                    this.showTradeWindow();
                    break;
                case h.CardClickPopupType.InformationPopup:
                    this.createInformationPopup();
                    break;
                case h.CardClickPopupType.ConfirmationPopup:
                    this.createCardConfirmationPopup()
            }
        }
        canClickCard() {
            if (this.uiGameManager.gameState.currentTurnPlayerColor != this.uiGameManager.gameState.myColor) return new d.FloatingText("It is not your turn", this), !1;
            if (this.uiGameManager.gameState.currentTurnState == o.GameStateEnums.TurnStates.SpecialBuildPhase) {
                const e = this.cardData.clickPopupType == h.CardClickPopupType.TradeWindow ? S.EnglishTexts.ERROR_TRADING_DISABLED : S.EnglishTexts.ERROR_DEFAULT_DEVELOPMENT_CARDS_DISABLED;
                return new d.FloatingText(e, this), !1
            }
            if (!(0, C.elementInArray)(o.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState)) return new d.FloatingText("Finish current action", this), !1;
            if (!this.isValidTurnState()) {
                const e = this.cardData.cardEnum == n.ProgressCardScienceAlchemist ? "Can only be played before rolling dice" : "Finish current action";
                return new d.FloatingText(e, this), !1
            }
            return !0
        }
        fadeCard() {
            this.view.tint = v.GameColor.getColorHexValue(v.GameColor.Color.CardViewFadedTint), this.cardBadgeView.fadeCardBadge(), this.setTip()
        }
        isValidTurnState() {
            return null == this.cardData.allowableTurnStates || !!(0, C.elementInArray)(this.cardData.allowableTurnStates, this.uiGameManager.gameState.currentTurnState)
        }
        clickedDevelopmentCard() {
            this.uiGameManager.socketGameSend.clickedDevelopmentCard(this.cardData.cardEnum)
        }
        createInformationPopup() {
            u.UIPopupController.createSimplePopup(this.cardData.tipTitle, this.cardData.popupBody)
        }
        static getTextureForCard(e) {
            const t = l.CardDataController.getCardDataForCard(e);
            return null == t ? ((0, p.logError)("getTextureForCard", [e]), i.Loader.shared.resources.card_rescardback.texture) : i.Loader.shared.resources[t.imageFileName].texture
        }
        createCardConfirmationPopup() {
            this.uiGameManager.socketGameSend.requestActionSwap(o.NetworkEnums.Action.ClickedDevelpomentCard);
            const e = y.UIGamePopupInformationView.getPopupInformationForCardData(this.cardData),
                t = {
                    cardEnum: this.cardData.cardEnum,
                    popupInformation: e
                };
            this.uiGameManager.eventController.sendEvent(t, s.ConfirmUseDevelopmentCard)
        }
    }
    t.CardView = _
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MovingSpriteView = void 0;
    const i = a(13),
        o = a(102);
    class n extends i.SpriteView {
        constructor(e, t, a, i, n, r, s, c, l = 0) {
            super(e, t, a, i, n, r, l), this.animationController = new o.ViewAnimationController(this, s, c)
        }
    }
    t.MovingSpriteView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BaseMapData = void 0;
    t.BaseMapData = class {
        isMapPremium() {
            return !!this.isMapRestrictedByPremiumGameMode() || !!this.isMapRestrictedByPremiumMap()
        }
        isMapRestrictedByPremiumGameMode() {
            return 0 != this.premiumExpanionAccess.length
        }
        isMapRestrictedByPremiumMap() {
            return 0 != this.premiumMapAccess.length
        }
        getNewInstanceOfData() {
            return new this.constructor
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UISceneController = t.Scene = void 0;
    const i = a(19),
        o = a(96);
    var n;
    ! function(e) {
        e[e.LandingPage = 0] = "LandingPage", e[e.Lobby = 1] = "Lobby", e[e.Room = 2] = "Room", e[e.Game = 3] = "Game"
    }(n = t.Scene || (t.Scene = {}));
    t.UISceneController = class {
        constructor(e) {
            this.scene = n.Lobby, this.uiManager = e
        }
        get scene() {
            return this._scene
        }
        set scene(e) {
            this._scene = e
        }
        loadScene(e) {
            switch (this.scene = e, this.hideAllScenes(), e) {
                case n.Lobby:
                    this.loadLobbyScene();
                    break;
                case n.Room:
                    this.loadRoomScene();
                    break;
                case n.Game:
                    this.loadGameScene();
                    break;
                case n.LandingPage:
                    this.loadLandingPageScene()
            }
        }
        hideAllScenes() {
            this.uiManager.header.hide(), this.uiManager.footer.hide(), this.uiManager.landingPage.hide(), this.uiManager.lobby.hide(), this.uiManager.room.hide()
        }
        loadLandingPageScene() {
            this.uiManager.header.show(), this.uiManager.footer.show(), this.uiManager.landingPage.show()
        }
        loadLobbyScene() {
            this.uiManager.header.show(), this.uiManager.footer.show(), this.uiManager.lobby.show()
        }
        loadRoomScene() {
            this.uiManager.header.show(), this.uiManager.footer.show(), this.uiManager.room.show()
        }
        loadGameScene() {
            this.uiManager.matchmakingController.removePopups(), this.uiManager.adController.removeLobbyAds(), o.UITopNotificationController.removeDisconnectBanners(), i.uiGameManager.canvasController.buildGame()
        }
    }
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewPopupInput = void 0;
    const i = a(36),
        o = a(10),
        n = a(11);
    class r extends i.ViewPopup {
        constructor(e, t, a, i, n) {
            super(e, t, () => {}, i, n), this.inputCheckAction = a, this.form = (0, o.createFormIn)(this.body, "", ""), this.form.onsubmit = () => {
                this.checkAction()
            }, this.input = (0, o.createInputIn)(this.form, "", "popupInput"), this.input.type = "text", this.input.autocomplete = "off", this.checkButton.onclick = () => {
                this.checkAction()
            }, this.createCheckOpacity()
        }
        createCheckOpacity() {
            this.input.oninput = () => {
                this.updateCheckOpacity()
            }
        }
        updateCheckOpacity() {
            this.inputLengthIsInRange() ? this.checkButton.style.opacity = "1" : this.checkButton.style.opacity = "0.5"
        }
        inputLengthIsInRange() {
            return this.input.value.length >= this.input.minLength && this.input.value.length <= this.input.maxLength
        }
        checkAction() {
            n.Sound.playSound(n.Sound.SoundType.Click), this.inputLengthIsInRange() && (this.inputCheckAction(this.input.value), this.removePopup())
        }
        setDefaultValue(e) {
            this.input.value = e
        }
        setLengthLimits(e, t) {
            this.input.minLength = e, this.input.maxLength = t
        }
    }
    t.ViewPopupInput = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TextButtonView = void 0;
    const i = a(6),
        o = a(38),
        n = a(25),
        r = a(156);
    class s extends r.GeneralButtonView {
        constructor(e, t, a, r, s) {
            super(e, t, a, r, s), this.textView = new o.TextView("", 0, 0, this.width, this.height, this.viewContainer, n.GameFont.Size.Normal), this.viewContainer.drawRoundedBg(i.Loader.shared.resources.bg_text_button_light_green.texture)
        }
        highlight() {
            this.viewContainer.drawRoundedBg(i.Loader.shared.resources.bg_text_button_active.texture)
        }
        removeHighlight() {
            this.viewContainer.drawRoundedBg(i.Loader.shared.resources.bg_text_button_inactive.texture)
        }
        updateFont(e) {
            this.textView.style.fontSize = n.GameFont.getResponsiveSize(e), this.textView.centerX(), this.textView.repositionY(!0)
        }
        updateText(e) {
            this.textView.text != e && (this.textView.text = e, this.textView.centerX(), this.textView.repositionY(!0))
        }
    }
    t.TextButtonView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.getContent = t.getPatchNote = t.PatchNoteType = void 0,
        function(e) {
            e.Feature = "Feature", e.Update = "Update", e.Fix = "Fix", e.Category = "Category"
        }(t.PatchNoteType || (t.PatchNoteType = {})), t.getPatchNote = function(e, t, a, i, o) {
            return {
                date: new Date(e, t - 1, a),
                version: i,
                contents: o
            }
        }, t.getContent = function(e, t, a, i, o, n) {
            return {
                type: e,
                description: t,
                contributors: null == a ? [] : a,
                beforeImgUrl: i,
                afterImgUrl: o,
                links: n
            }
        }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerAvatarContainerView = void 0;
    const i = a(50),
        o = a(31),
        n = a(127),
        r = a(17);
    class s extends r.SectionBgView {
        constructor(e, t, a, i, o, n, r, s, c) {
            super(t, a, i, o, s), this.uiGameManager = e, this.playerAvatars = [];
            const l = n.length,
                h = this.uiGameManager.gameState.getPlayersWithColor(n);
            l * this.height <= this.width ? this.createSingleHorizontalLineOfPlayerAvatars(h, r, c) : this.createStackedLinesOfPlayerAvatars(h, r);
            this.drawRoundedBg(void 0, !1), this.fadeAllPlayers()
        }
        createSingleHorizontalLineOfPlayerAvatars(e, t, a) {
            const o = s.calculateSpacingBetweenAvatars(this.width, this.height, e.length);
            let n = 2 * o;
            for (const r of e) {
                const e = new i.UIGamePlayerAvatarView(n, 0, this.height, this, r, a);
                e.setClickAction(t), this.playerAvatars.push(e), n += o + this.height
            }
        }
        createStackedLinesOfPlayerAvatars(e, t) {
            const a = this.height;
            for (const [o, n] of e.entries()) {
                const e = 0 == o || 2 == o ? 0 : a / 2,
                    r = 0 == o || 1 == o ? 0 : a / 2,
                    s = new i.UIGamePlayerAvatarView(e, r, a / 2, this, n);
                s.setClickAction(t), this.playerAvatars.push(s)
            }
        }
        updatePlayerAlpha(e, t) {
            this.fadeAllPlayers();
            for (const a of this.playerAvatars) a.playerState.color == e && (a.alpha = t)
        }
        resetAllPlayerAlpha() {
            for (const e of this.playerAvatars) e.alpha = o.ACTIVE_OPACITY
        }
        fadeAllPlayers() {
            for (const e of this.playerAvatars) e.alpha = o.INACTIVE_OPACITY
        }
        setPlayerStatus(e, t) {
            for (const a of this.playerAvatars)
                if (a.playerState.color == e) return void(a.status = t)
        }
        removeHovers() {
            for (const e of this.playerAvatars) n.GameUIToolTips.remove(e)
        }
        removeSpacingBetweenPlayerAvatarsAndCenterInContainer() {
            const e = this.playerAvatars.length * this.height;
            let t = this.width / 2 - e / 2;
            for (const e of this.playerAvatars) e.x = t, t += e.width
        }
        setToolTipForAllPlayerAvatars(e) {
            for (const t of this.playerAvatars) t.setToolTip(e)
        }
        removeRoundedBackground() {
            this.removeRoundedBg()
        }
        static calculateSpacingBetweenAvatars(e, t, a) {
            return (e - t * a) / (3 + a)
        }
    }
    t.UIGamePlayerAvatarContainerView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const i = a(10),
        o = a(16);
    t.default = class {
        constructor(e, t, a, n) {
            this.active = !0, this.mouseDownRecently = !1, this.uiGameHelpButtonController = e, this.unit = (0, i.createDivIn)(t, a), this.image = (0, i.createImgIn)(this.unit, "help_button_img", "", o.UIGameConstants.getImagePath(n), a), this.content = (0, i.createDivIn)(this.unit, "help_button_contents"), this.content.onpointerdown = () => {
                this.mouseDownRecently = !0
            }, this.image.addEventListener("pointerdown", this.clicked.bind(this)), this.setContainerActive(!1)
        }
        clicked(e) {
            this.mouseDownRecently = !0, this.active ? this.uiGameHelpButtonController.closeAllContainers() : (this.uiGameHelpButtonController.closeAllContainers(), this.setContainerActive(!0))
        }
        setContainerActive(e) {
            if (this.active === e) return;
            this.active = e;
            const t = e ? "inline-block" : "none";
            this.content.style.display = t
        }
        swapImage(e) {
            this.image.src != e && (this.image.src = o.UIGameConstants.getImagePath(e))
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.generateRulebookSideNavigation = void 0;
    const i = a(42);
    t.generateRulebookSideNavigation = function(e = i.RulebookPage.Classic4P) {
        return (0, i.getRulebookPageGenerator)(e).createPageNavigation()
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.KnightPiece = t.KnightActionTypes = void 0;
    const i = a(20);
    var o = a(21).TileEnums.CornerBuildingTypes;
    ! function(e) {
        e[e.PlaceKnight = 0] = "PlaceKnight", e[e.ActivateKnight = 1] = "ActivateKnight", e[e.UpgradeKnight = 2] = "UpgradeKnight", e[e.UseKnight = 3] = "UseKnight"
    }(t.KnightActionTypes || (t.KnightActionTypes = {}));
    t.KnightPiece = class {
        constructor(e, t, a) {
            this.owner = e, this.level = t, this._activated = !1, this._mapLocation = void 0, this.unlocked = a, this.activatedThisTurn = !1, this.upgradedThisTurn = !1
        }
        get activated() {
            return this._activated
        }
        set activated(e) {
            if (this._activated = e, null == this._mapLocation) return;
            const t = this.getKnightCornerBuildingType();
            null != t && (this._mapLocation.buildingType = t)
        }
        get mapLocation() {
            return this._mapLocation
        }
        set mapLocation(e) {
            this.removeKnightFromMap(), this._mapLocation = e, null != e && this.placeKnightOnMap()
        }
        removeKnightFromMap() {
            null != this._mapLocation && (this._mapLocation.owner = i.PlayerColors.None, this._mapLocation.buildingType = o.Empty, this.activatedThisTurn = !1, this.upgradedThisTurn = !1)
        }
        placeKnightOnMap() {
            if (null == this._mapLocation) return;
            const e = this.getKnightCornerBuildingType();
            null != e && (this._mapLocation.owner = this.owner, this._mapLocation.buildingType = e)
        }
        getKnightStrength() {
            return null == this.mapLocation ? 0 : this.activated ? this.level : 0
        }
        getKnightCornerBuildingType() {
            switch (this.activated + "|" + this.level) {
                case !0 + "|1":
                    return o.KnightActiveLevel1;
                case !0 + "|2":
                    return o.KnightActiveLevel2;
                case !0 + "|3":
                    return o.KnightActiveLevel3;
                case !1 + "|1":
                    return o.KnightInactiveLevel1;
                case !1 + "|2":
                    return o.KnightInactiveLevel2;
                case !1 + "|3":
                    return o.KnightInactiveLevel3
            }
        }
        getImageName() {
            const e = this.activated ? "active" : "inactive",
                t = i.PlayerColors[this.owner].toLocaleLowerCase();
            return `knight_${e}_level${this.level}_${t}`
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ItemCountView = void 0;
    const i = a(548),
        o = a(25),
        n = a(27),
        r = a(38);
    class s extends n.SectionView {
        constructor(e, t, a, n, s, c, l, h, d, u, g) {
            super(e, t, a, n, s, !0);
            const m = a;
            this.view = new i.HighlightableSpriteView(e, t, m, m, c, s, g), this.count = new r.TextView("0", l, h, d, u, s, o.GameFont.Size.L), this.count.repositionY(!1), this.count.centerX()
        }
        updateText(e) {
            this.count.text != e && (this.count.text = e, this.count.centerX())
        }
        resetTextYPosition() {
            this.count.repositionY(!0)
        }
        showView(e) {
            this.view.showView(e), null == this.count.parent && e.addChild(this.count)
        }
        hideView() {
            this.view.hideView(), null != this.count.parent && this.count.parent.removeChild(this.count)
        }
    }
    t.ItemCountView = s
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UITopNotificationController = void 0;
    const i = a(7),
        o = a(40),
        n = a(98);
    class r {
        static show(e, t, a, i, o) {
            this.views.push(new n.UITopNotificationView(e, t, a, i, o))
        }
        static showDisconnectedGames(e) {
            for (const t of e) {
                if (this.disconnectedGameIds.includes(t.id)) continue;
                if (this.removedDisconnectedGameIds.includes(t.id)) continue;
                this.disconnectedGameIds.push(t.id);
                const e = `Disconnected from ${t.playerCount} player game with id: ${t.id}`;
                this.show(e, n.UITopNotificationType.Reconnect, "Reconnect", () => {
                    o.SocketLobbySend.clickedReconnectGame(t.id)
                }, () => {
                    (0, i.removeElementFromArray)(this.disconnectedGameIds, t.id), this.removedDisconnectedGameIds.push(t.id)
                })
            }
        }
        static removeDisconnectBanners() {
            for (const e of this.views) e.type == n.UITopNotificationType.Reconnect && (e.hide(), (0, i.removeElementFromArray)(this.views, e))
        }
    }
    t.UITopNotificationController = r, r.disconnectedGameIds = [], r.removedDisconnectedGameIds = [], r.views = []
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UITopNotificationView = t.UITopNotificationType = void 0;
    const i = a(15),
        o = a(37),
        n = a(10);
    var r;
    ! function(e) {
        e[e.Broadcast = 0] = "Broadcast", e[e.Error = 1] = "Error", e[e.Purchase = 2] = "Purchase", e[e.Reconnect = 3] = "Reconnect"
    }(r = t.UITopNotificationType || (t.UITopNotificationType = {}));
    class s {
        constructor(e, t, a, r, c) {
            this.type = t, this.container = document.getElementById("top-notification-container"), this.itemContainer = (0, n.createDivIn)(this.container, "top-notification " + s.getClass(t));
            (0, n.createDivIn)(this.itemContainer, "").innerHTML = e, this.createButton(a, r);
            const l = o.LobbyImages.getLobbyImagePath(i.LobbyImage.XMark),
                h = o.LobbyImages.getLobbyImageAlt(i.LobbyImage.XMark);
            (0, n.createImgIn)(this.itemContainer, "store_colonist_coin_popup_close", "", l, h).onclick = () => {
                this.itemContainer.remove(), null != c && c()
            }
        }
        hide() {
            this.itemContainer.remove()
        }
        createButton(e, t) {
            if (null == e || null == t) return;
            (0, n.createLinkIn)(this.itemContainer, "", e, "top-notification-button").onclick = e => {
                e.preventDefault(), t()
            }
        }
        static getClass(e) {
            switch (e) {
                case r.Broadcast:
                    return "broadcast";
                case r.Error:
                    return "error";
                case r.Purchase:
                    return "purchase";
                case r.Reconnect:
                    return "reconnect"
            }
        }
    }
    t.UITopNotificationView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketChat = void 0;
    const i = a(3),
        o = a(39),
        n = a(19);
    t.SocketChat = class {
        constructor(e) {
            e.setSocketId(i.NetworkEnums.State.ChatText.toString(), e => {
                var t;
                null === (t = n.uiGameManager.chatController) || void 0 === t || t.writeToChat(e.text, e.icon), n.uiManager.room.chat.post(e.text, e.icon)
            }), e.setSocketId(i.NetworkEnums.State.ChatGameLog.toString(), e => {
                n.uiGameManager.chatController.writeToLog(e.text, e.icon)
            })
        }
        static sendChat(e) {
            o.SocketController.socket.send(i.NetworkEnums.Action.ChatSubmit.toString(), e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketMatchmakingSend = void 0;
    const i = a(3),
        o = a(45),
        n = a(35),
        r = a(39);
    t.SocketMatchmakingSend = class {
        static send(e, t) {
            var a;
            switch (n.UIUtilsEjsVariables.SERVER_TYPE) {
                case o.ServerTypes.Single:
                    r.SocketController.socket.send(e, t);
                    break;
                case o.ServerTypes.Static:
                    null === (a = r.SocketController.matchmakingSocket) || void 0 === a || a.send(e, t);
                    break;
                default:
                    return
            }
        }
        static sendFindGame() {
            this.send(i.NetworkEnums.Action.ClickedFindGame.toString(), this.lastMatchmakingRequest)
        }
        static connectToMatchmakingServerAndFindGame(e) {
            if (this.areProperSocketConnectionsEstablished()) switch (this.lastMatchmakingRequest = e, n.UIUtilsEjsVariables.SERVER_TYPE) {
                case o.ServerTypes.Single:
                    this.sendFindGame();
                    break;
                case o.ServerTypes.Static:
                    r.SocketController.initMatchmakingSocket();
                    break;
                default:
                    return
            }
        }
        static sendCancelFindGame() {
            this.send(i.NetworkEnums.Action.ClickedCancelFindGame.toString(), !0);
            n.UIUtilsEjsVariables.SERVER_TYPE == o.ServerTypes.Static && r.SocketController.killMatchmakingSocket()
        }
        static exitedMatchmaking() {
            r.SocketController.socket.send(i.NetworkEnums.Action.ExitedMatchmaking.toString(), !0)
        }
        static disconnectedFromSocketServer() {
            this.send(i.NetworkEnums.Action.DisconnectedFromSocketServer.toString(), !0)
        }
        static areProperSocketConnectionsEstablished() {
            var e;
            return !!r.SocketController.socket.isSocketOpen() && !(null === (e = r.SocketController.matchmakingSocket) || void 0 === e ? void 0 : e.isSocketOpen())
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PatchNoteData = void 0;
    const i = a(89);
    t.PatchNoteData = class {
        constructor() {
            this.patchNotes = [], this.announcement = [], this.announcement.push("<h3 style="text-align:center">Try Matchmaking!</h3>"), this.announcement.push("<center><img src="./static/images/announcement_ss.png" style="width: 40%"></center>");
            const e = [];
            e.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed server crashes")), this.patchNotes.push((0, i.getPatchNote)(2021, 1, 5, 123.1, e));
            const t = [];
            t.push((0, i.getContent)(i.PatchNoteType.Update, "All players in a room become "unready" when another player leaves")), t.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed server lag", void 0, void 0, void 0, ["https://colonist.featureupvote.com/suggestions/268030/lag"])), t.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed a bug where you could login while you had another guest account tab open")), this.patchNotes.push((0, i.getPatchNote)(2021, 1, 5, 123, t));
            const a = [];
            a.push((0, i.getContent)(i.PatchNoteType.Update, "Matchmaking options show game speed", void 0, void 0, "https://prnt.sc/24aivbm")), a.push((0, i.getContent)(i.PatchNoteType.Update, "Shows game speed in lobby", void 0, void 0, "https://prnt.sc/24aoqud")), a.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed room list not scrolling", void 0, void 0, "https://prnt.sc/24akwvq")), a.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed mobile chat sizes")), a.push((0, i.getContent)(i.PatchNoteType.Fix, "Reconnect game banner staying after reconnecting to game")), this.patchNotes.push((0, i.getPatchNote)(2021, 12, 26, 122.1, a));
            const o = [];
            o.push((0, i.getContent)(i.PatchNoteType.Feature, "Added 1v1 to matchmaking")), o.push((0, i.getContent)(i.PatchNoteType.Feature, "Added weekly free map to matchmaking")), o.push((0, i.getContent)(i.PatchNoteType.Update, "Lobby has been redesigned")), o.push((0, i.getContent)(i.PatchNoteType.Update, "Added broadcast banners", void 0, void 0, "https://prnt.sc/23oo5vb")), o.push((0, i.getContent)(i.PatchNoteType.Update, "Patch Notes button in footer shows version number")), o.push((0, i.getContent)(i.PatchNoteType.Fix, "Game not loading in macOS/Safari/Catalina with Blue Screen solution added to <a href="/bugs">bugs page</a>")), this.patchNotes.push((0, i.getPatchNote)(2021, 12, 23, 122, o));
            const n = [];
            n.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Europe <img src="./static/images/map_europe_preview.png" style="width: 40%">")), n.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed errors with connecting to servers and matchmaking")), this.patchNotes.push((0, i.getPatchNote)(2021, 12, 15, 121, n));
            const r = [];
            r.push((0, i.getContent)(i.PatchNoteType.Feature, "Vietnam map is back! Free to play for 2 weeks. Enjoy! <img src="./static/images/map_vietnam_preview.png" style="width: 40%">")), r.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed disconnection issue while finding match making games")), this.patchNotes.push((0, i.getPatchNote)(2021, 12, 8, 120.1, r));
            const s = [];
            s.push((0, i.getContent)(i.PatchNoteType.Feature, "Added a new avatar <a href="/store" target="_blank"><img src="./static/images/icon_robber_santa.svg" style="height: 40px"></a> Get it at the <a href="/store" target="_blank">Store</a>!")), s.push((0, i.getContent)(i.PatchNoteType.Update, "Find Game matches based on karma")), s.push((0, i.getContent)(i.PatchNoteType.Update, "Vietnam map is back as free map")), s.push((0, i.getContent)(i.PatchNoteType.Fix, "On mobile lobby buttons fixed")), s.push((0, i.getContent)(i.PatchNoteType.Fix, "On mobile corner notification fixed")), this.patchNotes.push((0, i.getPatchNote)(2021, 12, 2, 120, s));
            const c = [];
            c.push((0, i.getContent)(i.PatchNoteType.Feature, "New <b>Find Game</b> feature! Now you can start an auto match and jump directly into a new game.</br>More game modes will be added later")), c.push((0, i.getContent)(i.PatchNoteType.Update, "Robber has a Santa suit <a href="/store" target="_blank"><img src="./static/images/icon_robber_santa.svg" style="height: 30px"></a>")), c.push((0, i.getContent)(i.PatchNoteType.Update, "When a player is reported they automatically get muted")), c.push((0, i.getContent)(i.PatchNoteType.Update, "Added top notification banner")), c.push((0, i.getContent)(i.PatchNoteType.Update, "Added corner notification popup")), c.push((0, i.getContent)(i.PatchNoteType.Fix, "Added sea tiles to Istanbul map")), this.patchNotes.push((0, i.getPatchNote)(2021, 11, 21, 119, c));
            const l = [];
            l.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Istanbul <img src="./static/images/map_istanbul_preview.png" style="width: 40%">")), l.push((0, i.getContent)(i.PatchNoteType.Update, "Landing page is shown to new players")), l.push((0, i.getContent)(i.PatchNoteType.Update, "Added a navigation bar and cleaned up the site")), l.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed room names not showing default speed")), l.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed fun map error in room settings")), l.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed gap in trade interface")), this.patchNotes.push((0, i.getPatchNote)(2021, 11, 12, 118, l));
            const h = [];
            h.push((0, i.getContent)(i.PatchNoteType.Feature, "Gold Rush map will be free for 2 more weeks! Enjoy!")), h.push((0, i.getContent)(i.PatchNoteType.Update, "Default room settings are now Fast speed and Hide Bank Cards")), h.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed Play vs Bots and Create buttons not showing up on mobile")), this.patchNotes.push((0, i.getPatchNote)(2021, 10, 27, 117, h));
            const d = [];
            d.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Gold Rush <img src="./static/images/map_goldrush_preview.png" style="width: 40%">", ["Andre"])), d.push((0, i.getContent)(i.PatchNoteType.Update, "Moved Create and Bot Game to big buttons at the top of the lobby", ["Andre"])), d.push((0, i.getContent)(i.PatchNoteType.Update, "Bots no longer accept trades in Cities & Knights")), d.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed trade bar bug when trading with more than 4 players", ["Andre"], "https://user-images.githubusercontent.com/541886/135210930-5e9138b5-9d74-4691-961f-eee0f9c8b987.png", "https://user-images.githubusercontent.com/541886/135210726-d645a503-2c87-4185-8ac6-2b50589ebd84.png", ["https://colonist.featureupvote.com/suggestions/114984/fix-trade-proposal-ui-visual-bug-78-players"])), d.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed gold tiles not highlighting when rolled", ["Andre"])), d.push((0, i.getContent)(i.PatchNoteType.Fix, "Profile page loads faster", ["Meron"])), d.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed warning message not displaying properly when winning during Special Build Phase", ["Jeff"])), this.patchNotes.push((0, i.getPatchNote)(2021, 10, 13, 116, d));
            const u = [];
            u.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: JellyFish <img src="./static/images/map_jellyfish_preview.png" style="width: 40%">", ["John"])), u.push((0, i.getContent)(i.PatchNoteType.Update, "Vietnam Map free until next version", ["Kipler"])), u.push((0, i.getContent)(i.PatchNoteType.Fix, "Bug: Player being able to place road after ship in Seafarers Cities and Kights", ["RetroPanda"])), u.push((0, i.getContent)(i.PatchNoteType.Fix, "Bug: Trade ratio not updating properly when using Merchant Fleet and unlocking Trading House on the same turn", ["karm"])), this.patchNotes.push((0, i.getPatchNote)(2021, 9, 15, 115, u));
            const g = [];
            g.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Vietnam <img src="./static/images/map_vietnam_preview.png" style="width: 40%">", ["Kipler"])), g.push((0, i.getContent)(i.PatchNoteType.Feature, "Old Fun Map: Mountain of Riches <img src="./static/images/map_mountain_of_riches_preview.png" style="width: 40%">", ["Andrew"])), g.push((0, i.getContent)(i.PatchNoteType.Update, "Rulebook shows "URL Copied" text when clicking share link button")), g.push((0, i.getContent)(i.PatchNoteType.Update, "Rulebook has Spanish support")), g.push((0, i.getContent)(i.PatchNoteType.Fix, "User profile: fixed "User does not exist" bug")), this.patchNotes.push((0, i.getPatchNote)(2021, 9, 1, 114, g));
            const m = [];
            m.push((0, i.getContent)(i.PatchNoteType.Feature, "<b>Seafarers + Cities & Knights 5-6 Player Expansion is out!</b> Get it at the <a href="/store" target="_blank">Store</a>")), m.push((0, i.getContent)(i.PatchNoteType.Feature, "Rule book added!")), m.push((0, i.getContent)(i.PatchNoteType.Fix, "Cities & Knights: Bots not selecting Aqueduct resources properly")), m.push((0, i.getContent)(i.PatchNoteType.Fix, "Links to user profiles will work regardless of casing, e.g., https://colonist.io/profile/demiculus and https://colonist.io/profile/Demiculus will point to the profile of the same user.")), this.patchNotes.push((0, i.getPatchNote)(2021, 8, 18, 113, m));
            const p = [];
            p.push((0, i.getContent)(i.PatchNoteType.Feature, "Added a new icon <a href="/store" target="_blank"><img src="./static/images/icon_sombrero.svg" style="height: 60px"></a>")), p.push((0, i.getContent)(i.PatchNoteType.Fix, "Cities & Knights: Fix trade ratio locking at 2:1 when using Merchant Fleet", ["NordicZombie"])), p.push((0, i.getContent)(i.PatchNoteType.Fix, "Cities & Knights: Game freezing when removing knights after Deserter")), p.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed timer warning at end of turn not working for certain game actions", ["HansM"])), this.patchNotes.push((0, i.getPatchNote)(2021, 8, 4, 112, p));
            const C = [];
            C.push((0, i.getContent)(i.PatchNoteType.Feature, "<b>Seafarers + Cities & Knights Expansion is out!</b> Get it at the <a href="/store" target="_blank">Store</a>")), C.push((0, i.getContent)(i.PatchNoteType.Update, "Optimized very fast timers for Cities & Knights")), C.push((0, i.getContent)(i.PatchNoteType.Update, "No need to scroll down to click Ready and Start Game buttons inside a room")), C.push((0, i.getContent)(i.PatchNoteType.Fix, "Bots now select lowest level deactivated knight when removing knight in C&K", ["NordicZombie"])), C.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix popups getting stuck when clicking multiple development cards", ["orangehat"])), this.patchNotes.push((0, i.getPatchNote)(2021, 7, 21, 111, C));
            const y = [];
            y.push((0, i.getContent)(i.PatchNoteType.Feature, "Added a new icon <a href="/store" target="_blank"><img src="./static/images/icon_farmer.svg" style="height: 60px"></a>")), y.push((0, i.getContent)(i.PatchNoteType.Feature, "Added indicator when above discard limit")), y.push((0, i.getContent)(i.PatchNoteType.Feature, "New <i>waiting for action</i> indicator in player info box", ["Loaf"])), y.push((0, i.getContent)(i.PatchNoteType.Update, "New indicators for Longest Road and Largest Army in player info box", void 0, void 0, "https://i.imgur.com/9CyTQqA.png", void 0)), y.push((0, i.getContent)(i.PatchNoteType.Update, "New Bounties System to earn coins, visit <a href="https://discord.gg/uzCKAWV6qm" target="_blank">Discord</a> for more details.")), y.push((0, i.getContent)(i.PatchNoteType.Update, "Using Monopoly now shows the total amount of cards stolen")), y.push((0, i.getContent)(i.PatchNoteType.Update, "Added Store notification badge to show when new items are released")), y.push((0, i.getContent)(i.PatchNoteType.Fix, "Chat message appears when game can no longer be rematch")), y.push((0, i.getContent)(i.PatchNoteType.Fix, "Cities & Knights not tracking Progress Card stats properly")), this.patchNotes.push((0, i.getPatchNote)(2021, 7, 7, 110, y));
            const S = [];
            S.push((0, i.getContent)(i.PatchNoteType.Feature, "<b>Cities & Knights 5-6 Player!</b> Get it at the <a href="/store" target="_blank">Store</a>")), S.push((0, i.getContent)(i.PatchNoteType.Update, "All cards in hand are visible while discarding")), S.push((0, i.getContent)(i.PatchNoteType.Update, "Building buttons are hidden while spectating a game")), S.push((0, i.getContent)(i.PatchNoteType.Update, "Game log lists the players discarding cards")), S.push((0, i.getContent)(i.PatchNoteType.Fix, "End game graphs scale when the screen resizes")), S.push((0, i.getContent)(i.PatchNoteType.Fix, "Clicking building buttons after the game ends doesn"t take you to the Lobby anymore")), this.patchNotes.push((0, i.getPatchNote)(2021, 6, 23, 109, S));
            const v = [];
            v.push((0, i.getContent)(i.PatchNoteType.Update, "Enabled all maps with Cities & Knights 4 Player")), v.push((0, i.getContent)(i.PatchNoteType.Update, "Can accept trades while taking an action", ["Berkin"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/142324/trades-should-have-priority-over-building-building-canceled-if-i-make-a-trade"])), v.push((0, i.getContent)(i.PatchNoteType.Update, "Increased timers for Cities & Knights")), v.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed map scrolling while rule book is open", void 0, void 0, void 0, ["https://colonist.featureupvote.com/suggestions/109056/scrolling-up-and-down-on-learn-to-play-window-in-game-zooms-in-and-out-of-the-ga"])), v.push((0, i.getContent)(i.PatchNoteType.Fix, "Discord invite opens in a new tab rather than redirecting", ["Hjalte"])), this.patchNotes.push((0, i.getPatchNote)(2021, 6, 9, 108, v));
            const _ = [];
            _.push((0, i.getContent)(i.PatchNoteType.Feature, "<b>Cities & Knights!</b> Get it at the <a href="/store" target="_blank">Store</a>")), _.push((0, i.getContent)(i.PatchNoteType.Update, "Word filter added to room name")), _.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed oversized chat box in mobile view", void 0, "https://i.imgur.com/FlGwg6G.png", "https://i.imgur.com/56mQzJ0.png", void 0)), _.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed hitting enter in room title kicked player out of the room", void 0, void 0, void 0, ["https://colonist.featureupvote.com/suggestions/83631/bug-hitting-enter-key-when-filling-in-room-name-kicks-you-out-your-own-room"])), _.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed incorrect number of 2 and 12 in 7-8 Player map")), this.patchNotes.push((0, i.getPatchNote)(2021, 5, 26, 107, _));
            const P = [];
            P.push((0, i.getContent)(i.PatchNoteType.Update, "Increased the size of cards and numbers in player information box")), P.push((0, i.getContent)(i.PatchNoteType.Update, "Tool tips information changes depending on the game mode")), P.push((0, i.getContent)(i.PatchNoteType.Update, "Removed ambiguous characters from room links to avoid confusion (1, I, l, O, 0)")), P.push((0, i.getContent)(i.PatchNoteType.Update, "Moved spectator icon")), P.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed 5+ player scroll box slider")), this.patchNotes.push((0, i.getPatchNote)(2021, 5, 13, 106, P));
            const T = [];
            T.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Volcano <img src="./static/images/map_volcano_preview.png" style="width: 40%">", ["Shutsen"])), T.push((0, i.getContent)(i.PatchNoteType.Update, "Redesigned player information box")), T.push((0, i.getContent)(i.PatchNoteType.Fix, "Help buttons scale more properly")), T.push((0, i.getContent)(i.PatchNoteType.Fix, "Featured video titles are limited to 30 characters")), this.patchNotes.push((0, i.getPatchNote)(2021, 4, 21, 105, T));
            const b = [];
            b.push((0, i.getContent)(i.PatchNoteType.Feature, "Added a new icon <a href="/store" target="_blank"><img src="./static/images/icon_worker.svg" style="height: 30px"></a>")), b.push((0, i.getContent)(i.PatchNoteType.Update, "Card counter gets bold when above the discard limit", [], "https://prnt.sc/10lojw2", "https://prnt.sc/10lok2g")), b.push((0, i.getContent)(i.PatchNoteType.Update, "Prevent long usernames from exceeding the container limits", ["Konidias"])), b.push((0, i.getContent)(i.PatchNoteType.Update, "Updated tool tips", ["Konidias"])), b.push((0, i.getContent)(i.PatchNoteType.Update, "New <a href="https://youtu.be/XUcO2wYcIEY" target="_blank">Tutorial video</a>!")), b.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed all disconnects")), b.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bots being unable to select more than 5 resources from gold tiles")), b.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed games in profile not updating properly after name change", ["Bugg"])), this.patchNotes.push((0, i.getPatchNote)(2021, 4, 3, 104, b));
            const f = [];
            f.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Black Forest <img src="./static/images/map_blackforest_preview.png" style="width: 40%">", ["Shutsen"])), f.push((0, i.getContent)(i.PatchNoteType.Update, "Redesigned karma system to be more fair and reliable", ["Aldrik"])), f.push((0, i.getContent)(i.PatchNoteType.Update, "Redesign development card popups")), f.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix discard bug", ["Anora", "Morty", "NordicZombie"])), this.patchNotes.push((0, i.getPatchNote)(2021, 3, 17, 103, f));
            const I = [];
            I.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed getting disconnected while placing settlements")), this.patchNotes.push((0, i.getPatchNote)(2021, 3, 5, 102.1, I));
            const E = [];
            E.push((0, i.getContent)(i.PatchNoteType.Feature, "Added 2 new icons <a href="/store" target="_blank"><img src="./static/images/icon_helmet.svg" style="height: 30px"></a> <a href="/store" target="_blank"><img src="./static/images/icon_scarf.svg" style="height: 30px"></a>")), E.push((0, i.getContent)(i.PatchNoteType.Update, "Contact updated")), E.push((0, i.getContent)(i.PatchNoteType.Update, "Starting resources are distributed after each player places their second settlement")), E.push((0, i.getContent)(i.PatchNoteType.Update, "Optimized network resource usage in games")), E.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bottom ad overlaying the game", ["Klaus0225"])), E.push((0, i.getContent)(i.PatchNoteType.Fix, "Fog tiles not revealing sea tiles properly", ["NordicZombie"])), E.push((0, i.getContent)(i.PatchNoteType.Fix, "Preventing accidentally completing 2 bank trades during lag")), E.push((0, i.getContent)(i.PatchNoteType.Fix, "Trade window does not refresh when a player reconnects")), this.patchNotes.push((0, i.getPatchNote)(2021, 3, 4, 102, E));
            const w = [];
            w.push((0, i.getContent)(i.PatchNoteType.Update, "Increased server capacity")), w.push((0, i.getContent)(i.PatchNoteType.Feature, "Added 2 new icons <a href="/store" target="_blank"><img src="./static/images/icon_tie.svg" style="height: 30px"></a> <a href="/store" target="_blank"><img src="./static/images/icon_snorkel.svg" style="height: 30px"></a>")), w.push((0, i.getContent)(i.PatchNoteType.Fix, "Shuffle Board map shows the robber", ["BigNell"])), w.push((0, i.getContent)(i.PatchNoteType.Fix, "Show error message when username invalid or already taken", ["Akshay"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/86765/cannot-edit-name"])), w.push((0, i.getContent)(i.PatchNoteType.Fix, "Not getting bonus points for settling on the desert tile on islands")), w.push((0, i.getContent)(i.PatchNoteType.Fix, "Games loading on tutorial map", ["Seb"])), w.push((0, i.getContent)(i.PatchNoteType.Fix, "Element layering for fog tiles")), w.push((0, i.getContent)(i.PatchNoteType.Fix, "Reset the scroll bar when changing categories in the store", ["BigNell"])), this.patchNotes.push((0, i.getPatchNote)(2021, 2, 17, 101, w));
            const k = [];
            k.push((0, i.getContent)(i.PatchNoteType.Feature, "Added 2 new icons <a href="/store" target="_blank"><img src="./static/images/icon_avocado.svg" style="height: 30px"></a> <a href="/store" target="_blank"><img src="./static/images/icon_cactus.svg" style="height: 30px"></a>")), k.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Shuffle Board", ["BigNell"])), k.push((0, i.getContent)(i.PatchNoteType.Update, "Swapped trade and buy development card buttons", ["IwannaRock"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/91496/swap-trade-menu-button-with-buy-dev-button"])), k.push((0, i.getContent)(i.PatchNoteType.Update, "Number of resources is now displayed in the trade bar")), k.push((0, i.getContent)(i.PatchNoteType.Fix, "Help icons made smaller", ["Twiggeh"])), k.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed chat color of player names beginning with an icon word", ["bocaben"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/133590/bug-no-color-on-usernames-beginning-with-a-parsed-word-wheatknightcity"])), this.patchNotes.push((0, i.getPatchNote)(2021, 2, 3, 100, k));
            const A = [];
            A.push((0, i.getContent)(i.PatchNoteType.Feature, "Added 2 new icons <a href="/store" target="_blank"><img src="./static/images/icon_crown.svg" style="height: 30px"></a> <a href="/store" target="_blank"><img src="./static/images/icon_swords.svg" style="height: 30px"></a>")), A.push((0, i.getContent)(i.PatchNoteType.Feature, "New map released: <a href="/store" target="_blank"><b>Base Random</b></a>", [], void 0, "https://i.imgur.com/GqVZCS4.png", ["https://colonist.featureupvote.com/suggestions/65978/randomize-tiles-and-numbers%27"])), null == A || A.push((0, i.getContent)(i.PatchNoteType.Update, "Added bots logic for Seafarers", ["Alistair H"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/139707/bots-on-seafarers-should-be-able-to-play-with-seafarers"])), A.push((0, i.getContent)(i.PatchNoteType.Update, "Increased time for bot to take over for very fast and fast game speeds")), A.push((0, i.getContent)(i.PatchNoteType.Update, "Custom link games are private by default")), A.push((0, i.getContent)(i.PatchNoteType.Update, "Featured video & tournaments load fast", ["Andrew"])), A.push((0, i.getContent)(i.PatchNoteType.Update, "Shows Scenario and Extension setting in profile and inside game settings")), A.push((0, i.getContent)(i.PatchNoteType.Update, "Removed card count badge for development cards", ["Ryan"], void 0, "https://i.imgur.com/rc0e38h.png", ["https://colonist.featureupvote.com/suggestions/118888/remove-number-of-cards-from-dev-cards"])), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed accessing a rematch game via link")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed rooms repeating host names after rematch")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed players sent to a new room when clicked join")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed player recreating same room")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed username, icon, karma updating late in Lobby")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Player report button shows confirmation")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Game log shows robber more descriptive", ["player"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/65905/enhancement-game-log-should-describe-where-robber-was-placed"])), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Game log shows what resources were traded")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed muting players")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Seafarers starting properly when using the rematch button.")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed issues with server lagging")), A.push((0, i.getContent)(i.PatchNoteType.Fix, "End game report button works", ["Vultur"])), A.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed store bug", ["Stoi"])), this.patchNotes.push((0, i.getPatchNote)(2021, 1, 21, 99, A));
            const M = [];
            M.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Mountain of Riches <img src="./static/images/map_mountain_of_riches_preview.png" style="width: 40%">", ["Andrew"])), M.push((0, i.getContent)(i.PatchNoteType.Update, "Base map now rotates in 6 different positions")), M.push((0, i.getContent)(i.PatchNoteType.Update, "Rebalance dice numbers for fun maps")), M.push((0, i.getContent)(i.PatchNoteType.Update, "Guest accounts profiles show", ["Mircea"])), M.push((0, i.getContent)(i.PatchNoteType.Update, "Seafarers on Earth and UK maps now award bonus points for settling new land", ["Michael"])), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed being unable to select free map", ["noam"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/142795/the-free-map-stoped-being-free-bug"])), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed players being able to steal from player with no cards", ["Pottsitive"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/68443/when-placing-the-robber-and-accidentally-selecting-a-player-with-0-resources-don"])), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed logs auto scrolling", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/62686/logs-shouldnt-autoscroll-after-every-new-event"])), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed chat size on safari")), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed SBP flag on SF 6p")), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed neighboring ports drawn bug", ["Schaefer"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/86065/bug-port-graphic-wrong-on-56-player-maps"])), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed tutorial bot game button")), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed rematch")), M.push((0, i.getContent)(i.PatchNoteType.Fix, "Increased server performance")), this.patchNotes.push((0, i.getPatchNote)(2021, 1, 5, 98, M));
            const G = [];
            G.push((0, i.getContent)(i.PatchNoteType.Feature, "<b>Seafarers 5-6!</b>")), G.push((0, i.getContent)(i.PatchNoteType.Feature, "<a href="/store" target="_blank">Earth map</a> supports Seafarers")), G.push((0, i.getContent)(i.PatchNoteType.Feature, "<a href="/store" target="_blank">UK & Ireland map</a> supports Seafarers")), G.push((0, i.getContent)(i.PatchNoteType.Feature, "Icons can be changed", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/112873/removehide-the-hats"])), G.push((0, i.getContent)(i.PatchNoteType.Feature, "Icons added to <a href="/store" target="_blank">store</a>", ["Stan"])), G.push((0, i.getContent)(i.PatchNoteType.Update, "Increased network speed by 20%", ["fegfpdj"])), G.push((0, i.getContent)(i.PatchNoteType.Update, "Tournament section shows 2 tournaments side by side", ["jayamano57"])), G.push((0, i.getContent)(i.PatchNoteType.Update, "Free items in store write Free instead of 0")), G.push((0, i.getContent)(i.PatchNoteType.Fix, "Made help icons smaller", ["Stan"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/137872/icons-too-large-after-v96-update"])), G.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed profile data not loading when the player has 0 games", ["fegfpdj"])), this.patchNotes.push((0, i.getPatchNote)(2020, 12, 21, 97, G));
            const R = [];
            R.push((0, i.getContent)(i.PatchNoteType.Update, "All expansions are free for 12 & 13 December. Enjoy")), this.patchNotes.push((0, i.getPatchNote)(2020, 12, 12, 96.1, R));
            const D = [];
            D.push((0, i.getContent)(i.PatchNoteType.Feature, "Games can be spectated with a link", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/87960/spectate-games-search-or-jump-to-one-directly"])), D.push((0, i.getContent)(i.PatchNoteType.Feature, "Rooms can be created with typing in a unique id (example: colonist.io/#12345)")), D.push((0, i.getContent)(i.PatchNoteType.Feature, "Tournament hosts can request data to spreadsheet")), D.push((0, i.getContent)(i.PatchNoteType.Update, "/disablekarma allows players to vote using UI", ["Aldrik"], void 0, "https://prnt.sc/vnr6xd")), D.push((0, i.getContent)(i.PatchNoteType.Update, "Improved the settings UI to match the rest of the game", ["Stan"])), D.push((0, i.getContent)(i.PatchNoteType.Update, "Player searchbar searches when pressing Enter", ["Moha"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/84567/press-enter-on-search-button-at-profile"])), D.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed longest road count being reduced by 1", ["Stefl1504"])), D.push((0, i.getContent)(i.PatchNoteType.Fix, "On mobile, profile button prompts google login", ["Mircea"])), D.push((0, i.getContent)(i.PatchNoteType.Fix, "On mobile, profile button opens the profile page", ["Mircea"])), D.push((0, i.getContent)(i.PatchNoteType.Fix, "Timer displays the proper starting value", ["Moha"], void 0, void 0)), D.push((0, i.getContent)(i.PatchNoteType.Fix, "Rebalance dice number distribution on Diamond map")), this.patchNotes.push((0, i.getPatchNote)(2020, 12, 8, 96, D));
            const x = [];
            x.push((0, i.getContent)(i.PatchNoteType.Feature, "<b>Seafarers!</b> <img src="./static/images/store_item_seafarers.png" style="width: 30%">", void 0, void 0, void 0, ["https://colonist.featureupvote.com/suggestions/84822/seafarers-expansion-testing"])), x.push((0, i.getContent)(i.PatchNoteType.Feature, "Limited time Fun Map: Romania <img src="./static/images/map_romania_preview.png" style="width: 30%">", ["Mircea"])), x.push((0, i.getContent)(i.PatchNoteType.Update, "Added numbers to building buttons", ["JUAN"], void 0, "https://prnt.sc/vlwf86", ["https://colonist.featureupvote.com/suggestions/116356/add-numbers-to-building-icons"])), x.push((0, i.getContent)(i.PatchNoteType.Update, "Game chat and log no longer autoscroll when mouse is on them", ["Moha"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/62686/logs-shouldnt-autoscroll-after-every-new-event"])), x.push((0, i.getContent)(i.PatchNoteType.Update, "Added a victory sound for the winning player upon game end", ["trusttheprocessor"])), x.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed spectator view being stuck on 0", ["Suprith"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/107076/bug-report-fix-spectator-view-number"])), x.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed turn sound during initial placements", ["timw"])), x.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed placement confirmation button size on mobile", ["timw"])), x.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed visual bug with resource coming from bank instead of the top left tile", ["Hawkaberi"])), this.patchNotes.push((0, i.getPatchNote)(2020, 11, 23, 95, x));
            const O = [];
            O.push((0, i.getContent)(i.PatchNoteType.Update, "Added timers description image to speed info in room settings", ["JUAN"], void 0, "https://i.imgur.com/FGYFWVp.png")), O.push((0, i.getContent)(i.PatchNoteType.Update, "Extended time for discard and robber placement in very fast speed", ["JUAN"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/112654/timers-too-fast-during-a-roll-of-7-game-speed-very-fast"])), O.push((0, i.getContent)(i.PatchNoteType.Update, "New chat text colour for Blue and MysticBlue", ["JUAN"], void 0, "https://prnt.sc/vfcnyf")), O.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed longest road being randomly awarded during a tie", ["Michiel"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/124255/another-longest-road-bug"])), O.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed counter offers", ["leso"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/81973/allow-counter-trades-to-be-accepted"])), O.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bots not responding to counter offers", ["Ali Octa"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/103665/bots-do-not-response-to-the-trade-offer-counters"])), O.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bots not responding to multiple open offers")), O.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed resources not showing up in trade bar on first turns", ["JUAN"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/96839/while-counteroffering-in-the-first-rounds-no-resources-are-displayed"])), O.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed trades displaying properly when player reconnects", ["tal"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/130079/bug-when-trying-to-trade-and-someone-disconnects"])), O.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bots getting stuck using road builder card", ["Nir"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/94164/bot-is-stuck-when-all-its-roads-are-built-and-has-a-road-building-dev-card"])), this.patchNotes.push((0, i.getPatchNote)(2020, 11, 11, 94, O));
            const B = [];
            B.push((0, i.getContent)(i.PatchNoteType.Feature, "Added a volume slider", ["Aldrik"], void 0, "https://prnt.sc/v40i31", ["https://colonist.featureupvote.com/suggestions/110141/volume-slider"])), B.push((0, i.getContent)(i.PatchNoteType.Feature, "Added confirm button for initial placements and for robber placements", ["timw"], void 0, "https://prnt.sc/v40x8u", ["https://colonist.featureupvote.com/suggestions/91509/add-confirmation-button-double-click"])), B.push((0, i.getContent)(i.PatchNoteType.Update, "Room automatically sets maximum player count when changing game mode", ["Aldrik"])), B.push((0, i.getContent)(i.PatchNoteType.Update, "Cannot accidentally offer duplicate trades", ["Aldrik"])), B.push((0, i.getContent)(i.PatchNoteType.Update, "Restricted lobby chat to signed in users only", ["timw"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/104366/restrict-game-and-lobby-chat-to-verified-users"])), B.push((0, i.getContent)(i.PatchNoteType.Update, "Added discord button into game", ["timw"], void 0, "https://prnt.sc/v40k26")), B.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed colors owned by host being usable by everyone in the room")), B.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed UI not updating properly when player reconnects while placing board pieces")), B.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed timer bug for Year Of Plenty and Monopoly")), B.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed Year Of Plenty bug when requesting a resource the bank did not have", ["RegularRandomZ"], void 0, void 0, ["https://www.reddit.com/r/Katan/comments/cee93a/testing_v43/ev848su/?context=3"])), B.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed timer being a few minutes off", ["alan"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/87921/timer-is-set-to-system-time-and-not-internet-time"])), B.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed blank icons on Firefox browser", ["timw"])), this.patchNotes.push((0, i.getPatchNote)(2020, 10, 28, 93, B));
            const L = [];
            L.push((0, i.getContent)(i.PatchNoteType.Feature, "Maps can be purchased from the <a href="/store" target="_blank">store</a>!")), L.push((0, i.getContent)(i.PatchNoteType.Feature, "New colors can be purchased from the <a href="/store" target="_blank">store</a>!", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/91524/add-more-colors"])), L.push((0, i.getContent)(i.PatchNoteType.Feature, "Profile shows owned items")), L.push((0, i.getContent)(i.PatchNoteType.Update, "Descriptions in User Profiles more explicit")), L.push((0, i.getContent)(i.PatchNoteType.Update, "Added total game count in User Profiles")), L.push((0, i.getContent)(i.PatchNoteType.Update, "Contributors page has completely changed. Check it out: <a href="/contribute" target="_blank">Contribute Page</a>")), L.push((0, i.getContent)(i.PatchNoteType.Fix, "Reconnection popup doesn"t block the game play")), L.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed issue where chat displayed wrong colors", ["Aldrik"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/51001/2-clients-in-same-game-shows-wrong-color-on-chat"])), this.patchNotes.push((0, i.getPatchNote)(2020, 10, 14, 92, L));
            const N = [];
            N.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed store pricing bug", ["FishFingers"])), this.patchNotes.push((0, i.getPatchNote)(2020, 9, 30, 91.1, N));
            const U = [];
            U.push((0, i.getContent)(i.PatchNoteType.Feature, "New game option: Balanced dice", ["MikeIsMyIke"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/51110/option-to-select-a-different-dice-system"])), U.push((0, i.getContent)(i.PatchNoteType.Update, "Tournament descriptions show when clicked on")), U.push((0, i.getContent)(i.PatchNoteType.Update, "Bots are less likely to accept 2+:1 trades with player about to win", ["JUAN"], void 0, void 0)), U.push((0, i.getContent)(i.PatchNoteType.Update, "Updated login message")), U.push((0, i.getContent)(i.PatchNoteType.Update, "Updated Store FAQ")), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed Rematch button at end game", ["macolby14"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/93099/rematch-function-does-not-work"])), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Opponents don"t see when you are selecting a card for monopoly or year of plenty", ["Michael"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/92717/remove-player-activity-notice-for-development-card-usage"])), U.push((0, i.getContent)(i.PatchNoteType.Fix, "The window to choose a player to steal from properly displays when reconnecting to game", ["Riley"], void 0, void 0)), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Choosing cards to discard no longer refreshes when opponent reconnects", ["Riley"], void 0, void 0)), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Choosing cards for year of plenty or monopoly no longer refreshes when opponent reconnects", ["Riley"], void 0, void 0)), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed featured tournaments distorting mobile view", ["JUAN"])), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed players able to steal from themselves after placing robber on their own tile", ["Castor#1325"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/102905/repeated-player-colour-in-steal-selection-box"])), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bank not distributing resources properly for cities when bank out of resources", ["AlexInAuburn"], void 0, void 0)), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Bot no longer gets stuck if all players embargo the bot", ["Camille"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/66867/bot-embargo-bug"])), U.push((0, i.getContent)(i.PatchNoteType.Fix, "For founder pack owners, expansions and maps show 0Cc in store")), U.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed store expansion descriptions")), this.patchNotes.push((0, i.getPatchNote)(2020, 9, 30, 91, U));
            const V = [];
            V.push((0, i.getContent)(i.PatchNoteType.Feature, "New <a href="/store" target="_blank">store</a> is up!", ["Martin Gargaglione"])), V.push((0, i.getContent)(i.PatchNoteType.Feature, "Added featured tournaments section", ["JUAN"])), V.push((0, i.getContent)(i.PatchNoteType.Update, "Added description on how to submit youtube videos")), V.push((0, i.getContent)(i.PatchNoteType.Update, "Kicked players cannot rejoin the room they were kicked from", ["macolby14"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/51003/room-kicked-people-should-stay-kicked-and-not-rejoin"])), V.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed players completing trades that were no longer possible")), V.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed players getting stuck during road building", ["JUAN"], void 0, void 0)), V.push((0, i.getContent)(i.PatchNoteType.Fix, "Rebalanced bots trading with high victory point players", ["player"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/52501/bots-should-refuse-to-trade-with-high-point-winning-player"])), V.push((0, i.getContent)(i.PatchNoteType.Fix, "Bots are less likely to do 1:2+ trades", ["KettlerSatan"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/94247/bot-trading-bugrequest-thread"])), V.push((0, i.getContent)(i.PatchNoteType.Fix, "Bots prioritize losing player when deciding who to trade with", ["player"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/52501/bots-should-refuse-to-trade-with-high-point-winning-player"])), V.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix cards staying on screen after closing trade", ["Castor#1325"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/102902/mouse-over-graphics-bug"])), V.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed videos pushing tight screens", ["JUAN"])), V.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix robber placement on Diamond Lake fun map", ["Puzzles"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/119474/robber-not-starting-in-the-desert-diamond-lake-map"])), this.patchNotes.push((0, i.getPatchNote)(2020, 9, 16, 90, V));
            const F = [];
            F.push((0, i.getContent)(i.PatchNoteType.Feature, "Special Build Phase Beta for 5+ player games", ["Sean"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/84829/add-special-build-phase-for-56-player"])), F.push((0, i.getContent)(i.PatchNoteType.Update, "Total card counts of cardstacks are shown in a badge on the card", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/64271/add-numbers-to-resource-cards"])), F.push((0, i.getContent)(i.PatchNoteType.Update, "Changed help email to help@colonist.io, but we encourage you to use our <a href="https://discord.gg/uzCKAWV6qm" target="_blank">discord</a> for any help")), F.push((0, i.getContent)(i.PatchNoteType.Update, "General button style updated")), F.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix road highlights not resetting when time runs out", ["Blake"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/107564/roads-error"])), F.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix tutorial mode popup displaying improperly")), F.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix turn alert sound going off when placing robber before rolling dice")), F.push((0, i.getContent)(i.PatchNoteType.Fix, "Bot now places roads when timer runs out on road building")), F.push((0, i.getContent)(i.PatchNoteType.Fix, "Changing player colors on firefox works more smoothly", ["jayamano57"])), F.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix bot automatically placing robber when bot discarded cards for another player", ["Sean"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/111773/glitch-fix-when-bot-discards-for-player-after-7-is-rolled-bot-will-automatically"])), F.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed guests updating room maps", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/116797/any-player-in-the-room-can-change-map-setting"])), this.patchNotes.push((0, i.getPatchNote)(2020, 9, 2, 89, F));
            const H = [];
            H.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: UK & Ireland <img src="./static/images/map_uk_preview.png" style="width: 40%">", ["macolby14"])), H.push((0, i.getContent)(i.PatchNoteType.Update, "Title of games automatically change based on Game Speed and Map Settings", ["macolby14"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/84641/titles-of-games-should-change-automatically-according-to-new-game-settings"])), H.push((0, i.getContent)(i.PatchNoteType.Update, "Swapped room name, X & edit locations", ["macolby14"])), H.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed Tutorial Mode not properly showing all actions")), H.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed Monopoly staying in hand when no resources were stolen")), H.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed road highlights not resetting properly when time runs out")), this.patchNotes.push((0, i.getPatchNote)(2020, 8, 19, 88, H));
            const K = [];
            K.push((0, i.getContent)(i.PatchNoteType.Feature, "In game players can be reported")), K.push((0, i.getContent)(i.PatchNoteType.Feature, "In game players can be muted")), K.push((0, i.getContent)(i.PatchNoteType.Update, "Added map setting to game history")), K.push((0, i.getContent)(i.PatchNoteType.Update, "Doubled bonus time after using development cards", ["TalkSick"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/92122/road-building-card-glitch"])), K.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed awarding longest road to 2 players", ["Kenny"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/92883/longest-road-bug-explained-better"])), K.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed free map not changing weekly")), K.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed longest road counting incorrectly", ["zaloo"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/91517/posible-bug-in-max-roads"])), this.patchNotes.push((0, i.getPatchNote)(2020, 8, 5, 87, K));
            const j = [];
            j.push((0, i.getContent)(i.PatchNoteType.Feature, "All available maps can be chosen from")), j.push((0, i.getContent)(i.PatchNoteType.Feature, "Separated game mode and map selection")), j.push((0, i.getContent)(i.PatchNoteType.Feature, "A different map will be free every week for everyone")), j.push((0, i.getContent)(i.PatchNoteType.Update, "Added contributor link to homepage footer")), j.push((0, i.getContent)(i.PatchNoteType.Update, "Increased patchnote size")), j.push((0, i.getContent)(i.PatchNoteType.Update, "Adjusted time before bot takes over when player disconnects for all game speeds")), j.push((0, i.getContent)(i.PatchNoteType.Update, "Game no longer displays "No one has the resource you requested" when bank cards are hidden", ["Aracknid416"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/95242/if-no-one-has-a-resource-when-trading-it-shouldnt-tell-you-error-no-one-has-that"])), j.push((0, i.getContent)(i.PatchNoteType.Update, "Lobby shows youtube videos on colonist. Reach out on discord to get yours added.")), j.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bank incorrectly distributing resources when only 1 player depletes the bank funds", ["aztechunter"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/52458/not-enough-resource-to-give-to-all-should-mean-no-resources-distributed"])), j.push((0, i.getContent)(i.PatchNoteType.Fix, "Repositioned largest army and longest road achievement notification", ["GET"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/103650/longest-road-army-notification-is-annoying-please-reverse-decision"])), j.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed server crashing due to Cloudflare")), this.patchNotes.push((0, i.getPatchNote)(2020, 7, 22, 86, j));
            const W = [];
            W.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Earth <img src="./static/images/map_earth_preview.png" style="width: 40%">")), W.push((0, i.getContent)(i.PatchNoteType.Update, "Updated shop payment flow so card input happens inside our secure provider Stripe.com", ["Agnilam"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/82716/payment-window-doesnt-look-very-secure"])), W.push((0, i.getContent)(i.PatchNoteType.Update, "Players with poor performance will be shown how to enable WebGL")), W.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bank incorrectly distributing resources when there are not enough to give", ["aztechunter"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/52458/not-enough-resource-to-give-to-all-should-mean-no-resources-distributed"])), W.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed trade completion bug", ["Ray Redondo"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/92346/bug-trade-can-proceed-without-required-cards"])), W.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed visibility of player with largest army")), W.push((0, i.getContent)(i.PatchNoteType.Category, "Profile:")), W.push((0, i.getContent)(i.PatchNoteType.Fix, "Increased profile loading speed by a lot!", ["Ozz"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/92786/player-profile-info-not-loading"])), W.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed order of games shown in profile", ["Esqarrouth"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/90841/profile-date-orders-are-wrong"])), W.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed games in profile not getting updated", ["MrFarenheit"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/97751/profile-not-updated-since-may23-2020"])), W.push((0, i.getContent)(i.PatchNoteType.Category, "Timers:")), W.push((0, i.getContent)(i.PatchNoteType.Update, "Increased initial settlement placement time for all games modes", ["JeffD"], void 0, void 0, ["https://blog.colonist.io/updated-timers/"])), W.push((0, i.getContent)(i.PatchNoteType.Update, "Increased timers for rolling dice and robber placement")), W.push((0, i.getContent)(i.PatchNoteType.Fix, "Adjusting timers for slower game modes", ["DylLighted"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/85555/super-slow-mode-should-extend-time-for-robbing-rolling-the-dice-and-playing-a-kn"])), W.push((0, i.getContent)(i.PatchNoteType.Fix, "Fix robber -> roll 7 timer not resetting correctly", ["Andernut"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/56070/bug-rolling-7-after-having-placed-a-knight-can-result-in-a-15-second-turn"])), this.patchNotes.push((0, i.getPatchNote)(2020, 7, 8, 85, W));
            const Y = [];
            Y.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Shuriken <img src="./static/images/map_shuriken_preview.png" style="width: 100%">")), Y.push((0, i.getContent)(i.PatchNoteType.Update, "Longest road & largest army achievement animations added")), Y.push((0, i.getContent)(i.PatchNoteType.Update, "Largest army icon changed", [], void 0, "https://prnt.sc/suu3qo")), Y.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed multiple games getting disconnected", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/92995/internet-connection-broken-refresh-browser"])), Y.push((0, i.getContent)(i.PatchNoteType.Fix, "Can play while using VPN", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/94882/cannot-click-start-game"])), Y.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed losing map when zooming out", ["fiskman"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/84599/option-to-reset-zoom-to-home"])), Y.push((0, i.getContent)(i.PatchNoteType.Fix, "Cards animate from the correct resource")), Y.push((0, i.getContent)(i.PatchNoteType.Fix, "User profile shows loading while loading the data.", ["Ozz", "Gronk88"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/92786/player-profile-info-not-loading"])), this.patchNotes.push((0, i.getPatchNote)(2020, 6, 24, 84, Y));
            const z = [];
            z.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Fight Pit <img src="./static/images/map_fight_pit_preview.png" style="width: 100%">")), z.push((0, i.getContent)(i.PatchNoteType.Update, "Improved GPU usage by more than 50%", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/55589/cpugpu-usage-optimisation#comment184947"])), z.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed triple port graphic bug", ["Schaefer"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/86065/bug-port-graphic-wrong-on-56-player-maps"])), z.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed tile dice numbers for 5-6 player map", ["Joaquin"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/85630/board-numbers-in-56-players-are-wrong"])), z.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed rematch not working properly in bot games with more than 4 players")), this.patchNotes.push((0, i.getPatchNote)(2020, 6, 9, 83, z));
            const q = [];
            q.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed server crashes")), q.push((0, i.getContent)(i.PatchNoteType.Fix, "Punished players crashing the servers")), this.patchNotes.push((0, i.getPatchNote)(2020, 5, 29, 82.1, q));
            const X = [];
            X.push((0, i.getContent)(i.PatchNoteType.Update, "Fun Map changed to 2 Islands")), X.push((0, i.getContent)(i.PatchNoteType.Update, "Improved room speed settings and descriptions")), X.push((0, i.getContent)(i.PatchNoteType.Update, "Profiles only shows last 100 games")), X.push((0, i.getContent)(i.PatchNoteType.Update, "Improved chat filter", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/86785/block-offensive-language-in-the-game-description-and-chat"])), X.push((0, i.getContent)(i.PatchNoteType.Update, "Better error if files don"t load", ["Austin"])), X.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed "Error-room no longer exist" notice when player clicks back to lobby from end game", ["AlexInAuburn"])), X.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed rematch not working properly with more than 4 players", ["AlexInAuburn"])), this.patchNotes.push((0, i.getPatchNote)(2020, 5, 26, 82, X));
            const $ = [];
            $.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Fight Corona <img src="./dist/images/map_fight_corona_preview.png" style="width: 100%">")), $.push((0, i.getContent)(i.PatchNoteType.Update, "Added featured video section", ["DylLighted"])), $.push((0, i.getContent)(i.PatchNoteType.Fix, "Bot trading crash fixed thanks to all amazing pople who sent in bug reports", ["bejewelled", "Alisan"])), this.patchNotes.push((0, i.getPatchNote)(2020, 5, 14, 81, $));
            const J = [];
            J.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Twirl <img src="./dist/images/map_twirl_preview.png" style="width: 40%">", ["Panda"])), J.push((0, i.getContent)(i.PatchNoteType.Fix, "Increased server performance")), J.push((0, i.getContent)(i.PatchNoteType.Fix, "Room option problem on mobile", ["unoewho", "NewbJohny"])), this.patchNotes.push((0, i.getPatchNote)(2020, 5, 7, 80, J));
            const Q = [];
            Q.push((0, i.getContent)(i.PatchNoteType.Update, "Invite friend is more obvious in rooms")), Q.push((0, i.getContent)(i.PatchNoteType.Update, "Room options better and have descriptions")), Q.push((0, i.getContent)(i.PatchNoteType.Update, "Can click on Roll Dice text to roll dice", ["James Murphy"])), Q.push((0, i.getContent)(i.PatchNoteType.Update, "Decreased maximum room name length")), Q.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed site loading correctly on some devices", ["Zak", "Zeina"])), Q.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed room names changing into pictures", ["Phallus", "Carni"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/91016/people-ruining-the-game-with-picture-names-for-game"])), Q.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bug with room name without space not showing properly", ["Andrii"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/88240/room-name-without-space-character-broken#comment179129"])), Q.push((0, i.getContent)(i.PatchNoteType.Fix, "Longest road & largest army images show correctly on logs", ["Starshine", "Alage"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/86747/longest-road-and-largest-army-arent-correctly-writing-in-the-chat-when-the-sre-r"])), Q.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed profile not working on some devices")), Q.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed some game crashes")), Q.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed not working on some mobile")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 29, 79, Q));
            const Z = [];
            Z.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Lord of the Rings", ["Camoback"])), Z.push((0, i.getContent)(i.PatchNoteType.Update, "Removed horizontal ads in lobby")), Z.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed not being able to scroll bug", ["Barhemo", "Full_Moon_Fever", "Faunia", "FECK"], void 0, void 0, ["https://www.reddit.com/r/Catan/comments/g0kv9y/colonistio_free_online_settlers_of_catan_version/fndxqpc/", "https://colonist.featureupvote.com/suggestions/84152/could-not-scroll-down-in-the-game-room-page#comment177922", "https://colonist.featureupvote.com/suggestions/69514/the-start-screen-cannot-be-scrolled#comment177923"])), Z.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed popup covering screen in mobile")), Z.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed server crash")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 24, 78, Z));
            const ee = [];
            ee.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed color bug")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 19, 77.1, ee));
            const te = [];
            te.push((0, i.getContent)(i.PatchNoteType.Update, "Tab text changes on notifications")), te.push((0, i.getContent)(i.PatchNoteType.Update, "Room errors are sent as popup instead of chat message")), te.push((0, i.getContent)(i.PatchNoteType.Update, "Private room hosts are not kicked when AFK")), te.push((0, i.getContent)(i.PatchNoteType.Update, "AFK hosts are kicked sooner")), te.push((0, i.getContent)(i.PatchNoteType.Update, "Gives an error when pieces are finished", ["Rish"], void 0, "https://prnt.sc/s120gc")), te.push((0, i.getContent)(i.PatchNoteType.Fix, "Changing username is available and much faster")), te.push((0, i.getContent)(i.PatchNoteType.Fix, "Username update immediately reflects inside lobby and room")), te.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed some more performance issues")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 18, 77, te));
            const ae = [];
            ae.push((0, i.getContent)(i.PatchNoteType.Feature, "Added mute button to Lobby chat", ["Postwizard"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/52376/mute-lobby-sounds"])), ae.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed some performance issues")), ae.push((0, i.getContent)(i.PatchNoteType.Fix, "Prevent room link spams on lobby chat")), ae.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed in game sound icon showing wrong")), ae.push((0, i.getContent)(i.PatchNoteType.Fix, "Made profiles disabled texts clearer")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 13, 76, ae));
            const ie = [];
            ie.push((0, i.getContent)(i.PatchNoteType.Fix, "Increased website loading speed")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 8, 75.1, ie));
            const oe = [];
            oe.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: USA <img src="./dist/images/map_usa_preview.png" style="width: 40%">", ["alexcoleman"])), oe.push((0, i.getContent)(i.PatchNoteType.Feature, "7-8 Player is available with its unique map to all Colonist & Founder packs")), oe.push((0, i.getContent)(i.PatchNoteType.Update, "Removed unused room presets")), oe.push((0, i.getContent)(i.PatchNoteType.Update, "Updated shop FAQ")), oe.push((0, i.getContent)(i.PatchNoteType.Update, "Reduced preset rooms into a single Multiplayer Game")), oe.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed players not having enough colors in 7-8 player map")), oe.push((0, i.getContent)(i.PatchNoteType.Fix, "Increased website loading speed")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 8, 75, oe));
            const ne = [];
            ne.push((0, i.getContent)(i.PatchNoteType.Update, "Added a clear chat button")), ne.push((0, i.getContent)(i.PatchNoteType.Update, "Added lobby refresh icon")), ne.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed new room host not being able to change room settings", ["Matias"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/71243/bug-cant-change-settings-in-remake-lobby#comment175696"])), ne.push((0, i.getContent)(i.PatchNoteType.Fix, "Increased server performance a bit more")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 4, 74.3, ne));
            const re = [];
            re.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed server crash")), re.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed some parts that were slowing the server down")), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 3, 74.2, re));
            const se = [];
            se.push((0, i.getContent)(i.PatchNoteType.Update, "Added refresh button to lobby to increase performance")), se.push((0, i.getContent)(i.PatchNoteType.Update, "Added 2 new FAQ to shop page")), se.push((0, i.getContent)(i.PatchNoteType.Fix, "Large Funmap bug fixed", ["Arjunlal"])), this.patchNotes.push((0, i.getPatchNote)(2020, 4, 3, 74.1, se));
            const ce = [];
            ce.push((0, i.getContent)(i.PatchNoteType.Update, "In lobby disconnected games shows at the top", [], void 0, "https://prnt.sc/roqwua")), ce.push((0, i.getContent)(i.PatchNoteType.Update, "Room action colors changed to make them more distinct", [], void 0, "https://prnt.sc/roqwua")), ce.push((0, i.getContent)(i.PatchNoteType.Update, "Optimized game and made it faster")), ce.push((0, i.getContent)(i.PatchNoteType.Update, "Changed server update text")), ce.push((0, i.getContent)(i.PatchNoteType.Fix, "Shows amount of online players in mobile")), ce.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed expansion pack not showing immediately after being bought")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 29, 74, ce));
            const le = [];
            le.push((0, i.getContent)(i.PatchNoteType.Fix, "Completely fixed login errors")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 27, 73.3, le));
            const he = [];
            he.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed a few more account login and error message problems")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 26, 73.2, he));
            const de = [];
            de.push((0, i.getContent)(i.PatchNoteType.Update, "New page explains login errors")), de.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed some problems with Internal error")), de.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed some problems with logging in")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 25, 73.1, de));
            const ue = [];
            ue.push((0, i.getContent)(i.PatchNoteType.Feature, "Official 5-6 player map is ready", [], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/81750/add-6p-map"])), ue.push((0, i.getContent)(i.PatchNoteType.Feature, "Added 7-8 player setting. Only available for <a href="/store" target="_blank">Founder Pack</a>")), ue.push((0, i.getContent)(i.PatchNoteType.Update, "Fun Map changed to Large Map - Enjoy 8 player games")), ue.push((0, i.getContent)(i.PatchNoteType.Update, "Hidden quick room create links from guests", [], void 0, "https://prnt.sc/rkj0mc")), ue.push((0, i.getContent)(i.PatchNoteType.Update, "Added Login Benefits popup to Profile & Room")), ue.push((0, i.getContent)(i.PatchNoteType.Update, "Changed Online Players list to Friends List (Friend feature coming soon)")), ue.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed room player alignments")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 23, 73, ue));
            const ge = [];
            ge.push((0, i.getContent)(i.PatchNoteType.Update, "Private rooms do not show in lobby")), ge.push((0, i.getContent)(i.PatchNoteType.Update, "AFK hosts are kicked after 10 minutes", ["Wool"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/84471/afk-hosts"])), ge.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed some fonts being too big", ["thellimist", "AlexInAuburn"])), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 21, 72.7, ge));
            const me = [];
            me.push((0, i.getContent)(i.PatchNoteType.Update, "Online players box only shows the count")), me.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed a lot more lag!", ["Rexana", "cem"])), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 19, 72.6, me));
            const pe = [];
            pe.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed lag in new users again..")), pe.push((0, i.getContent)(i.PatchNoteType.Fix, "Made data in profile prettier")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 18, 72.5, pe));
            const Ce = [];
            Ce.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed lag in new users", ["Kan"])), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 18, 72.4, Ce));
            const ye = [];
            ye.push((0, i.getContent)(i.PatchNoteType.Fix, "Game works for new users", ["superpotato"])), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 17, 72.3, ye));
            const Se = [];
            Se.push((0, i.getContent)(i.PatchNoteType.Fix, "Increased server capacity")), Se.push((0, i.getContent)(i.PatchNoteType.Fix, "Made servers more responsive")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 17, 72.2, Se));
            const ve = [];
            ve.push((0, i.getContent)(i.PatchNoteType.Update, "Settler Pack users have access to 5-6 players for a limited time.", ["Flem"])), ve.push((0, i.getContent)(i.PatchNoteType.Fix, "Clicking on player name doesn"t open too many profiles")), ve.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed map numbers", ["thesettler"])), ve.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed ads pushing view down", ["player"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/83642/bug-the-ads-are-breaking-the-screen-the-screen-is-too-long"])), ve.push((0, i.getContent)(i.PatchNoteType.Fix, "Removed video ad")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 15, 72.1, ve));
            const _e = [];
            _e.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: St. Patrick"s Day", ["AlexInAuburn"])), _e.push((0, i.getContent)(i.PatchNoteType.Feature, "Profile shows player stats, <a href="/profile/thesettler" target="_blank">check it out</a>", ["thesettler"])), _e.push((0, i.getContent)(i.PatchNoteType.Update, "Increased size of objects in mobile", ["Kir"])), _e.push((0, i.getContent)(i.PatchNoteType.Update, "Removed chat colors from lobby", ["J"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/79211/please-make-brown-hat-player-text-white-or-magenta-or-periwinkle-or-rainbow-but-"])), _e.push((0, i.getContent)(i.PatchNoteType.Update, "End game buttons no longer block player stats", [], void 0, "https://prnt.sc/ra5oh9")), _e.push((0, i.getContent)(i.PatchNoteType.Update, "Clicking on usernames go to their profile")), _e.push((0, i.getContent)(i.PatchNoteType.Update, "Clicking on player icons go to their profile")), _e.push((0, i.getContent)(i.PatchNoteType.Update, "Clicking on player message icon send player private message")), _e.push((0, i.getContent)(i.PatchNoteType.Fix, "When player changes color their icon stays same")), _e.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed mobile still showing ads", ["Brandon"])), _e.push((0, i.getContent)(i.PatchNoteType.Fix, "Doubled server capacity")), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 14, 72, _e));
            const Pe = [];
            Pe.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Gear <img src="./dist/images/map_gear_preview.png?v71" style="width: 40%">", ["AlexInAuburn"])), Pe.push((0, i.getContent)(i.PatchNoteType.Feature, "Added past game datas to user profile")), Pe.push((0, i.getContent)(i.PatchNoteType.Update, "During beta test, <a href="/store" target="_blank">founder pack & colonist pack</a> users have access to 5-6 players")), Pe.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed robber placement & resource bug on fun maps", ["Sudo", "Susan", "arjunlal"])), this.patchNotes.push((0, i.getPatchNote)(2020, 3, 3, 71, Pe));
            const Te = [];
            Te.push((0, i.getContent)(i.PatchNoteType.Feature, "Able to select colors in rooms")), Te.push((0, i.getContent)(i.PatchNoteType.Feature, "5-6 players expansion is ready. During alpha test, only <a href="/store" target="_blank">founder pack</a> users have access to it")), Te.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Large Map with 59 tiles <img src="./dist/images/map_large_preview.png?v70" style="width: 100%">", ["AlexInAuburn"])), Te.push((0, i.getContent)(i.PatchNoteType.Update, "Login to get black color: <img src="./dist/images/road_black.svg?v69" style="height: 20px"><img src="./dist/images/settlement_black.svg?v69" style="height: 20px"><img src="./dist/images/city_black.svg?v69" style="height: 20px">")), Te.push((0, i.getContent)(i.PatchNoteType.Update, "Can disable animations", ["LeBoosted", "Alexander Lau"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/76969/ability-to-toggle-animations"])), Te.push((0, i.getContent)(i.PatchNoteType.Update, "Can zoom in/out from the map with scroller")), Te.push((0, i.getContent)(i.PatchNoteType.Update, "Removed ads from mobile and made mobile full screen")), Te.push((0, i.getContent)(i.PatchNoteType.Update, "Can scroll players if there are more than 4 players", ["AlexInAuburn"])), Te.push((0, i.getContent)(i.PatchNoteType.Update, "Removed watch video to win packs feature, congrats on winners")), Te.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed bottom ad covering game", ["Flatos", "Eqbal"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/79829/crazy-ads"])), this.patchNotes.push((0, i.getPatchNote)(2020, 2, 21, 70, Te));
            const be = [];
            be.push((0, i.getContent)(i.PatchNoteType.Feature, "Happy Valentines! Check out this weeks funmap<img src="./dist/images/map_valentine_preview.png?v69" style="width: 100%">", ["AlexInAuburn"])), be.push((0, i.getContent)(i.PatchNoteType.Update, "Different sound plays when players leave room", ["Jdubz"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/75604/seperate-sounds-for-players-leaving-and-joining-the-lobby"])), be.push((0, i.getContent)(i.PatchNoteType.Update, "Wrote buying packs remove ads, make game wide screen and allow access to maps to shop")), be.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed resources being covered when trading", ["AlexInAuburn"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/78518/configuration-option-to-disable-tooltips"])), this.patchNotes.push((0, i.getPatchNote)(2020, 2, 14, 69.1, be));
            const fe = [];
            fe.push((0, i.getContent)(i.PatchNoteType.Update, "Decreased chat spam filter sensitivity", ["Matias"], void 0, void 0, ["https://colonist.featureupvote.com/suggestions/74758/chat-spamblocking-should-be-decreased"])), fe.push((0, i.getContent)(i.PatchNoteType.Update, "Quitters no longer get the 💩 emoji on their names")), this.patchNotes.push((0, i.getPatchNote)(2020, 2, 8, 69, fe));
            const Ie = [];
            Ie.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Diamond Lake", ["AlexInAuburn"])), Ie.push((0, i.getContent)(i.PatchNoteType.Update, "Moved win pack button to lobby top left")), this.patchNotes.push((0, i.getPatchNote)(2020, 2, 3, 68, Ie));
            const Ee = [];
            Ee.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed not being able to click top left part of map", ["senseicmj", "grogdotcom", "AlexInAuburn"])), Ee.push((0, i.getContent)(i.PatchNoteType.Fix, "Bug fixed in tutorial", ["ayame"])), Ee.push((0, i.getContent)(i.PatchNoteType.Fix, "Added a Q&A to shop that users can pay through paypal as well", ["vitalis"])), this.patchNotes.push((0, i.getPatchNote)(2020, 1, 29, 67.1, Ee));
            const we = [];
            we.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Lakes <img src="./dist/images/map_lakes_preview.png?v67" style="width: 40%">", ["AlexInAuburn"])), we.push((0, i.getContent)(i.PatchNoteType.Update, "Users can change game resolution, antialias & power preference in settings.", ["ivan.popelyshev"], void 0, void 0, ["https://www.html5gamedevs.com/topic/44550-how-does-the-render-work/"])), we.push((0, i.getContent)(i.PatchNoteType.Update, "Shows asset loading percentage", ["player"], void 0, "https://prnt.sc/qr4kvz", ["https://colonist.featureupvote.com/suggestions/73549/bug-slow-advertising-loading-affects-reconnections-rejoining-games-ui-loading"])), we.push((0, i.getContent)(i.PatchNoteType.Fix, "Better game performance", ["ivan.popelyshev"], void 0, void 0, ["https://www.html5gamedevs.com/topic/44550-how-does-the-render-work/"])), we.push((0, i.getContent)(i.PatchNoteType.Fix, "Fun maps look better with the new sea/shore tiles", ["burak"])), we.push((0, i.getContent)(i.PatchNoteType.Fix, "Changed the road images", ["burak"])), this.patchNotes.push((0, i.getPatchNote)(2020, 1, 27, 67, we));
            const ke = [];
            ke.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Snowflake <img src="./dist/images/map_snowflake_preview.png?v67" style="width: 40%">")), ke.push((0, i.getContent)(i.PatchNoteType.Update, "Added first tournament map", ["MikeIsMyIke"])), ke.push((0, i.getContent)(i.PatchNoteType.Fix, "Better game performance", ["cem"])), this.patchNotes.push((0, i.getPatchNote)(2020, 1, 20, 66, ke));
            const Ae = [];
            Ae.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: 2 Island</img>", [])), Ae.push((0, i.getContent)(i.PatchNoteType.Feature, "Added previous tournament achievements to everyone"s profiles", ["BongBoy", "Treeck"], void 0, "https://prnt.sc/qkurti", ["https://colonist.featureupvote.com/suggestions/55017/discord-roles"])), Ae.push((0, i.getContent)(i.PatchNoteType.Update, "Created a <a href="/bugs">bugs page</a>", ["Minerva", "WurthAlot"])), Ae.push((0, i.getContent)(i.PatchNoteType.Update, "Got featured on <a href="https://iogames.space/">iogames</a>, to help out, play over there and upvote", [])), Ae.push((0, i.getContent)(i.PatchNoteType.Update, "Created tutorial mode")), Ae.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed Year of Plenty card getting used when there isn"t enough bank resources")), Ae.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed Year of Plenty increasing bank resources when there isn"t enough bank resources")), Ae.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed non premium players being able to host fun mode remakes")), Ae.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed not being able to change map setting to Random and Beginner Map")), this.patchNotes.push((0, i.getPatchNote)(2020, 1, 14, 65, Ae));
            const Me = [];
            Me.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Diamond.", ["Demiculus"])), Me.push((0, i.getContent)(i.PatchNoteType.Feature, "Added update popup.", ["Demiculus"])), Me.push((0, i.getContent)(i.PatchNoteType.Update, "Development card icons are bigger", ["eigengrau", "Starshine", "Matias", "Couch Tomato"], void 0, "https://prnt.sc/qgq80e")), Me.push((0, i.getContent)(i.PatchNoteType.Update, "Removed end game screen ads.")), Me.push((0, i.getContent)(i.PatchNoteType.Update, "Desert color is better", ["Matias", "Starshine", "Couch Tomato", "The Commander"s Son"])), Me.push((0, i.getContent)(i.PatchNoteType.Update, "Hovering over victory points shows how much victory points is needed for the game", ["corpsss"])), Me.push((0, i.getContent)(i.PatchNoteType.Update, "Settlement & City pieces stands out more, color blind friendly", ["Couch Tomato", "Starshine", "Matias", "GlryX", "The Commander"s Son", "down_vote_magnet", "Luke", "Corey", "MarcusHelius"])), Me.push((0, i.getContent)(i.PatchNoteType.Fix, "Mobile safari works better", ["DylLighted"], "https://media.discordapp.net/attachments/637403643234222109/649395911675609088/image0.png", "https://prnt.sc/qhcqpl")), this.patchNotes.push((0, i.getPatchNote)(2020, 1, 7, 64, Me));
            const Ge = [];
            Ge.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Farmers Guild")), Ge.push((0, i.getContent)(i.PatchNoteType.Update, "Room players show full screen", ["deliriz"])), Ge.push((0, i.getContent)(i.PatchNoteType.Update, "Turned `4v4` to `4p Game` to decrease confusion", ["Couch Tomato"])), this.patchNotes.push((0, i.getPatchNote)(2019, 12, 29, 63, Ge));
            const Re = [];
            Re.push((0, i.getContent)(i.PatchNoteType.Feature, "New Fun Map: Dwarf"s Fortress")), Re.push((0, i.getContent)(i.PatchNoteType.Feature, "Added Very Fast option with 30s turns", ["Swagger", "Magic"])), Re.push((0, i.getContent)(i.PatchNoteType.Update, "Increased dice timer to 10s to allow using Knight card before dice", ["Dan"])), Re.push((0, i.getContent)(i.PatchNoteType.Update, "Changed number font", void 0, "https://prnt.sc/qa64cm", "https://prnt.sc/qa678k")), Re.push((0, i.getContent)(i.PatchNoteType.Update, "Made red numbers stand out more", ["minimuscleR"])), Re.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed hovers showing big on mobile", ["DylLighted"])), this.patchNotes.push((0, i.getPatchNote)(2019, 12, 16, 62, Re));
            const De = [];
            De.push((0, i.getContent)(i.PatchNoteType.Feature, "First Fun Map: Forester"s Lodge")), De.push((0, i.getContent)(i.PatchNoteType.Update, "Turn state box shows player color", void 0, void 0, "https://prnt.sc/q7o16h")), De.push((0, i.getContent)(i.PatchNoteType.Update, "Improve tile color & outlines", ["down_vote_magnet"], void 0, "https://prnt.sc/q7o1hm")), De.push((0, i.getContent)(i.PatchNoteType.Update, "Made sea tiles darker", ["down_vote_magnet"], void 0, "https://prnt.sc/q7o1hm")), De.push((0, i.getContent)(i.PatchNoteType.Fix, "End game stats screen doesn"t black out player stats", [], void 0, "https://prnt.sc/q5vjk7")), De.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed chat card image ratios")), De.push((0, i.getContent)(i.PatchNoteType.Fix, "Added slight delay on mouse-over tool tips", ["Floris"])), De.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed game not being centered on iPad", ["Robofight"])), De.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed server lag", ["Wanda Tinasky"])), this.patchNotes.push((0, i.getPatchNote)(2019, 12, 9, 61, De));
            const xe = [];
            xe.push((0, i.getContent)(i.PatchNoteType.Update, "Iterated on UI", void 0, "https://prnt.sc/q557zr", "https://prnt.sc/q5584f")), xe.push((0, i.getContent)(i.PatchNoteType.Update, "Added click sounds to buttons", ["Demiculus"])), xe.push((0, i.getContent)(i.PatchNoteType.Update, "Trading view is bigger", ["robinQ"], void 0, "https://prnt.sc/q34h5o")), xe.push((0, i.getContent)(i.PatchNoteType.Fix, "Forest green is darker than sheep green", ["minimuscleR", "down_vote_magnet", "eigengrau"])), xe.push((0, i.getContent)(i.PatchNoteType.Fix, "Decreased gradient on the tiles", ["down_vote_magnet"])), xe.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed screen becoming stretched on fullscreen", ["Oleg"])), xe.push((0, i.getContent)(i.PatchNoteType.Fix, "Fixed writing long texts messing up UI", ["Esqarrouth"])), this.patchNotes.push((0, i.getPatchNote)(2019, 12, 2, 60, xe))
        }
        getContributionCount(e) {
            let t = 0;
            for (const a of this.getAll())
                for (const i of a.contents)
                    for (const a of i.contributors) a == e && (t += 1);
            return t
        }
        getAnnouncements() {
            return this.announcement
        }
        getAll() {
            return this.patchNotes
        }
        getLast5() {
            return this.patchNotes.slice(0, 5)
        }
        getLatest() {
            return this.patchNotes.slice(0, 1)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewAnimationController = void 0;
    const i = a(16),
        o = a(31),
        n = a(46),
        r = a(19);
    var s = a(3).GameStateEnums.TurnStates;
    class c {
        constructor(e, t, a) {
            this.animationLoopCallBack = () => {}, this.animationCompleteCallBack = () => {}, this.uiGameManager = r.uiGameManager, this.view = e, this.vx = null == t ? c.defaultVX : t, this.vy = null == a ? c.defaultVY : a
        }
        onGameTick(e) {
            this.animate(), this.animationLoopCallBack()
        }
        animateTo(e) {
            this.destination = e, n.StorageWrapper.getAnimation() ? this.startAnimation() : this.endAnimation()
        }
        startAnimation() {
            this.uiGameManager.gameState.currentTurnState == s.GameEnd && this.endAnimation(), this.uiGameManager.eventController.registerUIGameAnimation(this)
        }
        animate() {
            function e(e, t, a) {
                if (!(0, o.isCloseTo)(e, t, 2 * a)) {
                    if (e > t + 2 * a) return e - a;
                    if (e < t - 2 * a) return e + a
                }
                return t
            }
            this.view.x = e(this.view.x, this.destination.x, this.vx), this.view.y = e(this.view.y, this.destination.y, this.vy), this.animationComplete() && this.endAnimation()
        }
        animationComplete() {
            const e = 0 == this.vx ? c.defaultVX : this.vx,
                t = 0 == this.vy ? c.defaultVY : this.vy;
            return !(!(0, o.isCloseTo)(this.view.x, this.destination.x, e) || !(0, o.isCloseTo)(this.view.y, this.destination.y, t))
        }
        endAnimation() {
            this.view.x = this.destination.x, this.view.y = this.destination.y, this.uiGameManager.eventController.unregisterUIGameAnimation(this), this.animationCompleteCallBack()
        }
    }
    t.ViewAnimationController = c, c.DEMI_SCREEN_RESOLUTION = 1440, c.defaultVX = .3 * i.UIGameConstants.GAME_TICK * window.innerWidth / c.DEMI_SCREEN_RESOLUTION, c.defaultVY = .3 * i.UIGameConstants.GAME_TICK * window.innerWidth / c.DEMI_SCREEN_RESOLUTION
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupInformationView = void 0;
    const i = a(13),
        o = a(38),
        n = a(25),
        r = a(6),
        s = a(27),
        c = a(107);
    class l extends s.SectionView {
        constructor(e, t, a, s, c, l, h) {
            const d = 1.25 * e.canvasController.itemSize;
            super(t, a, s, d, l), this.uiGameManager = e;
            const u = .8 * d,
                g = r.Loader.shared.resources[c.imageTextureName].texture,
                m = u / (g.height / g.width),
                p = .1 * d;
            this.leftImage = new i.SpriteView(p, 0, m, u, this, g);
            const C = c.title,
                y = this.leftImage.x + this.leftImage.width + .1 * d,
                S = .75 * this.width,
                v = .1 * d,
                _ = .2 * d;
            this.title = new o.TextView(C, y, v, S, _, this, n.GameFont.Size.XL), this.title.style.align = "left";
            const P = .35 * d,
                T = .6 * d,
                b = null == h ? c.body : h;
            this.body = new o.TextView(b, y, P, S, T, this, n.GameFont.Size.Normal), this.body.repositionY(!1), this.body.style.align = "left", this.leftImage.centerYInParent()
        }
        doesTextExtendBelowImage() {
            return this.body.y + this.body.height > this.leftImage.y + this.leftImage.height
        }
        updateBody(e) {
            this.body.text = e, this.body.repositionY(!1), this.body.style.align = "left"
        }
        static getPopupInformationForCardData(e) {
            return {
                imageTextureName: e.imageFileName,
                title: e.tipTitle,
                body: e.popupBody
            }
        }
        static getPopupInformationForPendingDistributions(e) {
            switch (e.selectionType) {
                case c.CardDistributionType.ResourceTile:
                case c.CardDistributionType.StartingResources:
                    return;
                case c.CardDistributionType.GoldTile:
                    return l.getPopupInformationForGoldTileDistribution(e);
                case c.CardDistributionType.Aqueduct:
                    return l.getPopupInformationForAqueductDistribution(e);
                case c.CardDistributionType.BarbarianProgressCard:
                    return l.getPopupInformationForBarbarianProgressCardDistribution(e)
            }
        }
        static getPopupInformationForGoldTileDistribution(e) {
            const t = e.selectCardFormat.amountOfCardsToSelect;
            return {
                imageTextureName: "tile_gold",
                title: "Gold Tile",
                body: "Take " + (1 == t ? t + " resource" : t + " resources") + " from the bank"
            }
        }
        static getPopupInformationForAqueductDistribution(e) {
            const t = e.selectCardFormat.amountOfCardsToSelect;
            return {
                imageTextureName: "icon_aqueduct",
                title: "Aqueduct",
                body: "Take " + (1 == t ? t + " resource" : t + " resources") + " from the bank"
            }
        }
        static getPopupInformationForBarbarianProgressCardDistribution(e) {
            return {
                imageTextureName: "icon_barbarian_ship",
                title: "Select Progress Card",
                body: "Select a progress card of your choice for defeating the barbarians"
            }
        }
    }
    t.UIGamePopupInformationView = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TradeArrowView = void 0;
    const i = a(13),
        o = a(6),
        n = a(17);
    class r extends n.SectionBgView {
        constructor(e, t, a, n, r, s = !0) {
            super(e, t, a, a, n);
            let c = o.Loader.shared.resources.icon_trade_arrow_red.texture;
            r && (c = o.Loader.shared.resources.icon_trade_arrow_green.texture), this.arrow = new i.SpriteView(0, 0, this.width, this.height, this, c), s && this.centerYInParent()
        }
        centerYInParent() {
            null != this.parent && (this.y = this.parent.height / 2 - this.height / 2)
        }
    }
    t.TradeArrowView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapCornerView = void 0;
    const i = a(83);
    class o extends i.MovingSpriteView {
        constructor(e, t, a, i, o, n, r, s) {
            super(t, a, i, o, s, r), this.zIndex = n, this.corner = e, this.buildingType = e.buildingType
        }
    }
    t.UIGameMapCornerView = o
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BankState = t.CardDistributionType = void 0;
    const i = a(7);
    ! function(e) {
        e[e.StartingResources = 0] = "StartingResources", e[e.ResourceTile = 1] = "ResourceTile", e[e.GoldTile = 2] = "GoldTile", e[e.Aqueduct = 3] = "Aqueduct", e[e.BarbarianProgressCard = 4] = "BarbarianProgressCard"
    }(t.CardDistributionType || (t.CardDistributionType = {}));
    t.BankState = class {
        constructor() {
            this.resourceCards = [], this.hiddenDevelopmentCards = [], this.hasLongestRoad = !0, this.hasLargestArmy = !0
        }
        updateCards(e, t, a) {
            this.resourceCards = e, this.hiddenDevelopmentCards = t
        }
        totalResourceCardOfType(e) {
            return (0, i.countOccurenceOfValueInArray)(this.resourceCards, e)
        }
        totalDevelopmentCards() {
            return this.hiddenDevelopmentCards.length
        }
        totalDevelopmentCardOfType(e) {
            return (0, i.countOccurenceOfValueInArray)(this.hiddenDevelopmentCards, e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ModeSeafarersAndCitiesAndKnights56PData = t.ModeSeafarersAndCitiesAndKnights4PData = t.ModeCitiesAndKnights56PData = t.ModeCitiesAndKnights4PData = t.ModeSeafarers56PData = t.ModeSeafarers4PData = t.ModeClassic78PData = t.ModeClassic56PData = t.ModeClassicTutorial4PData = t.ModeClassic4PData = void 0;
    const i = a(32),
        o = a(3),
        n = a(21),
        r = a(109),
        s = a(110),
        c = a(111),
        l = a(112);
    class h extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [], this.modeSetting = o.ModeSettingEnum.Classic4P, this.extensionSetting = o.ExtensionSettingEnum.Players4, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.DevelopmentCards, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.LargestArmy], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.Settlement], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.Development], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.developmentCardsClassic4P, this.productionController = new l.ClassicResourceProductionController, this.name = "Base", this.active = !0, this.defaultMap = o.MapSettingEnum.Classic4P, this.defaultPlayerCount = 4, this.defaultVPsToWin = 10, this.additionalVPsForGameModeCombinations = 0, this.toolTipOverrides = new c.GameModeDefaultToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.Classic
        }
    }
    t.ModeClassic4PData = h;
    class d extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [], this.modeSetting = o.ModeSettingEnum.TutorialClassic4P, this.extensionSetting = o.ExtensionSettingEnum.Players4, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.Tutorial, o.OptionalGameMechanicEnum.DevelopmentCards, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.LargestArmy], this.startingSettlementPlacements = [], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.Development], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.developmentCardsClassic4P, this.productionController = new l.ClassicResourceProductionController, this.name = "Tutorial", this.active = !0, this.defaultMap = o.MapSettingEnum.TutorialClassic4P, this.defaultPlayerCount = 4, this.defaultVPsToWin = 10, this.additionalVPsForGameModeCombinations = 0, this.toolTipOverrides = new c.GameModeDefaultToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.Classic
        }
    }
    t.ModeClassicTutorial4PData = d;
    class u extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [i.StoreExpansionType.Classic56P], this.modeSetting = o.ModeSettingEnum.Classic56P, this.extensionSetting = o.ExtensionSettingEnum.Players56, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.SpecialBuildPhase, o.OptionalGameMechanicEnum.DevelopmentCards, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.LargestArmy], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.Settlement], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.Development], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.developmentCardsClassic56P, this.productionController = new l.ClassicResourceProductionController, this.name = "Base 5-6 Player", this.active = !0, this.defaultMap = o.MapSettingEnum.Classic56P, this.defaultPlayerCount = 6, this.defaultVPsToWin = 10, this.additionalVPsForGameModeCombinations = 0, this.toolTipOverrides = new c.GameModeDefaultToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.Classic
        }
    }
    t.ModeClassic56PData = u;
    class g extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [i.StoreExpansionType.Classic78P], this.modeSetting = o.ModeSettingEnum.Classic78P, this.extensionSetting = o.ExtensionSettingEnum.Players78, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.SpecialBuildPhase, o.OptionalGameMechanicEnum.DevelopmentCards, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.LargestArmy], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.Settlement], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.Development], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.developmentCardsClassic78P, this.productionController = new l.ClassicResourceProductionController, this.name = "Base 7-8 Player", this.active = !0, this.defaultMap = o.MapSettingEnum.Classic78P, this.defaultPlayerCount = 8, this.defaultVPsToWin = 10, this.additionalVPsForGameModeCombinations = 0, this.toolTipOverrides = new c.GameModeDefaultToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.Classic
        }
    }
    t.ModeClassic78PData = g;
    class m extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [i.StoreExpansionType.Seafarers4P], this.modeSetting = o.ModeSettingEnum.Seafarers4P, this.extensionSetting = o.ExtensionSettingEnum.Players4, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.Ships, o.OptionalGameMechanicEnum.DevelopmentCards, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.LargestArmy], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.Settlement], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.Development], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.developmentCardsClassic4P, this.productionController = new l.ClassicResourceProductionController, this.name = "Seafarers", this.active = !0, this.defaultMap = o.MapSettingEnum.SS1HeadingForNewShores4P, this.defaultPlayerCount = 4, this.defaultVPsToWin = 14, this.additionalVPsForGameModeCombinations = 0, this.toolTipOverrides = new c.GameModeSeafarersToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.Seafarers
        }
    }
    t.ModeSeafarers4PData = m;
    class p extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [i.StoreExpansionType.Seafarers56P], this.modeSetting = o.ModeSettingEnum.Seafarers56P, this.extensionSetting = o.ExtensionSettingEnum.Players56, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.Ships, o.OptionalGameMechanicEnum.SpecialBuildPhase, o.OptionalGameMechanicEnum.DevelopmentCards, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.LargestArmy], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.Settlement], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.Development], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.developmentCardsClassic56P, this.productionController = new l.ClassicResourceProductionController, this.name = "Seafarers 5-6 Player", this.active = !0, this.defaultMap = o.MapSettingEnum.SS1HeadingForNewShores56P, this.defaultPlayerCount = 6, this.defaultVPsToWin = 14, this.additionalVPsForGameModeCombinations = 0, this.toolTipOverrides = new c.GameModeSeafarersToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.Seafarers
        }
    }
    t.ModeSeafarers56PData = p;
    class C extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [i.StoreExpansionType.CitiesAndKnights4P], this.modeSetting = o.ModeSettingEnum.CitiesAndKnights4P, this.extensionSetting = o.ExtensionSettingEnum.Players4, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.CityWall, o.OptionalGameMechanicEnum.Knights, o.OptionalGameMechanicEnum.CityImprovements, o.OptionalGameMechanicEnum.Barbarians, o.OptionalGameMechanicEnum.ProgressCards, o.OptionalGameMechanicEnum.EventDice, o.OptionalGameMechanicEnum.RedDice, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.PlayerInformationArrowView], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.City], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource, o.GameStateEnums.CardTypeEnum.Commodity], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.ProgressPolitics, o.GameStateEnums.CardTypeEnum.ProgressScience, o.GameStateEnums.CardTypeEnum.ProgressTrade], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.progressCradsCititesAndKnights4P, this.productionController = new l.CommodityResourceProductionController, this.name = "Cities & Knights", this.active = !0, this.defaultMap = o.MapSettingEnum.Classic4P, this.defaultPlayerCount = 4, this.defaultVPsToWin = 13, this.additionalVPsForGameModeCombinations = 0, this.toolTipOverrides = new c.GameModeCitiesAndKnightsToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.CitiesAndKnights
        }
    }
    t.ModeCitiesAndKnights4PData = C;
    class y extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [i.StoreExpansionType.CitiesAndKnights56P], this.modeSetting = o.ModeSettingEnum.CitiesAndKnights56P, this.extensionSetting = o.ExtensionSettingEnum.Players56, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.CityWall, o.OptionalGameMechanicEnum.Knights, o.OptionalGameMechanicEnum.CityImprovements, o.OptionalGameMechanicEnum.Barbarians, o.OptionalGameMechanicEnum.ProgressCards, o.OptionalGameMechanicEnum.EventDice, o.OptionalGameMechanicEnum.RedDice, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.PlayerInformationArrowView, o.OptionalGameMechanicEnum.SpecialBuildPhase], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.City], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource, o.GameStateEnums.CardTypeEnum.Commodity], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.ProgressPolitics, o.GameStateEnums.CardTypeEnum.ProgressScience, o.GameStateEnums.CardTypeEnum.ProgressTrade], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.progressCradsCititesAndKnights4P, this.productionController = new l.CommodityResourceProductionController, this.name = "Cities & Knights 5-6 Player", this.active = !0, this.defaultMap = o.MapSettingEnum.Classic56P, this.defaultPlayerCount = 6, this.defaultVPsToWin = 13, this.additionalVPsForGameModeCombinations = 0, this.toolTipOverrides = new c.GameModeCitiesAndKnightsToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.CitiesAndKnights
        }
    }
    t.ModeCitiesAndKnights56PData = y;
    class S extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [i.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.modeSetting = o.ModeSettingEnum.CitiesAndKnightsSeafarers4P, this.extensionSetting = o.ExtensionSettingEnum.Players4, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.Ships, o.OptionalGameMechanicEnum.CityWall, o.OptionalGameMechanicEnum.Knights, o.OptionalGameMechanicEnum.CityImprovements, o.OptionalGameMechanicEnum.Barbarians, o.OptionalGameMechanicEnum.ProgressCards, o.OptionalGameMechanicEnum.EventDice, o.OptionalGameMechanicEnum.RedDice, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.PlayerInformationArrowView], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.City], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource, o.GameStateEnums.CardTypeEnum.Commodity], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.ProgressPolitics, o.GameStateEnums.CardTypeEnum.ProgressScience, o.GameStateEnums.CardTypeEnum.ProgressTrade], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.progressCradsCititesAndKnights4P, this.productionController = new l.CommodityResourceProductionController, this.name = "Seafarers + Cities & Knights", this.active = !0, this.defaultMap = o.MapSettingEnum.SS1HeadingForNewShores4P, this.defaultPlayerCount = 4, this.defaultVPsToWin = 14, this.additionalVPsForGameModeCombinations = 2, this.toolTipOverrides = new c.GameModeSeafarersAndCitiesAndKnightsToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.CitiesAndKnightsSeafarers
        }
    }
    t.ModeSeafarersAndCitiesAndKnights4PData = S;
    class v extends r.BaseGameModeData {
        constructor() {
            super(...arguments), this.premiumExpansionAccess = [i.StoreExpansionType.CitiesAndKnightsSeafarers56P], this.modeSetting = o.ModeSettingEnum.CitiesAndKnightsSeafarers56P, this.extensionSetting = o.ExtensionSettingEnum.Players56, this.optionalGameMechanics = [o.OptionalGameMechanicEnum.Ships, o.OptionalGameMechanicEnum.CityWall, o.OptionalGameMechanicEnum.Knights, o.OptionalGameMechanicEnum.CityImprovements, o.OptionalGameMechanicEnum.Barbarians, o.OptionalGameMechanicEnum.ProgressCards, o.OptionalGameMechanicEnum.EventDice, o.OptionalGameMechanicEnum.RedDice, o.OptionalGameMechanicEnum.LongestRoad, o.OptionalGameMechanicEnum.PlayerInformationArrowView, o.OptionalGameMechanicEnum.SpecialBuildPhase], this.startingSettlementPlacements = [n.TileEnums.CornerBuildingTypes.Settlement, n.TileEnums.CornerBuildingTypes.City], this.activeResourceCardTypes = [o.GameStateEnums.CardTypeEnum.Resource, o.GameStateEnums.CardTypeEnum.Commodity], this.activeDevelopmentCardTypes = [o.GameStateEnums.CardTypeEnum.ProgressPolitics, o.GameStateEnums.CardTypeEnum.ProgressScience, o.GameStateEnums.CardTypeEnum.ProgressTrade], this.startingDevelopmentCards = s.GameModeDevelopmentCardData.progressCradsCititesAndKnights4P, this.productionController = new l.CommodityResourceProductionController, this.name = "Seafarers + Cities & Knights 5-6 Player", this.active = !0, this.defaultMap = o.MapSettingEnum.SS1HeadingForNewShores56P, this.defaultPlayerCount = 6, this.defaultVPsToWin = 14, this.additionalVPsForGameModeCombinations = 2, this.toolTipOverrides = new c.GameModeSeafarersAndCitiesAndKnightsToolTips, this.temporaryModeSetting = o.TemporaryModeSettingEnum.CitiesAndKnightsSeafarers
        }
    }
    t.ModeSeafarersAndCitiesAndKnights56PData = v
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BaseGameModeData = void 0;
    const i = a(3);
    t.BaseGameModeData = class {
        isGameModePremium() {
            return 0 != this.premiumExpansionAccess.length
        }
        getAllowablePlayerCount() {
            switch (this.extensionSetting) {
                case i.ExtensionSettingEnum.Players4:
                    return [1, 2, 3, 4];
                case i.ExtensionSettingEnum.Players56:
                    return [5, 6];
                case i.ExtensionSettingEnum.Players78:
                    return [7, 8]
            }
        }
        getNewInstanceOfData() {
            return new this.constructor
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameModeDevelopmentCardData = void 0;
    var i = a(3).GameStateEnums.CardEnum;
    class o {}
    t.GameModeDevelopmentCardData = o, o.developmentCardsClassic4P = [...Array(14).fill(i.Knight), ...Array(5).fill(i.VictoryPoint), ...Array(2).fill(i.RoadBuilding), ...Array(2).fill(i.Monopoly), ...Array(2).fill(i.YearOfPlenty)], o.developmentCardsClassic56P = [...Array(20).fill(i.Knight), ...Array(5).fill(i.VictoryPoint), ...Array(3).fill(i.RoadBuilding), ...Array(3).fill(i.Monopoly), ...Array(3).fill(i.YearOfPlenty)], o.developmentCardsClassic78P = [...Array(26).fill(i.Knight), ...Array(5).fill(i.VictoryPoint), ...Array(4).fill(i.RoadBuilding), ...Array(4).fill(i.Monopoly), ...Array(4).fill(i.YearOfPlenty)], o.progressCradsCititesAndKnights4P = [...Array(2).fill(i.ProgressCardScienceAlchemist), ...Array(2).fill(i.ProgressCardScienceCrane), ...Array(1).fill(i.ProgressCardScienceEngineer), ...Array(2).fill(i.ProgressCardScienceInventor), ...Array(2).fill(i.ProgressCardScienceIrrigation), ...Array(2).fill(i.ProgressCardScienceMedicine), ...Array(2).fill(i.ProgressCardScienceMining), ...Array(1).fill(i.ProgressCardSciencePrinter), ...Array(2).fill(i.ProgressCardScienceRoadBuilding), ...Array(2).fill(i.ProgressCardScienceSmith), ...Array(2).fill(i.ProgressCardPoliticsBishop), ...Array(1).fill(i.ProgressCardPoliticsConstitution), ...Array(2).fill(i.ProgressCardPoliticsDeserter), ...Array(2).fill(i.ProgressCardPoliticsDiplomat), ...Array(2).fill(i.ProgressCardPoliticsIntrigue), ...Array(2).fill(i.ProgressCardPoliticsSaboteur), ...Array(3).fill(i.ProgressCardPoliticsSpy), ...Array(2).fill(i.ProgressCardPoliticsWarlord), ...Array(2).fill(i.ProgressCardPoliticsWedding), ...Array(2).fill(i.ProgressCardTradeCommercialHarbor), ...Array(2).fill(i.ProgressCardTradeMasterMerchant), ...Array(6).fill(i.ProgressCardTradeMerchant), ...Array(2).fill(i.ProgressCardTradeMerchantFleet), ...Array(4).fill(i.ProgressCardTradeResourceMonopoly), ...Array(2).fill(i.ProgressCardTradeCommodityMonopoly)]
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameModeSeafarersAndCitiesAndKnightsToolTips = t.GameModeCitiesAndKnightsToolTips = t.GameModeSeafarersToolTips = t.GameModeDefaultToolTips = t.GameModeToolTipOverrides = void 0;
    const i = a(22);
    class o {
        overrideToolTips() {
            i.EnglishTexts.DEAFULT_RESOURCE_CARD_LUMBER_TIP_BODY = this.resourceCardLumberToolTip, i.EnglishTexts.DEAFULT_RESOURCE_CARD_BRICK_TIP_BODY = this.resourceCardBrickToolTip, i.EnglishTexts.DEAFULT_RESOURCE_CARD_WOOL_TIP_BODY = this.resourceCardWoolToolTip, i.EnglishTexts.DEAFULT_RESOURCE_CARD_GRAIN_TIP_BODY = this.resourceCardGrainToolTip, i.EnglishTexts.DEAFULT_RESOURCE_CARD_ORE_TIP_BODY = this.resourceCardOreToolTip, i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_BODY = this.roadBuildingDevelopmentCardToolTipBody, i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDING_POPUP_BODY = this.roadBuildingDevelopmentCardPopupBody, i.EnglishTexts.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_BODY = this.roadBuildingProgressCardToolTipBody, i.EnglishTexts.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_POPUP_BODY = this.roadBuildingProgressCardPopupBody, i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_KNIGHT_TIP_BODY = this.knightDevelopmentCardToolTipBody, i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_KNGIHT_POPUP_BODY = this.knightDevelopmentCardPopupBody, i.EnglishTexts.DEFAULT_PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_BODY = this.progressCardDiplomatToolTipBody, i.EnglishTexts.DEAFULT_PROGRESS_CARD_POLITICS_DIPLOMAT_POPUP_BODY = this.progressCardDiplomatPopupBody, i.EnglishTexts.PLAYER_INFORMATION_LONGEST_ROAD_TITLE = this.playerInformationLongestRoadTipTitle, i.EnglishTexts.PLAYER_INFORMATION_LONGEST_ROAD_BODY = this.playerInformationLongestRoadTipBody, i.EnglishTexts.PLAYER_INFORMATION_RESOURCE_CARD_BODY = this.playerInformationResourceCardBody, i.EnglishTexts.END_GAME_ACTIVITY_DEV_CARDS_BOUGHT = this.endGameDevelopmentCardsBoughtTitle, i.EnglishTexts.END_GAME_ACTIVITY_DEV_CARDS_USED = this.endGameDevelopmentCardsUsedTitle, i.EnglishTexts.END_GAME_DEV_CARD_INCOME = this.endGameResourceCardsGainedFromDevelopmentCardsTitle, i.EnglishTexts.END_GAME_DEV_CARD_LOSS = this.endGameResourceCardsLostFromDevelopmentCardTitle, i.EnglishTexts.END_GAME_DEVELOPMENT_CARDS_DRAWN = this.endGameDevelopmentCardsDrawnGraphTitle, i.EnglishTexts.ERROR_DEFAULT_DEVELOPMENT_CARDS_DISABLED = this.errorDevelopmentCardDisabled
        }
    }
    t.GameModeToolTipOverrides = o;
    t.GameModeDefaultToolTips = class extends o {
        constructor() {
            super(...arguments), this.resourceCardLumberToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_LUMBER_TIP_BODY, this.resourceCardBrickToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_BRICK_TIP_BODY, this.resourceCardWoolToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_WOOL_TIP_BODY, this.resourceCardGrainToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_GRAIN_TIP_BODY, this.resourceCardOreToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_ORE_TIP_BODY, this.roadBuildingDevelopmentCardToolTipBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_BODY, this.roadBuildingDevelopmentCardPopupBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDING_POPUP_BODY, this.roadBuildingProgressCardToolTipBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_BODY, this.roadBuildingProgressCardPopupBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_POPUP_BODY, this.knightDevelopmentCardToolTipBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_KNIGHT_TIP_BODY, this.knightDevelopmentCardPopupBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_KNGIHT_POPUP_BODY, this.progressCardDiplomatToolTipBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_BODY, this.progressCardDiplomatPopupBody = i.EnglishTexts.DEAFULT_PROGRESS_CARD_POLITICS_DIPLOMAT_POPUP_BODY, this.playerInformationLongestRoadTipTitle = i.EnglishTexts.PLAYER_INFORMATION_LONGEST_ROAD_TITLE, this.playerInformationLongestRoadTipBody = i.EnglishTexts.PLAYER_INFORMATION_LONGEST_ROAD_BODY, this.playerInformationResourceCardBody = i.EnglishTexts.PLAYER_INFORMATION_RESOURCE_CARD_BODY, this.endGameDevelopmentCardsBoughtTitle = i.EnglishTexts.END_GAME_ACTIVITY_DEV_CARDS_BOUGHT, this.endGameDevelopmentCardsUsedTitle = i.EnglishTexts.END_GAME_ACTIVITY_DEV_CARDS_USED, this.endGameResourceCardsGainedFromDevelopmentCardsTitle = i.EnglishTexts.END_GAME_DEV_CARD_INCOME, this.endGameResourceCardsLostFromDevelopmentCardTitle = i.EnglishTexts.END_GAME_DEV_CARD_LOSS, this.endGameDevelopmentCardsDrawnGraphTitle = i.EnglishTexts.END_GAME_DEVELOPMENT_CARDS_DRAWN, this.errorDevelopmentCardDisabled = i.EnglishTexts.ERROR_DEFAULT_DEVELOPMENT_CARDS_DISABLED, this.errorDiplomatNoEdgePiecesToRemove = i.EnglishTexts.ERROR_DIPLOMAT_NO_ROAD_TO_REMOVE
        }
    };
    t.GameModeSeafarersToolTips = class extends o {
        constructor() {
            super(...arguments), this.resourceCardLumberToolTip = i.EnglishTexts.OVERRIDE_SEAFARERES_RESOURCE_CARD_LUMBER_TIP_BODY, this.resourceCardBrickToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_BRICK_TIP_BODY, this.resourceCardWoolToolTip = i.EnglishTexts.OVERRIDE_SEAFARERES_RESOURCE_CARD_WOOL_TIP_BODY, this.resourceCardGrainToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_GRAIN_TIP_BODY, this.resourceCardOreToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_ORE_TIP_BODY, this.roadBuildingDevelopmentCardToolTipBody = i.EnglishTexts.OVERRIDE_SEAFARERES_DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_BODY, this.roadBuildingDevelopmentCardPopupBody = i.EnglishTexts.OVERRIDE_SEFARERES_DEVELOPMENT_CARD_ROAD_BUILDING_POPUP_BODY, this.roadBuildingProgressCardToolTipBody = i.EnglishTexts.OVERRIDE_SEAFARERS_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_BODY, this.roadBuildingProgressCardPopupBody = i.EnglishTexts.OVERRIDE_SEAFARERS_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_POPUP_BODY, this.knightDevelopmentCardToolTipBody = i.EnglishTexts.OVERRIDE_SEAFARERS_DEVELOPMENT_CARD_KNIGHT_TIP_BODY, this.knightDevelopmentCardPopupBody = i.EnglishTexts.OVERRIDE_SEAFARERS_DEVELOPMENT_CARD_KNIGHT_POPUP_BODY, this.progressCardDiplomatToolTipBody = i.EnglishTexts.OVERRIDE_SEAFARERS_PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_BODY, this.progressCardDiplomatPopupBody = i.EnglishTexts.OVERRIDE_SEAFARERS_PROGRESS_CARD_POLITICS_DIPLOMAT_POPUP_BODY, this.playerInformationLongestRoadTipTitle = i.EnglishTexts.SEAFARERS_OVERRIDE_PLAYER_INFORMATION_LONGEST_TRADE_ROUTE_TITLE, this.playerInformationLongestRoadTipBody = i.EnglishTexts.SEAFARERS_OVERRIDE_PLAYER_INFORMATION_LONGEST_TRADE_ROUTE_BODY, this.playerInformationResourceCardBody = i.EnglishTexts.PLAYER_INFORMATION_RESOURCE_CARD_BODY, this.endGameDevelopmentCardsBoughtTitle = i.EnglishTexts.END_GAME_ACTIVITY_DEV_CARDS_BOUGHT, this.endGameDevelopmentCardsUsedTitle = i.EnglishTexts.END_GAME_ACTIVITY_DEV_CARDS_USED, this.endGameResourceCardsGainedFromDevelopmentCardsTitle = i.EnglishTexts.END_GAME_DEV_CARD_INCOME, this.endGameResourceCardsLostFromDevelopmentCardTitle = i.EnglishTexts.END_GAME_DEV_CARD_LOSS, this.endGameDevelopmentCardsDrawnGraphTitle = i.EnglishTexts.END_GAME_DEVELOPMENT_CARDS_DRAWN, this.errorDevelopmentCardDisabled = i.EnglishTexts.ERROR_DEFAULT_DEVELOPMENT_CARDS_DISABLED, this.errorDiplomatNoEdgePiecesToRemove = i.EnglishTexts.OVVERRIDE_SEAFARERS_ERROR_DIPLOMAT_NO_SHIPS_TO_REMOVE
        }
    };
    t.GameModeCitiesAndKnightsToolTips = class extends o {
        constructor() {
            super(...arguments), this.resourceCardLumberToolTip = i.EnglishTexts.DEAFULT_RESOURCE_CARD_LUMBER_TIP_BODY, this.resourceCardBrickToolTip = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_BRICK_TIP_BODY, this.resourceCardWoolToolTip = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_WOOL_TIP_BODY, this.resourceCardGrainToolTip = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_GRAIN_TIP_BODY, this.resourceCardOreToolTip = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_ORE_TIP_BODY, this.roadBuildingDevelopmentCardToolTipBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_BODY, this.roadBuildingDevelopmentCardPopupBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDING_POPUP_BODY, this.roadBuildingProgressCardToolTipBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_BODY, this.roadBuildingProgressCardPopupBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_POPUP_BODY, this.knightDevelopmentCardToolTipBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_KNIGHT_TIP_BODY, this.knightDevelopmentCardPopupBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_KNGIHT_POPUP_BODY, this.progressCardDiplomatToolTipBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_BODY, this.progressCardDiplomatPopupBody = i.EnglishTexts.DEAFULT_PROGRESS_CARD_POLITICS_DIPLOMAT_POPUP_BODY, this.playerInformationLongestRoadTipTitle = i.EnglishTexts.PLAYER_INFORMATION_LONGEST_ROAD_TITLE, this.playerInformationLongestRoadTipBody = i.EnglishTexts.PLAYER_INFORMATION_LONGEST_ROAD_BODY, this.playerInformationResourceCardBody = i.EnglishTexts.CITIES_AND_KNIGHTS_OVERRIDE_PLAYER_INFORMATION_RESOURCE_CARD_BODY, this.endGameDevelopmentCardsBoughtTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_ACTIVITY_DEV_CARDS_BOUGHT, this.endGameDevelopmentCardsUsedTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_ACTIVITY_DEV_CARDS_USED, this.endGameResourceCardsGainedFromDevelopmentCardsTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEV_CARD_INCOME, this.endGameResourceCardsLostFromDevelopmentCardTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEV_CARD_LOSS, this.endGameDevelopmentCardsDrawnGraphTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEVELOPMENT_CARDS_DRAWN, this.errorDevelopmentCardDisabled = i.EnglishTexts.ERROR_OVERRIDE_CITIES_AND_KNIGHTS_DEVELOPMENT_CARDS_DISABLED, this.errorDiplomatNoEdgePiecesToRemove = i.EnglishTexts.ERROR_DIPLOMAT_NO_ROAD_TO_REMOVE
        }
    };
    t.GameModeSeafarersAndCitiesAndKnightsToolTips = class extends o {
        constructor() {
            super(...arguments), this.resourceCardLumberToolTip = i.EnglishTexts.OVERRIDE_SEAFARERES_RESOURCE_CARD_LUMBER_TIP_BODY, this.resourceCardBrickToolTip = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_BRICK_TIP_BODY, this.resourceCardWoolToolTip = i.EnglishTexts.OVERRIDE_SEAFARERES_CITIES_AND_KNIGHTS_RESOURCE_CARD_WOOL_TIP_BODY, this.resourceCardGrainToolTip = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_GRAIN_TIP_BODY, this.resourceCardOreToolTip = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_RESOURCE_CARD_ORE_TIP_BODY, this.roadBuildingDevelopmentCardToolTipBody = i.EnglishTexts.OVERRIDE_SEAFARERES_DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_BODY, this.roadBuildingDevelopmentCardPopupBody = i.EnglishTexts.OVERRIDE_SEFARERES_DEVELOPMENT_CARD_ROAD_BUILDING_POPUP_BODY, this.roadBuildingProgressCardToolTipBody = i.EnglishTexts.OVERRIDE_SEAFARERS_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_BODY, this.roadBuildingProgressCardPopupBody = i.EnglishTexts.OVERRIDE_SEAFARERS_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_POPUP_BODY, this.knightDevelopmentCardToolTipBody = i.EnglishTexts.OVERRIDE_SEAFARERS_DEVELOPMENT_CARD_KNIGHT_TIP_BODY, this.knightDevelopmentCardPopupBody = i.EnglishTexts.OVERRIDE_SEAFARERS_DEVELOPMENT_CARD_KNIGHT_POPUP_BODY, this.progressCardDiplomatToolTipBody = i.EnglishTexts.OVERRIDE_SEAFARERS_PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_BODY, this.progressCardDiplomatPopupBody = i.EnglishTexts.OVERRIDE_SEAFARERS_PROGRESS_CARD_POLITICS_DIPLOMAT_POPUP_BODY, this.playerInformationLongestRoadTipTitle = i.EnglishTexts.SEAFARERS_OVERRIDE_PLAYER_INFORMATION_LONGEST_TRADE_ROUTE_TITLE, this.playerInformationLongestRoadTipBody = i.EnglishTexts.SEAFARERS_OVERRIDE_PLAYER_INFORMATION_LONGEST_TRADE_ROUTE_BODY, this.playerInformationResourceCardBody = i.EnglishTexts.CITIES_AND_KNIGHTS_OVERRIDE_PLAYER_INFORMATION_RESOURCE_CARD_BODY, this.endGameDevelopmentCardsBoughtTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_ACTIVITY_DEV_CARDS_BOUGHT, this.endGameDevelopmentCardsUsedTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_ACTIVITY_DEV_CARDS_USED, this.endGameResourceCardsGainedFromDevelopmentCardsTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEV_CARD_INCOME, this.endGameResourceCardsLostFromDevelopmentCardTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEV_CARD_LOSS, this.endGameDevelopmentCardsDrawnGraphTitle = i.EnglishTexts.OVERRIDE_CITIES_AND_KNIGHTS_END_GAME_DEVELOPMENT_CARDS_DRAWN, this.errorDevelopmentCardDisabled = i.EnglishTexts.ERROR_OVERRIDE_CITIES_AND_KNIGHTS_DEVELOPMENT_CARDS_DISABLED, this.errorDiplomatNoEdgePiecesToRemove = i.EnglishTexts.OVVERRIDE_SEAFARERS_ERROR_DIPLOMAT_NO_SHIPS_TO_REMOVE
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CommodityResourceProductionController = t.ClassicResourceProductionController = t.ProductionController = void 0;
    const i = a(3),
        o = a(21);
    class n {
        getProductionForCornerPieceAndTile(e, t) {
            switch (e) {
                case o.TileEnums.CornerBuildingTypes.Empty:
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel1:
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel2:
                case o.TileEnums.CornerBuildingTypes.KnightActiveLevel3:
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel1:
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel2:
                case o.TileEnums.CornerBuildingTypes.KnightInactiveLevel3:
                    return [];
                case o.TileEnums.CornerBuildingTypes.DestroyedCity:
                case o.TileEnums.CornerBuildingTypes.Settlement:
                    return this.getProductionForSettlement(t);
                case o.TileEnums.CornerBuildingTypes.City:
                    return this.getProductionForCity(t)
            }
        }
        getProductionForSettlement(e) {
            switch (e) {
                case o.TileEnums.TileTypes.Lumber:
                    return this.settlementLumberProduction;
                case o.TileEnums.TileTypes.Brick:
                    return this.settlementBrickProduction;
                case o.TileEnums.TileTypes.Wool:
                    return this.settlementWoolProduction;
                case o.TileEnums.TileTypes.Grain:
                    return this.settlementGrainProduction;
                case o.TileEnums.TileTypes.Ore:
                    return this.settlementOreProduction;
                case o.TileEnums.TileTypes.Gold:
                    return this.settlementGoldProduction;
                case o.TileEnums.TileTypes.Sea:
                    return this.settlementSeaProduction;
                case o.TileEnums.TileTypes.Desert:
                    return this.settlementDesertProduction;
                case o.TileEnums.TileTypes.Fog:
                    return this.settlementFogProduction
            }
        }
        getProductionForCity(e) {
            switch (e) {
                case o.TileEnums.TileTypes.Lumber:
                    return this.cityLumberProduction;
                case o.TileEnums.TileTypes.Brick:
                    return this.cityBrickProduction;
                case o.TileEnums.TileTypes.Wool:
                    return this.cityWoolProduction;
                case o.TileEnums.TileTypes.Grain:
                    return this.cityGrainProduction;
                case o.TileEnums.TileTypes.Ore:
                    return this.cityOreProduction;
                case o.TileEnums.TileTypes.Gold:
                    return this.cityGoldProduction;
                case o.TileEnums.TileTypes.Sea:
                    return this.citySeaProduction;
                case o.TileEnums.TileTypes.Desert:
                    return this.cityDesertProduction;
                case o.TileEnums.TileTypes.Fog:
                    return this.cityFogProduction
            }
        }
    }
    t.ProductionController = n;
    t.ClassicResourceProductionController = class extends n {
        constructor() {
            super(...arguments), this.settlementLumberProduction = [i.GameStateEnums.CardEnum.Lumber], this.settlementBrickProduction = [i.GameStateEnums.CardEnum.Brick], this.settlementWoolProduction = [i.GameStateEnums.CardEnum.Wool], this.settlementGrainProduction = [i.GameStateEnums.CardEnum.Grain], this.settlementOreProduction = [i.GameStateEnums.CardEnum.Ore], this.settlementGoldProduction = [], this.settlementSeaProduction = [], this.settlementDesertProduction = [], this.settlementFogProduction = [], this.cityLumberProduction = [i.GameStateEnums.CardEnum.Lumber, i.GameStateEnums.CardEnum.Lumber], this.cityBrickProduction = [i.GameStateEnums.CardEnum.Brick, i.GameStateEnums.CardEnum.Brick], this.cityWoolProduction = [i.GameStateEnums.CardEnum.Wool, i.GameStateEnums.CardEnum.Wool], this.cityGrainProduction = [i.GameStateEnums.CardEnum.Grain, i.GameStateEnums.CardEnum.Grain], this.cityOreProduction = [i.GameStateEnums.CardEnum.Ore, i.GameStateEnums.CardEnum.Ore], this.cityGoldProduction = [], this.citySeaProduction = [], this.cityDesertProduction = [], this.cityFogProduction = []
        }
    };
    t.CommodityResourceProductionController = class extends n {
        constructor() {
            super(...arguments), this.settlementLumberProduction = [i.GameStateEnums.CardEnum.Lumber], this.settlementBrickProduction = [i.GameStateEnums.CardEnum.Brick], this.settlementWoolProduction = [i.GameStateEnums.CardEnum.Wool], this.settlementGrainProduction = [i.GameStateEnums.CardEnum.Grain], this.settlementOreProduction = [i.GameStateEnums.CardEnum.Ore], this.settlementGoldProduction = [], this.settlementSeaProduction = [], this.settlementDesertProduction = [], this.settlementFogProduction = [], this.cityLumberProduction = [i.GameStateEnums.CardEnum.Lumber, i.GameStateEnums.CardEnum.Paper], this.cityBrickProduction = [i.GameStateEnums.CardEnum.Brick, i.GameStateEnums.CardEnum.Brick], this.cityWoolProduction = [i.GameStateEnums.CardEnum.Wool, i.GameStateEnums.CardEnum.Cloth], this.cityGrainProduction = [i.GameStateEnums.CardEnum.Grain, i.GameStateEnums.CardEnum.Grain], this.cityOreProduction = [i.GameStateEnums.CardEnum.Ore, i.GameStateEnums.CardEnum.Coin], this.cityGoldProduction = [], this.citySeaProduction = [], this.cityDesertProduction = [], this.cityFogProduction = []
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ScenarioDataThroughTheDesert = t.ScenarioDataFogIsland = t.ScenarioDataFourIslands = t.ScenarioDataHeadingForNewShores = t.ScenarioDataNone = void 0;
    const i = a(3),
        o = a(114);
    class n extends o.BaseScenarioData {
        constructor() {
            super(...arguments), this.scenarioSetting = i.ScenarioSettingEnum.None, this.optionalGameMechanics = [i.OptionalGameMechanicEnum.Robber], this.defaultVPsToWin = 10
        }
    }
    t.ScenarioDataNone = n;
    class r extends o.BaseScenarioData {
        constructor() {
            super(...arguments), this.scenarioSetting = i.ScenarioSettingEnum.SS1HeadingForNewShores, this.optionalGameMechanics = [i.OptionalGameMechanicEnum.IslandExploration, i.OptionalGameMechanicEnum.Pirate, i.OptionalGameMechanicEnum.Robber], this.defaultVPsToWin = 14
        }
    }
    t.ScenarioDataHeadingForNewShores = r;
    class s extends o.BaseScenarioData {
        constructor() {
            super(...arguments), this.scenarioSetting = i.ScenarioSettingEnum.SS2TheFourIslands, this.optionalGameMechanics = [i.OptionalGameMechanicEnum.IslandExploration, i.OptionalGameMechanicEnum.Pirate, i.OptionalGameMechanicEnum.Robber], this.defaultVPsToWin = 13
        }
    }
    t.ScenarioDataFourIslands = s;
    class c extends o.BaseScenarioData {
        constructor() {
            super(...arguments), this.scenarioSetting = i.ScenarioSettingEnum.SS3TheFogIslands, this.optionalGameMechanics = [i.OptionalGameMechanicEnum.Pirate, i.OptionalGameMechanicEnum.Robber], this.defaultVPsToWin = 12
        }
    }
    t.ScenarioDataFogIsland = c;
    class l extends o.BaseScenarioData {
        constructor() {
            super(...arguments), this.scenarioSetting = i.ScenarioSettingEnum.SS4ThroughTheDesert, this.optionalGameMechanics = [i.OptionalGameMechanicEnum.IslandExplorationWithDesertAsForeignLand, i.OptionalGameMechanicEnum.Pirate, i.OptionalGameMechanicEnum.Robber], this.defaultVPsToWin = 14
        }
    }
    t.ScenarioDataThroughTheDesert = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BaseScenarioData = void 0;
    t.BaseScenarioData = class {
        getNewInstanceOfData() {
            return new this.constructor
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MapDataController = void 0;
    const i = a(343),
        o = a(7);
    class n {
        static getMapDataForMap(e) {
            for (const t of n.mapDataList)
                if (t.mapEnum == e) return t.getNewInstanceOfData()
        }
        static getMapDataCompatibleWithGameMode(e) {
            const t = [];
            for (const a of n.mapDataList)(0, o.elementInArray)(a.compatibleGameModes, e) && t.push(a);
            return t
        }
        static getMapDataCompatibleWithGameModes(e) {
            const t = [];
            for (const a of n.mapDataList)
                for (const i of a.compatibleGameModes)
                    if ((0, o.elementInArray)(e, i)) {
                        t.push(a);
                        break
                    } return t
        }
        static isMapActive(e) {
            for (const t of n.mapDataList)
                if (t.mapEnum == e) return t.isActive;
            return !1
        }
    }
    t.MapDataController = n, n.mapDataList = [new i.MapDataClassic4P, new i.MapDataTutorialClassic4P, new i.MapDataClassic4PRandom, new i.MapDataClassic56P, new i.MapDataClassic78P, new i.MapDataSS1HeadingForNewShores3P, new i.MapDataSS2FourIslands3P, new i.MapDataSS3FogIslands3P, new i.MapDataSS4ThroughTheDesert3P, new i.MapDataSS1HeadingForNewShores4P, new i.MapDataSS2FourIslands4P, new i.MapDataSS3FogIslands4P, new i.MapDataSS4ThroughTheDesert4P, new i.MapDataTutorialSS1HeadingForNewShores4P, new i.MapDataTutorialSS2FourIslands4P, new i.MapDataTutorialSS3FogIslands4P, new i.MapDataTutorialSS4ThroughTheDesert4P, new i.MapDataSS1HeadingForNewShores56P, new i.MapDataSS2SixIslands56P, new i.MapDataSS3FogIslands56P, new i.MapDataSS4ThroughTheDesert56P, new i.MapDataEarth, new i.MapDataEarthSeafarers, new i.MapDataUSA, new i.MapDataUK, new i.MapDataUKSeafarers, new i.MapDataDiamond, new i.MapDataGear, new i.MapDataLakes, new i.MapDataPond, new i.MapDataTwirl, new i.MapDataShuffleBoard, new i.MapDataBlackForest, new i.MapDataVolcano, new i.MapDataCircle, new i.MapDataKite, new i.MapDataDuel, new i.MapDataMiniBase, new i.MapDataKingOfTheHill, new i.MapDataMountainOfRiches, new i.MapDataDoggo, new i.MapDataTradeIslands, new i.MapDataTradeIslandSeafarers, new i.MapDataVietnam, new i.MapDataTurningTidesClassic, new i.MapDataTurningTidesSeafarers, new i.MapDataTwoIsles, new i.MapDataJellyFish, new i.MapDataRomania, new i.MapDataMonopoly, new i.MapDataGoldRush, new i.MapDataIstanbul, new i.MapDataIstanbulSeafareres, new i.MapDataEurope, new i.MapDataEuropeSeafarers]
}, , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TradeOffer = t.OfferResponseStatus = t.OfferActions = void 0;
    var i = a(3).GameStateEnums.CardEnum;
    const o = a(7),
        n = a(20),
        r = a(356);
    var s;
    ! function(e) {
        e[e.Accept = 0] = "Accept", e[e.Reject = 1] = "Reject", e[e.Edit = 2] = "Edit"
    }(t.OfferActions || (t.OfferActions = {})),
    function(e) {
        e[e.Accept = 0] = "Accept", e[e.Reject = 1] = "Reject", e[e.Wait = 2] = "Wait"
    }(s = t.OfferResponseStatus || (t.OfferResponseStatus = {}));
    class c {
        constructor(e, t, a, i) {
            this.id = e, this.creator = t, this.allowableTradeResources = i, this.offeredResources = new r.CardInventory(i), this.wantedResources = new r.CardInventory(i), this.targets = (0, o.clone)(a), this.activeTargets = (0, o.clone)(a), this.isCounterOffer = !1, this.actions = [], this.responses = [];
            for (const e of a) this.actions.push({
                player: e,
                allowedTradeActions: []
            }), this.responses.push({
                player: e,
                response: s.Wait
            })
        }
        equals(e) {
            return this.id == e.id && this.creator == e.creator
        }
        isSameTradeResources(e) {
            return this.totalOfferedResourceCount() == e.totalOfferedResourceCount() && (this.totalWantedResourceCount() == e.totalWantedResourceCount() && (!!(0, o.arraysEqual)(this.offeredResources.getCards(), e.offeredResources.getCards()) && !!(0, o.arraysEqual)(this.wantedResources.getCards(), e.wantedResources.getCards())))
        }
        everyoneResponded() {
            for (const e of this.responses)
                if (e.response == s.Wait) return !1;
            return !0
        }
        getResponseOfPlayer(e) {
            for (const t of this.responses)
                if (t.player == e) return t.response;
            return s.Wait
        }
        getActionsOfPlayer(e) {
            for (const t of this.actions)
                if (t.player == e) return t;
            return {
                player: n.PlayerColors.None,
                allowedTradeActions: []
            }
        }
        updateResponse(e, t) {
            for (const a of this.responses)
                if (a.player == e) return void(a.response = t)
        }
        getAcceptedPlayers() {
            const e = [];
            for (const t of this.responses) t.response == s.Accept && e.push(t.player);
            return e
        }
        totalOfferedResourceCount() {
            return this.offeredResources.getCards().length
        }
        totalWantedResourceCount() {
            return this.wantedResources.getCards().length
        }
        removeFromActiveTargets(e) {
            (0, o.removeElementFromArray)(this.activeTargets, e)
        }
        offerIncludesWildCard() {
            for (const e of this.offeredResources.getCards())
                if (e == i.ResourceBack) return !0;
            for (const e of this.wantedResources.getCards())
                if (e == i.ResourceBack) return !0;
            return !1
        }
        offerHasOfferedAndWantedResources() {
            return this.totalOfferedResourceCount() > 0 && this.totalWantedResourceCount() > 0
        }
        tradeIncludesPlayer(e) {
            if (this.creator == e) return !0;
            for (const t of this.targets)
                if (t == e) return !0;
            return !1
        }
        getUILeftPlayer(e) {
            for (const t of this.targets)
                if (t == e) return t;
            return this.creator
        }
        getUIRightPlayers(e) {
            return this.creator == e ? this.targets : this.tradeIncludesPlayer(e) ? [this.creator] : this.targets
        }
        getOfferedResourcesForPlayer(e) {
            for (const t of this.targets)
                if (t == e) return this.wantedResources.getCards();
            return this.offeredResources.getCards()
        }
        getWantedResourcesForPlayer(e) {
            return this.creator == e ? this.wantedResources.getCards() : this.tradeIncludesPlayer(e) ? this.offeredResources.getCards() : this.wantedResources.getCards()
        }
        static iGiveWantTradeFormatToTradeOffer(e, t, a, i) {
            const o = new c("0", t, a, i);
            return o.offeredResources.addCards(e.givingResources), o.wantedResources.addCards(e.wantResources), o
        }
        static deserialize(e) {
            const t = new c(e.id, e.creator, e.targets, e.allowableTradeResources);
            for (const a of Object.keys(e)) "offeredResources" != a && "wantedResources" != a && (t[a] = e[a]);
            return t.wantedResources.addCards(e.wantedResources.cards), t.offeredResources.addCards(e.offeredResources.cards), t
        }
        correctBankRatio(e) {
            let t = 0;
            const a = (0, o.removeDuplicatesFromArray)(this.offeredResources.getCards());
            if (a.length <= 0) return !1;
            for (const i of a) {
                const a = e.getBankTradeRatioForCard(i),
                    o = this.offeredResources.getCardCountOfType(i);
                if (o % a != 0) return !1;
                const n = o / a;
                if (n < 1) return !1;
                t += n
            }
            return t == this.totalWantedResourceCount()
        }
    }
    t.TradeOffer = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UICanvasConfig = void 0;
    const i = a(6);
    t.UICanvasConfig = class {
        static setCanvasConfigVariables(e) {
            this.appWidth = e.view.width / e.resolution, this.appHeight = e.view.height / e.resolution;
            const t = i.utils.isMobile.phone,
                a = this.appHeight / 8,
                o = this.appHeight / 10;
            this.itemSize = t ? a : o;
            const n = this.itemSize / 30,
                r = this.itemSize / 40;
            this.margin = t ? n : r
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndTableView = void 0;
    const i = a(17),
        o = a(6),
        n = a(38),
        r = a(28),
        s = a(25),
        c = a(13);
    class l extends i.SectionBgView {
        constructor(e, t, a, i, o) {
            super(e, t, a, i, o), this.parentContainer = o, this.itemSize = this.height / 7
        }
        createPoints(e) {
            let t = 0;
            for (const a of e) {
                let e = 0;
                for (const i of a) this.printOverviewResult(e, t, this.itemSize, String(i.amount), i.highest), e += this.itemSize;
                t += this.itemSize
            }
        }
        printOverviewResult(e, t, a, i, l) {
            if (l) {
                new c.SpriteView(e, t, a, a, this, o.Loader.shared.resources.icon_highlight_circle.texture)
            }
            new n.TextView(i, e, t, a, a, this, s.GameFont.Size.XL, r.GameColor.getColor(r.GameColor.Color.Gray3)).centerX()
        }
        show() {
            null == this.parent && this.parentContainer.addChild(this)
        }
        hide() {
            null != this.parent && this.parentContainer.removeChild(this)
        }
    }
    t.UIGameEndTableView = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIUtilsChat = void 0;
    const i = a(86),
        o = a(408),
        n = a(20),
        r = a(28),
        s = a(39),
        c = a(16),
        l = a(122),
        h = a(33),
        d = a(10);
    class u {
        static replaceKeywordsWithImages(e, t) {
            const a = this.getMapObject(t),
                i = new RegExp(Object.keys(a).join("|"), "gi");
            return e.replace(i, e => a[e.toLowerCase()])
        }
        static isMutedText(e) {
            for (const t of l.UIMutePlayer.mutedPlayers)
                if (e.includes(t + ":")) return !0;
            return !1
        }
        static canSendChat(e) {
            return o.ChatLimitations.overLengthLimit(e) ? (h.UIPopupController.createSimplePopup("Error", "Your text is too long."), !1) : !o.ChatLimitations.hasBadWords(e) || (h.UIPopupController.createSimplePopup("Error", "Please use proper language."), !1)
        }
        static getPlayerColorString(e) {
            const t = this.getPlayerColorFromText(e);
            return null != t ? n.PlayerColors[t].toLowerCase() : n.PlayerColors[n.PlayerColors.Red].toLowerCase()
        }
        static getTextColor(e, t) {
            const a = this.getPlayerColorFromText(e);
            return null != a ? r.GameColor.getPlayerBGDarkHash(a) : t
        }
        static getPlayerColorFromText(e) {
            if (null == s.SocketController.gameListener || null == s.SocketController.gameListener.gameState) return;
            let t = -1,
                a = -1,
                i = n.PlayerColors.Red;
            for (const o of s.SocketController.gameListener.gameState.players) {
                const n = u.getTextIndexForPlayer(e, o);
                if (-1 == n) continue;
                const r = n < t,
                    s = n == t && o.username.length > a;
                (-1 == t || r || s) && (t = n, a = o.username.length, i = o.color)
            }
            return -1 == t ? void 0 : i
        }
        static getTextIndexForPlayer(e, t) {
            const a = e.indexOf("You"),
                i = t.color == s.SocketController.gameListener.gameState.myColor,
                o = e.indexOf(t.username);
            return -1 == o && i ? a : o
        }
        static getDebugClientText(e) {
            if ("/debug" != e) return;
            return ":private:<br>browser: " + i.name + "<br>platform: " + navigator.platform + "<br>language: " + navigator.language + "<br>cookieEnabled: " + navigator.cookieEnabled + "<br>innerHeight: " + window.innerHeight + "<br>innerWidth: " + window.innerWidth + "<br>outerHeight: " + window.outerHeight + "<br>outerWidth: " + window.outerWidth
        }
        static getMapObject(e) {
            const t = "lobby-chat-text-icon";
            return {
                lumber: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_lumber.svg"), "lumber", 20, t),
                wood: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_lumber.svg"), "wood", 20, t),
                brick: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_brick.svg"), "brick", 20, t),
                wool: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_wool.svg"), "wool", 20, t),
                sheep: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_wool.svg"), "wool", 20, t),
                grain: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_grain.svg"), "grain", 20, t),
                wheat: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_grain.svg"), "grain", 20, t),
                paper: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_paper.svg"), "paper", 20, t),
                cloth: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_cloth.svg"), "cloth", 20, t),
                coin: (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_coin.svg"), "coin", 20, t),
                " ore": " " + (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_ore.svg"), "ore", 20, t),
                ":card:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_rescardback.svg"), "card", 20, t),
                ":card_rescardback:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_rescardback.svg"), "card", 20, t),
                ":card_lumber:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_lumber.svg"), "lumber", 20, t),
                ":card_brick:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_brick.svg"), " brick", 20, t),
                ":card_wool:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_wool.svg"), "wool", 20, t),
                ":card_grain:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_grain.svg"), "grain", 20, t),
                ":card_ore:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_ore.svg"), "ore", 20, t),
                ":card_paper:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_paper.svg"), "paper", 20, t),
                ":card_cloth:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_cloth.svg"), "cloth", 20, t),
                ":card_coin:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_coin.svg"), "coin", 20, t),
                ":developmentcard:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_devcardback.svg"), "development card", 20, t),
                ":card_devcardback:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_devcardback.svg"), "development card", 20, t),
                ":card_knight:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_knight.svg"), "card knight", 20, t),
                ":card_vp:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_vp.svg"), "card victory point", 20, t),
                ":card_monopoly:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_monopoly.svg"), "card monopoly", 20, t),
                ":card_roadbuilding:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_roadbuilding.svg"), "card road buildling", 20, t),
                ":card_yearofplenty:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_yearofplenty.svg"), "card year of plenty", 20, t),
                ":progress_card_science:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_back.svg"), "science progress card", 20, t),
                ":progress_card_trade:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_trade_back.svg"), "trade progress card", 20, t),
                ":progress_card_politics:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_back.svg"), "politics progress card", 20, t),
                ":card_progress_science_back:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_back.svg"), "science progress card", 20, t),
                ":card_progress_trade_back:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_trade_back.svg"), "trade progress card", 20, t),
                ":card_progress_politics_back:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_back.svg"), "politics progress card", 20, t),
                ":card_progress_politics_bishop:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_bishop.svg"), "Bishop", 20, t),
                ":card_progress_politics_constitution:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_constitution.svg"), "Constitution", 20, t),
                ":card_progress_politics_deserter:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_deserter.svg"), "Deserter", 20, t),
                ":card_progress_politics_diplomat:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_diplomat.svg"), "Diplomat", 20, t),
                ":card_progress_politics_intrigue:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_intrigue.svg"), "Intrigue", 20, t),
                ":card_progress_politics_saboteur:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_saboteur.svg"), "Saboteur", 20, t),
                ":card_progress_politics_spy:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_spy.svg"), "Spy", 20, t),
                ":card_progress_politics_warlord:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_warlord.svg"), "Warlord", 20, t),
                ":card_progress_politics_wedding:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_politics_wedding.svg"), "Wedding", 20, t),
                ":card_progress_science_alchemist:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_alchemist.svg"), "Alchemist", 20, t),
                ":card_progress_science_crane:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_crane.svg"), "Crane", 20, t),
                ":card_progress_science_engineer:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_engineer.svg"), "Engineer", 20, t),
                ":card_progress_science_inventor:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_inventor.svg"), "Inventor", 20, t),
                ":card_progress_science_irrigation:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_irrigation.svg"), "Irrigation", 20, t),
                ":card_progress_science_medicine:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_medicine.svg"), "Medicine", 20, t),
                ":card_progress_science_mining:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_mining.svg"), "Mining", 20, t),
                ":card_progress_science_printer:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_printer.svg"), "Printer", 20, t),
                ":card_progress_science_road_building:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_road_building.svg"), "Road Building", 20, t),
                ":card_progress_science_smith:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_science_smith.svg"), "Smith", 20, t),
                ":card_progress_trade_commercial_harbor:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_trade_commercial_harbor.svg"), "Commercial Harbor", 20, t),
                ":card_progress_trade_master_merchant:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_trade_master_merchant.svg"), "Master Merchant", 20, t),
                ":card_progress_trade_merchant_fleet:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_trade_merchant_fleet.svg"), "Merchant Fleet", 20, t),
                ":card_progress_trade_merchant:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_trade_merchant.svg"), "Merchant", 20, t),
                ":card_progress_trade_resource_monopoly:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_trade_resource_monopoly.svg"), "Resource Monopoly", 20, t),
                ":card_progress_trade_commodity_monopoly:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_progress_trade_commodity_monopoly.svg"), "Commodity Monopoly", 20, t),
                ":knight:": (0, d.constructImgCard)(c.UIGameConstants.getImagePath("card_knight.svg"), "knight", 20, t),
                ":robber:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_robber.svg"), "robber", 20, t),
                pirate: (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_pirate_ship.svg"), "pirate", 20, t),
                trophy: (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_trophy.svg"), "trophy", 20, t),
                ":chit:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_chit.svg"), "chit", 20, t),
                largestarmy: (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_largest_army.svg"), "largest army", 20, t),
                longestroad: (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_longest_road.svg"), "longest road", 20, t),
                ":icon_merchant_black:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_black.svg"), "Merchant black", 20, t),
                ":icon_merchant_blue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_blue.svg"), "Merchant blue", 20, t),
                ":icon_merchant_bronze:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_bronze.svg"), "Merchant bronze", 20, t),
                ":icon_merchant_gold:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_gold.svg"), "Merchant gold", 20, t),
                ":icon_merchant_green:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_green.svg"), "Merchant green", 20, t),
                ":icon_merchant_mysticblue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_mysticblue.svg"), "Merchant mystic blue", 20, t),
                ":icon_merchant_orange:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_orange.svg"), "Merchant orange", 20, t),
                ":icon_merchant_purple:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_purple.svg"), "Merchant purple", 20, t),
                ":icon_merchant_red:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_red.svg"), "Merchant red", 20, t),
                ":icon_merchant_silver:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_silver.svg"), "Merchant silver", 20, t),
                ":icon_merchant_white:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_merchant_white.svg"), "Merchant white", 20, t),
                ":road:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("road_" + e + ".svg"), "road", 20, t),
                ":ship:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("ship_" + e + "_NorthWest.svg"), "ship", 20, t),
                settlement: (0, d.constructImgTag)(c.UIGameConstants.getImagePath("settlement_" + e + ".svg"), "settlement", 20, t),
                ":house:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("settlement_" + e + ".svg"), ":house:", 20, t),
                city: (0, d.constructImgTag)(c.UIGameConstants.getImagePath("city_" + e + ".svg"), "city", 20, t),
                ":city_wall:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("city_wall_" + e + ".svg"), "city wall", 20, t),
                ":metropolis_science:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("metropolis_science.svg"), "metropolis_science", 20, t),
                ":metropolis_trade:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("metropolis_trade.svg"), "metropolis_trade", 20, t),
                ":metropolis_politics:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("metropolis_politics.svg"), "metropolis_politics", 20, t),
                ":private:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_lightning.svg"), "", 20, t),
                ":public:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_player.svg"), "", 20, t),
                ":mail:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_mail.svg"), "", 20, t),
                ":pack_settler:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_settler.svg"), "", 20, t),
                ":pack_colonist:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_colonist.svg"), "", 20, t),
                ":pack_founder:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_founder.svg"), "", 20, t),
                ":admin:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_admin.svg"), "", 20, t),
                ":moderator:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("moderator.svg"), "", 20, t),
                ":bot:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_bot.svg"), "", 20, t),
                ":dice:1": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_1.svg"), "dice_1", 20, t),
                ":dice:2": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_2.svg"), "dice_2", 20, t),
                ":dice:3": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_3.svg"), "dice_3", 20, t),
                ":dice:4": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_4.svg"), "dice_4", 20, t),
                ":dice:5": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_5.svg"), "dice_5", 20, t),
                ":dice:6": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_6.svg"), "dice_6", 20, t),
                ":dice_red:1": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_red_1.svg"), "dice_red_1", 20, t),
                ":dice_red:2": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_red_2.svg"), "dice_red_2", 20, t),
                ":dice_red:3": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_red_3.svg"), "dice_red_3", 20, t),
                ":dice_red:4": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_red_4.svg"), "dice_red_4", 20, t),
                ":dice_red:5": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_red_5.svg"), "dice_red_5", 20, t),
                ":dice_red:6": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_red_6.svg"), "dice_red_6", 20, t),
                ":dice_event:1": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_event_barbarian.svg"), "dice_barbarian", 20, t),
                ":dice_event:2": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_event_barbarian.svg"), "dice_barbarian", 20, t),
                ":dice_event:3": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_event_barbarian.svg"), "dice_barbarian", 20, t),
                ":dice_event:4": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_event_science.svg"), "dice_science", 20, t),
                ":dice_event:5": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_event_trade.svg"), "dice_trade", 20, t),
                ":dice_event:6": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("dice_event_politics.svg"), "dice_politics", 20, t),
                ":prob:2": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_2.svg"), "prob_2", 20, t),
                ":prob:3": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_3.svg"), "prob_3", 20, t),
                ":prob:4": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_4.svg"), "prob_4", 20, t),
                ":prob:5": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_5.svg"), "prob_5", 20, t),
                ":prob:6": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_6.svg"), "prob_6", 20, t),
                ":prob:8": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_8.svg"), "prob_8", 20, t),
                ":prob:9": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_9.svg"), "prob_9", 20, t),
                ":prob:10": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_10.svg"), "prob_10", 20, t),
                ":prob:11": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_11.svg"), "prob_11", 20, t),
                ":prob:12": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("prob_12.svg"), "prob_12", 20, t),
                ":partition:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("partition.svg"), ":partition:", 12, t),
                ":knight_active_level1_black:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_black.svg"), "Knight", 20, t),
                ":knight_active_level2_black:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_black.svg"), "Knight", 20, t),
                ":knight_active_level3_black:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_black.svg"), "Knight", 20, t),
                ":knight_inactive_level1_black:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_black.svg"), "Knight", 20, t),
                ":knight_inactive_level2_black:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_black.svg"), "Knight", 20, t),
                ":knight_inactive_level3_black:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_black.svg"), "Knight", 20, t),
                ":knight_active_level1_blue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_blue.svg"), "Knight", 20, t),
                ":knight_active_level2_blue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_blue.svg"), "Knight", 20, t),
                ":knight_active_level3_blue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_blue.svg"), "Knight", 20, t),
                ":knight_inactive_level1_blue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_blue.svg"), "Knight", 20, t),
                ":knight_inactive_level2_blue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_blue.svg"), "Knight", 20, t),
                ":knight_inactive_level3_blue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_blue.svg"), "Knight", 20, t),
                ":knight_active_level1_bronze:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_bronze.svg"), "Knight", 20, t),
                ":knight_active_level2_bronze:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_bronze.svg"), "Knight", 20, t),
                ":knight_active_level3_bronze:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_bronze.svg"), "Knight", 20, t),
                ":knight_inactive_level1_bronze:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_bronze.svg"), "Knight", 20, t),
                ":knight_inactive_level2_bronze:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_bronze.svg"), "Knight", 20, t),
                ":knight_inactive_level3_bronze:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_bronze.svg"), "Knight", 20, t),
                ":knight_active_level1_gold:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_gold.svg"), "Knight", 20, t),
                ":knight_active_level2_gold:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_gold.svg"), "Knight", 20, t),
                ":knight_active_level3_gold:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_gold.svg"), "Knight", 20, t),
                ":knight_inactive_level1_gold:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_gold.svg"), "Knight", 20, t),
                ":knight_inactive_level2_gold:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_gold.svg"), "Knight", 20, t),
                ":knight_inactive_level3_gold:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_gold.svg"), "Knight", 20, t),
                ":knight_active_level1_green:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_green.svg"), "Knight", 20, t),
                ":knight_active_level2_green:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_green.svg"), "Knight", 20, t),
                ":knight_active_level3_green:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_green.svg"), "Knight", 20, t),
                ":knight_inactive_level1_green:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_green.svg"), "Knight", 20, t),
                ":knight_inactive_level2_green:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_green.svg"), "Knight", 20, t),
                ":knight_inactive_level3_green:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_green.svg"), "Knight", 20, t),
                ":knight_active_level1_mysticblue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_mysticblue.svg"), "Knight", 20, t),
                ":knight_active_level2_mysticblue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_mysticblue.svg"), "Knight", 20, t),
                ":knight_active_level3_mysticblue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_mysticblue.svg"), "Knight", 20, t),
                ":knight_inactive_level1_mysticblue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_mysticblue.svg"), "Knight", 20, t),
                ":knight_inactive_level2_mysticblue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_mysticblue.svg"), "Knight", 20, t),
                ":knight_inactive_level3_mysticblue:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_mysticblue.svg"), "Knight", 20, t),
                ":knight_active_level1_orange:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_orange.svg"), "Knight", 20, t),
                ":knight_active_level2_orange:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_orange.svg"), "Knight", 20, t),
                ":knight_active_level3_orange:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_orange.svg"), "Knight", 20, t),
                ":knight_inactive_level1_orange:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_orange.svg"), "Knight", 20, t),
                ":knight_inactive_level2_orange:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_orange.svg"), "Knight", 20, t),
                ":knight_inactive_level3_orange:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_orange.svg"), "Knight", 20, t),
                ":knight_active_level1_purple:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_purple.svg"), "Knight", 20, t),
                ":knight_active_level2_purple:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_purple.svg"), "Knight", 20, t),
                ":knight_active_level3_purple:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_purple.svg"), "Knight", 20, t),
                ":knight_inactive_level1_purple:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_purple.svg"), "Knight", 20, t),
                ":knight_inactive_level2_purple:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_purple.svg"), "Knight", 20, t),
                ":knight_inactive_level3_purple:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_purple.svg"), "Knight", 20, t),
                ":knight_active_level1_red:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_red.svg"), "Knight", 20, t),
                ":knight_active_level2_red:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_red.svg"), "Knight", 20, t),
                ":knight_active_level3_red:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_red.svg"), "Knight", 20, t),
                ":knight_inactive_level1_red:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_red.svg"), "Knight", 20, t),
                ":knight_inactive_level2_red:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_red.svg"), "Knight", 20, t),
                ":knight_inactive_level3_red:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_red.svg"), "Knight", 20, t),
                ":knight_active_level1_silver:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_silver.svg"), "Knight", 20, t),
                ":knight_active_level2_silver:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_silver.svg"), "Knight", 20, t),
                ":knight_active_level3_silver:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_silver.svg"), "Knight", 20, t),
                ":knight_inactive_level1_silver:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_silver.svg"), "Knight", 20, t),
                ":knight_inactive_level2_silver:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_silver.svg"), "Knight", 20, t),
                ":knight_inactive_level3_silver:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_silver.svg"), "Knight", 20, t),
                ":knight_active_level1_white:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_active_white.svg"), "Knight", 20, t),
                ":knight_active_level2_white:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_active_white.svg"), "Knight", 20, t),
                ":knight_active_level3_white:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_active_white.svg"), "Knight", 20, t),
                ":knight_inactive_level1_white:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level1_inactive_white.svg"), "Knight", 20, t),
                ":knight_inactive_level2_white:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level2_inactive_white.svg"), "Knight", 20, t),
                ":knight_inactive_level3_white:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("knight_level3_inactive_white.svg"), "Knight", 20, t),
                ":icon_square_framed_politics:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_square_framed_politics.svg"), "politics square", 16, t),
                ":icon_square_framed_science:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_square_framed_science.svg"), "science square", 16, t),
                ":icon_square_framed_trade:": (0, d.constructImgTag)(c.UIGameConstants.getImagePath("icon_square_framed_trade.svg"), "trade square", 16, t)
            }
        }
    }
    t.UIUtilsChat = u
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.UIMutePlayer = void 0,
        function(e) {
            function t(t) {
                i(t) || e.mutedPlayers.push(t)
            }

            function a(t) {
                if (!i(t)) return;
                const a = e.mutedPlayers.indexOf(t);
                e.mutedPlayers.splice(a, 1)
            }

            function i(t) {
                return e.mutedPlayers.includes(t)
            }
            e.mutedPlayers = [], e.toggleMuteForPlayer = function(e) {
                i(e) ? a(e) : t(e)
            }, e.mutePlayer = t, e.unmutePlayer = a, e.isMute = i
        }(t.UIMutePlayer || (t.UIMutePlayer = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.adBlockStateChanged = void 0, t.adBlockStateChanged = function(e, t) {
        let a = !1,
            i = 0;
        const o = setInterval(() => {
            void 0 === window.vitag.videoConfig && function() {
                if (a) return;
                a = !0, e()
            }(), null != window.vitag.videoConfig && (a = !1, t(), clearInterval(o)), i += 1, i > 60 && clearInterval(o)
        }, 500)
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PatchNoteView = void 0;
    const i = a(10),
        o = a(89),
        n = a(47);
    class r {
        constructor(e, t, a, n, s) {
            const c = (0, i.createDivIn)(t, a),
                l = (0, i.createDivIn)(c, n),
                h = e.date.getDate() + " " + e.date.toLocaleString("default", {
                    month: "short"
                }) + " " + e.date.getFullYear(),
                d = ((0, i.createHeaderIn)(l, h, "pn-title-date", "", "H4"), (0, i.createHeaderIn)(l, "Version " + e.version, "pn-title-version", "", "H6"), (0, i.createDivIn)(c, s, ""));
            for (const t of e.contents) {
                const e = (0, i.createDivIn)(d, "content", "");
                if (t.type == o.PatchNoteType.Category) {
                    (0, i.createHeaderIn)(e, t.description, "", "", "H3");
                    continue
                }
                r.createContentType(t, e);
                let a = r.getContributorText(t.contributors);
                null == t.beforeImgUrl && null == t.afterImgUrl || (a += " ("), null != t.beforeImgUrl && (a += "Before:<a href="" + t.beforeImgUrl + "" target="_blank"> 🌅</a> "), null != t.afterImgUrl && (a += "After:<a href="" + t.afterImgUrl + "" target="_blank"> 🌅</a>"), null == t.beforeImgUrl && null == t.afterImgUrl || (a += ")"), (0, i.createParagraphIn)(e, t.description + a, "")
            }
        }
        static createContentType(e, t) {
            if (null == e.links) return void(0, i.createSpanIn)(t, r.getTypeClass(e.type), e.type.toString());
            0 == e.links.length && (0, i.createSpanIn)(t, r.getTypeClass(e.type), e.type.toString());
            (0, i.createLinkIn)(t, e.links[0], e.type.toString(), r.getTypeClass(e.type)).target = "_blank"
        }
        static getContributorText(e) {
            if (0 == e.length) return "";
            let t = " (Thanks";
            for (const [a, i] of e.entries()) t += " <a href="" + (0, n.getProfileURI)(i) + "" target="_blank">" + i + "</a>", a != e.length - 1 && (t += ",");
            return t + ")"
        }
        static getTypeClass(e) {
            switch (e) {
                case o.PatchNoteType.Feature:
                    return "pntype-feature";
                case o.PatchNoteType.Update:
                    return "pntype-update";
                case o.PatchNoteType.Fix:
                    return "pntype-fix";
                case o.PatchNoteType.Category:
                    return "pntype-update"
            }
        }
    }
    t.PatchNoteView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BitmapText = void 0;
    const i = a(6),
        o = a(25);
    class n extends i.BitmapText {
        constructor(e, t, a, i, n, r, s = o.GameFont.Size.Normal, c = !0) {
            super(e, {
                font: {
                    name: "arial"
                },
                align: "center"
            }), this.roundPixels = !0, this.initialX = t, this.initialY = a, this.initialW = i, this.initialH = n, this.fontSize = o.GameFont.getResponsiveSize(s), this.font = String(this.fontSize) + "px arial", this.x = t, this.y = a, this.repositionY(c), r.addChild(this)
        }
        repositionY(e) {
            this.y = e ? this.initialY + (this.initialH - this.height) / 2 : this.initialY
        }
        centerX() {
            this.x = this.initialX + (this.initialW - this.width) / 2
        }
    }
    t.BitmapText = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TextMaskedView = void 0;
    const i = a(6),
        o = a(28),
        n = a(25),
        r = a(8),
        s = a(7),
        c = a(31),
        l = a(38);
    class h extends l.TextView {
        constructor(e, t, a, s, c, l, h = n.GameFont.Size.Normal, d = o.GameColor.getColor(o.GameColor.Color.Gray0), u = !0) {
            super(e, t, a, s, c, l, h, d, u), this.numberOfDots = 2, this.style.wordWrap = !1;
            const g = new i.Sprite(r.Texture.WHITE);
            g.width = s, g.height = c, this.addChild(g), this.mask = g;
            this.textUpdated = e => {
                this.sliceTextToFitContainer(e)
            }, this.sliceTextToFitContainer(e), this.toolTipText = e, this.setTip(this.toolTipText, [""])
        }
        centerXInParent() {
            super.centerXInParent(), this.repositionTextForMask()
        }
        centerX() {
            super.centerX(), this.repositionTextForMask()
        }
        repositionTextForMask() {
            this.width > this.initialW && (this.style.align = "left", this.x = this.initialX)
        }
        set text(e) {
            super.text = e, null != this.textUpdated && (this.updateToolTipText(e), this.textUpdated(e))
        }
        sliceTextToFitContainer(e) {
            if (this.width < this.initialW) return;
            if (e.length <= this.numberOfDots + 1) return void(0, c.logError)("TextViewMasked", ["container is too small to fit text"]);
            const t = this.getReplacementDotsForText();
            this.areLastCharactersDots(e) || (e += t);
            const a = e.length - this.numberOfDots - 1;
            e = (0, s.replaceStringAt)(e, a, ""), this.text = e
        }
        updateToolTipText(e) {
            if (this.areLastCharactersDots(e)) return;
            const t = this.width < this.initialW;
            this.toolTipText = t ? "" : e, this.setTip(this.toolTipText, [""])
        }
        getReplacementDotsForText() {
            return ".".repeat(this.numberOfDots)
        }
        areLastCharactersDots(e) {
            return e.slice(-this.numberOfDots) == this.getReplacementDotsForText()
        }
    }
    t.TextMaskedView = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameUIToolTips = void 0;
    class i {
        static removeAllToolTips() {
            for (const e of this.tips) this.removeToolTip(e)
        }
        static removeToolTip(e) {
            e.parent.removeChild(e);
            const t = this.tips.indexOf(e, 0);
            t > -1 && this.tips.splice(t, 1)
        }
        static remove(e) {
            for (const t of this.tips) t.viewToPlaceAbove == e && this.removeToolTip(t)
        }
    }
    t.GameUIToolTips = i, i.tips = []
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardCountView = void 0;
    const i = a(17),
        o = a(16),
        n = a(13),
        r = a(25),
        s = a(52),
        c = a(82),
        l = a(38);
    class h extends i.SectionBgView {
        constructor(e, t, a, i, h, d) {
            super(e, t, a, i, h);
            const u = .6 * this.height,
                g = u / o.UIGameConstants.CARD_RATIO,
                m = c.CardView.getTextureForCard(d);
            this.view = new n.SpriteView(0, 0, g, u, this, m);
            const p = this.view.y + this.view.height,
                C = i / 5;
            this.count = new l.TextView("200", 0, p, this.width, C, this, r.GameFont.Size.L), this.repositionY(), this.view.centerXInParent(), this.count.centerX();
            const y = s.CardDataController.getCardDataForCard(d);
            null != y && (this.cardData = y)
        }
        repositionY() {
            const e = this.height - (this.count.y + this.count.height);
            this.view.y = e / 3, this.count.y += 2 * e / 3
        }
        updateText(e) {
            this.count.text != e && (this.count.text = e, this.count.centerX())
        }
        boldText() {
            this.count.style.fontWeight = "bolder"
        }
        unboldText() {
            this.count.style.fontWeight = "normal"
        }
    }
    t.CardCountView = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MerchantPiece = void 0;
    const i = a(20),
        o = a(26),
        n = a(21);
    class r {
        constructor() {
            this.owner = i.PlayerColors.None, this.location = void 0, this.activeTradeBonus = void 0
        }
        updateLocation(e, t) {
            this.owner = e, this.location = t, null == this.location && (this.activeTradeBonus = void 0)
        }
        getMerchantImageName() {
            return r.getMerchantImageNameForPlayer(this.owner)
        }
        deserialize(e) {
            for (const t of Object.keys(this)) "location" != t && (this[t] = e[t]);
            if (null == e.location) return void(this.location = void 0);
            const t = e.location,
                a = new o.HexFace(e.location.hexFace.x, e.location.hexFace.y);
            this.location = new n.TileHex(a, t.tileType, t.diceNumber)
        }
        static getMerchantImageNameForPlayer(e) {
            switch (e) {
                case i.PlayerColors.None:
                    return "";
                case i.PlayerColors.Red:
                    return "icon_merchant_red";
                case i.PlayerColors.Blue:
                    return "icon_merchant_blue";
                case i.PlayerColors.Orange:
                    return "icon_merchant_orange";
                case i.PlayerColors.Green:
                    return "icon_merchant_green";
                case i.PlayerColors.Black:
                    return "icon_merchant_black";
                case i.PlayerColors.Bronze:
                    return "icon_merchant_bronze";
                case i.PlayerColors.Silver:
                    return "icon_merchant_silver";
                case i.PlayerColors.Gold:
                    return "icon_merchant_gold";
                case i.PlayerColors.White:
                    return "icon_merchant_white";
                case i.PlayerColors.Purple:
                    return "icon_merchant_purple";
                case i.PlayerColors.MysticBlue:
                    return "icon_merchant_mysticblue"
            }
        }
    }
    t.MerchantPiece = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ToolTipBgView = void 0;
    const i = a(17),
        o = a(6),
        n = a(28);
    class r extends i.SectionBgView {
        constructor(e, t, a, i, r) {
            super(e, t, a, i, r), this.drawRoundedBg(o.Loader.shared.resources.bg_tooltip.texture), this.border = new o.Graphics;
            const s = n.GameColor.getColorHexValue(n.GameColor.Color.Primary3);
            this.border.lineStyle(1, s, 1), this.border.drawRoundedRect(0, 0, this.width, this.height, 5), this.addChild(this.border), this.shadow = new o.Graphics, this.shadow.beginFill(0, .4), this.shadow.drawRoundedRect(1, 1, this.width, this.height, 5), this.addChildAt(this.shadow, 0)
        }
    }
    t.ToolTipBgView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.generateRulebookTopNavigation = void 0;
    const i = a(42),
        o = a(55),
        n = a(43),
        r = a(34);

    function s(e, t, a) {
        const o = "rulebook-nav-link-" + t,
            r = a == i.RulebookStyle.Fullscreen ? "top-navigation-link-fullscreen" : "top-navigation-link";
        return n.RulebookElements.createPageNavigationLink(t, "", e, r, o)
    }
    t.generateRulebookTopNavigation = function(e = i.RulebookPage.Classic4P, t) {
        const a = n.RulebookElements.createElement("div", "top-navigation");
        t == i.RulebookStyle.Fullscreen && a.classList.add("top-navigation-fullscreen");
        const c = s(a, i.RulebookPage.Classic4P, t),
            l = s(a, i.RulebookPage.Classic56P, t),
            h = s(a, i.RulebookPage.Seafarers4P, t),
            d = s(a, i.RulebookPage.CitiesAndKnights4P, t);
        if (n.RulebookElements.createImgIn(c, "rulebook/navigation_bg.png", "top-navigation-link-img"), n.RulebookElements.createDivIn(c, "top-navigation-link-text", void 0, r.RulebookDictionary.get("bg.title")), n.RulebookElements.createImgIn(l, "rulebook/navigation_56p.png", "top-navigation-link-img"), n.RulebookElements.createDivIn(l, "top-navigation-link-text", void 0, r.RulebookDictionary.get("56p.title")), n.RulebookElements.createImgIn(h, "rulebook/navigation_sf.png", "top-navigation-link-img"), n.RulebookElements.createDivIn(h, "top-navigation-link-text", void 0, r.RulebookDictionary.get("sf.title")), n.RulebookElements.createImgIn(d, "rulebook/navigation_ck.png", "top-navigation-link-img"), n.RulebookElements.createDivIn(d, "top-navigation-link-text", void 0, r.RulebookDictionary.get("ck.title")), t !== i.RulebookStyle.Fullscreen) {
            const e = n.RulebookElements.createDivIn(a, "top-navigation-link", o.RulebookConfig.navigationCloseID);
            e.classList.add("top-navigation-close"), n.RulebookElements.createImgIn(e, "icon_x.svg", "top-navigation-link-img")
        }
        const u = o.RulebookConfig.navigationCurrentPageClass;
        switch (e) {
            case i.RulebookPage.Classic4P:
                c.classList.add(u);
                break;
            case i.RulebookPage.Classic56P:
                l.classList.add(u);
                break;
            case i.RulebookPage.Seafarers4P:
                h.classList.add(u);
                break;
            case i.RulebookPage.CitiesAndKnights4P:
                d.classList.add(u)
        }
        return a
    }
}, function(e) {
    e.exports = {
        html: {
            keywords: "colonist.io, catan, rules",
            href: "catan-rules",
            imgAlt: {
                "rulebook/ck_barbarian_tracker_example": "Cities & Knights barbarian tracker example",
                "rulebook/pagebg_collecting_resources": "Collecting resource cards example video",
                "rulebook/pagebg_dice_probabilities": "Which combinations of dice rolls are most common",
                "rulebook/pagebg_dice_rolls": "Adding dice together to get resource allocation",
                "rulebook/pagebg_discard": "Discarding cards above the discard limit video",
                "rulebook/pagebg_initial_placements": "Placing settlments and roads at the start of the game",
                "rulebook/pagebg_stealing": "Stealing resources from other players with the robber",
                "rulebook/pagebg_trade": "Trade resources with the bank or other players",
                "rulebook/pageck_city_improvement_tracker": "Cities & Knights city improvement chart",
                "rulebook/pageck_how_to_get_progress_cards": "Cities & Knights how to get progress cards",
                "rulebook/pageck_placing_knights": "Cities & Knights placing knights",
                "rulebook/pagesf_discovering_islands": "Seafarers discovering new islands",
                "rulebook/pagesf_fog_tile": "Seafarers fog tiles",
                "rulebook/pagesf_longest_trade_route": "Seafarers longest trade route",
                "rulebook/pagesf_robber_&_pirate_ship": "Seafarers robber and pirate ship",
                "rulebook/pagesf_ships": "Seafarers ships and trade routes"
            }
        },
        bg: {
            title: "Base Game",
            html: {
                title: "Colonist Rules - Base Game",
                description: "Online board game alternative to the popular game Settlers of Catan and PlayCatan. Colonist allows you to play now without the need to download or sign in.",
                keywords: "games like catan universe, catan online free, play catan online free, settlers of catan online free, settlers of catan free online, play settlers of catan online free, play settlers of catan, settlers of catan online, online settlers of catan, play settlers of catan online, play online settlers of catan, settlers of catan play online, catan online, catan online play, catan online game, play catan online reddit, play catan online with friends, play catan, play catan online, online game catan, play settlers of catan free online, play catan game online, play catan online, free settlers of catan online, online, game, video game, browser game, web game, board game, play, join, compete, defeat, strategy, multiplayer, friends, play with friends, play with other people, interact, social, victory, tactics, share, trade, catan, play online, free, free online game, free game, game online free, strategy game, multiplayer game, online multiplayer game, online strategy, online multiplayer, browser, web, online browser game, online web game, online board game, play online games, play browser games, play web games, katan, katan.io, play katan, playcatan, catan, online catan, kolonisten van catan online, play catan online against computer, catan pc game, catan online with friends, catan for pc, catan app, catan anytime, catan universe, catan rules, io game, io games, io board game, strategy io game, catan expansion",
                href: ""
            },
            section0: {
                title: "Video tutorial",
                href: "video",
                "6minutes": "(6 minutes)"
            },
            section1: {
                title: "1. How to win",
                href: "how-to-win",
                firstPlayerTo10VP: "The first player that gets to 10 Victory Points (VPs) is the winner. Get points by doing the following:",
                "1point": "+1 point",
                "2points": "+2 points",
                buildASettlement: "Build a settlement",
                upgradeSettlementToCity: "Upgrade a settlement to a city",
                buyVPDevelopmentCard: "Buy development cards for a chance to get a Victory Point Card",
                getLongestRoad: "Get the Longest Road. A minimum of 5 consecutive roads is required to get the achievement",
                getLargestArmy: "Get the Largest Army. Playing a minimum of 3 Knight development cards is required to get the achievement",
                stealingAchievements: "Other players can steal Longest Road or Largest Army if they have more roads or played knights!"
            },
            section2: {
                title: "2. Initial placements",
                href: "initial-placements",
                placeOneSettlement: "<b>Placement</b>: Players will take turns to place two settlements {} and two roads {} coming from each settlement.",
                collectingResources: "<b>Collecting resources</b>: You will get a resource from each of the tiles surrounding your 2nd settlement {}",
                placeSettlementsTwoRoadsApart: "All settlements must be at least two roads apart"
            },
            section3: {
                title: "3. Dice rolls",
                href: "dice-rolls",
                afterInitialPlacements: "After the initial placements, every player takes turns to roll the dice at the start of their turn. Each dice roll determines what resources are distributed: every time the dice rolls, the resources with that number in the board will be distributed amongst the players with settlements or cities around those tiles.",
                diceRollProbability: "Each dice roll has a different probability of rolling, represented with dots below the numbers. 7 is the number most likely to roll, followed by 6 and 8."
            },
            section4: {
                title: "4. Collecting resources",
                href: "collecting-resources",
                settlementsProduce: "{} Settlements produce 1 resource",
                citiesProduce: "{} Cities produce 2 resources",
                ofEachResource: "There are 19 of each resource card"
            },
            section5: {
                title: "5. Robber & discards",
                href: "robber",
                when7Rolled: "Whenever a 7 is rolled the following happens: ",
                discardToBank: "Discard to the bank",
                allPlayersOverDiscardLimit: "All players with <b>8 or more</b> cards must discard half of them to the bank.",
                blockAndSteal: "Block and steal cards with the robber",
                moveRobber: "The player who rolled a 7 shall move the robber to block a resource from future rolls. They also steal one resource from a player on that tile."
            },
            section6: {
                title: "6. Building & buying costs",
                href: "building-costs",
                upgradeToCity: "Upgrade to a city",
                buildLimit: "Each player can build a maximum of 15 roads, 5 settlements and 4 cities."
            },
            section7: {
                title: "7. Development cards",
                href: "development-cards",
                developmentCardExplanation: "Development cards have special abilities. There are 25 total in the deck and they can be played before the dice is rolled.",
                "14Knights": "<b>14 Knight cards</b>",
                "2RoadBuilding": "<b>2 Road building cards</b>",
                "2YearOfPlenty": "<b>2 Year of plenty cards</b>",
                "2Monopoly": "<b>2 Monopoly cards</b>",
                "5VictoryPoint": "<b>5 Victory point cards</b>",
                devCardKnight: "Move the robber to another tile and steal one random card from a player on that tile",
                devCardRoadBuilding: "Place 2 roads for free",
                devCardYearOfPlenty: "Select 2 resources of your choice from the bank",
                devCardMonopoly: "Steal all resources of one type from all other players",
                devCardVictoryPoint: "Player secretly gets awarded 1 Victory Point. Victory Point cards are revealed once you reach 10 points.",
                oneDevCardPerTurn: "You can only play 1 development card per turn. You may not play a development card on the same turn that you bought it."
            },
            section8: {
                title: "8. Trading",
                href: "trading",
                tradeDescription: "You can trade with other players, or with the bank.",
                tradeWithBank: "You can trade with the bank. Trade 4 cards of the same type in return for 1 resource of your choosing.",
                "tradeWith3:1": "Build a settlement on a 3:1 port to trade any 3 resources of the same type for 1 resource of your choosing.",
                "tradeWith2:1": "Build a settlement on a 2:1 port to trade 2 resources of the port type for any 1 resource of your choosing.",
                tradeWithPlayers: "You can trade any number or combination of resources with other players for any combination or number of resources in return (but you can"t trade the same type of resource)."
            }
        },
        "56p": {
            title: "5-6 / 7-8 Players",
            html: {
                title: "Colonist Rules - 5-6 / 7-8 Players",
                description: "Online board game alternative to the popular game Settlers of Catan and PlayCatan. Colonist allows you to play now without the need to download or sign in.",
                keywords: "games like catan universe, catan online free, play catan online free, settlers of catan online free, settlers of catan free online, play settlers of catan online free, play settlers of catan, settlers of catan online, online settlers of catan, play settlers of catan online, play online settlers of catan, settlers of catan play online, catan online, catan online play, catan online game, play catan online reddit, play catan online with friends, play catan, play catan online, online game catan, play settlers of catan free online, play catan game online, play catan online, free settlers of catan online, online, game, video game, browser game, web game, board game, play, join, compete, defeat, strategy, multiplayer, friends, play with friends, play with other people, interact, social, victory, tactics, share, trade, catan, play online, free, free online game, free game, game online free, strategy game, multiplayer game, online multiplayer game, online strategy, online multiplayer, browser, web, online browser game, online web game, online board game, play online games, play browser games, play web games, katan, katan.io, play katan, playcatan, catan, online catan, kolonisten van catan online, play catan online against computer, catan pc game, catan online with friends, catan for pc, catan app, catan anytime, catan universe, catan rules, io game, io games, io board game, strategy io game, catan expansion",
                href: "5-6-player"
            },
            section1: {
                title: "1. Special build phase",
                href: "special-build-phase",
                clickRedFlag: "Click the red flag button to access a Special Build Phase after each of the other players" regular turn.",
                specialBuildPhaseYouCan: "<h2>You can ✅</h2><p>Build roads, settlements, cities, or buy a development card<p>{}{}{}{}",
                specialBuildPhaseYouCant: "<h2>You cannot ❌</h2>1. Make any trades<br/>2. Use a development card<br/>3. Win during the special build phase. You must wait until it becomes your turn again"
            },
            section2: {
                title: "2. Additional resources",
                href: "additional-resources",
                subtitleClassic56P: "5-6 Players",
                numberOfTiles: "Total number of tiles",
                "30Tiles": "<b>30 (extended map)</b>",
                numberOfResourceCards: "Total number of each resource card",
                numberOfDevelopmentCards: "Total number of development cards",
                subtitleClassic78P: "7-8 Players",
                "37Tiles": "<b>37 (extended map)</b>"
            },
            section3: {
                title: "3. Cities & Knights 5-6 Player",
                href: "cities-and-knights",
                citiesAndKnightsRules: "Cities & Knights rules",
                referToCitiesAndKnights: "Refer to {} for gameplay during the build phase, there are also actions that can be taken on Knights.",
                citiesAndKnightsYouCan: "<h2>You can ✅</h2>Buy Knights<br/>Activate Knights<br/>Upgrade Knights",
                citiesAndKnightsYouCant: "<h2>You cannot ❌</h2>Displace an opponent"s knight<br/>Use the robber"
            }
        },
        sf: {
            title: "Seafarers",
            html: {
                title: "Colonist Rules - Seafarers",
                description: "Online board game alternative to the popular game Settlers of Catan and PlayCatan. Colonist allows you to play now without the need to download or sign in.",
                keywords: "games like catan universe, catan online free, play catan online free, settlers of catan online free, settlers of catan free online, play settlers of catan online free, play settlers of catan, settlers of catan online, online settlers of catan, play settlers of catan online, play online settlers of catan, settlers of catan play online, catan online, catan online play, catan online game, play catan online reddit, play catan online with friends, play catan, play catan online, online game catan, play settlers of catan free online, play catan game online, play catan online, free settlers of catan online, online, game, video game, browser game, web game, board game, play, join, compete, defeat, strategy, multiplayer, friends, play with friends, play with other people, interact, social, victory, tactics, share, trade, catan, play online, free, free online game, free game, game online free, strategy game, multiplayer game, online multiplayer game, online strategy, online multiplayer, browser, web, online browser game, online web game, online board game, play online games, play browser games, play web games, katan, katan.io, play katan, playcatan, catan, online catan, kolonisten van catan online, play catan online against computer, catan pc game, catan online with friends, catan for pc, catan app, catan anytime, catan universe, catan rules, io game, io games, io board game, strategy io game, catan expansion",
                href: "seafarers"
            },
            section0: {
                title: "Video tutorial",
                href: "video",
                "3minutes": "(3 minutes)"
            },
            section1: {
                title: "1. New Game Pieces",
                href: "new-pieces",
                shipsAllowYouToTravel: "Ships allow you to travel across sea tiles to discover new islands",
                pirateShipsBlockPlayers: "Pirate Ship blocks player ships from being placed or moved, and also steals a resource",
                seaHexes: "Sea hexes are what you build ships on",
                goldHexes: "Gold tiles give you any resource of your choice when that number rolls"
            },
            section2: {
                title: "2. Ships",
                href: "ships",
                buildShips: "Build ships to discover new islands & resources to build settlements on.",
                openAndClosedRoutes: "Open routes - Once per turn, you may move a ship that is not connecting settlements. <br/>Closed routes - Ships that are connecting settlements cannot be moved.",
                shipsMustConnect: "Ships must start from & connect to a settlement. It cannot start from a road."
            },
            section3: {
                title: "3. Longest Trade Route",
                href: "longest-trade-route",
                longestTradeRouteReplaces: "Longest Trade Route replaces Longest Road for 2 Victory Points. <br/>Build a minimum of 5 roads, ships, or a combination of both to get the Longest Trade Route."
            },
            section4: {
                title: "4. Robber and Pirate Ship",
                href: "robber-and-pirate",
                or: "or",
                when7Rolls: "Whenever a 7 rolls, the player can choose to move either the robber or the Pirate Ship.",
                pirateShipsDo: "Pirate Ship do the following:",
                canOnlyBePlacedOnSeaHex: "Can only be placed on a sea tile",
                allowPlayerToSteal: "Allow player to steal from opponents with ships on that tile",
                blockPlayersFromBuilding: "Block players from building new ships on that tile",
                blockPlayersFromMoving: "Block players from moving ships to and from that tile"
            },
            section5: {
                title: "5. Discovering New Islands",
                href: "islands",
                additional2VP: "Get an additional 2 {} Victory Points for the first settlement you build on a new island in the following Scenarios: New Shores, Four Islands, Though The Desert (building across the desert will also grant 2 additional VPs).",
                someMapsMight: "Some maps might have a {} Fog tile which will uncover a random resource or sea tile. You will get a free resource every time you reveal a fog tile."
            },
            section6: {
                title: "6. Gold Tiles",
                href: "gold-tiles",
                goldHexesDescription: "Gold tiles give you any resource of your choice when that number rolls."
            },
            section7: {
                title: "7. Points to Win",
                href: "points-to-win",
                firstPersonTo13VP: "The first person to get to 13 {} victory points (VPs) is the winner (this might change depending on the Scenario). <br/>Get points by doing the following:",
                longestTradeRoute: "Have the Longest Trade Route (5 roads/ships minimum)",
                buildSettlementOnIsland: "Build a settlement on an island"
            }
        },
        ck: {
            title: "Cities & Knights",
            html: {
                title: "Colonist Rules - Cities & Knights",
                description: "Online board game alternative to the popular game Settlers of Catan and PlayCatan. Colonist allows you to play now without the need to download or sign in.",
                keywords: "games like catan universe, catan online free, play catan online free, settlers of catan online free, settlers of catan free online, play settlers of catan online free, play settlers of catan, settlers of catan online, online settlers of catan, play settlers of catan online, play online settlers of catan, settlers of catan play online, catan online, catan online play, catan online game, play catan online reddit, play catan online with friends, play catan, play catan online, online game catan, play settlers of catan free online, play catan game online, play catan online, free settlers of catan online, online, game, video game, browser game, web game, board game, play, join, compete, defeat, strategy, multiplayer, friends, play with friends, play with other people, interact, social, victory, tactics, share, trade, catan, play online, free, free online game, free game, game online free, strategy game, multiplayer game, online multiplayer game, online strategy, online multiplayer, browser, web, online browser game, online web game, online board game, play online games, play browser games, play web games, katan, katan.io, play katan, playcatan, catan, online catan, kolonisten van catan online, play catan online against computer, catan pc game, catan online with friends, catan for pc, catan app, catan anytime, catan universe, catan rules, io game, io games, io board game, strategy io game, catan expansion",
                href: "cities-and-knights"
            },
            section0: {
                title: "Video tutorial",
                href: "video",
                "7minutes": "(7 minutes)"
            },
            section1: {
                title: "1. New Game Pieces",
                href: "new-pieces",
                redAndEventDice: "Red and Event dice",
                barbarianTracker: "Barbarians",
                knightsStrength: "Knights",
                commoditityCards: "Commodity cards",
                cityImprovements: "City Improvements",
                metropolis: "Metropolis",
                progressCards: "Progress Cards (replace Development Cards)",
                cityWalls: "City Walls"
            },
            section2: {
                title: "2. Initial Placements",
                href: "initial-placements",
                placeSettlementAndCity: "On your second initial placement, place a {} city instead of a {} settlement."
            },
            section3: {
                title: "3. Types of Dice",
                href: "dice",
                thereAre3TypesOfDice: "There are 3 types of dice: regular, red, and event dice.",
                redDiceDescription: "The red die determines if players earn a progress card based on the players’ city improvement levels. For detailed information about Progress card distribution and its relation with the red die, {}.",
                eventDiceDescription: "The Event die has 3 Barbarian ships, and 3 Castles representing a progress card type.",
                barbarianShip: "Barbarian ship - A ship on the Event die means the barbarian ship moves forward 1 space on the barbarian tracker<br>Castle - Distributes Progress Cards based on the castle’s color, the value of the Red die, and the player’s city improvement levels."
            },
            section4: {
                title: "4. Collecting Commodities",
                href: "commodities",
                cityProduction: "Cities placed on sheep, wood, or ore produce 1 resource & 1 commodity.",
                importantToKnow: "Important things to know about commodities:",
                onlyCities: "Only cities can produce commodities",
                countTowardsDiscardLimit: "Commodities count towards robber discard limit",
                canBeTraded: "Commodities can be traded like any other resource",
                mustHaveCity: "Commodities can only be used to buy city improvements as long as you have at least 1 city on the board"
            },
            section5: {
                title: "5. Barbarians",
                href: "barbarians",
                barbariansDescription: "<p>When a Barbarian ship is rolled on the Event die, barbarians move one space forward on the track. Barbarian strength is equal to the sum of all cities on the board.</p><p>{} + {} + {} = 3 Barbarian strength</p>"
            },
            section6: {
                title: "6. Knights",
                href: "knights",
                purchasingAKnight: "Purchasing a knight",
                knightCost: "1 Knight costs <b>1 wool</b> and <b>1 ore</b>.",
                canBePlacedAnywhere: "Can be placed anywhere at the end of or in between roads",
                canBreakAnotherRoad: "Can break another player’s road length when placed in between their roads",
                activatingAKnight: "Activating a knight",
                activatingKnightCosts: "Activating a knight costs <b>1 wheat</b>.",
                youCannotPlace: "You CAN place a knight & activate it on the same turn.<br/>You CANNOT place a knight, activate a knight, and take a knight action.",
                attackPlayer: "Attack power",
                knightLimit: "Each player can have <b>2 Basic knights</b>, <b>2 Strong knights</b>, and <b>2 Mighty knights</b>.",
                basicKnights: "{} Level 1 (Basic knight)<br/><b>1 strength</b>",
                strongKnights: "{} Level 2 (Strong knight)<br/><b>2 strength</b>",
                mightyKnights: "{} Level 3 (Mighty knight)<br/><b>3 strength</b>",
                upgradingKnights: "Upgrading knights",
                upgradingKnightsCost: "Upgrading a knight costs <b>1 wool</b> and <b>1 ore</b>.",
                upgradingKnightsRules: "Upgraded knights will remain active or inactive.<br/>You <b>CAN</b> place a level 1 knight & upgrade it on the same turn.<br/>You <b>CANNOT</b> upgrade a knight twice on the same turn.<br/>You can <b>ONLY</b> upgrade to level 3 knights after you reach the third level in Politic City Improvements (Fortress). However, you can obtain a level 3 knight without having Fortress, by using a Deserter card on another player who has a level 3 knight.",
                knightActions: "Knight actions (these will deactivate your knight):",
                moveKnight: "Moving the knight - move a knight to any available spot in the same road network.",
                displacingKnight: "Displacing enemy knight - If your knight level is higher than an opponent’s you can displace the enemy knight so the opponent must relocate it or remove it. Both knights need to be connected to each other by roads.",
                chasingRobber: "Chasing away the robber - You can move the robber if it is on a tile that one of your active knights is touching. You may do this with multiple knights in the turn, as long as they were active before your turn started."
            },
            section7: {
                title: "7. Barbarians vs. Knights",
                href: "barbarians-vs-knights",
                whenBarbariansAttack: "When the Barbarian ship reaches the end of the tracker, they attack.",
                calculateBarbarianStrength: "Barbarian strength = total number of Cities",
                calculateKnightStrength: "Strength of Knights = total strength of all Active Knights",
                ifStrengthIsEqual: "If Knight strength is equal or greater to Barbarian strength:",
                defenderOfColonist: "Player with most active Knights is awareded with Defender of Colonist, worth 1 extra Victory Point.",
                defenderOfColonistDraw: "If players are tied for the highest Knight strength, each of those players will choose a Progress card instead.",
                barbariansWin: "If Knight strength is less than Barbarian strength:",
                playersLoseConsequence: "Player with lowest Knight strength gets their city destroyed, turning it into a settlement.",
                playersLoseWithNoCities: "Players with no cities, as well as players whose cities are all metropolises, are not affected.",
                afterAnAttack: "After an attack, barbarians return to the start of the track and all knights are deactivated.",
                playerDestroyCityNote: "Players who must destroy one of their cities, but already have 5 settlements on the board, must first rebuild that destroyed city before building any other cities."
            },
            section8: {
                title: "8. No early robber",
                href: "no-early-robber",
                noEarlyRobber: "Players <b>CANNOT</b> move the {} robber until the first barbarian attack but players must still discard if they have over 7 cards (this includes using your knight to move the robber, as well as using a Bishop card)."
            },
            section9: {
                title: "9. City walls",
                href: "city-walls",
                cityWallsDescription: "City walls increase your discard limit by 2 cards, helping to protect you from losing cards when a 7 is rolled.",
                cityWallsCost: "City wall costs <b>2 brick</b>",
                cityWallsLimitations: "City wall limitations:",
                maximumCityWalls: "Each player can place a maximum of 3 walls, reaching a maximum of 13 cards discard limit.",
                oneCityWallPerCity: "A city can only have 1 wall.",
                cityDestroyed: "If a city is destroyed by the barbarians, the wall on that city is destroyed as well."
            },
            section10: {
                title: "10. City improvements",
                href: "city-improvements",
                differentCommodities: "3 different types of city improvements can be bought with commodities.",
                tradeImprovement: "<b>Trade</b><br/>Yellow city improvement<br/>Costs cloth",
                politicsImprovement: "<b>Politics</b><br/>Blue city improvement<br/>Costs coin",
                scienceImprovement: "<b>Science</b><br/>Green city improvement<br/>Costs paper",
                cityImprovementLimitations: "City improvement limitations:",
                youMustHaveOneCity: "You must have at least 1 city to buy city improvements.",
                cityImprovementsAffectProgressCards: "City improvements affect what progress cards you receive based on red dice.",
                cityImprovementCostIncrease: "Each city improvement level requires more commodities to buy.",
                upgradingCities: "Upgrading cities",
                cityImprovementCostDescription: "Each level of city improvement costs one more resource.",
                level1: "Level 1",
                level2: "Level 2",
                level3: "Level 3",
                level4: "Level 4",
                level5: "Level 5",
                level3Unlocks: "Upgrading a city improvement to level 3 unlocks a special ability",
                tradingHouse: "<b>Trade</b> (Trading House)<br/>Trade commodities at a 2:1 rate for any other resource or commodity",
                fortress: "<b>Politic</b> (Fortress)<br/>Allows upgrading level 2 knights to level 3",
                aqueduct: "<b>Science</b> (Aqueduct)<br/>If none of your numbers roll, or if your number is blocked, you get to select a resource of your choice from the bank (unless a 7 rolls). "
            },
            section11: {
                title: "11. Metropolis",
                href: "metropolis",
                metropolisDescription: "<p>The first player to reach level 4 in a city improvement type, can upgrade a city to a Metropolis, worth 2 Victory Points{}.</p>",
                metropolisLimitations: "Metropolis limitations:",
                oneMetropolis: "Only 1 Metropolis for each city improvement type.",
                playersCanStealMetropolis: "Players can steal a Metropolis if they reach level 5 city improvement first.",
                barbariansCannotDestroyMetropolis: "Barbarians cannot destroy a Metropolis.",
                playersCanHaveMoreThanOneMetropolis: "Players can have more than 1 Metropolis.",
                playersMustHaveAnAvailableCity: "Players must have an available city to buy a level 4 city improvement. You cannot upgrade to a metropolis or purchase a level 4 city improvement without an available city."
            },
            section12: {
                title: "12. Progress cards",
                href: "progress-cards",
                progressCardsReplaceDevelopmentCards: "In Cities & Knights, Progress cards replace development cards.<br/>There are <b>18 of each type</b> of Progress Card.",
                collectProgressCards: "Collect progress cards based on event dice + red dice + city improvement level.",
                progressCardsLimitations: "Progress card limitations:",
                handLimit: "You can only have 4 progress cards in your hand. However, you may have 5 on your own turn. If you end your turn with 5 progress cards, you must immediately discard 1 of them.",
                "5thCardDiscard": "If you draw a 5th progress card when it’s not your turn, you must discard 1 progress card from your hand.",
                victoryPointsDiscard: "Victory points from progress cards (Printer & Constitution) do not count towards the 4 cards in your hand."
            },
            section13: {
                title: "13. Science progress cards",
                href: "science-cards",
                "2Alchemist": "2 Alchemist",
                "2Crane": "2 Crane",
                "1Engineer": "1 Engineer",
                "2Inventor": "2 Inventor",
                "2Irrigation": "2 Irrigation",
                "2Medicine": "2 Medicine",
                "2Mining": "2 Mining",
                "1Printer": "1 Printer",
                "2RoadBuilding": "2 Road Building",
                "2Smith": "2 Smith",
                alchemistDescription: "Play at the beginning of your turn before the dice roll. Determine the roll of the red and regular dice",
                craneDescription: "Build a city improvement for one commodity less. These cannot be combined together to pay for 2+ less commodities in one turn",
                engineerDescription: "Build a city wall for free if you have a city",
                inventorDescription: "Swap 2 numbers on the board (except 6, 8, 2, 12)",
                irrigationDescription: "Collect 2 grain cards for each individual grain tile you have a settlement or city on",
                medicineDescription: "Upgrade a settlement to a city for 2 ore and 1 grain",
                miningDescription: "Collect 2 ore cards for each individual ore tile you have a settlement or city on",
                printerDescription: "1 revealed victory point",
                roadBuildingDescription: "Build 2 free roads",
                smithDescription: "Upgrade up to 2 knights for free"
            },
            section14: {
                title: "14. Politics progress cards",
                href: "politics-cards",
                "2Bishop": "2 Bishop",
                "1Constitution": "1 Constitution",
                "2Deserter": "2 Deserter",
                "2Diplomat": "2 Diplomat",
                "2Intrigue": "2 Intrigue",
                "2Saboteur": "2 Saboteur",
                "3Spy": "3 Spy",
                "2Warlord": "2 Warlord",
                "2Wedding": "2 Wedding",
                bishopDescription: "Move the robber and steal 1 card from each player on the tile the robber is moved to",
                constitutionDescription: "1 revealed victory point",
                deserterDescription: "Choose an opponent to remove a knight of their choice. You may place one of your knights for free if you have an available spot",
                diplomatDescription: "Remove any open road. If it is your own road, you may relocate it.",
                intrigueDescription: "Displace an enemy knight touching one of your roads. If there is no available space for the opponent to place it, it must be removed from the board",
                saboteurDescription: "All players that have equal or more victory points than you must discard half of their resource/commodity cards.",
                spyDescription: "Select a player to see all their progress cards and steal 1 of them",
                warlordDescription: "Activate all of your knights for free",
                weddingDescription: "All players with more victory points than you will give you 2 resources or commodities of their choice"
            },
            section15: {
                title: "15. Trade progress cards",
                href: "trade-cards",
                "2CommercialHarbor": "2 Commercial Harbor",
                "2MasterMerchant": "2 Master Merchant",
                "2MerchantFleet": "2 Merchant Fleet",
                "6Merchant": "6 Merchant",
                "4ResourceMonopoly": "4 Resource Monopoly",
                "2TradeMonopoly": "2 Trade Monopoly",
                commericalHarborDescription: "Force each player to trade you a commodity of their choice for one of your resources. You may finish using this card early without doing all available trades",
                masterMerchantDescription: "Choose 1 player that has more victory points than you to see their resource and commodity cards. Choose 2 cards to steal from their hand",
                merchantFleetDescription: "Pick 1 resource or commodity. You may trade it at a 2:1 rate for any other resource or commodity until the end of your turn",
                merchantDescription: "Move the merchant to any tile touching one of your settlements. You can do 2:1 trades with this resource as long as it stays there. Having control of this merchant gives you 1 victory point.",
                resourceMonopolyDescription: "Select a resource for all players to give you 2 of",
                tradeMonopolyDescription: "Select any commodity for all players to give you 1 of"
            },
            section16: {
                title: "16. Points to win",
                href: "points-to-win",
                firstPersonTo13VP: "The first person to get to <b>13 victory points (VP)</b> is the winner.",
                winOnYourTurn: "In order to win, you have to reach 13 points on your turn. You may still lose if another player achieves 13 points on their turn even if you had 13 points before them. Note: points to win may vary while combining Cities & Knights and Seafarers expansions, depending on maps and scenarios.",
                getPointsDoingTheFollowing: "Get points by doing the following: ",
                highestKnightStrength: "Highest Knight strength when defeating the Barbarians (Defender of Colonist)",
                controlOfMerchant: "Having control of the Merchant",
                progressCardVP: "Earn a progress card that provides one Victory Point (Printer & Constitution)",
                haveAMetropolis: "Having a Metropolis"
            }
        },
        misc: {
            resource: {
                lumber: "Wood",
                brick: "Brick",
                wool: "Sheep",
                grain: "Wheat",
                ore: "Ore",
                cloth: "Cloth",
                coin: "Coin",
                paper: "Paper"
            },
            building: {
                road: "Road",
                settlement: "Settlement",
                city: "City",
                developmentCard: "Development Card",
                ship: "Ship"
            }
        }
    }
}, function(e) {
    e.exports = {
        bg: {
            title: "Juego Base",
            section0: {
                title: "Video tutorial",
                "6minutes": "(6 minutos)",
                href: "video"
            },
            section1: {
                title: "1. Cómo ganar",
                firstPlayerTo10VP: "El primer jugador que llegue a 10 Puntos de Victoria (VPs) es el ganador. Obtenga puntos haciendo lo siguiente:",
                "1point": "1 punto",
                "2points": "2 puntos",
                buildASettlement: "Construye un poblado",
                upgradeSettlementToCity: "Actualizar un poblado a una ciudad",
                buyVPDevelopmentCard: "Compre Cartas de Desarrollo para tener la oportunidad de obtener una carta de Punto de Victoria",
                getLongestRoad: "Consiga el camino más largo. Se requiere un mínimo de 5 caminos consecutivos para obtener el logro.",
                getLargestArmy: "Consigue el ejército más grande. Se requiere jugar un mínimo de 3 cartas de desarrollo de Caballero para obtener el logro.",
                stealingAchievements: "Otros jugadores pueden robar el Camino más largo o el Ejército más grande, si tienen más caminos o si juegan más caballeros",
                href: "cómo-ganar"
            },
            section2: {
                title: "2. Ubicaciones iniciales",
                placeOneSettlement: "<b>Ubicación</b> : coloque un poblado {} y una carretera {} en la esquina de un hexágono, en dos turnos.",
                collectingResources: "<b>Recopilación de recursos</b> : obtendrás un recurso de cada uno de los hexágonos que rodean tu segundo poblado {}",
                placeSettlementsTwoRoadsApart: "Todos los poblados deben estar separados por al menos dos caminos",
                href: "ubicaciones-iniciales"
            },
            section3: {
                title: "3. Tirar los dados",
                afterInitialPlacements: "Luego de las ubicaciones iniciales, los jugadores se turnan para lanzar los dados al comienzo de cada turno. Cada tirada de dados determina qué recursos se distribuyen: los recursos con ese número en el tablero se distribuirán entre los jugadores con poblados o ciudades alrededor de esos hexágonos.",
                diceRollProbability: "Cada tirada de dados tiene una probabilidad diferente de salir, representada con puntos debajo de los números. 7 es el número con más probabilidades de salir, seguido de 6 y 8.",
                href: "tirar-los-dados"
            },
            section4: {
                title: "4. Obtener recursos",
                settlementsProduce: "{} Los poblados producen 1 recurso",
                citiesProduce: "{} Las ciudades producen 2 recursos",
                ofEachResource: "Hay 19 cartas de cada recurso.",
                href: "recolectando-recursos"
            },
            section5: {
                title: "5. Ladrón y descartes",
                when7Rolled: "Siempre que sale un 7 sucede lo siguiente:",
                discardToBank: "Descartar en el banco",
                allPlayersOverDiscardLimit: "Todos los jugadores con <b>8 o más</b> cartas deben descartar la mitad de ellas al banco.",
                blockAndSteal: "Bloquea y roba cartas con el ladrón",
                moveRobber: "El jugador que sacó un 7 puede mover al ladrón para bloquear un recurso de tiradas futuras. También roban un recurso de un jugador en esa casilla.",
                href: "ladrón"
            },
            section6: {
                title: "6. Costos de construcción y compra",
                upgradeToCity: "Actualiza a una ciudad",
                buildLimit: "Cada jugador puede construir un máximo de 15 carreteras, 5 poblados y 4 ciudades.",
                href: "costos-de-construcción"
            },
            section7: {
                title: "7. Cartas de Desarrollo",
                developmentCardExplanation: "Las cartas de Desarrollo tienen habilidades especiales. Hay 25 en total en el mazo y se pueden jugar antes de lanzar los dados.",
                "14Knights": "<b>14 cartas de Caballero</b>",
                "2RoadBuilding": "<b>2 cartas de Construcción de Carreteras</b>",
                "2YearOfPlenty": "<b>2 cartas de "Año de Abundancia"</b>",
                "2Monopoly": "<b>2 cartas de Monopolio</b>",
                "5VictoryPoint": "<b>5 cartas de Punto de Victoria</b>",
                devCardKnight: "Mueve al ladrón a otro hexágono y roba una carta al azar de un jugador de tu elección que tenga un poblado o una ciudad en ese hexágono.",
                devCardRoadBuilding: "Coloca 2 caminos gratis",
                devCardYearOfPlenty: "Selecciona 2 recursos de tu elección del banco",
                devCardMonopoly: "Roba todas las cartas de un mismo recurso de todos los demás jugadores",
                devCardVictoryPoint: "El jugador recibe en secreto 1 punto de victoria",
                oneDevCardPerTurn: "Solo puedes jugar 1 carta de Desarrollo por turno. No puedes jugar una carta de Desarrollo en el mismo turno en que la compraste.",
                href: "cartas-de-desarrollo"
            },
            section8: {
                title: "8. Negociación",
                tradeDescription: "Puedes comerciar con otros jugadores, o con el banco.",
                tradeWithBank: "Puedes comerciar con el banco. Intercambia 4 cartas del mismo tipo a cambio de 1 recurso de tu elección.",
                "tradeWith3:1": "Construye un poblado en un puerto 3:1 para intercambiar 3 recursos del mismo tipo por 1 recurso de tu elección.",
                "tradeWith2:1": "Construye un poblado en un puerto 2:1 para intercambiar 2 recursos del tipo de puerto por 1 recurso de tu elección.",
                tradeWithPlayers: "Puedes intercambiar cualquier cantidad o combinación de recursos con otros jugadores por cualquier combinación o cantidad de recursos a cambio.",
                href: "comercio"
            },
            html: {
                title: "Colonist Rules - Base Game",
                description: "Juego de mesa online alternativo al popular juego Settlers of Catan y PlayCatan. Colonist te permite jugar ahora sin necesidad de descargar o iniciar sesión.",
                keywords: "juegos como el universo catan, catan online gratis, jugar catan online gratis, colonos de catan online gratis, colonos de catan gratis online, jugar colonos de catan online gratis, jugar colonos de catan, colonos de catan online, colonos de catan online, jugar colonos de catan en línea, jugar en línea colonos de catan, colonos de catan jugar en línea, catan en línea, juego de catan en línea, juego de catan en línea, jugar catan en línea reddit, jugar catan en línea con amigos, jugar catan, jugar catan en línea, juego en línea catan, jugar colonos de catan gratis en línea, jugar al juego de catan en línea, jugar a catan en línea, colonos de catan gratis en línea, en línea, juego, videojuego, juego de navegador, juego web, juego de mesa, jugar, unirse, competir, derrota, estrategia, multijugador, amigos , jugar con amigos, jugar con otras personas, interactuar, social, victoria, tácticas, compartir, intercambiar, catan, jugar en línea, gratis, juego en línea gratis, juego gratis, juego en línea gratis, juego de estrategia, juego multijugador, juego multijugador en línea, estrategia en línea, multijugador en línea, navegador, web, juego de navegador en línea, juego web en línea, juego de mesa en línea, jugar juegos en línea, jugar juegos de navegador, jugar juegos web, katan, katan.io, jugar katan, playcatan, catan, catan en línea, kolonisten van catan en línea, jugar catan en línea contra la computadora, juego de pc de catan, catan en línea con amigos, catan para pc, aplicación de catan, catan en cualquier momento, universo de catan, reglas de catan, juego de io, juegos de io, juego de mesa de io, juego de estrategia de io, expansión de catan",
                href: ""
            }
        },
        "56p": {
            title: "5-6 / 7-8 jugadores",
            section1: {
                title: "1. Fase de construcción especial",
                clickRedFlag: "Haz clic en el botón con la bandera roja para acceder a una fase de construcción especial después del turno regular de cada jugador, antes que se vuelvan a tirar los dados.",
                specialBuildPhaseYouCan: "<h2>Puedes ✅</h2><p> Construir carreteras, poblados, ciudades o comprar una carta de desarrollo.<p> {} {} {} {} `",
                specialBuildPhaseYouCant: "<h2>No puedes ❌</h2> 1.Realizar intercambios con el banco u otros jugadores<br/> 2. Usar una carta de desarrollo<br/> 3. Ganar durante la fase de construcción especial. Debe esperar hasta que vuelva a ser su turno.",
                href: "fase-de-construcción-especial"
            },
            section2: {
                title: "2. Recursos adicionales",
                subtitleClassic56P: "5-6 jugadores",
                numberOfTiles: "Número total de hexágonos",
                "30Tiles": "<b>30 (mapa ampliado)</b>",
                numberOfResourceCards: "Número total de cada carta de recurso",
                numberOfDevelopmentCards: "Número total de cartas de desarrollo",
                subtitleClassic78P: "7-8 jugadores",
                "37Tiles": "<b>37 (mapa ampliado)</b>",
                href: "recursos-adicionales"
            },
            section3: {
                title: "3. Ciudades y Caballeros 5-6 Jugadores",
                citiesAndKnightsRules: "Reglas de Ciudades y Caballeros",
                referToCitiesAndKnights: "Consulta {} para conocer el modo de juego durante la fase de construcción. También hay acciones que se pueden realizar con los caballeros.",
                citiesAndKnightsYouCan: "<h2>Puedes ✅</h2> Comprar caballeros<br/> Activar caballeros<br/> Actualizar caballeros",
                citiesAndKnightsYouCant: "<h2>No puedes ❌</h2> Desplazar al caballero de un oponente<br/> usar el ladrón",
                href: "ciudades-y-caballeros"
            },
            html: {
                title: "Colonist Rules - 5-6 / 7-8 Players",
                description: "Juego de mesa online alternativo al popular juego Settlers of Catan y PlayCatan. Colonist te permite jugar ahora sin necesidad de descargar o iniciar sesión.",
                keywords: "juegos como el universo catan, catan online gratis, jugar catan online gratis, colonos de catan online gratis, colonos de catan gratis online, jugar colonos de catan online gratis, jugar colonos de catan, colonos de catan online, colonos de catan online, jugar colonos de catan en línea, jugar en línea colonos de catan, colonos de catan jugar en línea, catan en línea, juego de catan en línea, juego de catan en línea, jugar catan en línea reddit, jugar catan en línea con amigos, jugar catan, jugar catan en línea, juego en línea catan, jugar colonos de catan gratis en línea, jugar al juego de catan en línea, jugar a catan en línea, colonos de catan gratis en línea, en línea, juego, videojuego, juego de navegador, juego web, juego de mesa, jugar, unirse, competir, derrota, estrategia, multijugador, amigos , jugar con amigos, jugar con otras personas, interactuar, social, victoria, tácticas, compartir, intercambiar, catan, jugar en línea, gratis, juego en línea gratis, juego gratis, juego en línea gratis, juego de estrategia, juego multijugador, juego multijugador en línea, estrategia en línea, multijugador en línea, navegador, web, juego de navegador en línea, juego web en línea, juego de mesa en línea, jugar juegos en línea, jugar juegos de navegador, jugar juegos web, katan, katan.io, jugar katan, playcatan, catan, catan en línea, kolonisten van catan en línea, jugar catan en línea contra la computadora, juego de pc de catan, catan en línea con amigos, catan para pc, aplicación de catan, catan en cualquier momento, universo de catan, reglas de catan, juego de io, juegos de io, juego de mesa de io, juego de estrategia de io, expansión de catan",
                href: "5-6-jugadores"
            }
        },
        sf: {
            title: "Navegantes",
            section0: {
                title: "Video tutorial",
                "3minutes": "(3 minutos)",
                href: "video"
            },
            section1: {
                title: "1. Nuevas piezas de juego",
                shipsAllowYouToTravel: "Los barcos te permiten viajar a través de casillas de mar para descubrir nuevas islas.",
                pirateShipsBlockPlayers: "El barco pirata impide que los barcos de los jugadores se coloquen o se muevan, y también roban un recurso.",
                seaHexes: "Los hexágonos marinos son sobre lo que construyes barcos",
                goldHexes: "Los hexágonos dorados te dan cualquier recurso de tu elección cuando ese número sale en los dados.",
                href: "nuevas-piezas"
            },
            section2: {
                title: "2. Barcos",
                buildShips: "Construye barcos para descubrir nuevas islas y recursos para construir y expandirse.",
                openAndClosedRoutes: "Rutas abiertas: una vez por turno, puedes mover un barco que no esté conectando poblados.<br/> Rutas cerradas: los barcos que conectan poblados no se pueden mover.",
                shipsMustConnect: "Los barcos deben partir y conectarse a un poblado. No puede partir de una carretera.",
                href: "barcos"
            },
            section3: {
                title: "3. Ruta comercial más larga",
                longestTradeRouteReplaces: "La ruta comercial más larga otorga 2 puntos de victoria.<br/> Construye un mínimo de 5 carreteras, barcos o una combinación de ambos para obtener la ruta comercial más larga.",
                href: "ruta-comercial-más-larga"
            },
            section4: {
                title: "4. Ladrón y Barco Pirata",
                or: "o",
                when7Rolls: "Siempre que salga un 7, el jugador puede elegir mover al ladrón o al barco pirata.",
                pirateShipsDo: "Los barcos piratas hacen lo siguiente:",
                canOnlyBePlacedOnSeaHex: "Solo se puede colocar en un hexágono de mar.",
                allowPlayerToSteal: "Permite al jugador robar a un oponente con barcos en ese hexágono",
                blockPlayersFromBuilding: "Bloquear a los jugadores para que no construyan nuevos barcos en ese hexágono.",
                blockPlayersFromMoving: "Bloquear a los jugadores para que no muevan barcos hacia y desde ese hexágono.",
                href: "ladrón-y-barco-pirata"
            },
            section5: {
                title: "5. Descubriendo nuevas islas",
                additional2VP: "Obtén 2 {} puntos de victoria adicionales por el primer poblado que construyas en una isla nueva.",
                someMapsMight: "Algunos mapas pueden tener un {} hexágono de niebla que revelará un recurso aleatorio, o un hexágono de mar.",
                href: "islas"
            },
            section6: {
                title: "6. Hexágonos Dorados",
                goldHexesDescription: "Los hexágonos dorados te dan cualquier recurso de tu elección cuando ese número sale en los dados.",
                href: "hexágonos-dorados"
            },
            section7: {
                title: "7. Puntos para ganar",
                firstPersonTo13VP: "El primer jugador en llegar a 13 {} Puntos de Victoria (VPs) es el ganador.<br/> Obtenga puntos haciendo lo siguiente:",
                longestTradeRoute: "Tener la ruta comercial más larga (mínimo 5 carreteras / barcos)",
                buildSettlementOnIsland: "Construir un poblado en una isla",
                href: "puntos-para-ganar"
            },
            html: {
                title: "Colonist Rules - Seafarers",
                description: "Juego de mesa online alternativo al popular juego Settlers of Catan y PlayCatan. Colonist te permite jugar ahora sin necesidad de descargar o iniciar sesión.",
                keywords: "juegos como el universo catan, catan online gratis, jugar catan online gratis, colonos de catan online gratis, colonos de catan gratis online, jugar colonos de catan online gratis, jugar colonos de catan, colonos de catan online, colonos de catan online, jugar colonos de catan en línea, jugar en línea colonos de catan, colonos de catan jugar en línea, catan en línea, juego de catan en línea, juego de catan en línea, jugar catan en línea reddit, jugar catan en línea con amigos, jugar catan, jugar catan en línea, juego en línea catan, jugar colonos de catan gratis en línea, jugar al juego de catan en línea, jugar a catan en línea, colonos de catan gratis en línea, en línea, juego, videojuego, juego de navegador, juego web, juego de mesa, jugar, unirse, competir, derrota, estrategia, multijugador, amigos , jugar con amigos, jugar con otras personas, interactuar, social, victoria, tácticas, compartir, intercambiar, catan, jugar en línea, gratis, juego en línea gratis, juego gratis, juego en línea gratis, juego de estrategia, juego multijugador, juego multijugador en línea, estrategia en línea, multijugador en línea, navegador, web, juego de navegador en línea, juego web en línea, juego de mesa en línea, jugar juegos en línea, jugar juegos de navegador, jugar juegos web, katan, katan.io, jugar katan, playcatan, catan, catan en línea, kolonisten van catan en línea, jugar catan en línea contra la computadora, juego de pc de catan, catan en línea con amigos, catan para pc, aplicación de catan, catan en cualquier momento, universo de catan, reglas de catan, juego de io, juegos de io, juego de mesa de io, juego de estrategia de io, expansión de catan",
                href: "navegantes"
            }
        },
        ck: {
            title: "Ciudades y Caballeros",
            section0: {
                title: "Video tutorial",
                "7minutes": "(7 minutos)",
                href: "video"
            },
            section1: {
                title: "1. Nuevas piezas de juego",
                redAndEventDice: "Dado rojos y dado de Eventos",
                barbarianTracker: "Bárbaros",
                knightsStrength: "Caballeros",
                commoditityCards: "Cartas de Mercancías",
                cityImprovements: "Mejoras de ciudad",
                metropolis: "Metrópoli",
                progressCards: "Cartas de Progreso (reemplaza las cartas de Desarrollo)",
                cityWalls: "Muros de ciudad",
                href: "nuevas-piezas"
            },
            section2: {
                title: "2. Ubicaciones iniciales",
                placeSettlementAndCity: "En su segunda ubicación inicial, coloque una ciudad {} en lugar de {} un poblado.",
                href: "ubicaciones-iniciales"
            },
            section3: {
                title: "3. Tipos de dados",
                thereAre3TypesOfDice: "Hay 3 tipos de dados: dado regular, rojo y de eventos.",
                redDiceDescription: "El dado rojo determina si los jugadores obtienen una carta de Progreso según los niveles de mejora de la ciudad. Para obtener información detallada sobre la distribución de la cartas de Progreso y su relación con el dado rojo, {}",
                eventDiceDescription: "El dado de Eventos tiene 3 barcos bárbaros y 3 castillos que representan un tipo de carta de Progreso.",
                barbarianShip: "Barco Bárbaro: un barco en el dado de Eventos significa que el barco bárbaro avanza 1 casilla en el camino.<br> Castillo: distribuye cartas de Progreso según el color del castillo, el valor del dado rojo y los niveles de mejora de la ciudad del jugador.",
                href: "dado"
            },
            section4: {
                title: "4. Obtener Mercancías",
                cityProduction: "Las ciudades colocadas sobre Lana, Madera o Mineral producen 1 recurso y 1 mercancía",
                importantToKnow: "Cosas importantes que debe saber sobre las Mercancías:",
                onlyCities: "Solo las ciudades pueden producir Mercancías",
                countTowardsDiscardLimit: "Las Mercancías cuentan para el límite de descarte cuando sale un 7",
                canBeTraded: "Las Mercancías se pueden negociar como cualquier otro recurso.",
                mustHaveCity: "Las Mercancías solo se pueden usar para comprar mejoras de la ciudad siempre que tenga al menos 1 ciudad en el tablero",
                href: "obtener-mercancías"
            },
            section5: {
                title: "5. Bárbaros",
                barbariansDescription: "<p>Cuando sale un barco bárbaro en el dado de eventos, los bárbaros avanzan un espacio. La fuerza de los bárbaros es igual a la suma de todas las ciudades del tablero.</p><p> {} + {} + {} = 3 fuerza bárbara</p>",
                href: "bárbaros"
            },
            section6: {
                title: "6. Caballeros",
                purchasingAKnight: "Comprar un caballero",
                knightCost: "1 Caballero cuesta <b>1 lana</b> y <b>1 mineral</b>",
                canBePlacedAnywhere: "Se puede colocar en cualquier lugar al final o entre las carreteras.",
                canBreakAnotherRoad: "Puede romper la longitud de la carretera de otro jugador cuando se coloca entre sus carreteras",
                activatingAKnight: "Activar un caballero",
                activatingKnightCosts: "Activar un caballero cuesta <b>1 trigo</b>",
                youCannotPlace: "PUEDES colocar un caballero y activarlo en el mismo turno<br/> NO PUEDES colocar un caballero, activar un caballero y realizar una acción de caballero en el mismo turno",
                attackPlayer: "Poder de ataque",
                knightLimit: "Cada jugador puede tener <b>2 caballeros "Básicos"</b> , <b>2 caballeros "Fuertes"</b> y <b>2 caballeros "Poderosos"</b>",
                basicKnights: "{} Nivel 1 (caballero Básico)<br/> <b>fuerza 1</b>",
                strongKnights: "{} Nivel 2 (caballero Fuerte)<br/> <b>fuerza 2</b>",
                mightyKnights: "{} Nivel 3 (caballero Poderoso)<br/> <b>fuerza 3</b> &#39;",
                upgradingKnights: "Promover caballeros",
                upgradingKnightsCost: "Promover un caballero cuesta <b>1 lana</b> y <b>1 mineral</b>",
                upgradingKnightsRules: "Los caballeros promovidos permanecerán activos o inactivos<br/> <b>PUEDES</b> colocar un caballero de nivel 1 y promoverlo en el mismo turno<br/> <b>NO PUEDES</b> mejorar un caballero dos veces en el mismo turno<br/> <b>SÓLO</b> puedes promover caballeros a nivel 3 después de alcanzar el tercer nivel en mejoras de ciudad Política (Fortaleza, azul). Sin embargo, puedes obtener un caballero de nivel 3 sin tener Fortaleza, usando una carta de Desertor en otro jugador que tenga un caballero de nivel 3.",
                knightActions: "Acciones de caballero (estas desactivarán a tu caballero)",
                moveKnight: "Mover un caballero: mueve un caballero a cualquier lugar disponible en la misma red de carreteras",
                displacingKnight: "Desplazar un caballero enemigo: si tu nivel de caballero es más alto que el de un oponente, puedes desplazar al caballero enemigo para que el oponente deba reubicarlo o eliminarlo. Ambos caballeros deben estar conectados entre sí por carreteras.",
                chasingRobber: "Ahuyentar al ladrón: puedes mover al ladrón si está en una ficha que está tocando uno de tus caballeros activos. Puedes hacer esto con varios caballeros en el mismo turno, siempre que estuvieran activos antes de que comenzara tu turno.",
                href: "caballeros"
            },
            section7: {
                title: "7. Bárbaros vs Caballeros",
                whenBarbariansAttack: "Cuando el barco bárbaro llega al final del camino, atacan",
                calculateBarbarianStrength: "Fuerza bárbara = número total de ciudades",
                calculateKnightStrength: "Fuerza de los caballeros = fuerza total de todos los caballeros activos",
                ifStrengthIsEqual: "Si la fuerza de los caballeros es igual o mayor a la fuerza de los bárbaros",
                defenderOfColonist: "El jugador con el mayor numero de caballeros activos obtiene el premio Defensor de Colonist, que vale 1 punto de victoria adicional.",
                defenderOfColonistDraw: "Si los jugadores están empatados con la fuerza de caballero más alta, cada uno de esos jugadores elegirá una carta de Progreso en lugar de ganar un punto.",
                barbariansWin: "Si la fuerza de los caballeros es menor que la fuerza de los bárbaros",
                playersLoseConsequence: "El jugador con la fuerza de caballero más baja destruye su ciudad, convirtiéndola en un poblado.",
                playersLoseWithNoCities: "Los jugadores sin ciudades, así como los jugadores cuyas ciudades son todas metrópolis, no se ven afectados.",
                afterAnAttack: "Después de un ataque, los bárbaros regresan al inicio del camino y todos los caballeros en el tablero se desactivan.",
                playerDestroyCityNote: "Los jugadores que deben destruir una de sus ciudades, pero que ya tienen 5 poblados en el tablero, primero deben reconstruir esa ciudad destruida antes de construir cualquier otra ciudad.",
                href: "bárbaros-vs-caballeros"
            },
            section8: {
                title: "8. Ladrón bloqueado antes del primer ataque",
                noEarlyRobber: "Los jugadores <b>NO PUEDEN</b> mover al ladrón {} hasta luego del primer ataque bárbaro, pero los jugadores aún deben descartarse si tienen más de 7 cartas (esto incluye usar tu caballo para mover al ladrón, así como usar una carta de Alfil)",
                href: "no-ladrón-temprano"
            },
            section9: {
                title: "9. Muros de ciudad",
                cityWallsDescription: "Los muros de la ciudad aumentan el límite de descarte en 2 cartas, lo que ayuda al jugador a protegerse de perder cartas cuando sale un 7",
                cityWallsCost: "EL muro de ciudad cuesta <b>2 ladrillos</b>",
                cityWallsLimitations: "Limitaciones del muro de ciudad",
                maximumCityWalls: "Cada jugador puede colocar un máximo de 3 muros, alcanzando un límite de descarte máximo de 13 cartas",
                oneCityWallPerCity: "Una ciudad solo puede tener 1 muro",
                cityDestroyed: "Si una ciudad es destruida por los bárbaros, el muro de esa ciudad también es destruido.",
                href: "muros-de-ciudad"
            },
            section10: {
                title: "10. Mejoras de la ciudad",
                differentCommodities: "Se pueden comprar 3 tipos diferentes de mejoras de ciudad con Mercancías.",
                tradeImprovement: "<b>Comercio</b><br/> Mejora de ciudad amarilla<br/> Cuestan Tela",
                politicsImprovement: "<b>Política</b><br/> Mejora de ciudad azul<br/> Cuestan Monendas",
                scienceImprovement: "<b>Ciencia</b><br/> Mejora de ciudad verde<br/> Cuestan Papel",
                cityImprovementLimitations: "Limitaciones de las mejora de ciudad",
                youMustHaveOneCity: "Debes tener al menos 1 ciudad para comprar mejoras de ciudad",
                cityImprovementsAffectProgressCards: "Las mejoras de ciudad permiten obtener cartas de Progreso, según los dados rojo y de eventos.",
                cityImprovementCostIncrease: "Cada nivel de mejora de la ciudad requiere más Mercancías que el anterior",
                upgradingCities: "Mejora de ciudades",
                cityImprovementCostDescription: "Cada nivel de mejora de la ciudad cuesta una Mercancía más.",
                level1: "Nivel 1",
                level2: "Nivel 2",
                level3: "Nivel 3",
                level4: "Nivel 4",
                level5: "Nivel 5",
                level3Unlocks: "La mejora de una ciudad al nivel 3 desbloquea una habilidad especial",
                tradingHouse: "<b>Comercio</b> (Casa de Comercio)<br/> Comercio de Mercancías a una tasa de 2: 1 por cualquier otro recurso o Mercancía",
                fortress: "<b>Política</b> (Fortaleza)<br/> Promueve caballeros hasta nivel 3",
                aqueduct: "<b>Ciencia</b> (Acueducto)<br/> Si ninguno de sus números sale en los dados, puede seleccionar un recurso de tu elección del banco",
                href: "mejoras-de-la-ciudad"
            },
            section11: {
                title: "11. Metrópolis",
                metropolisDescription: "<p>El primer jugador en alcanzar el nivel 4 en un tipo de mejora de ciudad, puede convertir una ciudad en una metrópolis, por un valor de 2 puntos de victoria {}</p>",
                metropolisLimitations: "Limitaciones de Metropolis",
                oneMetropolis: "Solo 1 metrópolis por cada tipo de mejora de ciudad",
                playersCanStealMetropolis: "Los jugadores pueden robar Metrópolis si primero alcanzan el nivel 5 de mejora de la ciudad.",
                barbariansCannotDestroyMetropolis: "Los bárbaros no pueden destruir una metrópoli",
                playersCanHaveMoreThanOneMetropolis: "Los jugadores pueden tener más de 1 Metrópolis",
                playersMustHaveAnAvailableCity: "Los jugadores deben tener una ciudad disponible para comprar una mejora de ciudad de nivel 4. No puede actualizar a una metrópolis o comprar una mejora de ciudad de nivel 4 sin una ciudad disponible",
                href: "metrópolis"
            },
            section12: {
                title: "12. Cartas de Progreso",
                progressCardsReplaceDevelopmentCards: "En Ciudades y Caballeros, las cartas de Progreso reemplazan a las cartas de Desarrollo.<br/> Hay 18 cartas de Progreso <b>de cada tipo.</b>",
                collectProgressCards: "Recibe cartas de Progreso basadas en dados de eventos + dados rojos + nivel de mejora de la ciudad",
                progressCardsLimitations: "Limitaciones de las cartas de Progreso",
                handLimit: "Solo puedes tener 4 cartas de Progreso en tu mano. Sin embargo, puede tener 5 en su propio turno. Si terminas tu turno con 5 cartas de Progreso, debes descartar inmediatamente 1 de ellas.",
                "5thCardDiscard": "Si obtienes una quinta carta de Progreso cuando no es tu turno, debes descartar 1 carta de Progreso de tu mano.",
                victoryPointsDiscard: "Los puntos de victoria de las cartas de Progreso (Impresora y Constitución) no cuentan para las 4 cartas en tu mano",
                href: "cartas-de-progreso"
            },
            section13: {
                title: "13. Cartas de Progreso de Ciencia",
                "2Alchemist": "2 Alquimista",
                "2Crane": "2 Grúa",
                "1Engineer": "1 Ingeniero",
                "2Inventor": "2 Inventor",
                "2Irrigation": "2 Irrigación",
                "2Medicine": "2 Medicina",
                "2Mining": "2 Minería",
                "1Printer": "1 Impresora",
                "2RoadBuilding": "2 Construcción de carreteras",
                "2Smith": "2 Herrero",
                alchemistDescription: "Juega ésta carta al comienzo de tu turno, antes de tirar los dados. Determina la tirada de los dados rojo y regular.",
                craneDescription: "Construye una mejora de la ciudad por una Mercancía menos. No se pueden combinar para pagar 2+ menos productos en un turno",
                engineerDescription: "Construye un muro gratis si tienes una ciudad",
                inventorDescription: "Intercambia 2 números en el tablero (excepto 6, 8, 2, 12)",
                irrigationDescription: "Recibe 2 cartas de Trigo por cada hexágono de Trigo en la que tengas un poblado o ciudad.",
                medicineDescription: "Mejora un poblado a una ciudad por 2 minerales y 1 trigo",
                miningDescription: "Recibe 2 cartas de Mineral por cada hexágono de Mineral en la que tengas un poblado o ciudad.",
                printerDescription: "1 punto de victoria revelado",
                roadBuildingDescription: "Construye 2 carreteras gratis",
                smithDescription: "Promueve hasta 2 caballeros gratis",
                href: "tarjetas-de-ciencia"
            },
            section14: {
                title: "14. Cartas de Progreso de Política",
                "2Bishop": "2 Obispo",
                "1Constitution": "1 Constitución",
                "2Deserter": "2 Desertor",
                "2Diplomat": "2 Diplomático",
                "2Intrigue": "2 Intriga",
                "2Saboteur": "2 Saboteador",
                "3Spy": "3 Espía",
                "2Warlord": "2 Señor de la Guerra",
                "2Wedding": "2 Boda",
                bishopDescription: "Mueve al ladrón y roba 1 carta de cada jugador presente en el hexágono al que se mueve el ladrón",
                constitutionDescription: "1 punto de victoria revelado",
                deserterDescription: "Elije un oponente para eliminar un caballero a su elección. Puedes colocar uno de tus caballeros gratis si tienes uno del mismo nivel disponible",
                diplomatDescription: "Remueve cualquier camino abierto. Si es su propio camino, puede reubicarlo.",
                intrigueDescription: "Desplaza a un caballero enemigo que esté tocando uno de tus caminos. Si no hay espacio disponible para que el oponente lo coloque, debe ser eliminado del tablero.",
                saboteurDescription: "Todos los jugadores que tengan la misma cantidad o más puntos de victoria que tu, deben descartar la mitad de sus cartas de recursos / Mercancías.",
                spyDescription: "Selecciona un jugador para ver todas sus cartas de Progreso, y roba 1 de ellas.",
                warlordDescription: "Activa todos tus caballeros gratis",
                weddingDescription: "Todos los jugadores con más puntos de victoria que tú te darán 2 recursos o productos a su elección.",
                href: "tarjetas-de-política"
            },
            section15: {
                title: "15. Cartas de Progreso de Comercio",
                "2CommercialHarbor": "2 Puerto Comercial",
                "2MasterMerchant": "2 Maestro Comerciante",
                "2MerchantFleet": "2 Flota Mercante",
                "6Merchant": "6 Comerciante",
                "4ResourceMonopoly": "4 Monopolio de Recursos",
                "2TradeMonopoly": "2 Monopolio de Mercancías",
                commericalHarborDescription: "Obliga a cada jugador a intercambiarte una Mercancía de su elección por uno de tus recursos. Puedes terminar de usar esta carta antes sin realizar todas los intercambios disponibles",
                masterMerchantDescription: "Elige 1 jugador que tenga más puntos de victoria que tú para ver sus cartas de recursos y Mercancías. Elija 2 cartas para robar de su mano",
                merchantFleetDescription: "Elija 1 recurso o Mercancía. Puedes intercambiarlo a una tasa de 2:1 por cualquier otro recurso o Mercancía hasta el final de tu turno.",
                merchantDescription: "Mueva el Comerciante a cualquier hexágono que tengas un poblado o ciudad. Puedes realizar intercambios 2:1 con este recurso siempre que el Comerciante permanezca allí. Tener el control del Comerciante da 1 punto de victoria.",
                resourceMonopolyDescription: "Seleccione un recurso para que todos los jugadores te den 2 cartas del mismo",
                tradeMonopolyDescription: "Seleccione una Mercancía para que todos los jugadores te den 1 carta de la misma",
                href: "tarjetas-comerciales"
            },
            section16: {
                title: "16. Puntos para ganar",
                firstPersonTo13VP: "El primer jugador en llegar a <b>13 puntos de victoria (VP)</b> es el ganador.",
                winOnYourTurn: "Para ganar, debes llegar a 13 puntos en tu turno. Aún puedes perder si otro jugador logra 13 puntos en su turno, incluso si tuvieras 13 puntos antes que él. Atención: los puntos necesarios para ganar pueden variar al combinar las expansiones Ciudades y Caballeros con Navegantes, dependiendo del mapa",
                getPointsDoingTheFollowing: "Obtenga puntos haciendo lo siguiente:",
                highestKnightStrength: "Mayor fuerza de caballeros al derrotar a los bárbaros (Defensor de Colonist)",
                controlOfMerchant: "Tener el control del Comerciante",
                progressCardVP: "Gana una carta de Progreso que proporciona un punto de victoria (Impresora o Constitución)",
                haveAMetropolis: "Tener una o más Metrópolis",
                href: "puntos-para-ganar"
            },
            html: {
                title: "Colonist Rules - Cities & Knights",
                description: "Juego de mesa online alternativo al popular juego Settlers of Catan y PlayCatan. Colonist te permite jugar ahora sin necesidad de descargar o iniciar sesión.",
                keywords: "juegos como el universo catan, catan online gratis, jugar catan online gratis, colonos de catan online gratis, colonos de catan gratis online, jugar colonos de catan online gratis, jugar colonos de catan, colonos de catan online, colonos de catan online, jugar colonos de catan en línea, jugar en línea colonos de catan, colonos de catan jugar en línea, catan en línea, juego de catan en línea, juego de catan en línea, jugar catan en línea reddit, jugar catan en línea con amigos, jugar catan, jugar catan en línea, juego en línea catan, jugar colonos de catan gratis en línea, jugar al juego de catan en línea, jugar a catan en línea, colonos de catan gratis en línea, en línea, juego, videojuego, juego de navegador, juego web, juego de mesa, jugar, unirse, competir, derrota, estrategia, multijugador, amigos , jugar con amigos, jugar con otras personas, interactuar, social, victoria, tácticas, compartir, intercambiar, catan, jugar en línea, gratis, juego en línea gratis, juego gratis, juego en línea gratis, juego de estrategia, juego multijugador, juego multijugador en línea, estrategia en línea, multijugador en línea, navegador, web, juego de navegador en línea, juego web en línea, juego de mesa en línea, jugar juegos en línea, jugar juegos de navegador, jugar juegos web, katan, katan.io, jugar katan, playcatan, catan, catan en línea, kolonisten van catan en línea, jugar catan en línea contra la computadora, juego de pc de catan, catan en línea con amigos, catan para pc, aplicación de catan, catan en cualquier momento, universo de catan, reglas de catan, juego de io, juegos de io, juego de mesa de io, juego de estrategia de io, expansión de catan",
                href: "ciudades-y-caballeros"
            }
        },
        misc: {
            resource: {
                lumber: "Madera",
                brick: "Arcilla",
                wool: "Lana",
                grain: "Trigo",
                ore: "Mineral",
                cloth: "Tela",
                coin: "Moneda",
                paper: "Papel"
            },
            building: {
                road: "La carretera",
                settlement: "Poblado",
                city: "Ciudad",
                developmentCard: "Carta de Desarrollo",
                ship: "Barco"
            }
        },
        html: {
            keywords: "colonist.io, catan, rules",
            imgAlt: {
                "rulebook/ck_barbarian_tracker_example": "Cities & Knights barbarian tracker example",
                "rulebook/pagebg_collecting_resources": "Collecting resource cards example video",
                "rulebook/pagebg_dice_probabilities": "Which combinations of dice rolls are most common",
                "rulebook/pagebg_dice_rolls": "Adding dice together to get resource allocation",
                "rulebook/pagebg_discard": "Discarding cards above the discard limit video",
                "rulebook/pagebg_initial_placements": "Placing settlments and roads at the start of the game",
                "rulebook/pagebg_stealing": "Stealing resources from other players with the robber",
                "rulebook/pagebg_trade": "Trade resources with the bank or other players",
                "rulebook/pageck_city_improvement_tracker": "Cities & Knights city improvement chart",
                "rulebook/pageck_how_to_get_progress_cards": "Cities & Knights how to get progress cards",
                "rulebook/pageck_placing_knights": "Cities & Knights placing knights",
                "rulebook/pagesf_discovering_islands": "Seafarers discovering new islands",
                "rulebook/pagesf_fog_tile": "Seafarers fog tiles",
                "rulebook/pagesf_longest_trade_route": "Seafarers longest trade route",
                "rulebook/pagesf_robber_&_pirate_ship": "Seafarers robber and pirate ship",
                "rulebook/pagesf_ships": "Seafarers ships and trade routes"
            },
            href: "reglas-de-catan"
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RulebookPageBG = void 0;
    const i = a(42),
        o = a(43),
        n = a(34),
        r = a(59);
    var s;
    ! function(e) {
        e.Video = "section0", e.HowToWin = "section1", e.InitialPlacements = "section2", e.DiceRolls = "section3", e.CollectingResources = "section4", e.RobberAndDiscarding = "section5", e.BuildingAndBuyingCosts = "section6", e.DevelopmentCards = "section7", e.Trading = "section8"
    }(s || (s = {}));
    class c extends r.RulebookPageGenerator {
        static createPageContent() {
            this.setRulebookPage(i.RulebookPage.Classic4P);
            const e = o.RulebookElements.createElement();
            this.createPageTitle(e, n.RulebookDictionary.get("bg.title"));
            const t = this.createPageSection(e, s.Video);
            o.RulebookElements.createVideoIn(t, "https://www.youtube.com/embed/XUcO2wYcIEY");
            const a = this.createPageSection(e, s.HowToWin);
            this.createPageSectionTitle(a, n.RulebookDictionary.get("bg.section1.title"), this.generateSharableLinkToPage(s.HowToWin)), this.createPageSectionParagraph(a, n.RulebookDictionary.get("bg.section1.firstPlayerTo10VP"));
            const r = o.RulebookElements.createImg.bind(o.RulebookElements);
            this.createPageSectionTable(a, [
                [r("settlement_gold.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("bg.section1.buildASettlement")],
                [r("city_gold.svg"), `<span class="text-nowrap">${n.RulebookDictionary.get("bg.section1.1point")}</span>`, n.RulebookDictionary.get("bg.section1.upgradeSettlementToCity")],
                [r("card_vp.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("bg.section1.buyVPDevelopmentCard")],
                [r("icon_longest_road.svg"), n.RulebookDictionary.get("bg.section1.2points"), n.RulebookDictionary.get("bg.section1.getLongestRoad")],
                [r("icon_largest_army.svg"), n.RulebookDictionary.get("bg.section1.2points"), n.RulebookDictionary.get("bg.section1.getLargestArmy")]
            ]), this.createPageSectionNote(a, n.RulebookDictionary.get("bg.section1.stealingAchievements"));
            const c = this.createPageSection(e, s.InitialPlacements);
            this.createPageSectionTitle(c, n.RulebookDictionary.get("bg.section2.title"), this.generateSharableLinkToPage(s.InitialPlacements)), this.createPageSectionParagraph(c, n.RulebookDictionary.get("bg.section2.placeOneSettlement", r("settlement_gold.svg").outerHTML, r("road_gold.svg").outerHTML)), this.createPageSectionParagraph(c, n.RulebookDictionary.get("bg.section2.collectingResources", r("settlement_gold.svg").outerHTML)), this.createPageSectionImageSpread(c, "rulebook/pagebg_initial_placements.gif"), this.createPageSectionNote(c, n.RulebookDictionary.get("bg.section2.placeSettlementsTwoRoadsApart"));
            const l = this.createPageSection(e, s.DiceRolls);
            this.createPageSectionTitle(l, n.RulebookDictionary.get("bg.section3.title"), this.generateSharableLinkToPage(s.DiceRolls)), this.createPageSectionParagraph(l, n.RulebookDictionary.get("bg.section3.afterInitialPlacements")), this.createPageSectionImageSpread(l, "rulebook/pagebg_dice_rolls.png"), this.createPageSectionParagraph(l, n.RulebookDictionary.get("bg.section3.diceRollProbability")), this.createPageSectionImageSpreadFull(l, "rulebook/pagebg_dice_probabilities.png");
            const h = this.createPageSection(e, s.CollectingResources);
            this.createPageSectionTitle(h, n.RulebookDictionary.get("bg.section4.title"), this.generateSharableLinkToPage(s.CollectingResources));
            const d = o.RulebookElements.createParagraphIn(void 0, n.RulebookDictionary.get("bg.section4.settlementsProduce", r("settlement_gold.svg").outerHTML)),
                u = o.RulebookElements.createParagraphIn(void 0, n.RulebookDictionary.get("bg.section4.citiesProduce", r("city_gold.svg").outerHTML));
            this.createPageSectionGrid(h, [d, u]), this.createPageSectionTable(h, [
                [r("card_lumber.svg"), r("card_brick.svg"), r("card_wool.svg"), r("card_grain.svg"), r("card_ore.svg")],
                [n.RulebookDictionary.get("misc.resource.lumber"), n.RulebookDictionary.get("misc.resource.brick"), n.RulebookDictionary.get("misc.resource.wool"), n.RulebookDictionary.get("misc.resource.grain"), n.RulebookDictionary.get("misc.resource.ore")]
            ]), this.createPageSectionImageSpread(h, "rulebook/pagebg_collecting_resources.gif"), this.createPageSectionNote(h, n.RulebookDictionary.get("bg.section4.ofEachResource"));
            const g = this.createPageSection(e, s.RobberAndDiscarding);
            this.createPageSectionTitle(g, n.RulebookDictionary.get("bg.section5.title"), this.generateSharableLinkToPage(s.RobberAndDiscarding)), this.createPageSectionTable(g, [
                [r("icon_robber.svg"), n.RulebookDictionary.get("bg.section5.when7Rolled")]
            ]);
            const m = o.RulebookElements.createDiv();
            o.RulebookElements.createElementIn(m, "h2", void 0, void 0, n.RulebookDictionary.get("bg.section5.discardToBank")), o.RulebookElements.createParagraphIn(m, n.RulebookDictionary.get("bg.section5.allPlayersOverDiscardLimit")), this.createPageSectionGrid(g, [r("rulebook/pagebg_discard.gif"), m]);
            const p = o.RulebookElements.createDiv();
            o.RulebookElements.createElementIn(p, "h2", void 0, void 0, n.RulebookDictionary.get("bg.section5.blockAndSteal")), o.RulebookElements.createParagraphIn(p, n.RulebookDictionary.get("bg.section5.moveRobber")), this.createPageSectionGrid(g, [r("rulebook/pagebg_stealing.gif"), p]);
            const C = this.createPageSection(e, s.BuildingAndBuyingCosts);
            this.createPageSectionTitle(C, n.RulebookDictionary.get("bg.section6.title"), this.generateSharableLinkToPage(s.BuildingAndBuyingCosts)), this.createPageSectionTable(C, [
                [r("road_gold.svg"), n.RulebookDictionary.get("misc.building.road"), "=", [r("card_lumber.svg"), r("card_brick.svg")], `${n.RulebookDictionary.get("misc.resource.lumber")} + ${n.RulebookDictionary.get("misc.resource.brick")}`],
                [r("settlement_gold.svg"), n.RulebookDictionary.get("misc.building.settlement"), "=", [r("card_lumber.svg"), r("card_brick.svg"), r("card_wool.svg"), r("card_grain.svg")], `${n.RulebookDictionary.get("misc.resource.lumber")} + ${n.RulebookDictionary.get("misc.resource.brick")} + ${n.RulebookDictionary.get("misc.resource.wool")} + ${n.RulebookDictionary.get("misc.resource.grain")}`],
                [r("city_gold.svg"), n.RulebookDictionary.get("bg.section6.upgradeToCity"), "=", [r("card_grain.svg"), r("card_grain.svg"), r("card_ore.svg"), r("card_ore.svg"), r("card_ore.svg")], `2 ${n.RulebookDictionary.get("misc.resource.grain")} + 3 ${n.RulebookDictionary.get("misc.resource.ore")}`],
                [r("icon_buy_dev_card.svg"), n.RulebookDictionary.get("misc.building.developmentCard"), "=", [r("card_wool.svg"), r("card_grain.svg"), r("card_ore.svg")], `${n.RulebookDictionary.get("misc.resource.wool")} + ${n.RulebookDictionary.get("misc.resource.grain")} + ${n.RulebookDictionary.get("misc.resource.ore")}`]
            ]), this.createPageSectionNote(C, n.RulebookDictionary.get("bg.section6.buildLimit"));
            const y = this.createPageSection(e, s.DevelopmentCards);
            this.createPageSectionTitle(y, n.RulebookDictionary.get("bg.section7.title"), this.generateSharableLinkToPage(s.DevelopmentCards)), this.createPageSectionParagraph(y, n.RulebookDictionary.get("bg.section7.developmentCardExplanation")), this.createPageSectionTable(y, [
                [r("card_knight.svg"), n.RulebookDictionary.get("bg.section7.14Knights"), n.RulebookDictionary.get("bg.section7.devCardKnight")],
                [r("card_roadbuilding.svg"), n.RulebookDictionary.get("bg.section7.2RoadBuilding"), n.RulebookDictionary.get("bg.section7.devCardRoadBuilding")],
                [r("card_yearofplenty.svg"), n.RulebookDictionary.get("bg.section7.2YearOfPlenty"), n.RulebookDictionary.get("bg.section7.devCardYearOfPlenty")],
                [r("card_monopoly.svg"), n.RulebookDictionary.get("bg.section7.2Monopoly"), n.RulebookDictionary.get("bg.section7.devCardMonopoly")],
                [r("card_vp.svg"), n.RulebookDictionary.get("bg.section7.5VictoryPoint"), n.RulebookDictionary.get("bg.section7.devCardVictoryPoint")]
            ]), this.createPageSectionNote(y, n.RulebookDictionary.get("bg.section7.oneDevCardPerTurn"));
            const S = this.createPageSection(e, s.Trading);
            return this.createPageSectionTitle(S, n.RulebookDictionary.get("bg.section8.title"), this.generateSharableLinkToPage(s.Trading)), this.createPageSectionParagraph(S, n.RulebookDictionary.get("bg.section8.tradeDescription")), this.createPageSectionTable(S, [
                [r("bank.svg"), n.RulebookDictionary.get("bg.section8.tradeWithBank")],
                [r("port.svg"), n.RulebookDictionary.get("bg.section8.tradeWith3:1")],
                [
                    [r("port_lumber.svg"), r("port_brick.svg"), r("port_wool.svg"), r("port_grain.svg"), r("port_ore.svg")], n.RulebookDictionary.get("bg.section8.tradeWith2:1")
                ],
                [r("icon_trade.svg"), n.RulebookDictionary.get("bg.section8.tradeWithPlayers")]
            ]), this.createPageSectionImageSpread(S, "rulebook/pagebg_trade.gif"), e
        }
        static createPageNavigation() {
            this.setRulebookPage(i.RulebookPage.Classic4P);
            const e = o.RulebookElements.createElement();
            return this.generatePageNavigationOption(e, s.Video, "icon_youtuber.png", n.RulebookDictionary.get("bg.section0.title"), n.RulebookDictionary.get("bg.section0.6minutes"), !0), this.generatePageNavigationOption(e, s.HowToWin, "icon_trophy.svg", n.RulebookDictionary.get("bg.section1.title")), this.generatePageNavigationOption(e, s.InitialPlacements, "settlement_gold.svg", n.RulebookDictionary.get("bg.section2.title")), this.generatePageNavigationOption(e, s.DiceRolls, "dice_4.svg", n.RulebookDictionary.get("bg.section3.title")), this.generatePageNavigationOption(e, s.CollectingResources, "card_lumber.svg", n.RulebookDictionary.get("bg.section4.title")), this.generatePageNavigationOption(e, s.RobberAndDiscarding, "icon_robber.svg", n.RulebookDictionary.get("bg.section5.title")), this.generatePageNavigationOption(e, s.BuildingAndBuyingCosts, "city_gold.svg", n.RulebookDictionary.get("bg.section6.title")), this.generatePageNavigationOption(e, s.DevelopmentCards, "icon_buy_dev_card.svg", n.RulebookDictionary.get("bg.section7.title")), this.generatePageNavigationOption(e, s.Trading, "icon_trade.svg", n.RulebookDictionary.get("bg.section8.title")), e
        }
    }
    t.RulebookPageBG = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RulebookPageCK = void 0;
    const i = a(42),
        o = a(43),
        n = a(34),
        r = a(59);
    var s;
    ! function(e) {
        e.Video = "section0", e.NewGamePieces = "section1", e.InitialPlacements = "section2", e.TypesOfDice = "section3", e.CollectingCommodities = "section4", e.Barbarians = "section5", e.Knights = "section6", e.BarbariansVSKnights = "section7", e.NoEarlyRobber = "section8", e.CityWalls = "section9", e.CityImprovements = "section10", e.Metropolis = "section11", e.ProgressCards = "section12", e.ScienceCards = "section13", e.PoliticsCards = "section14", e.TradeCards = "section15", e.PointsToWin = "section16"
    }(s || (s = {}));
    class c extends r.RulebookPageGenerator {
        static createPageContent() {
            this.setRulebookPage(i.RulebookPage.CitiesAndKnights4P);
            const e = o.RulebookElements.createElement(),
                t = o.RulebookElements.createImg.bind(o.RulebookElements);
            this.createPageTitle(e, n.RulebookDictionary.get("ck.title"));
            const a = this.createPageSection(e, s.Video);
            o.RulebookElements.createVideoIn(a, "https://www.youtube.com/embed/4xBeeaXuI78");
            const r = this.createPageSection(e, s.NewGamePieces);
            this.createPageSectionTitle(r, n.RulebookDictionary.get("ck.section1.title"), this.generateSharableLinkToPage(s.NewGamePieces)), this.createPageSectionTable(r, [
                [
                    [t("dice_red_1.svg"), t("dice_event_barbarian.svg"), t("dice_event_science.svg"), t("dice_event_trade.svg"), t("dice_event_politics.svg")], n.RulebookDictionary.get("ck.section1.redAndEventDice")
                ],
                [
                    [t("icon_barbarian_ship.svg"), t("barbarian_tracker_hex_attack.svg")], n.RulebookDictionary.get("ck.section1.barbarianTracker")
                ],
                [
                    [t("knight_level1_active_gold.svg"), t("icon_swords.svg")], n.RulebookDictionary.get("ck.section1.knightsStrength")
                ],
                [
                    [t("card_cloth.svg"), t("card_coin.svg"), t("card_paper.svg")], n.RulebookDictionary.get("ck.section1.commoditityCards")
                ],
                [t("rulebook/pageck_city_improvement_tracker.png"), n.RulebookDictionary.get("ck.section1.cityImprovements")],
                [t("stat_metropolis.svg"), n.RulebookDictionary.get("ck.section1.metropolis")],
                [t("card_progress_back.svg"), n.RulebookDictionary.get("ck.section1.progressCards")],
                [t("city_wall_gold.svg"), n.RulebookDictionary.get("ck.section1.cityWalls")]
            ]);
            const c = this.createPageSection(e, s.InitialPlacements);
            this.createPageSectionTitle(c, n.RulebookDictionary.get("ck.section2.title"), this.generateSharableLinkToPage(s.InitialPlacements)), this.createPageSectionParagraph(c, n.RulebookDictionary.get("ck.section2.placeSettlementAndCity", t("city_gold.svg").outerHTML, t("settlement_gold.svg").outerHTML));
            const l = this.createPageSection(e, s.TypesOfDice);
            this.createPageSectionTitle(l, n.RulebookDictionary.get("ck.section3.title"), this.generateSharableLinkToPage(s.TypesOfDice)), this.createPageSectionParagraph(l, n.RulebookDictionary.get("ck.section3.thereAre3TypesOfDice")), this.createPageSectionTable(l, [
                [
                    [t("dice_red_1.svg"), t("dice_6.svg")], n.RulebookDictionary.get("ck.section3.redDiceDescription", this.createPageSectionLink(void 0, s.ProgressCards, "click here").outerHTML)
                ]
            ]), this.createPageSectionTable(l, [
                [
                    [t("dice_event_barbarian.svg"), t("dice_event_science.svg"), t("dice_event_politics.svg"), t("dice_event_trade.svg")], n.RulebookDictionary.get("ck.section3.eventDiceDescription")
                ]
            ]), this.createPageSectionParagraph(l, n.RulebookDictionary.get("ck.section3.barbarianShip"));
            const h = this.createPageSection(e, s.CollectingCommodities);
            this.createPageSectionTitle(h, n.RulebookDictionary.get("ck.section4.title"), this.generateSharableLinkToPage(s.CollectingCommodities)), this.createPageSectionParagraph(h, n.RulebookDictionary.get("ck.section4.cityProduction")), this.createPageSectionTable(h, [
                [t("city_gold.svg"), "+", t("tile_wool.svg"), "=", [t("card_wool.svg"), t("card_cloth.svg")], `${n.RulebookDictionary.get("misc.resource.wool")} & ${n.RulebookDictionary.get("misc.resource.cloth")}`],
                [t("city_gold.svg"), "+", t("tile_ore.svg"), "=", [t("card_ore.svg"), t("card_coin.svg")], `${n.RulebookDictionary.get("misc.resource.ore")} & ${n.RulebookDictionary.get("misc.resource.coin")}`],
                [t("city_gold.svg"), "+", t("tile_lumber.svg"), "=", [t("card_lumber.svg"), t("card_paper.svg")], `${n.RulebookDictionary.get("misc.resource.lumber")} & ${n.RulebookDictionary.get("misc.resource.paper")}`]
            ]), this.createPageSectionParagraph(h, n.RulebookDictionary.get("ck.section4.importantToKnow")), this.createPageSectionList(h, "ol", [n.RulebookDictionary.get("ck.section4.onlyCities"), n.RulebookDictionary.get("ck.section4.countTowardsDiscardLimit"), n.RulebookDictionary.get("ck.section4.canBeTraded"), n.RulebookDictionary.get("ck.section4.mustHaveCity")]);
            const d = this.createPageSection(e, s.Barbarians);
            this.createPageSectionTitle(d, n.RulebookDictionary.get("ck.section5.title"), this.generateSharableLinkToPage(s.Barbarians));
            const u = t("rulebook/ck_barbarian_tracker_example.png");
            u.classList.add("img-large"), this.createPageSectionTable(d, [
                [u, n.RulebookDictionary.get("ck.section5.barbariansDescription", t("city_red.svg").outerHTML, t("city_green.svg").outerHTML, t("city_gold.svg").outerHTML)]
            ]);
            const g = this.createPageSection(e, s.Knights);
            this.createPageSectionTitle(g, n.RulebookDictionary.get("ck.section6.title"), this.generateSharableLinkToPage(s.Knights)), this.createPageSectionSubtitle(g, n.RulebookDictionary.get("ck.section6.purchasingAKnight")), this.createPageSectionTable(g, [
                [t("knight_level1_inactive_gold.svg"), "=", [t("card_wool.svg"), t("card_ore.svg")], n.RulebookDictionary.get("ck.section6.knightCost")]
            ]);
            const m = o.RulebookElements.createDiv();
            this.createPageSectionList(m, "ul", [n.RulebookDictionary.get("ck.section6.canBePlacedAnywhere"), n.RulebookDictionary.get("ck.section6.canBreakAnotherRoad")]), this.createPageSectionGrid(g, [t("rulebook/pageck_placing_knights.png"), m]), this.createPageSectionSubtitle(g, n.RulebookDictionary.get("ck.section6.activatingAKnight")), this.createPageSectionTable(g, [
                [t("knight_level1_active_gold.svg"), "=", t("card_grain.svg"), n.RulebookDictionary.get("ck.section6.activatingKnightCosts")]
            ]), this.createPageSectionParagraph(g, n.RulebookDictionary.get("ck.section6.youCannotPlace")), this.createPageSectionSubtitle(g, n.RulebookDictionary.get("ck.section6.attackPlayer")), this.createPageSectionParagraph(g, n.RulebookDictionary.get("ck.section6.knightLimit"));
            const p = o.RulebookElements.createParagraphIn(void 0, n.RulebookDictionary.get("ck.section6.basicKnights", t("knight_level1_active_gold.svg").outerHTML)),
                C = o.RulebookElements.createParagraphIn(void 0, n.RulebookDictionary.get("ck.section6.strongKnights", t("knight_level2_active_gold.svg").outerHTML)),
                y = o.RulebookElements.createParagraphIn(void 0, n.RulebookDictionary.get("ck.section6.mightyKnights", t("knight_level3_active_gold.svg").outerHTML));
            this.createPageSectionGrid(g, [p, C, y]), this.createPageSectionSubtitle(g, n.RulebookDictionary.get("ck.section6.upgradingKnights")), this.createPageSectionTable(g, [
                [t("knight_level2_active_gold.svg"), "=", [t("card_wool.svg"), t("card_ore.svg")], n.RulebookDictionary.get("ck.section6.upgradingKnightsCost")]
            ]), this.createPageSectionParagraph(g, n.RulebookDictionary.get("ck.section6.upgradingKnightsRules")), this.createPageSectionParagraph(g, n.RulebookDictionary.get("ck.section6.knightActions")), this.createPageSectionList(g, "ol", [n.RulebookDictionary.get("ck.section6.moveKnight"), n.RulebookDictionary.get("ck.section6.displacingKnight"), n.RulebookDictionary.get("ck.section6.chasingRobber")]);
            const S = this.createPageSection(e, s.BarbariansVSKnights);
            this.createPageSectionTitle(S, n.RulebookDictionary.get("ck.section7.title"), this.generateSharableLinkToPage(s.BarbariansVSKnights)), this.createPageSectionParagraph(S, n.RulebookDictionary.get("ck.section7.whenBarbariansAttack")), this.createPageSectionTable(S, [
                [t("icon_barbarian_ship.svg"), n.RulebookDictionary.get("ck.section7.calculateBarbarianStrength"), t("city_gold.svg")],
                [
                    [t("knight_level1_active_gold.svg"), t("knight_level2_active_gold.svg"), t("knight_level3_active_gold.svg")], n.RulebookDictionary.get("ck.section7.calculateKnightStrength"), t("icon_swords.svg")
                ]
            ]);
            const v = o.RulebookElements.createDiv();
            o.RulebookElements.createElementIn(v, "h2", void 0, void 0, n.RulebookDictionary.get("ck.section7.ifStrengthIsEqual")), this.createPageSectionList(v, "ol", [n.RulebookDictionary.get("ck.section7.defenderOfColonist"), n.RulebookDictionary.get("ck.section7.defenderOfColonistDraw")]);
            const _ = o.RulebookElements.createDiv();
            o.RulebookElements.createElementIn(_, "h2", void 0, void 0, n.RulebookDictionary.get("ck.section7.barbariansWin")), this.createPageSectionList(_, "ol", [n.RulebookDictionary.get("ck.section7.playersLoseConsequence"), n.RulebookDictionary.get("ck.section7.playersLoseWithNoCities")]), this.createPageSectionGrid(S, [v, _]), this.createPageSectionParagraph(S, n.RulebookDictionary.get("ck.section7.afterAnAttack")), this.createPageSectionTable(S, [
                [t("icon_barbarian_ship.svg"), t("knight_level1_inactive_gold.svg")]
            ]), this.createPageSectionNote(S, n.RulebookDictionary.get("ck.section7.playerDestroyCityNote"));
            const P = this.createPageSection(e, s.NoEarlyRobber);
            this.createPageSectionTitle(P, n.RulebookDictionary.get("ck.section8.title"), this.generateSharableLinkToPage(s.NoEarlyRobber)), this.createPageSectionParagraph(P, n.RulebookDictionary.get("ck.section8.noEarlyRobber", t("icon_robber.svg").outerHTML));
            const T = this.createPageSection(e, s.CityWalls);
            this.createPageSectionTitle(T, n.RulebookDictionary.get("ck.section9.title"), this.generateSharableLinkToPage(s.CityWalls)), this.createPageSectionParagraph(T, n.RulebookDictionary.get("ck.section9.cityWallsDescription")), this.createPageSectionTable(T, [
                [t("city_wall_gold.svg"), "=", [t("card_brick.svg"), t("card_brick.svg")], n.RulebookDictionary.get("ck.section9.cityWallsCost")]
            ]), this.createPageSectionParagraph(T, n.RulebookDictionary.get("ck.section9.cityWallsLimitations")), this.createPageSectionList(T, "ol", [n.RulebookDictionary.get("ck.section9.maximumCityWalls"), n.RulebookDictionary.get("ck.section9.oneCityWallPerCity"), n.RulebookDictionary.get("ck.section9.cityDestroyed")]);
            const b = this.createPageSection(e, s.CityImprovements);
            this.createPageSectionTitle(b, n.RulebookDictionary.get("ck.section10.title"), this.generateSharableLinkToPage(s.CityImprovements)), this.createPageSectionParagraph(b, n.RulebookDictionary.get("ck.section10.differentCommodities")), this.createPageSectionGrid(b, [this.createPageSectionDiv(void 0, this.createPageSectionTable(void 0, [
                [t("card_cloth.svg"), n.RulebookDictionary.get("ck.section10.tradeImprovement")]
            ])), this.createPageSectionDiv(void 0, this.createPageSectionTable(void 0, [
                [t("card_coin.svg"), n.RulebookDictionary.get("ck.section10.politicsImprovement")]
            ])), this.createPageSectionDiv(void 0, this.createPageSectionTable(void 0, [
                [t("card_paper.svg"), n.RulebookDictionary.get("ck.section10.scienceImprovement")]
            ]))]), this.createPageSectionParagraph(b, n.RulebookDictionary.get("ck.section10.cityImprovementLimitations")), this.createPageSectionList(b, "ol", [n.RulebookDictionary.get("ck.section10.youMustHaveOneCity"), n.RulebookDictionary.get("ck.section10.cityImprovementsAffectProgressCards"), n.RulebookDictionary.get("ck.section10.cityImprovementCostIncrease")]), this.createPageSectionSubtitle(b, n.RulebookDictionary.get("ck.section10.upgradingCities")), this.createPageSectionParagraph(b, n.RulebookDictionary.get("ck.section10.cityImprovementCostDescription")), this.createPageSectionGrid(b, [this.createPageSectionTable(void 0, [
                [n.RulebookDictionary.get("ck.section10.level1"), [t("card_cloth.svg")]],
                [n.RulebookDictionary.get("ck.section10.level2"), [t("card_cloth.svg"), t("card_cloth.svg")]],
                [n.RulebookDictionary.get("ck.section10.level3"), [t("card_cloth.svg"), t("card_cloth.svg"), t("card_cloth.svg")]],
                [n.RulebookDictionary.get("ck.section10.level4"), [t("card_cloth.svg"), t("card_cloth.svg"), t("card_cloth.svg"), t("card_cloth.svg")]],
                [n.RulebookDictionary.get("ck.section10.level5"), [t("card_cloth.svg"), t("card_cloth.svg"), t("card_cloth.svg"), t("card_cloth.svg"), t("card_cloth.svg")]]
            ])]), this.createPageSectionSubtitle(b, n.RulebookDictionary.get("ck.section10.level3Unlocks")), this.createPageSectionGrid(b, [o.RulebookElements.createDiv(void 0, void 0, n.RulebookDictionary.get("ck.section10.tradingHouse") + t("icon_tradehouse.svg").outerHTML), o.RulebookElements.createDiv(void 0, void 0, n.RulebookDictionary.get("ck.section10.fortress") + t("icon_fortress.svg").outerHTML), o.RulebookElements.createDiv(void 0, void 0, n.RulebookDictionary.get("ck.section10.aqueduct") + t("icon_aqueduct.svg").outerHTML)]);
            const f = this.createPageSection(e, s.Metropolis);
            this.createPageSectionTitle(f, n.RulebookDictionary.get("ck.section11.title"), this.generateSharableLinkToPage(s.Metropolis)), this.createPageSectionTable(f, [
                [t("rulebook/pageck_city_improvement_tracker.png"), t("stat_metropolis.svg"), n.RulebookDictionary.get("ck.section11.metropolisDescription", t("icon_trophy.svg").outerHTML)]
            ]), this.createPageSectionParagraph(f, n.RulebookDictionary.get("ck.section11.metropolisLimitations")), this.createPageSectionList(f, "ol", [n.RulebookDictionary.get("ck.section11.oneMetropolis"), n.RulebookDictionary.get("ck.section11.playersCanStealMetropolis"), n.RulebookDictionary.get("ck.section11.barbariansCannotDestroyMetropolis"), n.RulebookDictionary.get("ck.section11.playersCanHaveMoreThanOneMetropolis"), n.RulebookDictionary.get("ck.section11.playersMustHaveAnAvailableCity")]);
            const I = this.createPageSection(e, s.ProgressCards);
            this.createPageSectionTitle(I, n.RulebookDictionary.get("ck.section12.title"), this.generateSharableLinkToPage(s.ProgressCards)), this.createPageSectionTable(I, [
                [t("card_progress_back.svg"), n.RulebookDictionary.get("ck.section12.progressCardsReplaceDevelopmentCards")]
            ]), this.createPageSectionParagraph(I, n.RulebookDictionary.get("ck.section12.collectProgressCards")), this.createPageSectionImageSpreadFull(I, "rulebook/pageck_how_to_get_progress_cards.png"), this.createPageSectionParagraph(I, n.RulebookDictionary.get("ck.section12.progressCardsLimitations")), this.createPageSectionList(I, "ol", [n.RulebookDictionary.get("ck.section12.handLimit"), n.RulebookDictionary.get("ck.section12.5thCardDiscard"), n.RulebookDictionary.get("ck.section12.victoryPointsDiscard")]);
            const E = this.createPageSection(e, s.ScienceCards);
            this.createPageSectionTitle(E, n.RulebookDictionary.get("ck.section13.title"), this.generateSharableLinkToPage(s.ScienceCards)), this.createPageSectionTable(E, [
                [t("card_progress_science_alchemist.svg"), n.RulebookDictionary.get("ck.section13.2Alchemist"), n.RulebookDictionary.get("ck.section13.alchemistDescription")],
                [t("card_progress_science_crane.svg"), n.RulebookDictionary.get("ck.section13.2Crane"), n.RulebookDictionary.get("ck.section13.craneDescription")],
                [t("card_progress_science_engineer.svg"), n.RulebookDictionary.get("ck.section13.1Engineer"), n.RulebookDictionary.get("ck.section13.engineerDescription")],
                [t("card_progress_science_inventor.svg"), n.RulebookDictionary.get("ck.section13.2Inventor"), n.RulebookDictionary.get("ck.section13.inventorDescription")],
                [t("card_progress_science_irrigation.svg"), n.RulebookDictionary.get("ck.section13.2Irrigation"), n.RulebookDictionary.get("ck.section13.irrigationDescription")],
                [t("card_progress_science_medicine.svg"), n.RulebookDictionary.get("ck.section13.2Medicine"), n.RulebookDictionary.get("ck.section13.medicineDescription")],
                [t("card_progress_science_mining.svg"), n.RulebookDictionary.get("ck.section13.2Mining"), n.RulebookDictionary.get("ck.section13.miningDescription")],
                [t("card_progress_science_printer.svg"), n.RulebookDictionary.get("ck.section13.1Printer"), n.RulebookDictionary.get("ck.section13.printerDescription")],
                [t("card_progress_science_road_building.svg"), n.RulebookDictionary.get("ck.section13.2RoadBuilding"), n.RulebookDictionary.get("ck.section13.roadBuildingDescription")],
                [t("card_progress_science_smith.svg"), n.RulebookDictionary.get("ck.section13.2Smith"), n.RulebookDictionary.get("ck.section13.smithDescription")]
            ]);
            const w = this.createPageSection(e, s.PoliticsCards);
            this.createPageSectionTitle(w, n.RulebookDictionary.get("ck.section14.title"), this.generateSharableLinkToPage(s.PoliticsCards)), this.createPageSectionTable(w, [
                [t("card_progress_politics_bishop.svg"), n.RulebookDictionary.get("ck.section14.2Bishop"), n.RulebookDictionary.get("ck.section14.bishopDescription")],
                [t("card_progress_politics_constitution.svg"), n.RulebookDictionary.get("ck.section14.1Constitution"), n.RulebookDictionary.get("ck.section14.constitutionDescription")],
                [t("card_progress_politics_deserter.svg"), n.RulebookDictionary.get("ck.section14.2Deserter"), n.RulebookDictionary.get("ck.section14.deserterDescription")],
                [t("card_progress_politics_diplomat.svg"), n.RulebookDictionary.get("ck.section14.2Diplomat"), n.RulebookDictionary.get("ck.section14.diplomatDescription")],
                [t("card_progress_politics_intrigue.svg"), n.RulebookDictionary.get("ck.section14.2Intrigue"), n.RulebookDictionary.get("ck.section14.intrigueDescription")],
                [t("card_progress_politics_saboteur.svg"), n.RulebookDictionary.get("ck.section14.2Saboteur"), n.RulebookDictionary.get("ck.section14.saboteurDescription")],
                [t("card_progress_politics_spy.svg"), n.RulebookDictionary.get("ck.section14.3Spy"), n.RulebookDictionary.get("ck.section14.spyDescription")],
                [t("card_progress_politics_warlord.svg"), n.RulebookDictionary.get("ck.section14.2Warlord"), n.RulebookDictionary.get("ck.section14.warlordDescription")],
                [t("card_progress_politics_wedding.svg"), n.RulebookDictionary.get("ck.section14.2Wedding"), n.RulebookDictionary.get("ck.section14.weddingDescription")]
            ]);
            const k = this.createPageSection(e, s.TradeCards);
            this.createPageSectionTitle(k, n.RulebookDictionary.get("ck.section15.title"), this.generateSharableLinkToPage(s.TradeCards)), this.createPageSectionTable(k, [
                [t("card_progress_trade_commercial_harbor.svg"), n.RulebookDictionary.get("ck.section15.2CommercialHarbor"), n.RulebookDictionary.get("ck.section15.commericalHarborDescription")],
                [t("card_progress_trade_master_merchant.svg"), n.RulebookDictionary.get("ck.section15.2MasterMerchant"), n.RulebookDictionary.get("ck.section15.masterMerchantDescription")],
                [t("card_progress_trade_merchant_fleet.svg"), n.RulebookDictionary.get("ck.section15.2MerchantFleet"), n.RulebookDictionary.get("ck.section15.merchantFleetDescription")],
                [t("card_progress_trade_merchant.svg"), n.RulebookDictionary.get("ck.section15.6Merchant"), n.RulebookDictionary.get("ck.section15.merchantDescription")],
                [t("card_progress_trade_resource_monopoly.svg"), n.RulebookDictionary.get("ck.section15.4ResourceMonopoly"), n.RulebookDictionary.get("ck.section15.resourceMonopolyDescription")],
                [t("card_progress_trade_commodity_monopoly.svg"), n.RulebookDictionary.get("ck.section15.2TradeMonopoly"), n.RulebookDictionary.get("ck.section15.tradeMonopolyDescription")]
            ]);
            const A = this.createPageSection(e, s.PointsToWin);
            return this.createPageSectionTitle(A, n.RulebookDictionary.get("ck.section16.title"), this.generateSharableLinkToPage(s.PointsToWin)), this.createPageSectionParagraph(A, n.RulebookDictionary.get("ck.section16.firstPersonTo13VP")), this.createPageSectionNote(A, n.RulebookDictionary.get("ck.section16.winOnYourTurn")), this.createPageSectionParagraph(A, n.RulebookDictionary.get("ck.section16.getPointsDoingTheFollowing")), this.createPageSectionTable(A, [
                [t("settlement_gold.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("bg.section1.buildASettlement")],
                [t("city_gold.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("bg.section1.upgradeSettlementToCity")],
                [t("icon_longest_road.svg"), n.RulebookDictionary.get("bg.section1.2points"), n.RulebookDictionary.get("bg.section1.getLongestRoad")],
                [t("icon_defender.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("ck.section16.highestKnightStrength")],
                [t("card_progress_trade_merchant.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("ck.section16.controlOfMerchant")],
                [t("card_progress_back.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("ck.section16.progressCardVP")],
                [t("stat_metropolis.svg"), n.RulebookDictionary.get("bg.section1.2points"), n.RulebookDictionary.get("ck.section16.haveAMetropolis")]
            ]), e
        }
        static createPageNavigation() {
            this.setRulebookPage(i.RulebookPage.CitiesAndKnights4P);
            const e = o.RulebookElements.createElement();
            return this.generatePageNavigationOption(e, s.Video, "icon_youtuber.png", n.RulebookDictionary.get("ck.section0.title"), n.RulebookDictionary.get("ck.section0.7minutes"), !0), this.generatePageNavigationOption(e, s.NewGamePieces, "rulebook/icon_new.svg", n.RulebookDictionary.get("ck.section1.title")), this.generatePageNavigationOption(e, s.InitialPlacements, "city_gold.svg", n.RulebookDictionary.get("ck.section2.title")), this.generatePageNavigationOption(e, s.TypesOfDice, "dice_red_4.svg", n.RulebookDictionary.get("ck.section3.title")), this.generatePageNavigationOption(e, s.CollectingCommodities, "card_paper.svg", n.RulebookDictionary.get("ck.section4.title")), this.generatePageNavigationOption(e, s.Barbarians, "icon_barbarian_ship.svg", n.RulebookDictionary.get("ck.section5.title")), this.generatePageNavigationOption(e, s.Knights, "knight_level2_active_black.svg", n.RulebookDictionary.get("ck.section6.title")), this.generatePageNavigationOption(e, s.BarbariansVSKnights, "icon_swords.svg", n.RulebookDictionary.get("ck.section7.title")), this.generatePageNavigationOption(e, s.NoEarlyRobber, "icon_robber.svg", n.RulebookDictionary.get("ck.section8.title")), this.generatePageNavigationOption(e, s.CityWalls, "city_wall_gold.svg", n.RulebookDictionary.get("ck.section9.title")), this.generatePageNavigationOption(e, s.CityImprovements, "rulebook/pageck_city_improvement_tracker.png", n.RulebookDictionary.get("ck.section10.title")), this.generatePageNavigationOption(e, s.Metropolis, "stat_metropolis.svg", n.RulebookDictionary.get("ck.section11.title")), this.generatePageNavigationOption(e, s.ProgressCards, "card_progress_back.svg", n.RulebookDictionary.get("ck.section12.title")), this.generatePageNavigationOption(e, s.ScienceCards, "card_progress_science_back.svg", n.RulebookDictionary.get("ck.section13.title")), this.generatePageNavigationOption(e, s.PoliticsCards, "card_progress_politics_back.svg", n.RulebookDictionary.get("ck.section14.title")), this.generatePageNavigationOption(e, s.TradeCards, "card_progress_trade_back.svg", n.RulebookDictionary.get("ck.section15.title")), this.generatePageNavigationOption(e, s.PointsToWin, "icon_trophy.svg", n.RulebookDictionary.get("ck.section16.title")), e
        }
    }
    t.RulebookPageCK = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RulebookPageClassic56P = void 0;
    const i = a(42),
        o = a(43),
        n = a(34),
        r = a(59);
    var s;
    ! function(e) {
        e.SpecialBuildPhase = "section1", e.AdditionalResources = "section2", e.CitiesAndKnights56 = "section3"
    }(s || (s = {}));
    class c extends r.RulebookPageGenerator {
        static createPageContent() {
            this.setRulebookPage(i.RulebookPage.Classic56P);
            const e = o.RulebookElements.createElement(),
                t = o.RulebookElements.createImg.bind(o.RulebookElements);
            this.createPageTitle(e, n.RulebookDictionary.get("56p.title"));
            const a = this.createPageSection(e, s.SpecialBuildPhase);
            this.createPageSectionTitle(a, n.RulebookDictionary.get("56p.section1.title"), this.generateSharableLinkToPage(s.SpecialBuildPhase)), this.createPageSectionTable(a, [
                [t("icon_special_build_phase_flag.svg"), n.RulebookDictionary.get("56p.section1.clickRedFlag")]
            ]), this.createPageSectionGrid(a, [o.RulebookElements.createDiv(void 0, void 0, n.RulebookDictionary.get("56p.section1.specialBuildPhaseYouCan", t("road_gold.svg").outerHTML, t("settlement_gold.svg").outerHTML, t("city_gold.svg").outerHTML, t("icon_buy_dev_card.svg").outerHTML)), o.RulebookElements.createDiv(void 0, void 0, n.RulebookDictionary.get("56p.section1.specialBuildPhaseYouCant"))]);
            const r = this.createPageSection(e, s.AdditionalResources);
            this.createPageSectionTitle(r, n.RulebookDictionary.get("56p.section2.title"), this.generateSharableLinkToPage(s.AdditionalResources)), this.createPageSectionSubtitle(r, n.RulebookDictionary.get("56p.section2.subtitleClassic56P")), this.createPageSectionTable(r, [
                [t("tile_lumber.svg"), n.RulebookDictionary.get("56p.section2.numberOfTiles"), n.RulebookDictionary.get("56p.section2.30Tiles")],
                [t("card_lumber.svg"), n.RulebookDictionary.get("56p.section2.numberOfResourceCards"), "<b>24</b>"],
                [t("card_devcardback.svg"), n.RulebookDictionary.get("56p.section2.numberOfDevelopmentCards"), "<b>34</b>"]
            ]), this.createPageSectionTable(r, [
                [t("card_knight.svg"), t("card_vp.svg"), t("card_yearofplenty.svg"), t("card_roadbuilding.svg"), t("card_monopoly.svg")],
                ["<b>20</b>", "<b>5</b>", "<b>3</b>", "<b>3</b>", "<b>3</b>"]
            ]).classList.add("center"), this.createPageSectionSubtitle(r, n.RulebookDictionary.get("56p.section2.subtitleClassic78P")), this.createPageSectionTable(r, [
                [t("tile_lumber.svg"), n.RulebookDictionary.get("56p.section2.numberOfTiles"), n.RulebookDictionary.get("56p.section2.37Tiles")],
                [t("card_lumber.svg"), n.RulebookDictionary.get("56p.section2.numberOfResourceCards"), "<b>29</b>"],
                [t("card_devcardback.svg"), n.RulebookDictionary.get("56p.section2.numberOfDevelopmentCards"), "<b>43</b>"]
            ]), this.createPageSectionTable(r, [
                [t("card_knight.svg"), t("card_vp.svg"), t("card_yearofplenty.svg"), t("card_roadbuilding.svg"), t("card_monopoly.svg")],
                ["<b>26</b>", "<b>5</b>", "<b>4</b>", "<b>4</b>", "<b>4</b>"]
            ]).classList.add("center");
            const c = this.createPageSection(e, s.CitiesAndKnights56);
            this.createPageSectionTitle(c, n.RulebookDictionary.get("56p.section3.title"), this.generateSharableLinkToPage(s.CitiesAndKnights56));
            const l = o.RulebookElements.createPageNavigationLink(i.RulebookPage.CitiesAndKnights4P, n.RulebookDictionary.get("56p.section3.citiesAndKnightsRules"));
            return this.createPageSectionTable(c, [
                [t("knight_level1_active_gold.svg"), n.RulebookDictionary.get("56p.section3.referToCitiesAndKnights", l.outerHTML)]
            ]), this.createPageSectionGrid(c, [o.RulebookElements.createDiv(void 0, void 0, n.RulebookDictionary.get("56p.section3.citiesAndKnightsYouCan")), o.RulebookElements.createDiv(void 0, void 0, n.RulebookDictionary.get("56p.section3.citiesAndKnightsYouCant"))]), this.createPageSectionSpacer(c, 300), e
        }
        static createPageNavigation() {
            this.setRulebookPage(i.RulebookPage.Classic56P);
            const e = o.RulebookElements.createElement();
            return this.generatePageNavigationOption(e, s.SpecialBuildPhase, "icon_special_build_phase_flag.svg", n.RulebookDictionary.get("56p.section1.title"), void 0, !0), this.generatePageNavigationOption(e, s.AdditionalResources, "rulebook/icon_new.svg", n.RulebookDictionary.get("56p.section2.title")), this.generatePageNavigationOption(e, s.CitiesAndKnights56, "rulebook/navigation_ck.png", n.RulebookDictionary.get("56p.section3.title")), e
        }
    }
    t.RulebookPageClassic56P = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RulebookPageSF = void 0;
    const i = a(42),
        o = a(43),
        n = a(34),
        r = a(59);
    var s;
    ! function(e) {
        e.Video = "section0", e.NewGamePieces = "section1", e.Ships = "section2", e.LongestTradeRoute = "section3", e.RobberAndPirate = "section4", e.DiscoveringNewIslands = "section5", e.GoldTiles = "section6", e.PointsToWin = "section7"
    }(s || (s = {}));
    class c extends r.RulebookPageGenerator {
        static createPageContent() {
            this.setRulebookPage(i.RulebookPage.Seafarers4P);
            const e = o.RulebookElements.createElement(),
                t = o.RulebookElements.createImg.bind(o.RulebookElements);
            this.createPageTitle(e, n.RulebookDictionary.get("sf.title"));
            const a = this.createPageSection(e, s.Video);
            o.RulebookElements.createVideoIn(a, "https://www.youtube.com/embed/JZJBx9EdFz4");
            const r = this.createPageSection(e, s.NewGamePieces);
            this.createPageSectionTitle(r, n.RulebookDictionary.get("sf.section1.title"), this.generateSharableLinkToPage(s.NewGamePieces)), this.createPageSectionTable(r, [
                [t("ship_gold_NorthWest.svg"), n.RulebookDictionary.get("sf.section1.shipsAllowYouToTravel")],
                [t("icon_pirate_ship.svg"), n.RulebookDictionary.get("sf.section1.pirateShipsBlockPlayers")],
                [t("rulebook/tile_sea.svg"), n.RulebookDictionary.get("sf.section1.seaHexes")],
                [t("tile_gold.svg"), n.RulebookDictionary.get("sf.section1.goldHexes")]
            ]);
            const c = this.createPageSection(e, s.Ships);
            this.createPageSectionTitle(c, n.RulebookDictionary.get("sf.section2.title"), this.generateSharableLinkToPage(s.Ships)), this.createPageSectionParagraph(c, n.RulebookDictionary.get("sf.section2.buildShips")), this.createPageSectionTable(c, [
                [t("ship_gold_NorthWest.svg"), n.RulebookDictionary.get("misc.building.ship"), "<b>=</b>", `${t("card_lumber.svg").outerHTML} ${t("card_wool.svg").outerHTML}`, `${n.RulebookDictionary.get("misc.resource.lumber")} + ${n.RulebookDictionary.get("misc.resource.wool")}`]
            ]), this.createPageSectionParagraph(c, n.RulebookDictionary.get("sf.section2.openAndClosedRoutes")), this.createPageSectionImageSpread(c, "rulebook/pagesf_ships.gif"), this.createPageSectionNote(c, n.RulebookDictionary.get("sf.section2.shipsMustConnect"));
            const l = this.createPageSection(e, s.LongestTradeRoute);
            this.createPageSectionTitle(l, n.RulebookDictionary.get("sf.section3.title"), this.generateSharableLinkToPage(s.LongestTradeRoute)), this.createPageSectionTable(l, [
                [t("icon_longest_road.svg"), n.RulebookDictionary.get("sf.section3.longestTradeRouteReplaces")]
            ]), this.createPageSectionImageSpread(l, "rulebook/pagesf_longest_trade_route.png");
            const h = this.createPageSection(e, s.RobberAndPirate);
            this.createPageSectionTitle(h, n.RulebookDictionary.get("sf.section4.title"), this.generateSharableLinkToPage(s.RobberAndPirate)), this.createPageSectionTable(h, [
                [t("icon_robber.svg"), n.RulebookDictionary.get("sf.section4.or"), t("icon_pirate_ship.svg"), n.RulebookDictionary.get("sf.section4.when7Rolls")]
            ]);
            const d = o.RulebookElements.createDiv();
            this.createPageSectionSubtitle(d, n.RulebookDictionary.get("sf.section4.pirateShipsDo")), this.createPageSectionList(d, "ul", [n.RulebookDictionary.get("sf.section4.canOnlyBePlacedOnSeaHex"), n.RulebookDictionary.get("sf.section4.allowPlayerToSteal"), n.RulebookDictionary.get("sf.section4.blockPlayersFromBuilding"), n.RulebookDictionary.get("sf.section4.blockPlayersFromMoving")]), this.createPageSectionGrid(h, [t("rulebook/pagesf_robber_&_pirate_ship.png"), d]);
            const u = this.createPageSection(e, s.DiscoveringNewIslands);
            this.createPageSectionTitle(u, n.RulebookDictionary.get("sf.section5.title"), this.generateSharableLinkToPage(s.DiscoveringNewIslands));
            const g = o.RulebookElements.createDiv();
            o.RulebookElements.createParagraphIn(g, n.RulebookDictionary.get("sf.section5.additional2VP", t("icon_trophy.svg").outerHTML)), o.RulebookElements.createImgIn(g, "rulebook/pagesf_discovering_islands.png");
            const m = o.RulebookElements.createDiv();
            o.RulebookElements.createParagraphIn(m, n.RulebookDictionary.get("sf.section5.someMapsMight", t("tile_fog.svg").outerHTML)), o.RulebookElements.createImgIn(m, "rulebook/pagesf_fog_tile.png"), this.createPageSectionGrid(u, [g, m]);
            const p = this.createPageSection(e, s.GoldTiles);
            this.createPageSectionTitle(p, n.RulebookDictionary.get("sf.section6.title"), this.generateSharableLinkToPage(s.GoldTiles)), this.createPageSectionTable(p, [
                [t("tile_gold.svg"), n.RulebookDictionary.get("sf.section6.goldHexesDescription")]
            ]);
            const C = this.createPageSection(e, s.PointsToWin);
            return this.createPageSectionTitle(C, n.RulebookDictionary.get("sf.section7.title"), this.generateSharableLinkToPage(s.PointsToWin)), this.createPageSectionParagraph(C, n.RulebookDictionary.get("sf.section7.firstPersonTo13VP", t("icon_trophy.svg").outerHTML)), this.createPageSectionTable(C, [
                [t("settlement_gold.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("bg.section1.buildASettlement")],
                [t("city_gold.svg"), n.RulebookDictionary.get("bg.section1.2points"), n.RulebookDictionary.get("bg.section1.upgradeSettlementToCity")],
                [t("icon_longest_road.svg"), n.RulebookDictionary.get("bg.section1.2points"), n.RulebookDictionary.get("sf.section7.longestTradeRoute")],
                [t("icon_largest_army.svg"), n.RulebookDictionary.get("bg.section1.2points"), n.RulebookDictionary.get("bg.section1.getLargestArmy")],
                [t("icon_chit.svg"), n.RulebookDictionary.get("bg.section1.2points"), n.RulebookDictionary.get("sf.section7.buildSettlementOnIsland")],
                [t("card_vp.svg"), n.RulebookDictionary.get("bg.section1.1point"), n.RulebookDictionary.get("bg.section1.buyVPDevelopmentCard")]
            ]), this.createPageSectionSpacer(e, 200), e
        }
        static createPageNavigation() {
            this.setRulebookPage(i.RulebookPage.Seafarers4P);
            const e = o.RulebookElements.createElement();
            return this.generatePageNavigationOption(e, s.Video, "icon_youtuber.png", n.RulebookDictionary.get("sf.section0.title"), n.RulebookDictionary.get("sf.section0.3minutes"), !0), this.generatePageNavigationOption(e, s.NewGamePieces, "rulebook/icon_new.svg", n.RulebookDictionary.get("sf.section1.title")), this.generatePageNavigationOption(e, s.Ships, "ship_gold_NorthWest.svg", n.RulebookDictionary.get("sf.section2.title")), this.generatePageNavigationOption(e, s.LongestTradeRoute, "ship_gold_NorthWest.svg", n.RulebookDictionary.get("sf.section3.title")), this.generatePageNavigationOption(e, s.RobberAndPirate, "icon_pirate_ship.svg", n.RulebookDictionary.get("sf.section4.title")), this.generatePageNavigationOption(e, s.DiscoveringNewIslands, "icon_robber.svg", n.RulebookDictionary.get("sf.section5.title")), this.generatePageNavigationOption(e, s.GoldTiles, "tile_gold.svg", n.RulebookDictionary.get("sf.section6.title")), this.generatePageNavigationOption(e, s.PointsToWin, "icon_trophy.svg", n.RulebookDictionary.get("sf.section7.title")), e
        }
    }
    t.RulebookPageSF = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRulebookController = void 0;
    const i = a(310),
        o = a(92),
        n = a(42),
        r = a(55),
        s = a(43),
        c = a(34);

    function l() {
        const e = location.pathname.replace(/(\/)(.*)(?=\/)/g, "");
        return (0, n.urlToPage)(e)
    }
    class h {
        constructor(e = !0) {
            this.shouldUpdateURL = e, this.language = (0, c.stringToLanguage)(window.rulebookLanguage), s.RulebookElements.setDocument(document), c.RulebookDictionary.setLanguage(this.language), this.rulebookSideNavigationElement = document.getElementById("rulebook-side-navigation"), this.rulebookContentElement = document.getElementById("rulebook-content"), this.rulebookLanguageSelector = document.getElementById(r.RulebookConfig.languageSelectorID), this.rulebookContentElement.addEventListener("scroll", this.updateSideNavSelectedLink.bind(this)), null != this.rulebookLanguageSelector && (this.rulebookLanguageSelector.onchange = this.languageSelectorOnChange.bind(this)), window.addEventListener("popstate", this.updateRouter.bind(this)), this.setupLinkListener()
        }
        updateRouter() {
            if (location.hash) return;
            const e = l();
            this.generatePage(e), h.setStyleOfCurrentPageLink(e)
        }
        generatePage(e) {
            this.rulebookContentElement.innerHTML = (0, n.generateRulebookContent)(e).outerHTML, this.rulebookSideNavigationElement.innerHTML = (0, o.generateRulebookSideNavigation)(e).outerHTML, this.rulebookContentElement.style.scrollBehavior = "auto", this.rulebookContentElement.scrollTop = 0, this.rulebookContentElement.style.scrollBehavior = ""
        }
        navigateTo(e) {
            if (this.generatePage(e), !this.shouldUpdateURL) return;
            const t = "/" + s.RulebookElements.generateRulebookURLPath(e);
            history.pushState(null, "", t)
        }
        async languageSelectorOnChange() {
            if (null == this.rulebookLanguageSelector) return;
            const e = this.rulebookLanguageSelector.value;
            await i.default.post(`/${r.RulebookConfig.rulebookRoute}/${r.RulebookConfig.setLanguageRoute}/${e}`, {}, {
                withCredentials: !0
            });
            const t = l();
            c.RulebookDictionary.setLanguage(e);
            const a = s.RulebookElements.generateRulebookURLPath(t);
            location.href = "/" + a
        }
        setupLinkListener() {
            document.body.addEventListener("click", e => {
                if (null == e.target) return;
                const t = e.target,
                    a = t.closest(`[${r.RulebookConfig.navigationSectionLinkAttribute}]`);
                null !== a && this.navigationSectionLinkClicked(e, a);
                const i = t.closest(`[${r.RulebookConfig.navigationPageLinkAttribute}]`);
                null !== i && this.navigationPageLinkClicked(e, i)
            })
        }
        navigationSectionLinkClicked(e, t) {
            if (this.shouldUpdateURL) return;
            e.preventDefault();
            const a = function(e) {
                    let t = d(e);
                    return t = t.replace("#", ""), t = t.replace("/", ""), t
                }(t.href),
                i = document.getElementById(a);
            null == i || i.scrollIntoView()
        }
        navigationPageLinkClicked(e, t) {
            e.preventDefault();
            const a = d(t.href),
                i = (0, n.urlToPage)(a);
            this.navigateTo(i), h.setStyleOfCurrentPageLink(i)
        }
        static setStyleOfCurrentPageLink(e) {
            const t = document.getElementById("rulebook-nav-link-" + e),
                a = r.RulebookConfig.navigationCurrentPageClass,
                i = document.querySelector("." + a);
            i && i.classList.remove(a), t.classList.add(a)
        }
        updateSideNavSelectedLink() {
            const e = this.rulebookContentElement.getBoundingClientRect().top;
            document.querySelectorAll("section[id]").forEach(t => {
                const a = t.offsetHeight,
                    i = t.getBoundingClientRect().top + window.pageYOffset - 50,
                    o = t.getAttribute("id"),
                    n = document.querySelector(`a[href="#${o}"]`);
                e > i && e <= i + a ? n.classList.add(r.RulebookConfig.navigationCurrentSectionClass) : n.classList.remove(r.RulebookConfig.navigationCurrentSectionClass)
            })
        }
    }

    function d(e) {
        return e.replace(location.origin, "")
    }
    t.UIRulebookController = h
}, , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectCards = void 0;
    const i = a(64),
        o = a(560),
        n = a(63),
        r = a(50);
    class s extends i.SectionBgAdaptiveView {
        constructor(e, t, a, i = !0) {
            super(), this.uiGameManager = e, this.selectCardFormat = a;
            const r = this.uiGameManager.canvasController,
                s = r.popupWidth;
            r.app.stage.addChild(this), this.popupImageAndDescription = t, this.addChild(this.popupImageAndDescription);
            const c = a.validCardsToSelect,
                l = this.popupImageAndDescription.y + this.popupImageAndDescription.height;
            this.selectCardContainer = new o.UIGamePopupSelectCardContainerView(this.uiGameManager, 0, l, s, e => {
                this.clickedTopResource(e)
            }, e => {
                this.clickedSelectedResource(e)
            }, c, this);
            const h = .55 * r.itemSize,
                d = this.absoluteHeight - h;
            this.confirmationButtons = new n.UIGamePopupConfirmationButtons(0, d, s, h, () => {
                this.clickedCheckAction()
            }, () => {
                this.clickedCancelAction()
            }, this), this.selectCardFormat.cancelButtonActive ? this.confirmationButtons.showCancelButton() : this.confirmationButtons.hideCancelButton(), i && this.buildContainer()
        }
        buildContainer(e = 0, t = 0) {
            this.drawSectionBgAroundContent(e, t), this.confirmationButtons.y = this.absoluteHeight - this.confirmationButtons.height;
            const a = this.uiGameManager.canvasController,
                i = a.appH - a.itemSize - this.absoluteHeight;
            this.y = i
        }
        clickedTopResource(e, t = !0) {
            1 == this.selectCardFormat.amountOfCardsToSelect && this.resetCardSelection(), this.selectedEnoughCards() || (this.selectCardContainer.cardsSelected.addNewCardOfType(e, t), this.selectCardFormat.showCardBadge || this.selectCardContainer.cardsSelected.cardInventory.hideCardBadges(), this.updateCheckMark())
        }
        selectedEnoughCards() {
            return this.selectCardContainer.cardsSelected.cardInventory.cardViews.length == this.selectCardFormat.amountOfCardsToSelect
        }
        clickedCheckAction() {
            if (!this.selectedEnoughCards()) return;
            const e = this.selectCardContainer.cardsSelected.cardInventory.getAllCardEnums();
            this.uiGameManager.socketGameSend.selectCards(e), this.closeUI()
        }
        clickedSelectedResource(e) {
            this.updateCheckMark()
        }
        resetCardSelection() {
            this.selectCardContainer.cardsSelected.removeAllCards()
        }
        updateCheckMark() {
            this.confirmationButtons.checkButton.inactivateOpacity(), this.selectedEnoughCards() && this.confirmationButtons.checkButton.activateOpacity()
        }
        clickedCancelAction() {
            this.selectCardFormat.cancelButtonActive && (this.uiGameManager.socketGameSend.cancelAction(), this.closeUI())
        }
        closeUI() {
            null != this.parent && this.parent.removeChild(this)
        }
        addVictimAvatarView(e) {
            const t = .1 * this.uiGameManager.canvasController.itemSize,
                a = this.selectCardContainer.cardsToSelectFrom.height,
                i = this.uiGameManager.gameState.getPlayerWithColor(e),
                o = this.selectCardContainer.width - a - t,
                n = this.uiGameManager.canvasController.margin;
            this.victimAvatarView = new r.UIGamePlayerAvatarView(o, n, a, this.selectCardContainer, i, !0)
        }
    }
    t.UIGamePopupSelectCards = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupCardConfirmation = void 0;
    const i = a(63),
        o = a(103),
        n = a(64);
    class r extends n.SectionBgAdaptiveView {
        constructor(e, t) {
            super(), this.uiGameManager = e, this.cardEnum = t.cardEnum;
            const a = this.uiGameManager.canvasController,
                n = a.popupWidth;
            a.app.stage.addChild(this);
            const r = .55 * a.itemSize,
                s = n - 2 * r;
            this.cardPopupInformation = new o.UIGamePopupInformationView(e, 0, 0, s, t.popupInformation, this);
            const c = this.cardPopupInformation.doesTextExtendBelowImage() ? r / 2 : r,
                l = this.absoluteHeight - c;
            this.confirmationButtons = new i.UIGamePopupConfirmationButtons(0, l, n, r, () => {
                this.clickedCheckAction()
            }, () => {
                this.clickedCancelAction()
            }, this), this.confirmationButtons.checkButton.activateOpacity(), this.drawSectionBgAroundContent();
            const h = a.appH - a.itemSize - this.absoluteHeight;
            this.y = h
        }
        setCheckAction(e) {
            this.confirmationButtons.checkButton.updateAction(e)
        }
        setCancelAction(e) {
            this.confirmationButtons.cancelButton.updateAction(e)
        }
        checkButtonInactiveOpacity() {
            this.confirmationButtons.checkButton.inactivateOpacity()
        }
        checkButtonActiveOpactiy() {
            this.confirmationButtons.checkButton.activateOpacity()
        }
        clickedCheckAction() {
            this.uiGameManager.socketGameSend.clickedDevelopmentCard(this.cardEnum), this.closeUI()
        }
        clickedCancelAction() {
            this.uiGameManager.socketGameSend.cancelAction(), this.closeUI()
        }
        closeUI() {
            null != this.parent && this.parent.removeChild(this)
        }
    }
    t.UIGamePopupCardConfirmation = r
}, , , , , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketClient = void 0;
    const i = a(329),
        o = a(35);
    t.SocketClient = class {
        constructor(e, t, a) {
            this.webSocket = new WebSocket(e), i.SocketEncoding.setWebSocketBinaryType(this.webSocket), this.socketIds = [], this.closeAction = t, this.reconnectAction = a, this.connect(e, 50, !0)
        }
        isSocketOpen() {
            return this.webSocket.readyState === this.webSocket.OPEN
        }
        setSocketId(e, t) {
            this.socketIds.push({
                id: e,
                func: t
            })
        }
        connect(e, t, a) {
            a || (this.webSocket = new WebSocket(e), i.SocketEncoding.setWebSocketBinaryType(this.webSocket)), this.webSocket.onopen = () => {
                50,
                this.reconnectAction()
            }, this.webSocket.onmessage = e => {
                const t = i.SocketEncoding.decode(e.data);
                o.UIUtilsEjsVariables.SOCKET_DEBUG_ACTIVE && console.log("======"), o.UIUtilsEjsVariables.SOCKET_DEBUG_ACTIVE && console.log(`Socket-id: ${t.id}, data:`), o.UIUtilsEjsVariables.SOCKET_DEBUG_ACTIVE && console.log(t.data), this.socketIds.forEach((function(e) {
                    e.id == t.id && e.func(t.data)
                }))
            }, this.webSocket.onclose = e => {
                const t = "Your internet connection was broken. Refresh browser to rejoin";
                o.UIUtilsEjsVariables.SOCKET_DEBUG_ACTIVE && console.log(t), this.closeAction(t)
            }, this.webSocket.onerror = e => {
                o.UIUtilsEjsVariables.SOCKET_DEBUG_ACTIVE && console.error("Closing socket, encountered error: ", e), this.webSocket.close()
            }
        }
        send(e, t) {
            if (!this.isSocketOpen()) return !1;
            const a = {
                    id: e,
                    data: t
                },
                o = i.SocketEncoding.encode(a);
            return this.webSocket.send(o), !0
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketGameListen = void 0;
    const i = a(3);
    var o = i.GameStateEnums.UIGameEventEnums;
    const n = a(107),
        r = a(330),
        s = a(11),
        c = a(118),
        l = a(151),
        h = a(357),
        d = a(19),
        u = a(85),
        g = a(33),
        m = a(14),
        p = a(39),
        C = a(360),
        y = a(7);
    t.SocketGameListen = class {
        constructor(e, t) {
            this.gameId = t, this.gameState = new r.GameState, e.setSocketId(i.NetworkEnums.State.NewGame.toString(), e => {
                d.uiManager.sceneController.loadScene(u.Scene.Game), m.CA.sendEvent(m.CA.Type.Funnel, m.CA.Category.Funnel, m.CA.Label.FunnelStartedGame)
            }), e.setSocketId(i.NetworkEnums.State.ContinueGame.toString(), e => {
                d.uiManager.sceneController.loadScene(u.Scene.Game), d.uiGameManager.eventController.sendEvent(void 0, o.ContinueGame)
            }), e.setSocketId(i.NetworkEnums.State.GameSetup.toString(), e => {
                d.uiManager.sceneController.loadScene(u.Scene.Game), this.gameState.myColor = e.myColor, this.gameState.playOrder = e.playOrder
            }), e.setSocketId(i.NetworkEnums.State.CurrentGameState.toString(), e => {
                this.gameState.currentTurnState = e.currentTurnState, this.gameState.currentActionState = e.currentActionState, this.gameState.currentTurnPlayerColor = e.currentTurnPlayerColor, this.gameState.lastStateStart = e.lastStateStart, this.gameState.timeToWaitForState = e.timeToWaitForState, this.gameState.currentTime = e.currentTime, d.uiGameManager.eventController.sendEvent(void 0, i.GameStateEnums.UIGameEventEnums.GameStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.SpectatorCount.toString(), e => {
                const t = e;
                d.uiGameManager.eventController.sendEvent(t, o.SpectatorCountUpdated)
            }), e.setSocketId(i.NetworkEnums.State.BankState.toString(), e => {
                this.gameState.bank = Object.assign(new n.BankState, e), d.uiGameManager.eventController.sendEvent(void 0, o.BankStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.MapState.toString(), e => {
                0 == this.gameState.mapState.tileState.tiles.length ? this.gameState.mapState.createMap(e) : this.gameState.mapState.deserialize(e), this.gameState.mapState.deserialize(e), d.uiGameManager.eventController.sendEvent(void 0, o.MapStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.MapCorners.toString(), e => {
                this.gameState.mapState.deserializeTileCorners(e), d.uiGameManager.eventController.sendEvent(void 0, o.MapStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.MapEdges.toString(), e => {
                this.gameState.mapState.deserializeTileEdges(e), d.uiGameManager.eventController.sendEvent(void 0, o.MapStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.MapTiles.toString(), e => {
                this.gameState.mapState.deserializeTileHex(e), d.uiGameManager.eventController.sendEvent(void 0, o.MapStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.DiceState.toString(), e => {
                this.gameState.diceThrown = e.diceThrown, this.gameState.lastDice1 = e.lastDice1, this.gameState.lastDice2 = e.lastDice2, this.gameState.lastEventDice = e.lastEventDice, d.uiGameManager.eventController.sendEvent(void 0, o.DiceStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.PlayerControllerState.toString(), e => {
                0 == this.gameState.players.length && this.gameState.initPlayerControllerStates(e);
                for (const t of e) {
                    this.gameState.getPlayerWithColor(t.color).deserialize(t)
                }
                d.uiGameManager.eventController.sendEvent(void 0, o.PlayerControllerStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.Vote.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.VoteReceived)
            }), e.setSocketId(i.NetworkEnums.State.SelectPlayer.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SelectPlayer)
            }), e.setSocketId(i.NetworkEnums.State.GivePlayerResourcesFromTile.toString(), e => {
                0 !== e.length && m.CA.sendEventOnce(m.CA.Type.Funnel, m.CA.Category.Funnel, m.CA.Label.FunnelGameGetResources), d.uiGameManager.eventController.sendEvent(e, o.GivePlayerCardFromTile)
            }), e.setSocketId(i.NetworkEnums.State.ExchangeCards.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.ExchangeCards)
            }), e.setSocketId(i.NetworkEnums.State.HighlightCorners.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SetCornerHighlight)
            }), e.setSocketId(i.NetworkEnums.State.HighlightRoadEdges.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SetRoadEdgeHighlight)
            }), e.setSocketId(i.NetworkEnums.State.HighlightShipEdges.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SetShipEdgeHighlight)
            }), e.setSocketId(i.NetworkEnums.State.HighlightTiles.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SetTileHighlight)
            }), e.setSocketId(i.NetworkEnums.State.HighlightDiceNumbersForInventor.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.HighlightDiceNumbersForInventor)
            }), e.setSocketId(i.NetworkEnums.State.AmountOfCardsToDiscard.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SelectCardsToDiscard), s.Sound.playSound(s.Sound.SoundType.YourTurn)
            }), e.setSocketId(i.NetworkEnums.State.SelectCardsToGiveToPlayer.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SelectCardToGiveToAnotherPlayer), s.Sound.playSound(s.Sound.SoundType.YourTurn)
            }), e.setSocketId(i.NetworkEnums.State.CardsToSelectForDevelopmentCard.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SelectCardsFromBankUsingDevelopmentCard)
            }), e.setSocketId(i.NetworkEnums.State.SelectPlayerAndCard.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SelectPlayerAndCard)
            }), e.setSocketId(i.NetworkEnums.State.CardsToSelectForPendingTransaction.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SelectCardsForPendingDistribution)
            }), e.setSocketId(i.NetworkEnums.State.ConfirmUseDevelopmentCard.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.ConfirmUseDevelopmentCard)
            }), e.setSocketId(i.NetworkEnums.State.SelectPlayerUsingDevelopmentCard.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SelectPlayerForDevelopmentCard)
            }), e.setSocketId(i.NetworkEnums.State.StealDevelopmentCardFromPlayer.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.StealDevelopmentCardFromPlayer)
            }), e.setSocketId(i.NetworkEnums.State.StealResourceCardFromPlayer.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.StealResourceCardFromPlayer)
            }), e.setSocketId(i.NetworkEnums.State.ClosePopupUI.toString(), () => {
                d.uiGameManager.eventController.sendEvent(void 0, o.ClosePopupUI)
            }), e.setSocketId(i.NetworkEnums.State.PlayersTakingAction.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.PlayersTakingAction), this.gameState.playersTakingOffTurnAction = e
            }), e.setSocketId(i.NetworkEnums.State.PlayersDoneTakingAction.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.PlayersDoneTakingAction);
                for (const t of e)(0, y.removeElementFromArray)(this.gameState.playersTakingOffTurnAction, t)
            }), e.setSocketId(i.NetworkEnums.State.SelectDice.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.SelectDice)
            }), e.setSocketId(i.NetworkEnums.State.KickedFromGame.toString(), e => {
                window.location.hash = "", location.reload()
            }), e.setSocketId(i.NetworkEnums.State.PlayersCanceledSpecialBuildPhase.toString(), e => {
                d.uiGameManager.eventController.sendEvent(void 0, o.CancelSpecialBuildPhase)
            }), e.setSocketId(i.NetworkEnums.State.SpecialBuildPhaseLastPlayerToRollDice.toString(), e => {
                this.gameState.lastPlayerToRollDice = e
            }), e.setSocketId(i.NetworkEnums.State.CityImprovementStateUpdated.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.CityImprovementStateReceived)
            }), e.setSocketId(i.NetworkEnums.State.ForceShowCityImprovementButtons.toString(), () => {
                d.uiGameManager.eventController.sendEvent(void 0, o.ForceShowCityImprovementButtons)
            }), e.setSocketId(i.NetworkEnums.State.UnlockedCityImprovement.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.UnlockedCityImprovments)
            }), e.setSocketId(i.NetworkEnums.State.PlayerReceivedMetropolis.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.PlayerReceivedMetropolis)
            }), e.setSocketId(i.NetworkEnums.State.KnightPieceStateUpdated.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.KnightStateReceived)
            }), e.setSocketId(i.NetworkEnums.State.BarbarianStateUpdated.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.BarbarianInvasionStateUpdated)
            }), e.setSocketId(i.NetworkEnums.State.MerchantStateUpdates.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.MerchantStateReceived)
            }), e.setSocketId(i.NetworkEnums.State.PlayerReceivedAchievement.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.PlayerReceivedAchievement)
            }), e.setSocketId(i.NetworkEnums.State.PlayTurnSound.toString(), () => {
                s.Sound.playSound(s.Sound.SoundType.YourTurn)
            }), e.setSocketId(i.NetworkEnums.State.BankTradeRatioState.toString(), e => {
                this.gameState.myBankTradeRatios.deserialize(e)
            }), e.setSocketId(i.NetworkEnums.State.OfferError.toString(), e => {
                g.UIPopupController.createSimplePopup("Error", e)
            }), e.setSocketId(i.NetworkEnums.State.EmbargoState.toString(), e => {
                this.gameState.embargos = e, d.uiGameManager.eventController.sendEvent(void 0, o.EmbargoStatusUpdated)
            }), e.setSocketId(i.NetworkEnums.State.CloseOffer.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e.offerId, o.RemoveTradeOffer)
            }), e.setSocketId(i.NetworkEnums.State.OfferRejected.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.TradeOfferRejected)
            }), e.setSocketId(i.NetworkEnums.State.OfferAccepted.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.TradeOfferAccepted)
            }), e.setSocketId(i.NetworkEnums.State.GetOffer.toString(), e => {
                const t = c.TradeOffer.deserialize(e);
                s.Sound.playSound(s.Sound.SoundType.Offer), d.uiGameManager.eventController.sendEvent(t, o.NewTradeOfferReceived)
            }), e.setSocketId(i.NetworkEnums.State.BoldTextInTradeWindow.toString(), e => {
                d.uiGameManager.eventController.sendEvent(e, o.BoldTextInTradeWindow)
            }), e.setSocketId(i.NetworkEnums.State.GameSettings.toString(), e => {
                this.gameState.gameSettings = l.GameSettings.deserialize(e), d.uiGameManager.eventController.sendEvent(void 0, o.GameSettingsUpdated)
            }), e.setSocketId(i.NetworkEnums.State.BuildGame.toString(), e => {
                const t = e;
                d.uiGameManager.buildGame(t)
            }), e.setSocketId(i.NetworkEnums.State.GameEndState.toString(), e => {
                const t = new h.EndGameState;
                t.deserialize(e), d.uiGameManager.eventController.sendEvent(void 0, o.GameEnd), d.uiGameManager.toolTipController.removeTip(), new C.UIGameEndController(d.uiGameManager, t);
                const a = p.SocketController.session.userState.completedGameCount;
                m.CA.sendEvent(m.CA.Type.Funnel, m.CA.Category.Funnel, m.CA.Label.FunnelFinishedGameCount, a)
            }), e.setSocketId(i.NetworkEnums.State.RematchLink.toString(), e => {
                window.location.hash = e, location.reload()
            }), e.setSocketId(i.NetworkEnums.State.EndGameText.toString(), e => {
                const t = e;
                d.uiGameManager.eventController.sendEvent(t, o.GameEndRematchTextUpdated)
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PlayerControllerState = void 0;
    const i = a(20),
        o = a(15),
        n = a(7),
        r = a(150);
    t.PlayerControllerState = class {
        constructor() {
            this.color = i.PlayerColors.None, this.icon = o.LobbyImage.User, this.username = "None", this.hoverText = "None", this.disconnected = !1, this.isBot = !0, this.bankRoadAmount = 15, this.bankSettlementAmount = 5, this.bankCityAmount = 4, this.bankShipAmount = 0, this.bankCityWallAmount = 0, this.longestRoad = 0, this.placedRoadAmount = 0, this.placedSettlementAmount = 0, this.placedCityAmount = 0, this.placedShipAmount = 0, this.placedCityWallAmount = 0, this.resourceCards = [], this.cardDiscardLimit = 0, this.developmentCards = [], this.developmentCardsUsed = [], this.hasLongestRoad = !1, this.hasLargestArmy = !1, this.victoryPointState = new r.PlayerVictoryPointState, this.canPlaceRoad = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            }, this.canPlaceSettlement = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            }, this.canPlaceCity = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            }, this.canBuyDevelopmentCard = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            }, this.canPlaceShip = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            }, this.canMoveShip = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            }, this.canPlaceCityWall = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            }
        }
        totalResourceCardOfType(e) {
            return (0, n.countOccurenceOfValueInArray)(this.resourceCards, e)
        }
        totalDevelopmentCardsOfType(e) {
            return (0, n.countOccurenceOfValueInArray)(this.developmentCards, e)
        }
        getAllCardsInHand() {
            const e = [];
            return e.push(...this.resourceCards), e.push(...this.developmentCards), e
        }
        deserialize(e) {
            for (const t of Object.keys(e)) "victoryPointState" != t && (this[t] = e[t]);
            this.victoryPointState.deserialize(e.victoryPointState)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PlayerVictoryPointState = void 0;
    const i = a(7);
    class o {
        constructor() {
            this.victoryPoints = []
        }
        addVictoryPoint(e) {
            this.victoryPoints.push(e), this.victoryPoints.sort((e, t) => e.victoryPointType - t.victoryPointType)
        }
        removeVictoryPoint(e) {
            for (const t of this.victoryPoints)
                if (t.victoryPointType == e) return (0, i.removeElementFromArray)(this.victoryPoints, t), !0;
            return !1
        }
        totalPublicVictoryPoints() {
            let e = 0;
            for (const t of this.victoryPoints) t.private || (e += t.value);
            return e
        }
        totalPrivateVictoryPoints() {
            let e = 0;
            for (const t of this.victoryPoints) e += t.value;
            return e
        }
        totalVictoryPointsOfType(e) {
            let t = 0;
            for (const a of this.victoryPoints)(0, i.elementInArray)(e, a.victoryPointType) && (t += a.value);
            return t
        }
        getAllUniqueVictoryPointTypesEarned() {
            const e = [];
            for (const t of this.victoryPoints)(0, i.elementInArray)(e, t.victoryPointType) || e.push(t.victoryPointType);
            return e
        }
        getPublicVictoryPointState() {
            const e = new o;
            for (const t of this.victoryPoints) t.private || e.addVictoryPoint(t);
            return e
        }
        getPrivateVictoryPointState() {
            const e = new o;
            for (const t of this.victoryPoints) e.addVictoryPoint(t);
            return e
        }
        deserialize(e) {
            this.victoryPoints = e.victoryPoints
        }
    }
    t.PlayerVictoryPointState = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameSettings = void 0;
    const i = a(3);
    var o = i.PlayerEnums.RoomSettingConstants,
        n = i.PlayerEnums.GameSpeedSettings,
        r = i.PlayerEnums.BotSpeedSettings;
    const s = a(7),
        c = a(66),
        l = a(115);
    class h {
        constructor(e, t) {
            this.modeSetting = o.DEFAULT_MODE_SETTING, this.extensionSetting = o.DEFAULT_EXTENSION_SETTING, this.scenarioSetting = o.DEFAULT_SCENARIO_SETTING, this.mapSetting = o.DEFAULT_MAP_SETTING, this.diceSetting = o.DEFAULT_DICE_SETTING, this.victoryPointsToWin = o.DEFAULT_VP_TO_WIN, this.karmaActive = !0, this.cardDiscardLimit = o.DEFAULT_CARD_DISCARD_LIMIT, this.maxPlayers = o.DEFAULT_PLAYER_COUNT, this.gameSpeed = o.DEFAULT_GAME_SPEED_SETTING, this.botSpeed = o.DEFAULT_BOT_SPEED_SETTING, this.hideBankCards = o.DEFAULT_HIDE_BANK_CARDS, this.friendlyRobber = o.DEFAULT_FRIENDLY_ROBBER, this.version = 5, this.id = e, this.gameType = t, this.privateGame = !1, this.networkActive = !0
        }
        static deserialize(e) {
            const t = new h(e.id, e.gameType);
            return t.privateGame = e.privateGame, t.modeSetting = e.modeSetting, t.mapSetting = e.mapSetting, t.networkActive = e.networkActive, t.victoryPointsToWin = e.victoryPointsToWin, t.karmaActive = e.karmaActive, t.cardDiscardLimit = e.cardDiscardLimit, t.maxPlayers = e.maxPlayers, t.gameSpeed = e.gameSpeed, t.botSpeed = e.botSpeed, t.hideBankCards = e.hideBankCards, t.friendlyRobber = e.friendlyRobber, t.diceSetting = e.diceSetting, t.scenarioSetting = e.scenarioSetting, t.extensionSetting = e.extensionSetting, t.gameType = e.gameType, e.version < 2 && null == e.diceSetting && (t.diceSetting = i.DiceSettingEnum.Random), e.version < 3 && (null == e.scenarioSetting && (t.scenarioSetting = i.ScenarioSettingEnum.None), null == e.extensionSetting && (t.extensionSetting = i.ExtensionSettingEnum.Players4)), e.version < 5 && null == e.gameType && (t.gameType = i.GameTypeEnum.Unknown), t
        }
        settingTexts() {
            var e, t;
            const a = [];
            a.push(["Victory Points Needed", this.victoryPointsToWin + ""]), a.push(["Card Discard Limit", this.cardDiscardLimit + ""]), a.push(["Game Speed", n[this.gameSpeed]]), a.push(["Bot Speed", r[this.botSpeed]]);
            const o = null === (e = c.GameModeDataController.getModeDataForMode(this.modeSetting)) || void 0 === e ? void 0 : e.name,
                s = null != o ? o : i.ModeSettingEnum[this.modeSetting];
            a.push(["Game Mode", s]), a.push(["Scenario", i.ScenarioSettingEnum[this.scenarioSetting]]);
            const h = null === (t = l.MapDataController.getMapDataForMap(this.mapSetting)) || void 0 === t ? void 0 : t.name,
                d = null != h ? h : i.MapSettingEnum[this.mapSetting];
            return a.push(["Map", d]), a.push(["Extension", i.ExtensionSettingEnum[this.extensionSetting]]), a.push(["Dice", i.DiceSettingEnum[this.diceSetting]]), a.push(["Karma", this.karmaActive ? "Active" : "Inactive"]), a.push(["Bank Cards", this.hideBankCards ? "Hidden" : "Showing"]), a.push(["Friendly Robber", this.friendlyRobber ? "Active" : "Inactive"]), a
        }
        isValidGameSettings() {
            for (const e of Object.keys(this))
                if (!this.isValidDataForAttribute(e)) return !1;
            return !0
        }
        isValidDataForAttribute(e) {
            if (!(e in this)) return !1;
            const t = this[e];
            switch (e) {
                case "version":
                    return "number" == typeof t;
                case "id":
                case "name":
                    return "string" == typeof t;
                case "privateGame":
                    return "boolean" == typeof t;
                case "modeSetting":
                    return (0, s.doesEnumHaveThisNumberAsValue)(i.ModeSettingEnum, t);
                case "extensionSetting":
                    return (0, s.doesEnumHaveThisNumberAsValue)(i.ExtensionSettingEnum, t);
                case "scenarioSetting":
                    return (0, s.doesEnumHaveThisNumberAsValue)(i.ScenarioSettingEnum, t);
                case "mapSetting":
                    return (0, s.doesEnumHaveThisNumberAsValue)(i.MapSettingEnum, t);
                case "diceSetting":
                    return (0, s.doesEnumHaveThisNumberAsValue)(i.DiceSettingEnum, t);
                case "networkActive":
                    return "boolean" == typeof t;
                case "victoryPointsToWin":
                    return "number" == typeof t;
                case "karmaActive":
                    return "boolean" == typeof t;
                case "cardDiscardLimit":
                case "maxPlayers":
                    return "number" == typeof t;
                case "gameSpeed":
                    return (0, s.doesEnumHaveThisNumberAsValue)(n, t);
                case "botSpeed":
                    return (0, s.doesEnumHaveThisNumberAsValue)(r, t);
                case "hideBankCards":
                case "friendlyRobber":
                    return "boolean" == typeof t;
                case "gameType":
                    return (0, s.doesEnumHaveThisNumberAsValue)(i.GameTypeEnum, t)
            }
            return !1
        }
    }
    t.GameSettings = h
}, , , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RoundedBgView = void 0;
    const i = a(6);
    class o extends i.Graphics {
        constructor(e, t, a, o) {
            super(), this.texture = o;
            const n = new i.Matrix;
            n.scale(e / o.width, t / o.height), this.beginTextureFill(o, 16777215, 1, n), this.drawRoundedRect(0, 0, e, t, 5), this.endFill(), a.addChildAt(this, 0)
        }
        isSameBg(e) {
            return e == this.texture
        }
    }
    t.RoundedBgView = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GeneralButtonView = void 0;
    const i = a(17),
        o = a(6),
        n = a(11),
        r = a(27),
        s = a(19);
    class c extends r.SectionView {
        constructor(e, t, a, n, r) {
            super(e, t, a, n, r), this.action = () => {}, this.hoverOn = () => {}, this.hoverOut = () => {}, this.viewContainer = new i.SectionBgView(0, 0, this.width, this.height, this, !0), this.viewContainer.drawRoundedBg(o.Loader.shared.resources.bg_button.texture), this.setClickAction(), this.setHover()
        }
        updateAction(e) {
            this.action = e
        }
        updateHover(e, t) {
            this.hoverOn = e, this.hoverOut = t
        }
        setTip(e, t) {
            s.uiGameManager.toolTipController.createTip(e, t, this)
        }
        setClickAction() {
            this.buttonMode || (this.buttonMode = !0), this.interactive || (this.interactive = !0), this.on("click", e => {
                this.action(e), n.Sound.playSound(n.Sound.SoundType.Click)
            }), this.on("tap", e => {
                this.action(e), n.Sound.playSound(n.Sound.SoundType.Click)
            })
        }
        setHover() {
            this.interactive = !0, this.on("pointerover", e => {
                this.hoverSize(), this.hoverOn(e)
            }), this.on("pointerout", e => {
                this.returnToOriginalPosition(), this.hoverOut(e)
            })
        }
        hoverSize() {
            this.viewContainer.x = this.viewContainer.initialPosition.x - -.05 * this.viewContainer.initialPosition.w / 2, this.viewContainer.y = this.viewContainer.initialPosition.y - -.05 * this.viewContainer.initialPosition.h / 2, this.viewContainer.width = this.viewContainer.initialPosition.w + -.05 * this.viewContainer.initialPosition.w, this.viewContainer.height = this.viewContainer.initialPosition.h + -.05 * this.viewContainer.initialPosition.h
        }
        returnToOriginalPosition() {
            this.viewContainer.x = this.viewContainer.initialPosition.x, this.viewContainer.y = this.viewContainer.initialPosition.y, this.viewContainer.width = this.viewContainer.initialPosition.w, this.viewContainer.height = this.viewContainer.initialPosition.h
        }
    }
    t.GeneralButtonView = c
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIReportPlayer = void 0;
    const i = a(19),
        o = a(85),
        n = a(39),
        r = a(49);
    class s {
        static getReportData(e) {
            return {
                reporterId: n.SocketController.session.userState.id,
                reporterName: n.SocketController.session.userState.username,
                reporterKarma: n.SocketController.session.userState.karmaTextStatus,
                reported: e,
                lastMessages: this.getReportedMessages(e).reverse()
            }
        }
        static sendReportData(e) {
            r.UIAjaxWrapper.postRequest(this.GOOGLE_SHEET, void 0, JSON.stringify(e), e => {
                console.log(e)
            })
        }
        static getReportedMessages(e) {
            const t = [];
            let a = 0;
            const n = i.uiManager.sceneController.scene == o.Scene.Game ? document.getElementById("game-chat-text") : document.getElementById("scene_room_right_message_container"),
                r = n.childNodes.length;
            for (let i = 1; i < this.MAX_MESSAGE_SEARCH_COUNT && !(i > r); i += 1) {
                const o = n.childNodes[r - i];
                if (o.innerText.includes(e) && (t.push(o.innerText), a += 1, a == this.MAX_MESSAGE_RECORD_COUNT)) break
            }
            return t
        }
        static create(e) {
            const t = this.getReportData(e);
            this.sendReportData(t)
        }
    }
    t.UIReportPlayer = s, s.MAX_MESSAGE_SEARCH_COUNT = 15, s.MAX_MESSAGE_RECORD_COUNT = 5, s.GOOGLE_SHEET = "https://script.google.com/macros/s/AKfycbwiGpeEaHfyLaLMDDiz6yAFzM_yaVhJpJZvFqBNx2VeNRQL2gQb/exec"
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketGameSend = void 0;
    const i = a(3);
    var o = i.GameStateEnums.UIGameEventEnums;
    const n = a(14);
    class r {
        constructor(e) {
            this.socket = e
        }
        createdPlayerOffer(e) {
            this.socket.send(i.NetworkEnums.Action.CreatedPlayerOffer.toString(), e)
        }
        takeAcceptedOffer(e, t) {
            const a = {
                id: e,
                playerColor: t
            };
            this.socket.send(i.NetworkEnums.Action.TakeAcceptedOffer.toString(), a)
        }
        acceptedOffer(e) {
            this.socket.send(i.NetworkEnums.Action.AcceptedOffer.toString(), e)
        }
        rejectedOffer(e) {
            this.socket.send(i.NetworkEnums.Action.RejectedOffer.toString(), e)
        }
        createdCounterOffer(e, t) {
            const a = {
                id: e,
                newOffer: t
            };
            this.socket.send(i.NetworkEnums.Action.CreatedCounterOffer.toString(), a)
        }
        embargoPlayer(e) {
            this.socket.send(i.NetworkEnums.Action.ClickedEmbargo.toString(), e)
        }
        clickedPassTurn() {
            n.CA.sendEventOnce(n.CA.Type.Funnel, n.CA.Category.Funnel, n.CA.Label.FunnelGameClickPassTurn, o.GameEnd), this.socket.send(i.NetworkEnums.Action.PassedTurn.toString(), !0)
        }
        clickedDice() {
            n.CA.sendEventOnce(n.CA.Type.Funnel, n.CA.Category.Funnel, n.CA.Label.FunnelGameClickDice, o.GameEnd), this.socket.send(i.NetworkEnums.Action.ClickedDice.toString(), !0)
        }
        selectedTile(e) {
            this.socket.send(i.NetworkEnums.Action.SelectedTile.toString(), e)
        }
        selectedTiles(e) {
            this.socket.send(i.NetworkEnums.Action.SelectedTiles.toString(), e)
        }
        selectCards(e) {
            this.socket.send(i.NetworkEnums.Action.SelectedCards.toString(), e)
        }
        selectPlayer(e) {
            this.socket.send(i.NetworkEnums.Action.SelectedPlayer.toString(), e)
        }
        buyDevCard() {
            this.socket.send(i.NetworkEnums.Action.BuyDevelopmentCard.toString(), !0)
        }
        buildRoad() {
            this.socket.send(i.NetworkEnums.Action.WantToBuildRoad.toString(), !0)
        }
        buildSettlement() {
            this.socket.send(i.NetworkEnums.Action.WantToBuildSettlement.toString(), !0)
        }
        buildCity() {
            this.socket.send(i.NetworkEnums.Action.WantToBuildCity.toString(), !0)
        }
        buildShip() {
            this.socket.send(i.NetworkEnums.Action.WantToBuildShip.toString(), !0)
        }
        moveShip() {
            this.socket.send(i.NetworkEnums.Action.WantToMoveShip.toString(), !0)
        }
        buildCityWall() {
            this.socket.send(i.NetworkEnums.Action.WantToBuildCityWall.toString(), !0)
        }
        placeKnight() {
            this.socket.send(i.NetworkEnums.Action.WantToPlaceKnight.toString(), !0)
        }
        upgradeKnight() {
            this.socket.send(i.NetworkEnums.Action.WantToUpgradeKnight.toString(), !0)
        }
        activateKnight() {
            this.socket.send(i.NetworkEnums.Action.WantToActivateKnight.toString(), !0)
        }
        takeKnightAction() {
            this.socket.send(i.NetworkEnums.Action.WantToTakeKnightAction.toString(), !0)
        }
        confirmBuildRoad(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmBuildRoad.toString(), e)
        }
        confirmBuildSettlement(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmBuildSettlement.toString(), e)
        }
        confirmBuildCity(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmBuildCity.toString(), e)
        }
        confirmBuildShip(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmBuildShip.toString(), e)
        }
        selectedShipToMove(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.SelectedShipToMove.toString(), e)
        }
        confirmMoveShip(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmMoveShip.toString(), e)
        }
        confirmRemoveRoad(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmRemoveRoad.toString(), e)
        }
        confirmBuildCityWall(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmBuildCityWall.toString(), e)
        }
        confirmPlaceKnight(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmPlaceKnight.toString(), e)
        }
        confirmUpgradeKnight(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmUpgradeKnight.toString(), e)
        }
        confirmActivateKnight(e) {
            r.sendConfirmBuildAnalytic(), this.socket.send(i.NetworkEnums.Action.ConfirmActivateKnight.toString(), e)
        }
        static sendConfirmBuildAnalytic() {
            n.CA.sendEventOnce(n.CA.Type.Funnel, n.CA.Category.Funnel, n.CA.Label.FunnelGameConfirmBuild, o.GameEnd)
        }
        confirmCityUpgrade(e) {
            this.socket.send(i.NetworkEnums.Action.ConfirmCityUpgrade.toString(), e)
        }
        confirmPlaceMetropolis(e) {
            this.socket.send(i.NetworkEnums.Action.ConfirmBuildMetropolis.toString(), e)
        }
        confirmPillageCity(e) {
            this.socket.send(i.NetworkEnums.Action.ConfirmPillageCity.toString(), e)
        }
        confirmSelectKnightToTakeAction(e) {
            this.socket.send(i.NetworkEnums.Action.SelectKnightToTakeAction.toString(), e)
        }
        confirmMoveKnight(e) {
            this.socket.send(i.NetworkEnums.Action.ConfirmMoveKnight.toString(), e)
        }
        confirmMoveKnightOffTurn(e) {
            this.socket.send(i.NetworkEnums.Action.ConfirmMoveKnightOffTurn.toString(), e)
        }
        confirmRemoveKnight(e) {
            this.socket.send(i.NetworkEnums.Action.ConfirmRemoveKnight.toString(), e)
        }
        confirmDiceSelection(e) {
            this.socket.send(i.NetworkEnums.Action.ConfirmDicePair.toString(), e)
        }
        cancelAction() {
            this.socket.send(i.NetworkEnums.Action.CancelAction.toString(), !0)
        }
        clickedDevelopmentCard(e) {
            this.socket.send(i.NetworkEnums.Action.ClickedDevelpomentCard.toString(), e)
        }
        requestSpecialBuildPhase() {
            this.socket.send(i.NetworkEnums.Action.RequestSpecialBuildPhase.toString(), !0)
        }
        cancelSpecialBuildPhase() {
            this.socket.send(i.NetworkEnums.Action.CancelSpecialBuildPhase.toString(), !0)
        }
        clickedRematch() {
            this.socket.send(i.NetworkEnums.Action.ClickedRematch.toString(), !0)
        }
        static clickedLobby() {
            window.location.hash = "", location.reload()
        }
        clickedVote(e, t) {
            this.socket.send(i.NetworkEnums.Action.Vote.toString(), {
                id: e,
                accepted: t
            })
        }
        requestActionSwap(e) {
            this.socket.send(i.NetworkEnums.Action.RequestActionSwap.toString(), e)
        }
    }
    t.SocketGameSend = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketLobbyListen = void 0;
    const i = a(288),
        o = a(19),
        n = a(3),
        r = a(46),
        s = a(382),
        c = a(40),
        l = a(383),
        h = a(14),
        d = a(33),
        u = a(39),
        g = a(384),
        m = a(289),
        p = a(291),
        C = a(292),
        y = a(96),
        S = a(98);
    t.SocketLobbyListen = class {
        constructor(e) {
            e.setSocketId(n.NetworkEnums.State.Connected.toString(), () => {
                p.UIUrlController.accessGameFromLink(e => {
                    c.SocketLobbySend.accessGameFromLink(e)
                }), r.StorageWrapper.patchForV26()
            }), e.setSocketId(n.NetworkEnums.State.SendAnalytics.toString(), e => {
                h.CA.sendEvent(h.CA.Type.Funnel, h.CA.Category.Funnel, e)
            }), e.setSocketId(n.NetworkEnums.State.SessionState.toString(), e => {
                const t = i.UserSessionState.deserialize(e);
                t.userState.adsEnabled || o.uiManager.adController.removeAllThirdPartyAds(), u.SocketController.setSession(t), o.uiManager.header.profileController.setState(t)
            }), e.setSocketId(n.NetworkEnums.State.LobbyGeneralData.toString(), e => {}), e.setSocketId(n.NetworkEnums.State.LobbyDisconnectData.toString(), e => {
                y.UITopNotificationController.showDisconnectedGames(e)
            }), e.setSocketId(n.NetworkEnums.State.LobbyPlayerData.toString(), e => {
                o.uiManager.header.profileController.update(e)
            }), e.setSocketId(n.NetworkEnums.State.LobbyPublicRooms.toString(), e => {
                o.uiManager.lobby.tableController.updateRooms(e)
            }), e.setSocketId(n.NetworkEnums.State.LobbyRoomUpdate.toString(), e => {
                o.uiManager.lobby.tableController.updateRoom(e)
            }), e.setSocketId(n.NetworkEnums.State.LobbyRoomRemove.toString(), e => {
                o.uiManager.lobby.tableController.removeRoom(e)
            }), e.setSocketId(n.NetworkEnums.State.LobbyGames.toString(), e => {
                const t = l.SocketDataTypes.LobbyGameData.deserialize(e);
                o.uiManager.lobby.tableController.updateLobbyGames(t)
            }), e.setSocketId(n.NetworkEnums.State.CustomRoom.toString(), e => {
                this.room = s.RoomState.deserialize(e), o.uiManager.room.updateRoom(this.room)
            }), e.setSocketId(n.NetworkEnums.State.GotKicked.toString(), e => {
                m.UIRoomCenterController.leaveRoom()
            }), e.setSocketId(n.NetworkEnums.State.Banned.toString(), e => {
                r.StorageWrapper.setBanned(e)
            }), e.setSocketId(n.NetworkEnums.State.SendPopup.toString(), e => {
                d.UIPopupController.createSimplePopup(e.title, e.body)
            }), e.setSocketId(n.NetworkEnums.State.SendBroadcast.toString(), e => {
                y.UITopNotificationController.show(e.text, S.UITopNotificationType.Broadcast)
            }), e.setSocketId(n.NetworkEnums.State.SendNotification.toString(), e => {
                C.UICornerPopupController.showPopup(e.icon, e.text)
            }), e.setSocketId(n.NetworkEnums.State.SocketTest.toString(), e => {
                g.ClientSocketMessageLoadTest.processSocketData(e)
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UserSessionState = t.SessionType = void 0;
    const i = a(380),
        o = a(381);
    var n;
    ! function(e) {
        e[e.ActivePlayer = 0] = "ActivePlayer", e[e.Bot = 1] = "Bot", e[e.DisconnectedPlayer = 2] = "DisconnectedPlayer", e[e.SpectatingPlayer = 3] = "SpectatingPlayer", e[e.PlayerCompletedGame = 4] = "PlayerCompletedGame"
    }(n = t.SessionType || (t.SessionType = {}));
    class r {
        static deserialize(e) {
            const t = new r;
            return t.id = e.id, t.userState = i.UserState.deserialize(e.userState), t.location = e.location, t.type = e.type, t.items = o.UserItems.deserialize(e.items), t.isReadyToPlay = e.isReadyToPlay, t.selectedColor = e.selectedColor, t
        }
        isEqualTo(e) {
            return this.id == e.id && this.userState.id == e.userState.id
        }
        isHumanSession() {
            switch (this.type) {
                case n.ActivePlayer:
                    return !0;
                case n.Bot:
                case n.DisconnectedPlayer:
                case n.SpectatingPlayer:
                case n.PlayerCompletedGame:
                    return !1
            }
        }
    }
    t.UserSessionState = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomCenterController = void 0;
    const i = a(39),
        o = a(3),
        n = a(40),
        r = a(11),
        s = a(10),
        c = a(14),
        l = a(385),
        h = a(386),
        d = a(290);
    var u = o.PlayerEnums.RoomSettingConstants;
    const g = a(388),
        m = a(389),
        p = a(66),
        C = a(20);
    class y {
        constructor() {
            this.header = document.getElementById("room_center_header"), this.scrollContainer = document.getElementById("room_center_scroll"), this.link = document.getElementById("room_center_link"), this.linkButton = document.getElementById("room_center_link_button"), this.selectMaxPlayers = document.getElementById("room_center_select_maxplayers"), this.selectCardDiscardLimit = document.getElementById("room_center_select_discardlimit"), this.selectVPToWin = document.getElementById("room_center_select_vptowin"), this.checkBoxReady = document.getElementById("room_center_checkbox_ready"), this.startButton = document.getElementById("room_center_start_button"), this.imReadySpan = document.getElementById("room_center_im_ready"), this.startExplanation = document.getElementById("room_center_start_explanation"), this.exitButton = document.getElementById("room_center_exit_button"), this.checkboxController = new l.UIRoomCenterCheckboxController, this.modeSettingsController = new h.UIRoomCenterModeSettingsController, this.mapSettingsController = new g.UIRoomCenterMapSettingsController, this.diceSettingsController = new m.UIRoomCenterDiceSettingController, this.gameSpeedSettingsController = new d.UIRoomCenterSpeedSettingsController(d.UIRoomCenterSpeedSettingType.GameSpeed), this.botSpeedSettingsController = new d.UIRoomCenterSpeedSettingsController(d.UIRoomCenterSpeedSettingType.BotSpeed)
        }
        update(e, t) {
            this.roomState = t, this.updateInteractabilityOfElements(t), this.checkboxController.update(t);
            for (const e of t.getSessions()) e.id == i.SocketController.session.id && (this.checkBoxReady.checked = e.isReadyToPlay);
            this.modeSettingsController.update(t), this.mapSettingsController.update(t), this.diceSettingsController.update(t), this.gameSpeedSettingsController.update(t), this.botSpeedSettingsController.update(t), this.updateMaxPlayerCountOptions(), (0, s.updateSelectElement)(this.selectMaxPlayers, String(t.gameSetting.maxPlayers)), (0, s.updateSelectElement)(this.selectCardDiscardLimit, String(t.gameSetting.cardDiscardLimit)), (0, s.updateSelectElement)(this.selectVPToWin, String(t.gameSetting.victoryPointsToWin))
        }
        load(e) {
            this.roomState = e, this.link.value = e.link, this.linkButton.onclick = () => {
                r.Sound.playSound(r.Sound.SoundType.Click), this.link.select(), document.execCommand("copy"), this.linkButton.innerText = "Copied Link"
            }, this.checkboxController.load(e), this.modeSettingsController.load(e), this.mapSettingsController.load(e), this.diceSettingsController.load(e), this.gameSpeedSettingsController.load(e), this.botSpeedSettingsController.load(e), y.initSelectElement(this.selectMaxPlayers, e, u.MIN_PLAYER_COUNT, u.MAX_PLAYER_COUNT, u.DEFAULT_PLAYER_COUNT, e => {
                n.SocketLobbySend.clickedRoomSettingChangeMaxPlayers(Number(e))
            }), y.initSelectElement(this.selectCardDiscardLimit, e, u.MIN_CARD_DISCARD_LIMIT, u.MAX_CARD_DISCARD_LIMIT, u.DEFAULT_CARD_DISCARD_LIMIT, e => {
                n.SocketLobbySend.clickedRoomSettingChangeCardDiscardLimit(Number(e))
            }), y.initSelectElement(this.selectVPToWin, e, u.MIN_VP_TO_WIN, u.MAX_VP_TO_WIN, u.DEFAULT_VP_TO_WIN, e => {
                n.SocketLobbySend.clickedRoomSettingChangeVictoryPointsToWin(Number(e))
            }), this.checkBoxReady.onclick = () => {
                r.Sound.playSound(r.Sound.SoundType.Click), n.SocketLobbySend.clickedRoomReadyToStart(this.checkBoxReady.checked)
            }, this.startButton.onclick = () => {
                const e = {
                    type: C.AnalyticEventType.StartedGame,
                    category: C.AnalyticEventCategory.Game
                };
                c.CA.sendCustomEvent(e), r.Sound.playSound(r.Sound.SoundType.Click), null != this.roomState && this.roomState.isMultiplayer() && c.CA.sendEvent(c.CA.Type.Funnel, c.CA.Category.Funnel, c.CA.Label.FunnelStartedMultiplayerRoom), n.SocketLobbySend.clickedRoomStartGame()
            }, this.exitButton.onclick = () => {
                r.Sound.playSound(r.Sound.SoundType.Click), y.leaveRoom()
            }, this.updateInteractabilityOfElements(e), this.update(e, e)
        }
        updateInteractabilityOfElements(e) {
            const t = y.isGuest(e);
            t ? this.imReadySpan.classList.add("guest") : this.imReadySpan.classList.remove("guest"), this.startExplanation.hidden = !t, this.startButton.parentElement && (this.startButton.parentElement.hidden = t), this.selectMaxPlayers.disabled = t, this.selectCardDiscardLimit.disabled = t, this.selectVPToWin.disabled = t, this.checkboxController.updateInteractabilityOfElements(t), this.modeSettingsController.updateInteractabilityOfElements(t), this.mapSettingsController.updateInteractabilityOfElements(t), this.diceSettingsController.updateInteractabilityOfElements(t), this.gameSpeedSettingsController.updateInteractabilityOfElements(e), this.botSpeedSettingsController.updateInteractabilityOfElements(e)
        }
        static leaveRoom() {
            window.location.hash = "", location.reload()
        }
        static initSelectElement(e, t, a, i, o, n) {
            e.className = y.isGuest(t) ? "room_center_select room_center_select_disable" : "room_center_select", e.onchange = () => {
                n(e.value)
            };
            for (let t = a; t <= i; t += 1) e.options[e.options.length] = new Option(String(t), String(t)), t == o && (e.options[e.options.length - 1].selected = !0)
        }
        static isGuest(e) {
            return i.SocketController.session.id != e.hostSession.id
        }
        updateMaxPlayerCountOptions() {
            this.clearAllOptionsForSelectMaxPlayers();
            const e = p.GameModeDataController.getAllowablePlayerCountForMode(this.roomState.gameSetting.modeSetting);
            for (const t of e) {
                const e = new Option(String(t), String(t));
                this.selectMaxPlayers.options.add(e)
            }
        }
        clearAllOptionsForSelectMaxPlayers() {
            if (0 != this.selectMaxPlayers.options.length)
                for (let e = this.selectMaxPlayers.length - 1; e >= 0; e--) this.selectMaxPlayers.options.remove(e)
        }
    }
    t.UIRoomCenterController = y
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomCenterSpeedSettingsController = t.UIRoomCenterSpeedSettingType = void 0;
    const i = a(39),
        o = a(387);
    ! function(e) {
        e[e.BotSpeed = 0] = "BotSpeed", e[e.GameSpeed = 1] = "GameSpeed"
    }(t.UIRoomCenterSpeedSettingType || (t.UIRoomCenterSpeedSettingType = {}));
    class n {
        constructor(e) {
            this.type = e, this.views = new o.UIRoomCenterSpeedSettingsView(this.type)
        }
        update(e) {
            n.updateSpeedSettings(this.views.speedOptions, this.views.speedInput, this.views.getSetting(e, this.type)), this.views.speedDiv.className = this.views.speedInput.innerHTML == this.views.speedDefaultSetting ? "room_option_item deselected" : "room_option_item selected"
        }
        static updateSpeedSettings(e, t, a) {
            const i = e.indexOf(t.innerHTML),
                o = e.indexOf(a);
            i != o && (t.innerHTML = e[o])
        }
        load(e) {
            n.initSpeedSettings(e, this.views.speedDivBody, this.views.speedRightArrow, this.views.speedLeftArrow, this.views.speedOptions, this.views.speedInput, this.views.speedSocketCommand)
        }
        static initSpeedSettings(e, t, a, i, o, r, s) {
            n.isGuest(e) ? t.className = "option_body guest" : (t.className = "option_body", a.onclick = () => {
                const e = o.indexOf(r.innerHTML);
                r.innerHTML = 0 == e ? o[o.length - 1] : o[e - 1], s(r.innerHTML)
            }, i.onclick = () => {
                const e = o.indexOf(r.innerHTML);
                r.innerHTML = e == o.length - 1 ? o[0] : o[e + 1], s(r.innerHTML)
            })
        }
        updateInteractabilityOfElements(e) {
            this.load(e)
        }
        static isGuest(e) {
            return i.SocketController.session.id != e.hostSession.id
        }
    }
    t.UIRoomCenterSpeedSettingsController = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIUrlController = void 0;
    t.UIUrlController = class {
        static accessGameFromLink(e) {
            if (void 0 === window.location.hash) return;
            if ("" == window.location.hash) return;
            e(window.location.hash.substr(1, window.location.hash.length))
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UICornerPopupController = void 0;
    const i = a(7),
        o = a(390);
    class n {
        static showPopup(e, t) {
            const a = new o.UICornerPopupView(e, t);
            this.popups.push(a), setTimeout(() => {
                this.removePopup(a)
            }, this.DURATION), this.removeExtraPopup()
        }
        static removePopup(e) {
            (0, i.removeElementFromArray)(this.popups, e) && e.close()
        }
        static removeExtraPopup() {
            if (this.popups.length <= 3) return;
            const e = this.popups.shift();
            null == e || e.close()
        }
    }
    t.UICornerPopupController = n, n.popups = [], n.DURATION = 5e3
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILobbyAdView = void 0;
    const i = a(7),
        o = a(14),
        n = a(11),
        r = a(16);
    t.UILobbyAdView = class {
        constructor(e) {
            this.ads = [{
                image: "store_item_cities_and_knights.png",
                title: "Cities & Knights",
                buttonName: "Get Expansion",
                buttonUrl: "/store",
                description: "Upgrade your cities and use Knights to fight against the Barbarians!",
                exposure: 3
            }, {
                image: "store_item_56player.png",
                title: "5-6 Player",
                buttonName: "Get Expansion",
                buttonUrl: "/store",
                description: "Play with up to 6 friends on bigger maps, building in between turns!",
                exposure: 3
            }, {
                image: "map_earth_preview.png",
                title: "Earth",
                buttonName: "Get Map",
                buttonUrl: "/store",
                description: "Build anywhere around the world! Suitable for all game modes.",
                exposure: 1
            }, {
                image: "map_shuffleboard_preview.png",
                title: "Shuffle Board",
                buttonName: "Get Map",
                buttonUrl: "/store",
                description: "Tiles are arranged in a different pattern each time you play: 1000 different maps possibilities!",
                exposure: 1
            }, {
                image: "map_blackforest_preview.png",
                title: "Black Forest",
                buttonName: "Get Map",
                buttonUrl: "/store",
                description: "Great map for explorers! Discover what"s out there building into the fog tiles!",
                exposure: 1
            }, {
                image: "map_volcano_preview.png",
                title: "Volcano",
                buttonName: "Get Map",
                buttonUrl: "/store",
                description: "Race towards the gold tile! Discover what the volcano has to offer beneath the fog tiles.",
                exposure: 1
            }, {
                image: "store_item_icons.png",
                title: "Avatars",
                buttonName: "Get Avatars",
                buttonUrl: "/store",
                description: "Over a dozen avatars available, and more coming soon!",
                exposure: 1
            }, {
                image: "store_item_colors.png",
                title: "Colors",
                buttonName: "Get Colors",
                buttonUrl: "/store",
                description: "Color Black is FREE!",
                exposure: 1
            }];
            const t = e ? "left" : "right";
            0 == e && (this.container = document.getElementById("scene_lobby_right_store_ad_container")), this.image = document.getElementById(`scene_lobby_${t}_store_ad_image`), this.title = document.getElementById(`scene_lobby_${t}_store_ad_title`), 1 == e && (this.description = document.getElementById("scene_lobby_left_store_ad_description")), this.button = document.getElementById(`scene_lobby_${t}_store_ad_button`)
        }
        hide() {
            null != this.container && (this.container.style.display = "none")
        }
        show() {
            null != this.container && (this.container.style.display = "flex")
        }
        update() {
            const e = this.getAdToShow();
            this.image.src = r.UIGameConstants.getImagePath(e.image), this.title.innerHTML = e.title, null != this.description && (this.description.innerHTML = e.description), this.button.innerHTML = e.buttonName, this.button.onclick = t => {
                t.preventDefault(), o.CA.sendEvent(o.CA.Type.Click, o.CA.Category.Lobby, o.CA.Label.ClickedAdblockAd), n.Sound.playSound(n.Sound.SoundType.Click), window.open(e.buttonUrl)
            }
        }
        getAdToShow() {
            const e = [];
            for (const t of this.ads)
                for (let a = 0; a < t.exposure; a++) e.push(t);
            return (0, i.randomElementFromArray)(e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIBrowserTabController = void 0;
    const i = a(16);
    class o {
        static recoverTitle() {
            this.pageTitle.innerHTML = this.originalTitle, this.favicon.href = this.originalFavicon
        }
        static blinkTab(e) {
            this.pageTitle.innerHTML = e, this.favicon.href = i.UIGameConstants.getImagePath("favicon_orange.png"), setTimeout(this.recoverTitle.bind(this), 1e3)
        }
    }
    t.UIBrowserTabController = o, o.pageTitle = document.getElementById("browser_tab"), o.favicon = document.getElementById("favicon"), o.originalTitle = o.pageTitle.innerHTML, o.originalFavicon = o.favicon.href
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIChatPost = void 0;
    const i = a(24),
        o = a(28),
        n = a(11),
        r = a(47),
        s = a(294),
        c = a(37),
        l = a(54),
        h = a(10),
        d = a(121);
    class u {
        static post(e, t, a, i = !1, s = o.GameColor.Color.OffWhite, g = !0) {
            if (d.UIUtilsChat.isMutedText(t)) return;
            const m = d.UIUtilsChat.getPlayerColorString(t),
                p = (0, h.createDivIn)(e, "message_post"),
                C = null == a ? "" : c.LobbyImages.getImage(a, 20),
                y = null != a;
            p.style.color = y ? d.UIUtilsChat.getTextColor(t, o.GameColor.getColor(s)) : o.GameColor.getColor(s), p.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click);
                (0, l.getNameFromText)(t)
            }, u.blinkTab(t), t = (0, r.linkify)(t), t = d.UIUtilsChat.replaceKeywordsWithImages(t, m), p.innerHTML = C + t, g && n.Sound.playSound(n.Sound.SoundType.MessageNotification), i || (e.scrollTop = e.scrollHeight)
        }
        static blinkTab(e) {
            this.excludeFromBlink.includes(e) || s.UIBrowserTabController.blinkTab("New Message")
        }
    }
    t.UIChatPost = u, u.excludeFromBlink = [i.KatanConfigs.KATAN_SETTINGS.LOGIN_MESSAGE_LINE_1, i.KatanConfigs.KATAN_SETTINGS.LOGIN_MESSAGE_LINE_2, i.KatanConfigs.KATAN_SETTINGS.TEST_SERVER_MESSAGE]
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewPopupPatchNotes = void 0;
    const i = a(36),
        o = a(124),
        n = a(77),
        r = a(10);
    class s extends i.ViewPopup {
        constructor(e, t, a) {
            super("New Update v" + e[0].version, "", () => {}, () => {}, !0), this.makeLarge(), this.body.style.flexDirection = "column", this.body.innerHTML = "";
            new n.AnnouncementView("Announcement", t, this.body, "popup-patchnote-div", "popup-patchnote-header-div", "popup-patchnote-body-div");
            for (const t of e) {
                new o.PatchNoteView(t, this.body, "popup-patchnote-div", "popup-patchnote-header-div", "popup-patchnote-body-div")
            }(0, r.createParagraphIn)(this.body, "<a href="/patchnotes" target="_blank">View All</a>", ""), this.removeXButton(), this.show(), this.removeAction = a
        }
    }
    t.ViewPopupPatchNotes = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.MatchmakingCriteriaTypes = t.MatchmakingMatchTypes = t.MatchmakingPriority = void 0,
        function(e) {
            e[e.Low = 0] = "Low", e[e.Medium = 1] = "Medium", e[e.High = 2] = "High"
        }(t.MatchmakingPriority || (t.MatchmakingPriority = {})),
        function(e) {
            e[e.WeeklyRotatingFunGame = 0] = "WeeklyRotatingFunGame", e[e.RankedClassic4P = 1] = "RankedClassic4P", e[e.UnrankedClassic4P = 2] = "UnrankedClassic4P", e[e.RankedClassic56P = 3] = "RankedClassic56P", e[e.UnrankedClassic56P = 4] = "UnrankedClassic56P", e[e.RankedSeafarers4P = 5] = "RankedSeafarers4P", e[e.UnrankedSeafareres4P = 6] = "UnrankedSeafareres4P", e[e.RankedSeafarers56P = 7] = "RankedSeafarers56P", e[e.UnrankedSeafareres56P = 8] = "UnrankedSeafareres56P", e[e.RankedCitiesAndKnights4P = 9] = "RankedCitiesAndKnights4P", e[e.UnrankedCitiesAndKnights4P = 10] = "UnrankedCitiesAndKnights4P", e[e.RankedCitiesAndKnights56P = 11] = "RankedCitiesAndKnights56P", e[e.UnrankedCitiesAndKnights56P = 12] = "UnrankedCitiesAndKnights56P", e[e.UnrankedClassic1v1 = 13] = "UnrankedClassic1v1", e[e.UnrankedClassicFreeMapRotation = 14] = "UnrankedClassicFreeMapRotation"
        }(t.MatchmakingMatchTypes || (t.MatchmakingMatchTypes = {})),
        function(e) {
            e[e.Karma = 0] = "Karma", e[e.ELORankedClassic4P = 1] = "ELORankedClassic4P", e[e.ELOUnrankedClassic4P = 2] = "ELOUnrankedClassic4P"
        }(t.MatchmakingCriteriaTypes || (t.MatchmakingCriteriaTypes = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCardViewInventory = void 0;
    t.UIGameCardViewInventory = class {
        constructor() {
            this.cardViews = []
        }
        addCardView(e) {
            this.cardViews.push(e), this.sortCardViews()
        }
        sortCardViews() {
            this.cardViews.sort((e, t) => e.cardData.cardEnum > t.cardData.cardEnum ? 1 : e.cardData.cardEnum == t.cardData.cardEnum ? 0 : -1)
        }
        getCardTypeCount(e) {
            let t = 0;
            for (const a of this.cardViews) a.cardData.cardEnum == e && (t += 1);
            return t
        }
        getTopCardWithType(e) {
            for (let t = this.cardViews.length - 1; t >= 0; t -= 1) {
                const a = this.cardViews[t];
                if (a.cardData.cardEnum == e) return a
            }
        }
        getAmountOfDifferentTypes() {
            const e = [];
            for (const t of this.cardViews) e.indexOf(t.cardData.cardEnum) > -1 || e.push(t.cardData.cardEnum);
            return e.length
        }
        hasCardOfType(e) {
            for (const t of this.cardViews)
                if (t.cardData.cardEnum == e) return !0;
            return !1
        }
        getAllCardEnums() {
            const e = [];
            for (const t of this.cardViews) e.push(t.cardData.cardEnum);
            return e
        }
        hideCardBadges() {
            for (const e of this.cardViews) e.hideBadge()
        }
        showCardBadges() {
            for (const e of this.cardViews) e.showBadge()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIPlayerOptionsPopup = t.UIPlayerOptionButtonType = void 0;
    const i = a(10),
        o = a(428),
        n = a(36),
        r = a(285),
        s = a(122),
        c = a(47),
        l = a(19);
    var h;
    ! function(e) {
        e[e.Report = 0] = "Report", e[e.Mute = 1] = "Mute", e[e.Profile = 2] = "Profile"
    }(h = t.UIPlayerOptionButtonType || (t.UIPlayerOptionButtonType = {}));
    t.UIPlayerOptionsPopup = class {
        constructor(e, t) {
            this.container = (0, i.createDivIn)(document.body, "player_options_dropdown_container"), window.onclick = e => {
                e.target == this.container && this.removeDropdown()
            }, this.playerName = t;
            const a = l.uiGameManager.canvasController,
                n = e.x * a.app.view.offsetWidth + a.responsiveController.getCanvasX(),
                r = e.y * a.app.view.offsetHeight + a.responsiveController.getCanvasY(),
                s = n / window.innerWidth * 100,
                c = r / window.innerHeight * 100;
            this.contentContainer = (0, i.createDivIn)(this.container, "player_options_dropdown_content"), this.contentContainer.style.left = s + "%", this.contentContainer.style.top = c + "%";
            const d = l.uiGameManager.canvasController.itemSize / l.uiGameManager.canvasController.appH * 100;
            this.contentContainer.style.width = d + "%", this.contentContainer.style.height = 1.5 * d + "%", this.reportButton = new o.UIPlayerOptionsPopupOptionView(this.contentContainer, h.Report), this.reportButton.setAction(() => {
                this.reportButtonAction()
            }), this.muteButton = new o.UIPlayerOptionsPopupOptionView(this.contentContainer, h.Mute, this.playerName), this.muteButton.setAction(() => {
                this.muteButtonAction()
            }), this.viewProfileButton = new o.UIPlayerOptionsPopupOptionView(this.contentContainer, h.Profile), this.viewProfileButton.setAction(() => {
                this.viewprofileButtonAction()
            })
        }
        removeDropdown() {
            this.container.style.display = "none", null != this.container.parentElement && this.container.parentElement.removeChild(this.container)
        }
        reportButtonAction() {
            new n.ViewPopup("Report " + this.playerName, `Are you sure you want to report ${this.playerName}?`, () => {
                r.UIReportPlayer.create(this.playerName), s.UIMutePlayer.mutePlayer(this.playerName);
                const e = new n.ViewPopup("Reported!", "The player has been reported. We have received the chat history, game log, and players` profiles of this game. Our mods will take appropriate action. Thanks for keeping the community clean.", () => {}, () => {}, !0);
                e.removeXButton(), e.show()
            }, () => {}, !0).show(), this.removeDropdown()
        }
        muteButtonAction() {
            s.UIMutePlayer.toggleMuteForPlayer(this.playerName), this.removeDropdown()
        }
        viewprofileButtonAction() {
            window.open((0, c.getProfileURI)(this.playerName)), this.removeDropdown()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TradeExchangeView = void 0;
    const i = a(104),
        o = a(13),
        n = a(79),
        r = a(6),
        s = a(7),
        c = a(50),
        l = a(90),
        h = a(17);
    class d extends h.SectionBgView {
        constructor(e, t, a, i, o, n, r, s, c = (() => {})) {
            super(t, a, i, o, n), this.uiGameManager = e, this.drawRoundedBg(), this.playerAvatarClickAction = c, this.createBank(r), this.createSelectPlayerContainer(s, r), this.createArrow(o, r), this.createCardContainer(r)
        }
        createBank(e) {
            if (e) return;
            const t = this.height,
                a = e ? 0 : this.width - t;
            this.bank = new o.SpriteView(a, 0, t, t, this, r.Loader.shared.resources.bank.texture, .1 * t), this.bank.centerYInParent()
        }
        createSelectPlayerContainer(e, t) {
            const a = this.height,
                i = t ? 0 : this.width - a;
            this.selectPlayerContainer = new l.UIGamePlayerAvatarContainerView(this.uiGameManager, i, 0, a, a, e, e => {
                this.playerAvatarClickAction(e)
            }, this, !1), this.selectPlayerContainer.resetAllPlayerAlpha(), t || this.selectPlayerContainer.setToolTipForAllPlayerAvatars(["Target this player"])
        }
        createArrow(e, t) {
            const a = .5 * e,
                o = t ? this.selectPlayerContainer.x + this.selectPlayerContainer.width : this.selectPlayerContainer.x - a;
            this.arrow = new i.TradeArrowView(o, 0, a, this, !t)
        }
        createCardContainer(e) {
            const t = e ? this.arrow.x + this.arrow.width : 0,
                a = e ? this.width - t : this.arrow.x,
                i = this.height;
            this.cardContainer = new n.UIGameCardContainerView(this.uiGameManager, t, 0, a, i, this, !0), this.cardContainer.setCardClickAction(e => {
                this.cardContainer.removeCard(e)
            })
        }
        resetSelectPlayerContainer(e, t) {
            this.removeSelectPlayerContainer(), this.createSelectPlayerContainer(e, t)
        }
        removeSelectPlayerContainer() {
            null != this.selectPlayerContainer && null != this.selectPlayerContainer.parent && this.selectPlayerContainer.parent.removeChild(this.selectPlayerContainer)
        }
        showBank() {
            this.bank.alpha = 1, this.selectPlayerContainer.alpha = 0
        }
        showOpponents() {
            this.selectPlayerContainer.alpha = 1, this.bank.alpha = 0
        }
        updatePlayerAvatarStatus(e) {
            for (const t of this.selectPlayerContainer.playerAvatars)(0, s.elementInArray)(e, t.playerState.color) ? t.status = c.UIGamePlayerAvatarStatus.Accepted : t.status = c.UIGamePlayerAvatarStatus.Declined
        }
    }
    t.TradeExchangeView = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewStackedCards = void 0;
    const i = a(16),
        o = a(17),
        n = a(302),
        r = a(19),
        s = a(13),
        c = a(82);
    class l extends o.SectionBgView {
        constructor(e, t, a, o, n, r) {
            super(e, 0, t, a, o);
            const l = i.UIGameConstants.CARD_RATIO * r,
                h = r / 4,
                d = r + (n.length - 1) * h;
            let u = (this.width - d) / 2;
            for (const e of n) {
                const t = c.CardView.getTextureForCard(e);
                new s.SpriteView(u, 0, r, l, this, t).centerYInParent(), u += h
            }
            this.createCardHover(n)
        }
        createCardHover(e) {
            e.length <= 1 || this.setHover(() => {
                this.hoveredOverTradeCards(e)
            }, () => {
                this.removeHoverResourceInfoLabel()
            })
        }
        setHover(e, t) {
            this.interactive = !0, this.on("pointerover", t => {
                e(t)
            }), this.on("pointerout", e => {
                t(e)
            })
        }
        hoveredOverTradeCards(e) {
            this.hoverResourceInfoLabel = new n.UIGameHoverResourceInfo(e, this, r.uiGameManager.canvasController.app.stage)
        }
        removeHoverResourceInfoLabel() {
            null != this.hoverResourceInfoLabel && this.hoverResourceInfoLabel.removeHover()
        }
    }
    t.ViewStackedCards = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameHoverResourceInfo = void 0;
    const i = a(6),
        o = a(16),
        n = a(13),
        r = a(82);
    class s extends i.Container {
        constructor(e, t, a) {
            super(), this.view = t;
            const i = 30 * o.UIGameConstants.CARD_RATIO;
            let s = 0;
            for (const t of e) {
                const e = r.CardView.getTextureForCard(t);
                new n.SpriteView(s, 0, 30, i, this, e);
                s += 30
            }
            const c = t.getGlobalPosition();
            this.x = c.x - this.width / 2 + t.width / 2, this.y = c.y - this.height, a.addChild(this)
        }
        removeHover() {
            null != this.parent && this.parent.removeChild(this)
        }
    }
    t.UIGameHoverResourceInfo = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapHighlightView = void 0;
    const i = a(6),
        o = a(26),
        n = a(13),
        r = a(11);
    class s extends n.SpriteView {
        constructor(e, t, a, n, s, c, l = !1) {
            super(t, a, n, n, s, l ? i.Loader.shared.resources.icon_highlight_circle_white.texture : i.Loader.shared.resources.icon_highlight_circle.texture), this.uiGameManager = e, this.setClickAction(() => {
                c(), r.Sound.playSound(r.Sound.SoundType.Click)
            }), this.size = n, this.center = new o.Point(t + this.size / 2, a + this.size / 2), this.zIndex = this.uiGameManager.mapController.mapView.layers.topLayer
        }
        animate(e) {
            const t = this.getAnimationSize(e);
            this.width = t, this.height = t, this.x = this.center.x - t / 2, this.y = this.center.y - t / 2
        }
        getAnimationSize(e) {
            const t = 1 + .1 * Math.sin(.5 * e);
            return this.size * t
        }
    }
    t.UIGameMapHighlightView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameBaseTileController = void 0;
    const i = a(23),
        o = a(305);
    t.UIGameBaseTileController = class {
        constructor(e) {
            this.uiGameManager = e
        }
        drawTile(e) {
            const t = e.hexFace.toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                a = i.GameUIImages.getHexImage(e.tileType),
                o = this.uiGameManager.mapController.mapView.hexagonWidth,
                n = this.uiGameManager.mapController.mapView.hexagonHeight,
                r = this.drawTileView(e, t, o, n, a);
            return r.drawProbability(e.diceNumber), r
        }
        drawTileView(e, t, a, i, n) {
            const r = t.x - a / 2,
                s = t.y - i / 2,
                c = a,
                l = i,
                h = this.uiGameManager.mapController.mapView;
            return new o.UIGameMapTileView(h, e.hexFace, r, s, c, l, n, h)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapTileView = void 0;
    const i = a(28),
        o = a(26),
        n = a(7),
        r = a(27),
        s = a(13),
        c = a(23),
        l = a(464);
    class h extends r.SectionView {
        constructor(e, t, a, i, o, n, r, c) {
            super(a - .005 * o, i - .005 * n, o, n, c, !0), this.mapView = e, this.tileSpriteView = new s.SpriteView(0, 0, this.width, this.height, this, r), this.hexFace = t, this.zIndex = this.mapView.layers.mapTiles
        }
        highlightTileForTime(e) {
            this.highlight();
            const t = e * n.Utils.MILLISECONDS;
            setTimeout(() => {
                this.resetHighlight()
            }, t)
        }
        highlight() {
            this.tileSpriteView.tint = i.GameColor.getColorHexValue(i.GameColor.Color.Primary3)
        }
        resetHighlight() {
            this.tileSpriteView.tint = 16777215
        }
        drawProbability(e) {
            this.removeDiceProbability(), this.diceNumber = e;
            const t = c.GameUIImages.getProbabilityImage(e);
            if (null == t) return;
            const a = this.mapView.robberRadius,
                i = this.width / 2 - a / 2,
                o = this.height / 2 - a / 2 - a / 8 + this.mapView.hexagonHeight / 5;
            this.probabilityView = new l.UIGameMapDiceProbabilityView(i, o, a, a, this.hexFace, this, t), this.probabilityView.zIndex = this.mapView.layers.mapTiles
        }
        removeDiceProbability() {
            null != this.probabilityView && null != this.probabilityView.parent && this.probabilityView.parent.removeChild(this.probabilityView)
        }
        getDiceProbabilityMapPoint() {
            if (null != this.probabilityView) return new o.Point(this.x + this.probabilityView.x, this.y + this.probabilityView.y)
        }
    }
    t.UIGameMapTileView = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MovingSectionView = void 0;
    const i = a(27),
        o = a(102);
    class n extends i.SectionView {
        constructor(e, t, a, i, n, r, s) {
            super(e, t, a, i, n, !0), this.animationController = new o.ViewAnimationController(this, r, s)
        }
    }
    t.MovingSectionView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameBaseShoreTileController = void 0;
    const i = a(21),
        o = a(305),
        n = a(6),
        r = a(7),
        s = a(31);
    class c {
        constructor(e) {
            this.uiGameManager = e
        }
        drawShoreTile(e, t, a = 0) {
            const i = this.uiGameManager.mapController.mapView,
                n = e.toPixel(i.mapCenter, i.hexagonHeight / 2),
                r = i.hexagonWidth,
                s = i.hexagonHeight,
                c = new o.UIGameMapTileView(i, e, n.x - r / 2, n.y - s / 2, r, s, t, i);
            return c.tileSpriteView.rotate(a), c
        }
        isNeighborLand(e) {
            for (const t of this.uiGameManager.gameState.mapState.tileState.tiles)
                if (t.isTileLand() && e.x == t.hexFace.x && e.y == t.hexFace.y) return !0;
            return !1
        }
        isNeighborFog(e) {
            for (const t of this.uiGameManager.gameState.mapState.tileState.tiles)
                if (e.x == t.hexFace.x && e.y == t.hexFace.y && t.tileType == i.TileEnums.TileTypes.Fog) return !0;
            return !1
        }
        getTextureAndAngle(e) {
            const t = this.getShorePatternFromHexFace(e),
                a = t.filter(Boolean).length,
                i = n.Loader.shared.resources;
            switch (a) {
                case 1:
                    const e = c.getShorePatternFit(t, [!0, !1, !1, !1, !1, !1]);
                    if (e.fits) return {
                        texture: i.tile_shore_1.texture,
                        angle: e.angle
                    };
                    break;
                case 2:
                    let a = c.getShorePatternFit(t, [!0, !0, !1, !1, !1, !1]);
                    if (a.fits) return {
                        texture: i.tile_shore_2_sswwww.texture,
                        angle: a.angle
                    };
                    if (a = c.getShorePatternFit(t, [!0, !1, !0, !1, !1, !1]), a.fits) return {
                        texture: i.tile_shore_2_swswww.texture,
                        angle: a.angle
                    };
                    if (a = c.getShorePatternFit(t, [!0, !1, !1, !0, !1, !1]), a.fits) return {
                        texture: i.tile_shore_2_swwsww.texture,
                        angle: a.angle
                    };
                    break;
                case 3:
                    let o = c.getShorePatternFit(t, [!0, !0, !0, !1, !1, !1]);
                    if (o.fits) return {
                        texture: i.tile_shore_3_ssswww.texture,
                        angle: o.angle
                    };
                    if (o = c.getShorePatternFit(t, [!0, !0, !1, !1, !0, !1]), o.fits) return {
                        texture: i.tile_shore_3_sswwsw.texture,
                        angle: o.angle
                    };
                    if (o = c.getShorePatternFit(t, [!0, !0, !1, !0, !1, !1]), o.fits) return {
                        texture: i.tile_shore_3_sswsww.texture,
                        angle: o.angle
                    };
                    if (o = c.getShorePatternFit(t, [!0, !1, !0, !1, !0, !1]), o.fits) return {
                        texture: i.tile_shore_3_swswsw.texture,
                        angle: o.angle
                    };
                    break;
                case 4:
                    let n = c.getShorePatternFit(t, [!0, !0, !0, !0, !1, !1]);
                    if (n.fits) return {
                        texture: i.tile_shore_4_ssssww.texture,
                        angle: n.angle
                    };
                    if (n = c.getShorePatternFit(t, [!0, !0, !0, !1, !0, !1]), n.fits) return {
                        texture: i.tile_shore_4_ssswsw.texture,
                        angle: n.angle
                    };
                    if (n = c.getShorePatternFit(t, [!0, !0, !1, !0, !0, !1]), n.fits) return {
                        texture: i.tile_shore_4_sswssw.texture,
                        angle: n.angle
                    };
                    break;
                case 5:
                    const r = c.getShorePatternFit(t, [!0, !0, !0, !0, !0, !1]);
                    if (r.fits) return {
                        texture: i.tile_shore_5.texture,
                        angle: r.angle
                    };
                    break;
                case 6:
                    return {
                        texture: i.tile_shore_6.texture, angle: 0
                    }
            }
            return (0, s.logError)("getTextureAndAngle", [a]), {
                texture: i.tile_sea.texture,
                angle: 0
            }
        }
        getShorePatternFromHexFace(e) {
            const t = [];
            for (const a of e.edges()) t.push(this.uiGameManager.gameState.mapState.tileState.isEdgeOnShore(a));
            return t
        }
        static getShorePatternFit(e, t) {
            const a = t;
            for (let t = 0; t < 6; t += 1) {
                if ((0, r.arraysEqual)(e, a)) return {
                    fits: !0,
                    angle: 60 * t
                };
                const i = a.pop();
                null != i && a.unshift(i)
            }
            return {
                fits: !1,
                angle: 0
            }
        }
    }
    t.UIGameBaseShoreTileController = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SpriteExpanionArrowView = void 0;
    const i = a(13),
        o = a(6);
    class n extends i.SpriteView {
        constructor(e, t, a, i) {
            const n = o.Loader.shared.resources.icon_arrow_player_profile.texture,
                r = n.height / n.width,
                s = .5 * a.width;
            super(e, t, s, s * r, a, n, i), this.toggled = !1, this.originalContrainerWidth = a.width, this.originalArrowWidth = s, this.centerYInParent(), this.flipArrow()
        }
        flipArrow() {
            this.width = -this.width, this.toggled ? this.centerXInParent() : this.x = this.originalContrainerWidth / 2 + this.width / 2, this.toggled = !this.toggled
        }
        arrowPointLeft() {
            this.toggled || (this.width = -this.width, this.x = this.originalContrainerWidth / 2 + this.width / 2, this.toggled = !0)
        }
        arrowPointRight() {
            this.toggled && (this.width = -this.originalArrowWidth, this.centerXInParent(), this.toggled = !1)
        }
    }
    t.SpriteExpanionArrowView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationProgressCardToolTipView = void 0;
    const i = a(130),
        o = a(38),
        n = a(25);
    var r = a(3).GameStateEnums.CardEnum;
    const s = a(7),
        c = a(128),
        l = a(16),
        h = a(54);
    class d extends i.ToolTipBgView {
        constructor(e, t, a, i, d) {
            const u = e.canvasController,
                g = a.getGlobalPosition(),
                m = 2.6 * u.itemSize,
                p = 1.8 * u.itemSize;
            super(g.x + a.width / 2 - m / 2, g.y + a.height / 2, m, p, e.canvasController.app.stage), this.uiGameManager = e;
            const C = .075 * u.itemSize,
                y = .125 * p;
            new o.TextView("Progress Cards", 0, C, m, y, this, n.GameFont.Size.L).centerXInParent();
            const S = y,
                v = y + .15 * p;
            new o.TextView(t, 0, S, m, v, this, n.GameFont.Size.Normal).centerXInParent();
            const _ = [r.ProgressCardTradeBack, r.ProgressCardPoliticsBack, r.ProgressCardScienceBack],
                P = v + .06 * p,
                T = 1.1 * u.itemSize,
                b = T * l.UIGameConstants.CARD_RATIO,
                f = m / (_.length + 1);
            let I = f - b / 2;
            for (const e of _) {
                const t = new c.CardCountView(I, P, b, T, this, e),
                    a = (0, s.countOccurenceOfValueInArray)(i, e),
                    o = (0, h.getQuestionMarkAmountForCard)(a, d);
                t.updateText(o), I += f
            }
            this.makeSurePopupIsNotOffTheScreen()
        }
        makeSurePopupIsNotOffTheScreen() {
            const e = this.uiGameManager.canvasController,
                t = this.getGlobalPosition(),
                a = t.y + this.absoluteHeight;
            a > e.appH && (this.y -= a - e.appH);
            const i = t.x + this.absoluteWidth;
            i > e.appW && (this.x -= i - e.appW)
        }
        removeToolTip() {
            null != this.parent && this.parent.removeChild(this)
        }
    }
    t.UIGamePlayerInformationProgressCardToolTipView = d
}, , , , , , , , , , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonMultiView = void 0;
    const i = a(80);
    var o = a(3).GameStateEnums.UIGameEventEnums;
    class n extends i.UIGameActionButtonView {
        constructor(e, t, a) {
            super(e, t, a), this.expandedButtons = [], this.setUpdateAction(), this.repositionedButton = () => {
                this.repositionButtons()
            }
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case o.PlayerControllerStateUpdated:
                case o.CityImprovementStateUpdated:
                    this.checkAndUpdateOpacityIfExpandedButtonsAreActive();
                    break;
                case o.GameStateUpdated:
                    this.closeButtonAtEndOfMyTurn(), this.checkAndUpdateOpacityIfExpandedButtonsAreActive(), this.lastPlayerTurn = this.uiGameManager.gameState.currentTurnPlayerColor;
                    break;
                case o.ClickedMultiButton:
                    this.hideButtons()
            }
        }
        addButton(e) {
            this.expandedButtons.push(e), null != e.parent && e.parent.removeChild(e)
        }
        repositionButtons() {
            this.expandedButtons.sort((e, t) => e.preferedPosition > t.preferedPosition ? 1 : -1);
            const e = this.uiGameManager.canvasController,
                t = (this.expandedButtons.length + 1) / 2,
                a = e.itemSize,
                i = this.y - e.itemSize;
            let o = 1;
            for (const e of this.expandedButtons) {
                const n = this.x + (o - t) * a;
                e.x = n, e.y = i, o += 1
            }
        }
        setUpdateAction() {
            this.repositionButtons(), this.updateAction(() => {
                this.toggleShowButtonViews()
            })
        }
        toggleShowButtonViews() {
            if (this.expandedButtons.length <= 0) return;
            const e = null != this.expandedButtons[0].parent;
            this.uiGameManager.eventController.sendEvent(void 0, o.ClickedMultiButton), e ? this.hideButtons() : this.showButtons()
        }
        hideButtons() {
            for (const e of this.expandedButtons) null != e.parent && (e.parent.removeChild(e), e.removeCardHover())
        }
        showButtons() {
            for (const e of this.expandedButtons) null == e.parent && this.uiGameManager.actionsController.container.addChild(e)
        }
        forceShowButtons() {
            this.uiGameManager.eventController.sendEvent(void 0, o.ClickedMultiButton), this.showButtons()
        }
        checkAndUpdateOpacityIfExpandedButtonsAreActive() {
            if (this.inactivateOpacity(), this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor)
                for (const e of this.expandedButtons)
                    if (e.isButtonOpactityActive()) return void this.activateOpacity()
        }
        closeButtonAtEndOfMyTurn() {
            this.lastPlayerTurn == this.uiGameManager.gameState.myColor && this.uiGameManager.gameState.currentTurnPlayerColor != this.uiGameManager.gameState.myColor && this.hideButtons()
        }
    }
    t.UIGameActionButtonMultiView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCityImprovementProgressTrackerSquareView = void 0;
    const i = a(61),
        o = a(27),
        n = a(13),
        r = a(6);
    class s extends o.SectionView {
        constructor(e, t, a, i, o, s) {
            super(e, t, a, a, i, !0), this.cityImprovementType = o, this.progressLevel = s;
            const c = this.getInactiveTexture();
            this.squareView = new n.SpriteView(0, 0, .98 * a, .98 * a, this, c), this.squareView.centerXInParent(), this.squareView.centerYInParent();
            const l = r.Loader.shared.resources.icon_square_frame.texture,
                h = new n.SpriteView(0, 0, a, a, this, l);
            h.centerXInParent(), h.centerYInParent()
        }
        setActiveTexture() {
            const e = this.getActiveTexture();
            this.squareView.texture = e
        }
        setInactiveTexture() {
            const e = this.getInactiveTexture();
            this.squareView.texture = e
        }
        getActiveTexture() {
            switch (this.cityImprovementType) {
                case i.CityImprovementTypes.Politics:
                    return r.Loader.shared.resources.icon_square_active_politics.texture;
                case i.CityImprovementTypes.Trade:
                    return r.Loader.shared.resources.icon_square_active_trade.texture;
                case i.CityImprovementTypes.Science:
                    return r.Loader.shared.resources.icon_square_active_science.texture
            }
        }
        getInactiveTexture() {
            switch (this.cityImprovementType) {
                case i.CityImprovementTypes.Politics:
                    return r.Loader.shared.resources.icon_square_inactive_politics.texture;
                case i.CityImprovementTypes.Trade:
                    return r.Loader.shared.resources.icon_square_inactive_trade.texture;
                case i.CityImprovementTypes.Science:
                    return r.Loader.shared.resources.icon_square_inactive_science.texture
            }
        }
    }
    t.UIGameCityImprovementProgressTrackerSquareView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationCityImprovementProgressTrackerView = void 0;
    const i = a(61);
    var o = a(3).GameStateEnums.UIGameEventEnums;
    const n = a(556),
        r = a(27);
    class s extends r.SectionView {
        constructor(e, t, a, i, o, n, r) {
            super(a, i, o, n, r, !0), this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerCityImprovementState = t;
            const s = this.uiGameManager.playersController.getPlayerInformationViewWithColor(this.playerCityImprovementState.playerColor);
            null != s && (this.playerInformation = s, this.cityImprovementProgressTrackerViews = [], this.initCityImprovementProgressTrackerViews())
        }
        onEvent(e, t) {
            switch (t) {
                case o.CityImprovementStateUpdated:
                    this.updateCityProgressTracker()
            }
        }
        initCityImprovementProgressTrackerViews() {
            const e = this.width / 3;
            this.cityImprovementProgressTrackerViews.push(new n.UIGameCityImprovementProgressTrackerView(0, 0, e, this, i.CityImprovementTypes.Trade)), this.cityImprovementProgressTrackerViews.push(new n.UIGameCityImprovementProgressTrackerView(e, 0, e, this, i.CityImprovementTypes.Politics)), this.cityImprovementProgressTrackerViews.push(new n.UIGameCityImprovementProgressTrackerView(2 * e, 0, e, this, i.CityImprovementTypes.Science))
        }
        updateCityProgressTracker() {
            for (const e of this.cityImprovementProgressTrackerViews) {
                const t = this.playerCityImprovementState.getCityImprovementForType(e.cityImprovementType);
                null != t && (t.hasMetropolis ? e.showMetropolisIcon() : e.hideMetropolisIcon(), e.updateProgressTracker(t.level))
            }
        }
    }
    t.UIGamePlayerInformationCityImprovementProgressTrackerView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupCondensedCardInformationController = void 0;
    const i = a(52),
        o = a(562);
    t.UIGamePopupCondensedCardInformationController = class {
        constructor(e, t, a, i, o, n) {
            this.uiGameManager = e, this.parentContainer = t, this.x = a, this.y = i, this.w = o, this.h = this.getLongestTextHeight(n)
        }
        getLongestTextHeight(e) {
            let t = 0;
            for (const a of e) {
                const e = this.getSelectCardInformationForCard(a);
                null != e && (null != e.parent && e.parent.removeChild(e), e.height <= t || (t = e.height))
            }
            return t + .1 * this.uiGameManager.canvasController.itemSize
        }
        getSelectCardInformationForCard(e) {
            const t = i.CardDataController.getCardDataForCard(e);
            if (null != t) return new o.UIGamePopupCondensedCardInformationView(t, this.x, this.y, this.w, this.h, this.parentContainer)
        }
        removeSelectedCardInformation() {
            null != this.condensedCardInformation && (null != this.condensedCardInformation.parent && this.condensedCardInformation.parent.removeChild(this.condensedCardInformation), this.condensedCardInformation = void 0)
        }
        showSelectedCardInformation(e) {
            this.removeSelectedCardInformation(), this.condensedCardInformation = this.getSelectCardInformationForCard(e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectPlayers = void 0;
    var i = a(3).GameStateEnums.ActionStates;
    const o = a(64),
        n = a(31),
        r = a(63),
        s = a(90),
        c = a(6),
        l = a(13),
        h = a(11);
    class d extends o.SectionBgAdaptiveView {
        constructor(e, t, a, i) {
            super(), this.uiGameManager = e, this.selectedPlayer = void 0, this.selectPlayerFormat = a, this.selectPlayerCallbacks = [], this.developmentCardUsed = i;
            const o = this.uiGameManager.canvasController;
            o.app.stage.addChild(this), this.popupImageAndDescription = t, this.addChild(this.popupImageAndDescription);
            const n = this.popupImageAndDescription.y + this.popupImageAndDescription.height,
                c = .85 * this.uiGameManager.canvasController.itemSize;
            this.playerSelectorContainer = new s.UIGamePlayerAvatarContainerView(this.uiGameManager, 0, n, o.popupWidth, c, a.playersToSelect, e => {
                this.playerClickPlayerAvatar(e)
            }, this, !0);
            const l = .55 * o.itemSize,
                h = .075 * o.itemSize,
                d = this.playerSelectorContainer.y + this.playerSelectorContainer.height + h;
            this.confirmationButtons = new r.UIGamePopupConfirmationButtons(0, d, o.popupWidth, l, () => {
                this.clickedCheckAction()
            }, () => {
                this.clickedCancelAction()
            }, this), this.selectPlayerFormat.cancelButtonActive ? this.confirmationButtons.showCancelButton() : this.confirmationButtons.hideCancelButton(), this.drawSectionBgAroundContent();
            const u = o.appH - o.itemSize - this.absoluteHeight;
            this.y = u
        }
        playerClickPlayerAvatar(e) {
            this.selectedPlayer = e, this.playerSelectorContainer.updatePlayerAlpha(e, n.ACTIVE_OPACITY), this.updateCheckmark();
            for (const t of this.selectPlayerCallbacks) t.selectPlayerAction(e)
        }
        addSelectPlayerCallback(e) {
            this.selectPlayerCallbacks.push({
                selectPlayerAction: e
            })
        }
        clickedCheckAction() {
            null != this.selectedPlayer && (this.uiGameManager.gameState.currentActionState == i.None && this.uiGameManager.socketGameSend.clickedDevelopmentCard(this.developmentCardUsed), this.uiGameManager.socketGameSend.selectPlayer(this.selectedPlayer), this.closeUI())
        }
        clickedCancelAction() {
            this.selectPlayerFormat.cancelButtonActive && (this.uiGameManager.socketGameSend.cancelAction(), this.closeUI())
        }
        updateCheckmark() {
            this.confirmationButtons.checkButton.inactivateOpacity(), null != this.selectedPlayer && this.confirmationButtons.checkButton.activateOpacity()
        }
        addCancelStateButton(e) {
            const t = this.uiGameManager.canvasController,
                a = c.Loader.shared.resources,
                i = .1 * t.itemSize,
                o = .3 * t.itemSize,
                n = this.width - o - i + t.margin,
                r = i - t.margin;
            this.cancelStateButton = new l.SpriteView(n, r, o, o, this.playerSelectorContainer, a.icon_x.texture), this.cancelStateButton.buttonMode || (this.cancelStateButton.buttonMode = !0), this.cancelStateButton.interactive || (this.cancelStateButton.interactive = !0), this.cancelStateButton.on("click", t => {
                e(), h.Sound.playSound(h.Sound.SoundType.Click)
            }), this.cancelStateButton.on("tap", t => {
                e(), h.Sound.playSound(h.Sound.SoundType.Click)
            })
        }
        closeUI() {
            null != this.parent && this.parent.removeChild(this)
        }
        removeConfirmationButtons() {
            null != this.confirmationButtons.parent && this.confirmationButtons.parent.removeChild(this.confirmationButtons)
        }
    }
    t.UIGamePopupSelectPlayers = d
}, , , , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketEncoding = void 0;
    const unknownVariable = a(617),
        o = a(24);
    t.SocketEncoding = class {
        static setWebSocketBinaryType(e) {
            o.KatanConfigs.appEnvironmentIsDevelopment() || (e.binaryType = "arraybuffer")
        }
        static encode(e) {
            return o.KatanConfigs.appEnvironmentIsDevelopment() ? JSON.stringify(e) : unknownVariable.encode(e)
        }
        static decode(e) {
            return o.KatanConfigs.appEnvironmentIsDevelopment() ? JSON.parse(e) : unknownVariable.decode(e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameState = void 0;
    const i = a(107),
        o = a(3);
    var n = o.GameStateEnums.TurnStates;
    const r = a(331),
        s = a(149),
        c = a(20),
        l = a(7),
        h = a(334),
        d = a(66),
        u = a(342);
    t.GameState = class {
        constructor() {
            this.gameSettings = u.PremadeGameSettings.testSetting(), this.myColor = c.PlayerColors.None, this.currentTurnState = o.GameStateEnums.TurnStates.GameSetup, this.currentActionState = o.GameStateEnums.ActionStates.None, this.bank = new i.BankState, this.myBankTradeRatios = new h.BankTradeRatioState([]), this.players = [], this.mapState = new r.MapState, this.playOrder = [], this.currentTurnPlayerColor = c.PlayerColors.None, this._playersTakingOffTurnAction = [], this.isPlayerTakingOffTurnAction = !1, this.lastPlayerToRollDice = c.PlayerColors.None, this.diceThrown = !1, this.lastDice1 = 1, this.lastDice2 = 1, this.lastEventDice = void 0, this.lastStateStart = Date.now(), this.embargos = []
        }
        set gameSettings(e) {
            this._gameSettings = e;
            const t = d.GameModeDataController.getModeDataForMode(this._gameSettings.modeSetting);
            null != t && (this.gameModeData = t, this.gameModeData.toolTipOverrides.overrideToolTips())
        }
        get gameSettings() {
            return this._gameSettings
        }
        set playersTakingOffTurnAction(e) {
            for (const t of e)(0, l.elementInArray)(this.playersTakingOffTurnAction, t) || this._playersTakingOffTurnAction.push(t)
        }
        get playersTakingOffTurnAction() {
            return this._playersTakingOffTurnAction
        }
        isPlayerSpectator() {
            return this.myColor == c.PlayerColors.None
        }
        getPlayerWithColor(e) {
            const t = this.players.find(t => t.color == e);
            if (null != t) return t;
            if (this.isPlayerSpectator()) return new s.PlayerControllerState;
            throw new Error("no player found: " + c.PlayerColors[e])
        }
        getPlayersWithColor(e) {
            const t = [];
            for (const a of this.players)(0, l.elementInArray)(e, a.color) && t.push(a);
            return t
        }
        getPlayerNameWithColor(e) {
            return this.getPlayerWithColor(e).username
        }
        isPlayerTakingAction() {
            if ((0, l.elementInArray)(this.playersTakingOffTurnAction, this.myColor)) return !0;
            const e = this.currentTurnPlayerColor == this.myColor;
            return !(this.playersTakingOffTurnAction.length > 0 && e) && !!e
        }
        waitingTimePassedFor(e) {
            return this.lastStateStart + e * l.Utils.MILLISECONDS < Date.now()
        }
        secondsLeftForNextState() {
            const e = this.currentTime - this.lastStateStart,
                t = this.timeToWaitForState - e / l.Utils.MILLISECONDS;
            return t < 0 ? 0 : Math.round(t)
        }
        getOtherActivePlayers() {
            const e = [];
            for (const t of this.players) t.color != this.myColor && "None" != t.username && e.push(t);
            return e
        }
        getOtherActivePlayerColors() {
            const e = [];
            for (const t of this.getOtherActivePlayers()) e.push(t.color);
            return e
        }
        didIEmbargoPlayer(e) {
            for (const t of this.embargos)
                if (t.player == this.myColor)
                    for (const a of t.activeEmbargosAgainst)
                        if (a == e) return !0;
            return !1
        }
        isGameSetup() {
            return this.currentTurnState == n.GameSetup
        }
        initPlayerControllerStates(e) {
            for (const t of e) {
                const e = new s.PlayerControllerState;
                e.deserialize(t), this.players.push(e)
            }
        }
        getHighestPublicVPScore() {
            let e = 0;
            for (const t of this.players) {
                const a = t.victoryPointState.totalPublicVictoryPoints();
                a > e && (e = a)
            }
            return e
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MapState = void 0;
    const i = a(26),
        o = a(21),
        n = a(332),
        r = a(333);
    t.MapState = class {
        constructor() {
            this.tileState = new n.TileState, this.portState = new r.PortState
        }
        createMap(e) {
            this.createMapTiles(e.tileState.tiles), this.createMapCorners(e.tileState.tileCorners), this.createMapEdges(e.tileState.tileEdges), this.createMapPorts(e.portState.portEdges)
        }
        deserialize(e) {
            this.deserializeTileCorners(e.tileState.tileCorners), this.deserializeTileEdges(e.tileState.tileEdges), this.deserializeTileHex(e.tileState.tiles)
        }
        createMapTiles(e) {
            for (const t of e) {
                const e = t._diceNumber,
                    a = new o.TileHex(new i.HexFace(t.hexFace.x, t.hexFace.y), t.tileType, e, t.tilePieceTypes);
                this.tileState.tiles.push(a)
            }
        }
        createMapCorners(e) {
            for (const t of e) {
                const e = new i.HexCorner(t.hexCorner.x, t.hexCorner.y, t.hexCorner.z),
                    a = new o.TileCorner(e, t.owner, t.buildingType, t.portType);
                a.bonuses = t.bonuses, this.tileState.tileCorners.push(a)
            }
        }
        createMapEdges(e) {
            for (const t of e) {
                const e = new i.HexEdge(t.hexEdge.x, t.hexEdge.y, t.hexEdge.z),
                    a = new o.TileEdge(e, t.owner, t.type);
                this.tileState.tileEdges.push(a)
            }
        }
        createMapPorts(e) {
            for (const t of e) {
                const e = {
                    hexEdge: new i.HexEdge(t.hexEdge.x, t.hexEdge.y, t.hexEdge.z),
                    portType: t.portType
                };
                this.portState.portEdges.push(e)
            }
        }
        deserializeTileCorners(e) {
            for (const t of e) {
                const e = this.tileState.getTileCorner(t.hexCorner);
                null != e && e.deserialize(t)
            }
        }
        deserializeTileEdges(e) {
            for (const t of e) {
                const e = this.tileState.getTileEdge(t.hexEdge);
                null != e && e.deserialize(t)
            }
        }
        deserializeTileHex(e) {
            for (const t of e) {
                const e = this.tileState.getTileHex(t.hexFace);
                null != e && e.deserialize(t)
            }
        }
        isPortOnEastSideOfTile(e) {
            const t = new i.HexEdge(e.hexFace.x, e.hexFace.y + 1, i.HexShapeEnums.EdgeVariables.NorthWest);
            if (this.portState.isPortOnEdge(t)) return !0;
            const a = new i.HexEdge(e.hexFace.x + 1, e.hexFace.y, i.HexShapeEnums.EdgeVariables.West);
            if (this.portState.isPortOnEdge(a)) return !0;
            const o = new i.HexEdge(e.hexFace.x + 1, e.hexFace.y - 1, i.HexShapeEnums.EdgeVariables.SouthWest);
            return !!this.portState.isPortOnEdge(o)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TileState = void 0;
    const i = a(21);
    t.TileState = class {
        constructor() {
            this.tiles = [], this.tileCorners = [], this.tileEdges = []
        }
        getTileHexIndex(e) {
            for (const [t, a] of this.tiles.entries())
                if (a.hexFace.sameFace(e)) return t
        }
        getTileCornerIndex(e) {
            for (const [t, a] of this.tileCorners.entries())
                if (a.sameCorner(e)) return t
        }
        getTileEdgeIndex(e) {
            for (const [t, a] of this.tileEdges.entries())
                if (a.sameEdge(e)) return t
        }
        getTileHex(e) {
            for (const t of this.tiles)
                if (t.hexFace.sameFace(e)) return t
        }
        getTileCorner(e) {
            for (const t of this.tileCorners)
                if (t.hexCorner.sameCorner(e)) return t
        }
        getTileEdge(e) {
            for (const t of this.tileEdges)
                if (t.hexEdge.sameEdge(e)) return t
        }
        isEdgeTouchingLand(e) {
            for (const t of e.hexEdge.touchingFaces()) {
                const e = this.getTileHex(t);
                if (null != e && e.isTileLand()) return !0
            }
            return !1
        }
        isCornerTouchingLand(e) {
            for (const t of e.hexCorner.touchingFaces()) {
                const e = this.getTileHex(t);
                if (null != e && e.isTileLand()) return !0
            }
            return !1
        }
        isEdgeTouchingSea(e) {
            for (const t of e.hexEdge.touchingFaces()) {
                const e = this.getTileHex(t);
                if (null == e) return !0;
                if (e.tileType == i.TileEnums.TileTypes.Sea) return !0
            }
            return !1
        }
        isCornerTouchingSea(e) {
            for (const t of e.hexCorner.touchingFaces()) {
                const e = this.getTileHex(t);
                if (null == e) return !0;
                if (e.tileType == i.TileEnums.TileTypes.Sea) return !0
            }
            return !1
        }
        isEdgeOnShore(e) {
            const t = this.getTileEdge(e);
            return null != t && (!!this.isEdgeTouchingLand(t) && !!this.isEdgeTouchingSea(t))
        }
        isCornerOnShore(e) {
            const t = this.getTileCorner(e);
            return null != t && (!!this.isCornerTouchingLand(t) && !!this.isCornerTouchingSea(t))
        }
        isTileOnShore(e) {
            if (!e.isTileLand()) return !1;
            for (const t of e.hexFace.neighbors()) {
                const e = this.getTileHex(t);
                if (null == e) return !0;
                if (e.tileType == i.TileEnums.TileTypes.Sea) return !0
            }
            return !1
        }
        getTileWithPiece(e) {
            for (const t of this.tiles)
                if (t.tilePieceTypes == e) return t
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PortState = void 0;
    t.PortState = class {
        constructor() {
            this.portEdges = []
        }
        isPortOnEdge(e) {
            for (const t of this.portEdges)
                if (t.hexEdge.sameEdge(e)) return !0;
            return !1
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BankTradeRatioState = void 0;
    const i = a(52),
        o = a(7);
    t.BankTradeRatioState = class {
        constructor(e) {
            this.bankTradeRatios = [], this.setStartingBankTradeRatios(e)
        }
        setStartingBankTradeRatios(e) {
            const t = i.CardDataController.getCardEnumsOfTypes(e);
            for (const e of t) this.bankTradeRatios.push({
                resource: e,
                tradeRatio: 4
            })
        }
        getAllBankTradeRatios() {
            return (0, o.clone)(this.bankTradeRatios)
        }
        getBankTradeRatioForCard(e) {
            for (const t of this.bankTradeRatios)
                if (t.resource == e) return t.tradeRatio;
            return 4
        }
        deserialize(e) {
            this.bankTradeRatios = e
        }
    }
}, function(e, t, a) {
    "use strict";
    var i = this && this.__createBinding || (Object.create ? function(e, t, a, i) {
            void 0 === i && (i = a), Object.defineProperty(e, i, {
                enumerable: !0,
                get: function() {
                    return t[a]
                }
            })
        } : function(e, t, a, i) {
            void 0 === i && (i = a), e[i] = t[a]
        }),
        o = this && this.__exportStar || function(e, t) {
            for (var a in e) "default" === a || Object.prototype.hasOwnProperty.call(t, a) || i(t, e, a)
        };
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), o(a(336), t), o(a(337), t), o(a(338), t), o(a(339), t), o(a(340), t), o(a(341), t)
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardOre = t.CardGrain = t.CardWool = t.CardBrick = t.CardLumber = t.CardResourceBack = void 0;
    const i = a(22),
        o = a(3),
        n = a(65);
    class r extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ResourceBack, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Resource, this.isCardBack = !0, this.imageFileName = "card_rescardback", this.tipTitle = i.EnglishTexts.RESOURCE_CARD_BACK_TIP_TITLE, this.tipBody = i.EnglishTexts.RESOURCE_CARD_BACK_TIP_BODY, this.clickPopupType = n.CardClickPopupType.None, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardResourceBack = r;
    class s extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Lumber, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Resource, this.isCardBack = !1, this.imageFileName = "card_lumber", this.tipTitle = i.EnglishTexts.RESOURCE_CARD_LUMBER_TIP_TITLE, this.tipBody = i.EnglishTexts.DEAFULT_RESOURCE_CARD_LUMBER_TIP_BODY, this.clickPopupType = n.CardClickPopupType.TradeWindow, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardLumber = s;
    class c extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Brick, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Resource, this.isCardBack = !1, this.imageFileName = "card_brick", this.tipTitle = i.EnglishTexts.RESOURCE_CARD_BRICK_TIP_TITLE, this.tipBody = i.EnglishTexts.DEAFULT_RESOURCE_CARD_BRICK_TIP_BODY, this.clickPopupType = n.CardClickPopupType.TradeWindow, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardBrick = c;
    class l extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Wool, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Resource, this.isCardBack = !1, this.imageFileName = "card_wool", this.tipTitle = i.EnglishTexts.RESOURCE_CARD_WOOL_TIP_TITLE, this.tipBody = i.EnglishTexts.DEAFULT_RESOURCE_CARD_WOOL_TIP_BODY, this.clickPopupType = n.CardClickPopupType.TradeWindow, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardWool = l;
    class h extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Grain, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Resource, this.isCardBack = !1, this.imageFileName = "card_grain", this.tipTitle = i.EnglishTexts.RESOURCE_CARD_GRAIN_TIP_TITLE, this.tipBody = i.EnglishTexts.DEAFULT_RESOURCE_CARD_GRAIN_TIP_BODY, this.clickPopupType = n.CardClickPopupType.TradeWindow, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardGrain = h;
    class d extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Ore, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Resource, this.isCardBack = !1, this.imageFileName = "card_ore", this.tipTitle = i.EnglishTexts.RESOURCE_CARD_ORE_TIP_TITLE, this.tipBody = i.EnglishTexts.DEAFULT_RESOURCE_CARD_ORE_TIP_BODY, this.clickPopupType = n.CardClickPopupType.TradeWindow, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardOre = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardYearOfPlenty = t.CardRoadBuilding = t.CardMonopoly = t.CardVictoryPoint = t.CardKnight = t.CardDevelopmentCardBack = void 0;
    const i = a(22),
        o = a(3),
        n = a(65);
    class r extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.DevelopmentBack, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Development, this.isCardBack = !0, this.imageFileName = "card_devcardback", this.tipTitle = i.EnglishTexts.DEVELOPMENT_CARD_BACK_TIP_TITLE, this.tipBody = i.EnglishTexts.DEVELOPMENT_CARD_BACK_TIP_BODY, this.clickPopupType = n.CardClickPopupType.None, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardDevelopmentCardBack = r;
    class s extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Knight, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Development, this.isCardBack = !1, this.imageFileName = "card_knight", this.tipTitle = i.EnglishTexts.DEVELOPMENT_CARD_KNIGHT_TIP_TITLE, this.tipBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_KNIGHT_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_KNGIHT_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn, o.GameStateEnums.TurnStates.Dice]
        }
    }
    t.CardKnight = s;
    class c extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.VictoryPoint, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Development, this.isCardBack = !1, this.imageFileName = "card_vp", this.tipTitle = i.EnglishTexts.DEVELOPMENT_CARD_VICTORY_POINT_TIP_TITLE, this.tipBody = i.EnglishTexts.DEVELOPMENT_CARD_VICTORY_POINT_TIP_BODY, this.clickPopupType = n.CardClickPopupType.InformationPopup, this.popupBody = i.EnglishTexts.DEVELOPMENT_CARD_VICTORY_POINT_POPUP_BODY, this.allowableTurnStates = void 0
        }
    }
    t.CardVictoryPoint = c;
    class l extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Monopoly, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Development, this.isCardBack = !1, this.imageFileName = "card_monopoly", this.tipTitle = i.EnglishTexts.DEVELOPMENT_CARD_MONOPOLY_TIP_TITLE, this.tipBody = i.EnglishTexts.DEVELOPMENT_CARD_MONOPOLY_TIP_BODY, this.clickPopupType = n.CardClickPopupType.NormalClick, this.popupBody = i.EnglishTexts.DEVELOPMENT_CARD_MONOPOLY_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn, o.GameStateEnums.TurnStates.Dice]
        }
    }
    t.CardMonopoly = l;
    class h extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.RoadBuilding, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Development, this.isCardBack = !1, this.imageFileName = "card_roadbuilding", this.tipTitle = i.EnglishTexts.DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_TITLE, this.tipBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDLING_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.DEFAULT_DEVELOPMENT_CARD_ROAD_BUILDING_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn, o.GameStateEnums.TurnStates.Dice]
        }
    }
    t.CardRoadBuilding = h;
    class d extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.YearOfPlenty, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Development, this.isCardBack = !1, this.imageFileName = "card_yearofplenty", this.tipTitle = i.EnglishTexts.DEVELOPMENT_CARD_YEAR_OF_PLENTY_TIP_TITLE, this.tipBody = i.EnglishTexts.DEVELOPMENT_CARD_YEAR_OF_PLENTY_TIP_BODY, this.clickPopupType = n.CardClickPopupType.NormalClick, this.popupBody = i.EnglishTexts.DEVELOPMENT_CARD_YEAR_OF_PLENTY_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn, o.GameStateEnums.TurnStates.Dice]
        }
    }
    t.CardYearOfPlenty = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardCommodityCoin = t.CardCommodityCloth = t.CardCommodityPaper = t.CardCommodityBack = void 0;
    const i = a(22),
        o = a(3),
        n = a(65);
    class r extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.CommodityBack, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Commodity, this.isCardBack = !0, this.imageFileName = "card_rescardback", this.tipTitle = i.EnglishTexts.RESOURCE_CARD_BACK_TIP_TITLE, this.tipBody = i.EnglishTexts.RESOURCE_CARD_BACK_TIP_BODY, this.clickPopupType = n.CardClickPopupType.None, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardCommodityBack = r;
    class s extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Paper, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Commodity, this.isCardBack = !1, this.imageFileName = "card_paper", this.tipTitle = i.EnglishTexts.COMMODITY_CARD_PAPER_TIP_TITLE, this.tipBody = i.EnglishTexts.COMMODITY_CARD_PAPER_TIP_BODY, this.clickPopupType = n.CardClickPopupType.TradeWindow, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardCommodityPaper = s;
    class c extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Cloth, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Commodity, this.isCardBack = !1, this.imageFileName = "card_cloth", this.tipTitle = i.EnglishTexts.COMMODITY_CARD_CLOTH_TIP_TITLE, this.tipBody = i.EnglishTexts.COMMODITY_CARD_CLOTH_TIP_BODY, this.clickPopupType = n.CardClickPopupType.TradeWindow, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardCommodityCloth = c;
    class l extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.Coin, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.Commodity, this.isCardBack = !1, this.imageFileName = "card_coin", this.tipTitle = i.EnglishTexts.COMMODITY_CARD_COIN_TIP_TITLE, this.tipBody = i.EnglishTexts.COMMODITY_CARD_COIN_TIP_BODY, this.clickPopupType = n.CardClickPopupType.TradeWindow, this.popupBody = "", this.allowableTurnStates = void 0
        }
    }
    t.CardCommodityCoin = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardProgressScienceSmith = t.CardProgressScienceRoadBuilding = t.CardProgressSciencePrinter = t.CardProgressScienceMining = t.CardProgressScienceMedicine = t.CardProgressScienceIrrigation = t.CardProgressScienceInventor = t.CardProgressScienceEngineer = t.CardProgressScienceCrane = t.CardProgressScienceAlchemist = t.CardProgressScienceCardBack = void 0;
    const i = a(22),
        o = a(3),
        n = a(65);
    class r extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceBack, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !0, this.imageFileName = "card_progress_science_back", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_BACK_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_BACK_TIP_BODY, this.clickPopupType = n.CardClickPopupType.None, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_BACK_POPUP_BODY, this.allowableTurnStates = void 0
        }
    }
    t.CardProgressScienceCardBack = r;
    class s extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceAlchemist, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_alchemist", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_ALCHEMIST_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_ALCHEMIST_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_ALCHEMIST_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Dice]
        }
    }
    t.CardProgressScienceAlchemist = s;
    class c extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceCrane, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_crane", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_CRANE_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_CRANE_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_CRANE_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressScienceCrane = c;
    class l extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceEngineer, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_engineer", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_ENGINEER_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_ENGINEER_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_ENGINEER_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressScienceEngineer = l;
    class h extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceInventor, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_inventor", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_INVENTOR_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_INVENTOR_TIP_BODY, this.clickPopupType = n.CardClickPopupType.NormalClick, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_INVENTOR_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressScienceInventor = h;
    class d extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceIrrigation, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_irrigation", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_IRRIGATION_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_IRRIGATION_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_IRRIGATION_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressScienceIrrigation = d;
    class u extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceMedicine, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_medicine", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_MEDICINE_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_MEDICINE_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_MEDICINE_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressScienceMedicine = u;
    class g extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceMining, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_mining", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_MINING_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_MINING_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_MINING_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressScienceMining = g;
    class m extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardSciencePrinter, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_printer", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_PRINTER_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_PRINTER_TIP_BODY, this.clickPopupType = n.CardClickPopupType.None, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_PRINTER_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressSciencePrinter = m;
    class p extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceRoadBuilding, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_road_building", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_TITLE, this.tipBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_SCIENCE_ROAD_BUILDLING_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressScienceRoadBuilding = p;
    class C extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardScienceSmith, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressScience, this.isCardBack = !1, this.imageFileName = "card_progress_science_smith", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_SCIENCE_SMITH_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_SMITH_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_SCIENCE_SMITH_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressScienceSmith = C
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardProgressPoliticsWedding = t.CardProgressPoliticsWarlord = t.CardProgressPoliticsSpy = t.CardProgressPoliticsSaboteur = t.CardProgressPoliticsIntrigue = t.CardProgressPoliticsDiplomat = t.CardProgressPoliticsDeserter = t.CardProgressPoliticsConstitution = t.CardProgressPoliticsBishop = t.CardProgressPoliticsCardBack = void 0;
    const i = a(22),
        o = a(3),
        n = a(65);
    class r extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsBack, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !0, this.imageFileName = "card_progress_politics_back", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_BACK_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_BACK_TIP_BODY, this.clickPopupType = n.CardClickPopupType.None, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_BACK_POPUP_BODY, this.allowableTurnStates = void 0
        }
    }
    t.CardProgressPoliticsCardBack = r;
    class s extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsBishop, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_bishop", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_BISHOP_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_BISHOP_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_BISHOP_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsBishop = s;
    class c extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsConstitution, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_constitution", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_CONSTITUTION_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_CONSTITUTION_TIP_BODY, this.clickPopupType = n.CardClickPopupType.None, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_CONSTITUTION_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsConstitution = c;
    class l extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsDeserter, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_deserter", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_DESERTER_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_DESERTER_TIP_BODY, this.clickPopupType = n.CardClickPopupType.NormalClick, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_DESERTER_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsDeserter = l;
    class h extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsDiplomat, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_diplomat", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_TITLE, this.tipBody = i.EnglishTexts.DEFAULT_PROGRESS_CARD_POLITICS_DIPLOMAT_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.DEAFULT_PROGRESS_CARD_POLITICS_DIPLOMAT_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsDiplomat = h;
    class d extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsIntrigue, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_intrigue", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_INTRIGUE_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_INTRIGUE_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_INTRIGUE_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsIntrigue = d;
    class u extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsSaboteur, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_saboteur", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_SABOTEUR_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_SABOTEUR_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_SABOTEUR_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsSaboteur = u;
    class g extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsSpy, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_spy", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_SPY_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_SPY_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_SPY_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsSpy = g;
    class m extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsWarlord, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_warlord", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_WARLORD_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_WARLORD_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_WARLORD_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsWarlord = m;
    class p extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardPoliticsWedding, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressPolitics, this.isCardBack = !1, this.imageFileName = "card_progress_politics_wedding", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_POLITICS_WEDDING_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_WEDDING_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_POLITICS_WEDDING_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressPoliticsWedding = p
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardProgressTradeCommodityMonopoly = t.CardProgressTradeResourceMonopoly = t.CardProgressTradeMerchantFleet = t.CardProgressTradeMerchant = t.CardProgressTradeMasterMerchant = t.CardProgressTradeCommercialHarbor = t.CardProgressTradeCardBack = void 0;
    const i = a(22),
        o = a(3),
        n = a(65);
    class r extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardTradeBack, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressTrade, this.isCardBack = !0, this.imageFileName = "card_progress_trade_back", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_TRADE_BACK_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_TRADE_BACK_TIP_BODY, this.clickPopupType = n.CardClickPopupType.None, this.popupBody = i.EnglishTexts.PROGRESS_CARD_TRADE_BACK_POPUP_BODY, this.allowableTurnStates = void 0
        }
    }
    t.CardProgressTradeCardBack = r;
    class s extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardTradeCommercialHarbor, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressTrade, this.isCardBack = !1, this.imageFileName = "card_progress_trade_commercial_harbor", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_TRADE_COMMERCIAL_HARBOR_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_TRADE_COMMERCIAL_HARBOR_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_TRADE_COMMERCIAL_HARBOR_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressTradeCommercialHarbor = s;
    class c extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardTradeMasterMerchant, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressTrade, this.isCardBack = !1, this.imageFileName = "card_progress_trade_master_merchant", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_TRADE_MASTER_MERCHANT_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_TRADE_MASTER_MERCHANT_TIP_BODY, this.clickPopupType = n.CardClickPopupType.NormalClick, this.popupBody = i.EnglishTexts.PROGRESS_CARD_TRADE_MASTER_MERCHANT_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressTradeMasterMerchant = c;
    class l extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardTradeMerchant, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressTrade, this.isCardBack = !1, this.imageFileName = "card_progress_trade_merchant", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_TRADE_MERCHANT_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_TRADE_MERCHANT_TIP_BODY, this.clickPopupType = n.CardClickPopupType.ConfirmationPopup, this.popupBody = i.EnglishTexts.PROGRESS_CARD_TRADE_MERCHANT_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressTradeMerchant = l;
    class h extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardTradeMerchantFleet, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressTrade, this.isCardBack = !1, this.imageFileName = "card_progress_trade_merchant_fleet", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_TRADE_MERCHANT_FLEET_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_TRADE_MERCHANT_FLEET_TIP_BODY, this.clickPopupType = n.CardClickPopupType.NormalClick, this.popupBody = i.EnglishTexts.PROGRESS_CARD_TRADE_MERCHANT_FLEET_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressTradeMerchantFleet = h;
    class d extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardTradeResourceMonopoly, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressTrade, this.isCardBack = !1, this.imageFileName = "card_progress_trade_resource_monopoly", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_TRADE_RESOURCE_MONOPOLY_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_TRADE_RESOURCE_MONOPOLY_TIP_BODY, this.clickPopupType = n.CardClickPopupType.NormalClick, this.popupBody = i.EnglishTexts.PROGRESS_CARD_TRADE_RESOURCE_MONOPOLY_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressTradeResourceMonopoly = d;
    class u extends n.BaseCardData {
        constructor() {
            super(...arguments), this.cardEnum = o.GameStateEnums.CardEnum.ProgressCardTradeCommodityMonopoly, this.cardTypeEnum = o.GameStateEnums.CardTypeEnum.ProgressTrade, this.isCardBack = !1, this.imageFileName = "card_progress_trade_commodity_monopoly", this.tipTitle = i.EnglishTexts.PROGRESS_CARD_TRADE_COMMODITY_MONOPOLY_TIP_TITLE, this.tipBody = i.EnglishTexts.PROGRESS_CARD_TRADE_COMMODITY_MONOPOLY_TIP_BODY, this.clickPopupType = n.CardClickPopupType.NormalClick, this.popupBody = i.EnglishTexts.PROGRESS_CARD_TRADE_COMMODITY_MONOPOLY_POPUP_BODY, this.allowableTurnStates = [o.GameStateEnums.TurnStates.Turn]
        }
    }
    t.CardProgressTradeCommodityMonopoly = u
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PremadeGameSettings = void 0;
    const i = a(3),
        o = a(151);
    var n = i.PlayerEnums.GameSpeedSettings,
        r = i.PlayerEnums.BotSpeedSettings;
    class s {
        static createStandardRoom(e) {
            const t = new o.GameSettings(e, i.GameTypeEnum.CreatedRoomGame);
            return t.hideBankCards = !0, t.gameSpeed = n.Fast, t
        }
        static tutorialMode(e) {
            const t = new o.GameSettings(e, i.GameTypeEnum.Tutorial);
            return t.gameSpeed = n.Slow, t.botSpeed = r.Slow, t.modeSetting = i.ModeSettingEnum.TutorialClassic4P, t.mapSetting = i.MapSettingEnum.TutorialClassic4P, t
        }
        static botGame(e) {
            const t = new o.GameSettings(e, i.GameTypeEnum.BotGame);
            return t.gameSpeed = n.Fast, t.botSpeed = r.Fast, t
        }
        static createFreeMap(e, t) {
            const a = new o.GameSettings(e, i.GameTypeEnum.CreatedRoomGame);
            return a.hideBankCards = !0, a.gameSpeed = n.Fast, a.botSpeed = r.Fast, a.mapSetting = t, a
        }
        static createCustomLinkRoom(e) {
            const t = s.createStandardRoom(e);
            return t.privateGame = !0, t
        }
        static matchmakingClassic4P() {
            const e = new o.GameSettings("", i.GameTypeEnum.MatchmakingGame);
            return e.modeSetting = i.ModeSettingEnum.Classic4P, e.extensionSetting = i.ExtensionSettingEnum.Players4, e.scenarioSetting = i.ScenarioSettingEnum.None, e.mapSetting = i.MapSettingEnum.Classic4P, e.diceSetting = i.DiceSettingEnum.Random, e.hideBankCards = !0, e.gameSpeed = n.Fast, e
        }
        static matchmakingClassic1v1() {
            const e = new o.GameSettings("", i.GameTypeEnum.MatchmakingGame);
            return e.modeSetting = i.ModeSettingEnum.Classic4P, e.maxPlayers = 2, e.extensionSetting = i.ExtensionSettingEnum.Players4, e.scenarioSetting = i.ScenarioSettingEnum.None, e.mapSetting = i.MapSettingEnum.Classic4P, e.diceSetting = i.DiceSettingEnum.Random, e.hideBankCards = !0, e.gameSpeed = n.VeryFast, e.friendlyRobber = !0, e.victoryPointsToWin = 15, e.cardDiscardLimit = 9, e
        }
        static matchmakingClassic4PFreeMap(e) {
            const t = new o.GameSettings("", i.GameTypeEnum.MatchmakingGame);
            return t.modeSetting = i.ModeSettingEnum.Classic4P, t.extensionSetting = i.ExtensionSettingEnum.Players4, t.scenarioSetting = i.ScenarioSettingEnum.None, t.mapSetting = e, t.diceSetting = i.DiceSettingEnum.Random, t.hideBankCards = !0, t.gameSpeed = n.Fast, t
        }
        static testSetting() {
            const e = new o.GameSettings("id", i.GameTypeEnum.Unknown);
            return e.modeSetting = i.ModeSettingEnum.TutorialClassic4P, e.mapSetting = i.MapSettingEnum.TutorialClassic4P, e.gameSpeed = n.VeryFast, e.networkActive = !1, e
        }
    }
    t.PremadeGameSettings = s
}, function(e, t, a) {
    "use strict";
    var i = this && this.__createBinding || (Object.create ? function(e, t, a, i) {
            void 0 === i && (i = a), Object.defineProperty(e, i, {
                enumerable: !0,
                get: function() {
                    return t[a]
                }
            })
        } : function(e, t, a, i) {
            void 0 === i && (i = a), e[i] = t[a]
        }),
        o = this && this.__exportStar || function(e, t) {
            for (var a in e) "default" === a || Object.prototype.hasOwnProperty.call(t, a) || i(t, e, a)
        };
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), o(a(84), t), o(a(344), t), o(a(345), t), o(a(346), t), o(a(347), t)
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MapDataClassic78P = t.MapDataClassic56P = t.MapDataClassic4PRandom = t.MapDataTutorialClassic4P = t.MapDataClassic4P = void 0;
    const i = a(84),
        o = a(32),
        n = a(3),
        r = a(15);
    class s extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Classic4P, this.name = "Base", this.imagePath = r.LobbyImage.MapDiamondPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataClassic4P = s;
    class c extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TutorialClassic4P, this.name = "Tutorial: Base", this.imagePath = r.LobbyImage.MapDiamondPreview, this.compatibleGameModes = [n.ModeSettingEnum.TutorialClassic4P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataTutorialClassic4P = c;
    class l extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.Classic4PRandom], this.mapEnum = n.MapSettingEnum.Classic4PRandom, this.name = "Base Random", this.imagePath = r.LobbyImage.MapRandomBasePreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataClassic4PRandom = l;
    class h extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Classic56P, o.StoreExpansionType.CitiesAndKnights56P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Classic56P, this.name = "Base 5-6 Player", this.imagePath = r.LobbyImage.MapClassic56PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataClassic56P = h;
    class d extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Classic78P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Classic78P, this.name = "Base 7-8 Player", this.imagePath = r.LobbyImage.MapClassic78PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataClassic78P = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MapDataEuropeSeafarers = t.MapDataEurope = t.MapDataIstanbulSeafareres = t.MapDataIstanbul = t.MapDataGoldRush = t.MapDataMonopoly = t.MapDataRomania = t.MapDataTurningTidesSeafarers = t.MapDataTurningTidesClassic = t.MapDataTradeIslandSeafarers = t.MapDataTradeIslands = t.MapDataDoggo = t.MapDataTwoIsles = t.MapDataMountainOfRiches = t.MapDataKingOfTheHill = t.MapDataMiniBase = t.MapDataDuel = t.MapDataKite = t.MapDataCircle = t.MapDataJellyFish = t.MapDataVietnam = t.MapDataVolcano = t.MapDataBlackForest = t.MapDataShuffleBoard = t.MapDataTwirl = t.MapDataPond = t.MapDataLakes = t.MapDataGear = t.MapDataDiamond = t.MapDataUKSeafarers = t.MapDataUK = t.MapDataUSA = t.MapDataEarthSeafarers = t.MapDataEarth = void 0;
    const i = a(84),
        o = a(32),
        n = a(3),
        r = a(15);
    class s extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.Earth], this.mapEnum = n.MapSettingEnum.Earth, this.name = "Earth", this.imagePath = r.LobbyImage.MapEarthPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataEarth = s;
    t.MapDataEarthSeafarers = class extends s {
        constructor() {
            super(...arguments), this.mapEnum = n.MapSettingEnum.EarthSeafarers, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    };
    class c extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.USA], this.mapEnum = n.MapSettingEnum.USA, this.name = "USA", this.imagePath = r.LobbyImage.MapUSAPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataUSA = c;
    class l extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.UK], this.mapEnum = n.MapSettingEnum.UK, this.name = "UK & Ireland", this.imagePath = r.LobbyImage.MapUKPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataUK = l;
    t.MapDataUKSeafarers = class extends l {
        constructor() {
            super(...arguments), this.mapEnum = n.MapSettingEnum.UKSeafarers, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    };
    class h extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.Diamond], this.mapEnum = n.MapSettingEnum.Diamond, this.name = "Diamond", this.imagePath = r.LobbyImage.MapDiamondPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataDiamond = h;
    class d extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.Gear], this.mapEnum = n.MapSettingEnum.Gear, this.name = "Gear", this.imagePath = r.LobbyImage.MapGearPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataGear = d;
    class u extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.Lakes], this.mapEnum = n.MapSettingEnum.Lakes, this.name = "Lakes", this.imagePath = r.LobbyImage.MapLakesPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataLakes = u;
    class g extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.Pond], this.mapEnum = n.MapSettingEnum.Pond, this.name = "Pond", this.imagePath = r.LobbyImage.MapPondPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataPond = g;
    class m extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.Twirl], this.mapEnum = n.MapSettingEnum.Twirl, this.name = "Twirl", this.imagePath = r.LobbyImage.MapTwirlPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataTwirl = m;
    class p extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.ShuffleBoard], this.mapEnum = n.MapSettingEnum.ShuffleBoard, this.name = "Shuffle Board", this.imagePath = r.LobbyImage.MapShuffleBoardPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataShuffleBoard = p;
    class C extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.BlackForest], this.mapEnum = n.MapSettingEnum.BlackForest, this.name = "Black Forest", this.imagePath = r.LobbyImage.MapBlackForestPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataBlackForest = C;
    class y extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [o.StoreMapType.Volcano], this.mapEnum = n.MapSettingEnum.Volcano, this.name = "Volcano", this.imagePath = r.LobbyImage.MapVolcanoPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataVolcano = y;
    class S extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Vietnam, this.name = "Vietnam (free)", this.imagePath = r.LobbyImage.MapVietnamPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataVietnam = S;
    class v extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.JellyFish, this.name = "JellyFish", this.imagePath = r.LobbyImage.MapJellyFishPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataJellyFish = v;
    class _ extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Circle, this.name = "Circle", this.imagePath = r.LobbyImage.MapCirclePreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataCircle = _;
    class P extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Kite, this.name = "Kite", this.imagePath = r.LobbyImage.MapKitePreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataKite = P;
    class T extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Duel, this.name = "Duel", this.imagePath = r.LobbyImage.MapDuelPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataDuel = T;
    class b extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.MiniBase, this.name = "MiniBase", this.imagePath = r.LobbyImage.MapMiniBasePreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataMiniBase = b;
    class f extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.KingOfTheHill, this.name = "King of the Hill (free)", this.imagePath = r.LobbyImage.MapKingOfTheHillPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataKingOfTheHill = f;
    class I extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.MountainOfRiches, this.name = "Mountain Of Riches (free)", this.imagePath = r.LobbyImage.MapMountainOfRichesPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.CitiesAndKnights4P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataMountainOfRiches = I;
    class E extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TwoIsles, this.name = "Two Isles (free)", this.imagePath = r.LobbyImage.MapTwoIslesPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataTwoIsles = E;
    class w extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Doggo, this.name = "Doggo Map (free)", this.imagePath = r.LobbyImage.MapDoggoPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P], this.includeInFreeMapRotationIfActive = !0, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataDoggo = w;
    class k extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TradeIslands, this.name = "Trade Islands (free)", this.imagePath = r.LobbyImage.MapTradeIslandsPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataTradeIslands = k;
    t.MapDataTradeIslandSeafarers = class extends k {
        constructor() {
            super(...arguments), this.mapEnum = n.MapSettingEnum.TradeIslandsSeafarers, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P], this.includeInFreeMapRotationIfActive = !1, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    };
    class A extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TurningTidesClassic, this.name = "Turning Tides: Low Tide", this.imagePath = r.LobbyImage.MapTurningTidesPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataTurningTidesClassic = A;
    class M extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TurningTidesSeafarers, this.name = "Turning Tides: High Tide", this.imagePath = r.LobbyImage.MapTurningTidesPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.SS4ThroughTheDesert
        }
    }
    t.MapDataTurningTidesSeafarers = M;
    class G extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Romania, this.name = "Romania", this.imagePath = r.LobbyImage.MapRomaniaPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataRomania = G;
    class R extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Monopoly, this.name = "Monopoly", this.imagePath = r.LobbyImage.MapMonopolyPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataMonopoly = R;
    class D extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.GoldRush, this.name = "Gold Rush (free)", this.imagePath = r.LobbyImage.MapGoldRushPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataGoldRush = D;
    class x extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Istanbul, this.name = "Istanbul (free)", this.imagePath = r.LobbyImage.MapIstanbulPreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataIstanbul = x;
    t.MapDataIstanbulSeafareres = class extends x {
        constructor() {
            super(...arguments), this.mapEnum = n.MapSettingEnum.IstanbulSeafarers, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    };
    class O extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.Europe, this.name = "Europe (free)", this.imagePath = r.LobbyImage.MapEuropePreview, this.compatibleGameModes = [n.ModeSettingEnum.Classic4P, n.ModeSettingEnum.Classic56P, n.ModeSettingEnum.Classic78P, n.ModeSettingEnum.CitiesAndKnights4P, n.ModeSettingEnum.CitiesAndKnights56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !1, this.scenario = n.ScenarioSettingEnum.None
        }
    }
    t.MapDataEurope = O;
    t.MapDataEuropeSeafarers = class extends O {
        constructor() {
            super(...arguments), this.mapEnum = n.MapSettingEnum.EuropeSeafarers, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MapDataTutorialSS4ThroughTheDesert4P = t.MapDataTutorialSS3FogIslands4P = t.MapDataTutorialSS2FourIslands4P = t.MapDataTutorialSS1HeadingForNewShores4P = t.MapDataSS4ThroughTheDesert4P = t.MapDataSS3FogIslands4P = t.MapDataSS2FourIslands4P = t.MapDataSS1HeadingForNewShores4P = t.MapDataSS4ThroughTheDesert3P = t.MapDataSS3FogIslands3P = t.MapDataSS2FourIslands3P = t.MapDataSS1HeadingForNewShores3P = void 0;
    const i = a(84),
        o = a(32),
        n = a(3),
        r = a(15);
    class s extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS1HeadingForNewShores3P, this.name = "3P: New Shores", this.imagePath = r.LobbyImage.MapSS1HeadingForNewShores3PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    }
    t.MapDataSS1HeadingForNewShores3P = s;
    class c extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS2FourIslands3P, this.name = "3P: Four Islands", this.imagePath = r.LobbyImage.MapSS2FourIslands3PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS2TheFourIslands
        }
    }
    t.MapDataSS2FourIslands3P = c;
    class l extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS3FogIslands3P, this.name = "3P: Fog Islands", this.imagePath = r.LobbyImage.MapSS3FogIslands3PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS3TheFogIslands
        }
    }
    t.MapDataSS3FogIslands3P = l;
    class h extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS4ThroughTheDesert3P, this.name = "3P: Through the Desert", this.imagePath = r.LobbyImage.MapSS4ThroughTheDesert3PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS4ThroughTheDesert
        }
    }
    t.MapDataSS4ThroughTheDesert3P = h;
    class d extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS1HeadingForNewShores4P, this.name = "4P: New Shores", this.imagePath = r.LobbyImage.MapSS1HeadingForNewShores4PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    }
    t.MapDataSS1HeadingForNewShores4P = d;
    class u extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS2FourIslands4P, this.name = "4P: Four Islands", this.imagePath = r.LobbyImage.MapSS2FourIslands4PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS2TheFourIslands
        }
    }
    t.MapDataSS2FourIslands4P = u;
    class g extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS3FogIslands4P, this.name = "4P: Fog Islands", this.imagePath = r.LobbyImage.MapSS3FogIslands4PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS3TheFogIslands
        }
    }
    t.MapDataSS3FogIslands4P = g;
    class m extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS4ThroughTheDesert4P, this.name = "4P: Through the Desert", this.imagePath = r.LobbyImage.MapSS4ThroughTheDesert4PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS4ThroughTheDesert
        }
    }
    t.MapDataSS4ThroughTheDesert4P = m;
    class p extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TutorialSS1HeadingForNewShores4P, this.name = "4P: Tutorial New Shores", this.imagePath = r.LobbyImage.MapSS1HeadingForNewShores4PPreview, this.compatibleGameModes = [], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    }
    t.MapDataTutorialSS1HeadingForNewShores4P = p;
    class C extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TutorialSS2FourIslands4P, this.name = "4P: Tutorial Four Islands", this.imagePath = r.LobbyImage.MapSS2FourIslands4PPreview, this.compatibleGameModes = [], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS2TheFourIslands
        }
    }
    t.MapDataTutorialSS2FourIslands4P = C;
    class y extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TutorialSS3FogIsland4P, this.name = "4P: Tutorial Fog Islands", this.imagePath = r.LobbyImage.MapSS3FogIslands4PPreview, this.compatibleGameModes = [], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS3TheFogIslands
        }
    }
    t.MapDataTutorialSS3FogIslands4P = y;
    class S extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers4P, o.StoreExpansionType.CitiesAndKnightsSeafarers4P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.TutorialSS4ThroughTheDesert4P, this.name = "4P: Tutorial Through the Desert", this.imagePath = r.LobbyImage.MapSS4ThroughTheDesert4PPreview, this.compatibleGameModes = [], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS4ThroughTheDesert
        }
    }
    t.MapDataTutorialSS4ThroughTheDesert4P = S
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MapDataSS4ThroughTheDesert56P = t.MapDataSS3FogIslands56P = t.MapDataSS2SixIslands56P = t.MapDataSS1HeadingForNewShores56P = void 0;
    const i = a(84),
        o = a(32),
        n = a(3),
        r = a(15);
    class s extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers56P, o.StoreExpansionType.CitiesAndKnightsSeafarers56P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS1HeadingForNewShores56P, this.name = "6P: New Shores", this.imagePath = r.LobbyImage.MapSS1HeadingForNewShores56PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS1HeadingForNewShores
        }
    }
    t.MapDataSS1HeadingForNewShores56P = s;
    class c extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers56P, o.StoreExpansionType.CitiesAndKnightsSeafarers56P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS2SixIslands56P, this.name = "6P: Six Islands", this.imagePath = r.LobbyImage.MapSS2SixIslands56PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS2TheFourIslands
        }
    }
    t.MapDataSS2SixIslands56P = c;
    class l extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers56P, o.StoreExpansionType.CitiesAndKnightsSeafarers56P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS3FogIslands56P, this.name = "6P: Fog Islands", this.imagePath = r.LobbyImage.MapSS3FogIslands56PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS3TheFogIslands
        }
    }
    t.MapDataSS3FogIslands56P = l;
    class h extends i.BaseMapData {
        constructor() {
            super(...arguments), this.premiumExpanionAccess = [o.StoreExpansionType.Seafarers56P, o.StoreExpansionType.CitiesAndKnightsSeafarers56P], this.premiumMapAccess = [], this.mapEnum = n.MapSettingEnum.SS4ThroughTheDesert56P, this.name = "6P: Through the Desert", this.imagePath = r.LobbyImage.MapSS4ThroughTheDesert56PPreview, this.compatibleGameModes = [n.ModeSettingEnum.Seafarers4P, n.ModeSettingEnum.Seafarers56P, n.ModeSettingEnum.CitiesAndKnightsSeafarers4P, n.ModeSettingEnum.CitiesAndKnightsSeafarers56P], this.includeInFreeMapRotationIfActive = !1, this.isActive = !0, this.scenario = n.ScenarioSettingEnum.SS4ThroughTheDesert
        }
    }
    t.MapDataSS4ThroughTheDesert56P = h
}, , , , , , , , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CardInventory = void 0;
    const i = a(52),
        o = a(7);
    t.CardInventory = class {
        constructor(e) {
            this.cards = [], this.allowableCardTypes = e
        }
        getCards() {
            return (0, o.clone)(this.cards)
        }
        getCardsOfType(e) {
            const t = [];
            for (const a of this.cards) {
                const o = i.CardDataController.getCardDataForCard(a);
                null != o && (o.cardTypeEnum == e && t.push(a))
            }
            return t
        }
        getCardCountOfType(e) {
            return (0, o.countOccurenceOfValueInArray)(this.cards, e)
        }
        addCards(e) {
            if (!this.canAddAllCards(e)) return !1;
            for (const t of e) this.cards.push(t);
            return !0
        }
        removeCards(e) {
            if (!this.hasCardsInInventory(e)) return !1;
            for (const t of e)(0, o.removeElementFromArray)(this.cards, t);
            return !0
        }
        drawTopCardOfType(e) {
            for (const [t, a] of this.cards.entries()) {
                const o = i.CardDataController.getCardDataForCard(a);
                if (null != o && o.cardTypeEnum == e) return this.cards.splice(t, 1)[0]
            }
        }
        takeRandomCard() {
            if (0 == this.cards.length) return;
            const e = (0, o.randomElementFromArray)(this.cards);
            return (0, o.removeElementFromArray)(this.cards, e), e
        }
        hasCardsInInventory(e) {
            const t = (0, o.removeDuplicatesFromArray)(e);
            for (const a of t) {
                if ((0, o.countOccurenceOfValueInArray)(this.cards, a) < (0, o.countOccurenceOfValueInArray)(e, a)) return !1
            }
            return !0
        }
        hasCardOfType(e) {
            for (const t of this.cards) {
                const a = i.CardDataController.getCardDataForCard(t);
                if (null != a && a.cardTypeEnum == e) return !0
            }
            return !1
        }
        canAddAllCards(e) {
            for (const t of e) {
                const e = i.CardDataController.getCardDataForCard(t);
                if (null != e && !(0, o.elementInArray)(this.allowableCardTypes, e.cardTypeEnum)) return !1
            }
            return !0
        }
        shuffleCards() {
            this.cards = (0, o.shuffle)(this.cards)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.EndGameState = void 0;
    const i = a(7),
        o = a(150);
    t.EndGameState = class {
        constructor() {
            this.players = [], this.diceStats = [], this.resourceCardStats = [], this.developmentCardStats = [], this.resourceCardStats = [], this.activityStats = []
        }
        getPlayerRank(e) {
            for (const t of this.players)
                if (t.player.selectedColor == e) return t.rank;
            return console.log("Couldnt find player rank"), 0
        }
        highestVictoryPointScoreOfType(e) {
            let t = 0;
            for (const a of this.players) {
                const i = a.victoryPoints.totalVictoryPointsOfType([e]);
                i <= t || (t = i)
            }
            return t
        }
        getAllUniqueVictoryPointsEarnedByAllPlayers() {
            const e = [];
            for (const t of this.players) {
                const a = t.victoryPoints.getAllUniqueVictoryPointTypesEarned();
                for (const t of a)(0, i.elementInArray)(e, t) || e.push(t)
            }
            return e.sort()
        }
        deserialize(e) {
            for (const t of Object.keys(e)) this[t] = e[t];
            for (const e of this.players) {
                const t = new o.PlayerVictoryPointState;
                t.deserialize(e.victoryPoints), e.victoryPoints = t
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getAllImages = void 0, t.getAllImages = function() {
        return [{
            name: "arial",
            extension: ".fnt"
        }, {
            name: "tile_lumber",
            extension: ".svg"
        }, {
            name: "tile_brick",
            extension: ".svg"
        }, {
            name: "tile_wool",
            extension: ".svg"
        }, {
            name: "tile_grain",
            extension: ".svg"
        }, {
            name: "tile_ore",
            extension: ".svg"
        }, {
            name: "tile_desert",
            extension: ".svg"
        }, {
            name: "tile_gold",
            extension: ".svg"
        }, {
            name: "tile_fog",
            extension: ".svg"
        }, {
            name: "ship_red_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_red_West",
            extension: ".svg"
        }, {
            name: "ship_red_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_black_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_black_West",
            extension: ".svg"
        }, {
            name: "ship_black_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_blue_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_blue_West",
            extension: ".svg"
        }, {
            name: "ship_blue_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_bronze_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_bronze_West",
            extension: ".svg"
        }, {
            name: "ship_bronze_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_gold_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_gold_West",
            extension: ".svg"
        }, {
            name: "ship_gold_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_green_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_green_West",
            extension: ".svg"
        }, {
            name: "ship_green_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_mysticblue_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_mysticblue_West",
            extension: ".svg"
        }, {
            name: "ship_mysticblue_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_orange_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_orange_West",
            extension: ".svg"
        }, {
            name: "ship_orange_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_purple_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_purple_West",
            extension: ".svg"
        }, {
            name: "ship_purple_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_silver_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_silver_West",
            extension: ".svg"
        }, {
            name: "ship_silver_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_white_NorthWest",
            extension: ".svg"
        }, {
            name: "ship_white_West",
            extension: ".svg"
        }, {
            name: "ship_white_SouthWest",
            extension: ".svg"
        }, {
            name: "ship_move_black",
            extension: ".svg"
        }, {
            name: "ship_move_blue",
            extension: ".svg"
        }, {
            name: "ship_move_bronze",
            extension: ".svg"
        }, {
            name: "ship_move_gold",
            extension: ".svg"
        }, {
            name: "ship_move_green",
            extension: ".svg"
        }, {
            name: "ship_move_mysticblue",
            extension: ".svg"
        }, {
            name: "ship_move_orange",
            extension: ".svg"
        }, {
            name: "ship_move_purple",
            extension: ".svg"
        }, {
            name: "ship_move_red",
            extension: ".svg"
        }, {
            name: "ship_move_silver",
            extension: ".svg"
        }, {
            name: "ship_move_white",
            extension: ".svg"
        }, {
            name: "move_ship_arrow",
            extension: ".svg"
        }, {
            name: "tile_blank",
            extension: ".svg"
        }, {
            name: "tile_sea",
            extension: ".svg"
        }, {
            name: "tile_shore_1",
            extension: ".svg"
        }, {
            name: "tile_shore_2_sswwww",
            extension: ".svg"
        }, {
            name: "tile_shore_2_swswww",
            extension: ".svg"
        }, {
            name: "tile_shore_2_swwsww",
            extension: ".svg"
        }, {
            name: "tile_shore_3_ssswww",
            extension: ".svg"
        }, {
            name: "tile_shore_3_sswwsw",
            extension: ".svg"
        }, {
            name: "tile_shore_3_sswsww",
            extension: ".svg"
        }, {
            name: "tile_shore_3_swswsw",
            extension: ".svg"
        }, {
            name: "tile_shore_4_ssssww",
            extension: ".svg"
        }, {
            name: "tile_shore_4_ssswsw",
            extension: ".svg"
        }, {
            name: "tile_shore_4_sswssw",
            extension: ".svg"
        }, {
            name: "tile_shore_5",
            extension: ".svg"
        }, {
            name: "tile_shore_6",
            extension: ".svg"
        }, {
            name: "prob_2",
            extension: ".svg"
        }, {
            name: "prob_3",
            extension: ".svg"
        }, {
            name: "prob_4",
            extension: ".svg"
        }, {
            name: "prob_5",
            extension: ".svg"
        }, {
            name: "prob_6",
            extension: ".svg"
        }, {
            name: "prob_8",
            extension: ".svg"
        }, {
            name: "prob_9",
            extension: ".svg"
        }, {
            name: "prob_10",
            extension: ".svg"
        }, {
            name: "prob_11",
            extension: ".svg"
        }, {
            name: "prob_12",
            extension: ".svg"
        }, {
            name: "icon_robber_santa",
            extension: ".svg"
        }, {
            name: "icon_hourglass",
            extension: ".svg"
        }, {
            name: "icon_bot",
            extension: ".svg"
        }, {
            name: "icon_pencil",
            extension: ".svg"
        }, {
            name: "logo",
            extension: ".png"
        }, {
            name: "bank",
            extension: ".svg"
        }, {
            name: "icon_merchant_black",
            extension: ".svg"
        }, {
            name: "icon_merchant_blue",
            extension: ".svg"
        }, {
            name: "icon_merchant_bronze",
            extension: ".svg"
        }, {
            name: "icon_merchant_gold",
            extension: ".svg"
        }, {
            name: "icon_merchant_green",
            extension: ".svg"
        }, {
            name: "icon_merchant_mysticblue",
            extension: ".svg"
        }, {
            name: "icon_merchant_orange",
            extension: ".svg"
        }, {
            name: "icon_merchant_purple",
            extension: ".svg"
        }, {
            name: "icon_merchant_red",
            extension: ".svg"
        }, {
            name: "icon_merchant_silver",
            extension: ".svg"
        }, {
            name: "icon_merchant_white",
            extension: ".svg"
        }, {
            name: "banner_red",
            extension: ".svg"
        }, {
            name: "banner_green",
            extension: ".svg"
        }, {
            name: "banner_blue",
            extension: ".svg"
        }, {
            name: "banner_orange",
            extension: ".svg"
        }, {
            name: "banner_gold",
            extension: ".svg"
        }, {
            name: "banner_silver",
            extension: ".svg"
        }, {
            name: "banner_bronze",
            extension: ".svg"
        }, {
            name: "banner_purple",
            extension: ".svg"
        }, {
            name: "banner_black",
            extension: ".svg"
        }, {
            name: "banner_mysticblue",
            extension: ".svg"
        }, {
            name: "banner_white",
            extension: ".svg"
        }, {
            name: "medal_gold",
            extension: ".svg"
        }, {
            name: "medal_silver",
            extension: ".svg"
        }, {
            name: "medal_bronze",
            extension: ".svg"
        }, {
            name: "icon_elephant",
            extension: ".svg"
        }, {
            name: "icon_sombrero",
            extension: ".svg"
        }, {
            name: "icon_farmer",
            extension: ".svg"
        }, {
            name: "icon_avocado",
            extension: ".svg"
        }, {
            name: "icon_cactus",
            extension: ".svg"
        }, {
            name: "icon_crown",
            extension: ".svg"
        }, {
            name: "icon_swords",
            extension: ".svg"
        }, {
            name: "icon_swords_highlight",
            extension: ".svg"
        }, {
            name: "icon_helmet",
            extension: ".svg"
        }, {
            name: "icon_snorkel",
            extension: ".svg"
        }, {
            name: "icon_scarf",
            extension: ".svg"
        }, {
            name: "icon_tie",
            extension: ".svg"
        }, {
            name: "icon_worker",
            extension: ".svg"
        }, {
            name: "city_white",
            extension: ".svg"
        }, {
            name: "city_blue",
            extension: ".svg"
        }, {
            name: "city_red",
            extension: ".svg"
        }, {
            name: "city_orange",
            extension: ".svg"
        }, {
            name: "city_green",
            extension: ".svg"
        }, {
            name: "city_gold",
            extension: ".svg"
        }, {
            name: "city_silver",
            extension: ".svg"
        }, {
            name: "city_bronze",
            extension: ".svg"
        }, {
            name: "city_purple",
            extension: ".svg"
        }, {
            name: "city_black",
            extension: ".svg"
        }, {
            name: "city_mysticblue",
            extension: ".svg"
        }, {
            name: "city_destroyed_white",
            extension: ".svg"
        }, {
            name: "city_destroyed_blue",
            extension: ".svg"
        }, {
            name: "city_destroyed_red",
            extension: ".svg"
        }, {
            name: "city_destroyed_orange",
            extension: ".svg"
        }, {
            name: "city_destroyed_green",
            extension: ".svg"
        }, {
            name: "city_destroyed_gold",
            extension: ".svg"
        }, {
            name: "city_destroyed_silver",
            extension: ".svg"
        }, {
            name: "city_destroyed_bronze",
            extension: ".svg"
        }, {
            name: "city_destroyed_purple",
            extension: ".svg"
        }, {
            name: "city_destroyed_black",
            extension: ".svg"
        }, {
            name: "city_destroyed_mysticblue",
            extension: ".svg"
        }, {
            name: "city_wall_white",
            extension: ".svg"
        }, {
            name: "city_wall_blue",
            extension: ".svg"
        }, {
            name: "city_wall_red",
            extension: ".svg"
        }, {
            name: "city_wall_orange",
            extension: ".svg"
        }, {
            name: "city_wall_green",
            extension: ".svg"
        }, {
            name: "city_wall_gold",
            extension: ".svg"
        }, {
            name: "city_wall_silver",
            extension: ".svg"
        }, {
            name: "city_wall_bronze",
            extension: ".svg"
        }, {
            name: "city_wall_purple",
            extension: ".svg"
        }, {
            name: "city_wall_black",
            extension: ".svg"
        }, {
            name: "city_wall_mysticblue",
            extension: ".svg"
        }, {
            name: "road_white",
            extension: ".svg"
        }, {
            name: "road_blue",
            extension: ".svg"
        }, {
            name: "road_red",
            extension: ".svg"
        }, {
            name: "road_orange",
            extension: ".svg"
        }, {
            name: "road_green",
            extension: ".svg"
        }, {
            name: "road_gold",
            extension: ".svg"
        }, {
            name: "road_silver",
            extension: ".svg"
        }, {
            name: "road_bronze",
            extension: ".svg"
        }, {
            name: "road_purple",
            extension: ".svg"
        }, {
            name: "road_black",
            extension: ".svg"
        }, {
            name: "road_mysticblue",
            extension: ".svg"
        }, {
            name: "settlement_white",
            extension: ".svg"
        }, {
            name: "settlement_blue",
            extension: ".svg"
        }, {
            name: "settlement_red",
            extension: ".svg"
        }, {
            name: "settlement_orange",
            extension: ".svg"
        }, {
            name: "settlement_green",
            extension: ".svg"
        }, {
            name: "settlement_gold",
            extension: ".svg"
        }, {
            name: "settlement_silver",
            extension: ".svg"
        }, {
            name: "settlement_bronze",
            extension: ".svg"
        }, {
            name: "settlement_purple",
            extension: ".svg"
        }, {
            name: "settlement_black",
            extension: ".svg"
        }, {
            name: "settlement_mysticblue",
            extension: ".svg"
        }, {
            name: "knight_level1_active_black",
            extension: ".svg"
        }, {
            name: "knight_level1_active_blue",
            extension: ".svg"
        }, {
            name: "knight_level1_active_bronze",
            extension: ".svg"
        }, {
            name: "knight_level1_active_gold",
            extension: ".svg"
        }, {
            name: "knight_level1_active_green",
            extension: ".svg"
        }, {
            name: "knight_level1_active_mysticblue",
            extension: ".svg"
        }, {
            name: "knight_level1_active_orange",
            extension: ".svg"
        }, {
            name: "knight_level1_active_purple",
            extension: ".svg"
        }, {
            name: "knight_level1_active_red",
            extension: ".svg"
        }, {
            name: "knight_level1_active_silver",
            extension: ".svg"
        }, {
            name: "knight_level1_active_white",
            extension: ".svg"
        }, {
            name: "knight_level2_active_black",
            extension: ".svg"
        }, {
            name: "knight_level2_active_blue",
            extension: ".svg"
        }, {
            name: "knight_level2_active_bronze",
            extension: ".svg"
        }, {
            name: "knight_level2_active_gold",
            extension: ".svg"
        }, {
            name: "knight_level2_active_green",
            extension: ".svg"
        }, {
            name: "knight_level2_active_mysticblue",
            extension: ".svg"
        }, {
            name: "knight_level2_active_orange",
            extension: ".svg"
        }, {
            name: "knight_level2_active_purple",
            extension: ".svg"
        }, {
            name: "knight_level2_active_red",
            extension: ".svg"
        }, {
            name: "knight_level2_active_silver",
            extension: ".svg"
        }, {
            name: "knight_level2_active_white",
            extension: ".svg"
        }, {
            name: "knight_level3_active_black",
            extension: ".svg"
        }, {
            name: "knight_level3_active_blue",
            extension: ".svg"
        }, {
            name: "knight_level3_active_bronze",
            extension: ".svg"
        }, {
            name: "knight_level3_active_gold",
            extension: ".svg"
        }, {
            name: "knight_level3_active_green",
            extension: ".svg"
        }, {
            name: "knight_level3_active_mysticblue",
            extension: ".svg"
        }, {
            name: "knight_level3_active_orange",
            extension: ".svg"
        }, {
            name: "knight_level3_active_purple",
            extension: ".svg"
        }, {
            name: "knight_level3_active_red",
            extension: ".svg"
        }, {
            name: "knight_level3_active_silver",
            extension: ".svg"
        }, {
            name: "knight_level3_active_white",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_black",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_blue",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_bronze",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_gold",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_green",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_mysticblue",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_orange",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_purple",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_red",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_silver",
            extension: ".svg"
        }, {
            name: "knight_level1_inactive_white",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_black",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_blue",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_bronze",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_gold",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_green",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_mysticblue",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_orange",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_purple",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_red",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_silver",
            extension: ".svg"
        }, {
            name: "knight_level2_inactive_white",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_black",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_blue",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_bronze",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_gold",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_green",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_mysticblue",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_orange",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_purple",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_red",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_silver",
            extension: ".svg"
        }, {
            name: "knight_level3_inactive_white",
            extension: ".svg"
        }, {
            name: "knight_move_black",
            extension: ".svg"
        }, {
            name: "knight_move_blue",
            extension: ".svg"
        }, {
            name: "knight_move_bronze",
            extension: ".svg"
        }, {
            name: "knight_move_gold",
            extension: ".svg"
        }, {
            name: "knight_move_green",
            extension: ".svg"
        }, {
            name: "knight_move_mysticblue",
            extension: ".svg"
        }, {
            name: "knight_move_orange",
            extension: ".svg"
        }, {
            name: "knight_move_purple",
            extension: ".svg"
        }, {
            name: "knight_move_red",
            extension: ".svg"
        }, {
            name: "knight_move_silver",
            extension: ".svg"
        }, {
            name: "knight_move_white",
            extension: ".svg"
        }, {
            name: "knight_active_level1",
            extension: ".svg"
        }, {
            name: "metropolis_science",
            extension: ".svg"
        }, {
            name: "metropolis_trade",
            extension: ".svg"
        }, {
            name: "metropolis_politics",
            extension: ".svg"
        }, {
            name: "port_pier",
            extension: ".svg"
        }, {
            name: "port",
            extension: ".svg"
        }, {
            name: "port_lumber",
            extension: ".svg"
        }, {
            name: "port_brick",
            extension: ".svg"
        }, {
            name: "port_wool",
            extension: ".svg"
        }, {
            name: "port_grain",
            extension: ".svg"
        }, {
            name: "port_ore",
            extension: ".svg"
        }, {
            name: "card_lumber",
            extension: ".svg"
        }, {
            name: "card_brick",
            extension: ".svg"
        }, {
            name: "card_wool",
            extension: ".svg"
        }, {
            name: "card_grain",
            extension: ".svg"
        }, {
            name: "card_ore",
            extension: ".svg"
        }, {
            name: "card_rescardback",
            extension: ".svg"
        }, {
            name: "card_rescardoverlimit",
            extension: ".svg"
        }, {
            name: "card_devcardback",
            extension: ".svg"
        }, {
            name: "card_vp",
            extension: ".svg"
        }, {
            name: "card_knight",
            extension: ".svg"
        }, {
            name: "card_yearofplenty",
            extension: ".svg"
        }, {
            name: "card_monopoly",
            extension: ".svg"
        }, {
            name: "card_roadbuilding",
            extension: ".svg"
        }, {
            name: "card_badge_background",
            extension: ".svg"
        }, {
            name: "card_paper",
            extension: ".svg"
        }, {
            name: "card_cloth",
            extension: ".svg"
        }, {
            name: "card_coin",
            extension: ".svg"
        }, {
            name: "card_progress_back",
            extension: ".svg"
        }, {
            name: "card_progress_politics_back",
            extension: ".svg"
        }, {
            name: "card_progress_politics_bishop",
            extension: ".svg"
        }, {
            name: "card_progress_politics_constitution",
            extension: ".svg"
        }, {
            name: "card_progress_politics_deserter",
            extension: ".svg"
        }, {
            name: "card_progress_politics_diplomat",
            extension: ".svg"
        }, {
            name: "card_progress_politics_intrigue",
            extension: ".svg"
        }, {
            name: "card_progress_politics_saboteur",
            extension: ".svg"
        }, {
            name: "card_progress_politics_spy",
            extension: ".svg"
        }, {
            name: "card_progress_politics_warlord",
            extension: ".svg"
        }, {
            name: "card_progress_politics_wedding",
            extension: ".svg"
        }, {
            name: "card_progress_science_back",
            extension: ".svg"
        }, {
            name: "card_progress_science_alchemist",
            extension: ".svg"
        }, {
            name: "card_progress_science_crane",
            extension: ".svg"
        }, {
            name: "card_progress_science_engineer",
            extension: ".svg"
        }, {
            name: "card_progress_science_inventor",
            extension: ".svg"
        }, {
            name: "card_progress_science_irrigation",
            extension: ".svg"
        }, {
            name: "card_progress_science_medicine",
            extension: ".svg"
        }, {
            name: "card_progress_science_mining",
            extension: ".svg"
        }, {
            name: "card_progress_science_printer",
            extension: ".svg"
        }, {
            name: "card_progress_science_road_building",
            extension: ".svg"
        }, {
            name: "card_progress_science_smith",
            extension: ".svg"
        }, {
            name: "card_progress_trade_back",
            extension: ".svg"
        }, {
            name: "card_progress_trade_commercial_harbor",
            extension: ".svg"
        }, {
            name: "card_progress_trade_master_merchant",
            extension: ".svg"
        }, {
            name: "card_progress_trade_merchant_fleet",
            extension: ".svg"
        }, {
            name: "card_progress_trade_merchant",
            extension: ".svg"
        }, {
            name: "card_progress_trade_resource_monopoly",
            extension: ".svg"
        }, {
            name: "card_progress_trade_commodity_monopoly",
            extension: ".svg"
        }, {
            name: "partition",
            extension: ".svg"
        }, {
            name: "dice_1",
            extension: ".svg"
        }, {
            name: "dice_2",
            extension: ".svg"
        }, {
            name: "dice_3",
            extension: ".svg"
        }, {
            name: "dice_4",
            extension: ".svg"
        }, {
            name: "dice_5",
            extension: ".svg"
        }, {
            name: "dice_6",
            extension: ".svg"
        }, {
            name: "dice_red_1",
            extension: ".svg"
        }, {
            name: "dice_red_2",
            extension: ".svg"
        }, {
            name: "dice_red_3",
            extension: ".svg"
        }, {
            name: "dice_red_4",
            extension: ".svg"
        }, {
            name: "dice_red_5",
            extension: ".svg"
        }, {
            name: "dice_red_6",
            extension: ".svg"
        }, {
            name: "dice",
            extension: ".svg"
        }, {
            name: "dice_marker",
            extension: ".svg"
        }, {
            name: "dice_background_politics",
            extension: ".svg"
        }, {
            name: "dice_background_science",
            extension: ".svg"
        }, {
            name: "dice_background_trade",
            extension: ".svg"
        }, {
            name: "dice_event_barbarian",
            extension: ".svg"
        }, {
            name: "dice_event_politics",
            extension: ".svg"
        }, {
            name: "dice_event_science",
            extension: ".svg"
        }, {
            name: "dice_event_trade",
            extension: ".svg"
        }, {
            name: "castle_roof",
            extension: ".svg"
        }, {
            name: "icon_player",
            extension: ".svg"
        }, {
            name: "icon_player_loggedin",
            extension: ".svg"
        }, {
            name: "icon_settler",
            extension: ".svg"
        }, {
            name: "icon_colonist",
            extension: ".svg"
        }, {
            name: "icon_founder",
            extension: ".svg"
        }, {
            name: "icon_christmas_hat",
            extension: ".svg"
        }, {
            name: "icon_pirate_ship",
            extension: ".svg"
        }, {
            name: "icon_discard_resource_cards",
            extension: ".svg"
        }, {
            name: "icon_discard_progress_cards",
            extension: ".svg"
        }, {
            name: "icon_aqueduct",
            extension: ".svg"
        }, {
            name: "icon_fortress",
            extension: ".svg"
        }, {
            name: "icon_tradehouse",
            extension: ".svg"
        }, {
            name: "stat_vp",
            extension: ".svg"
        }, {
            name: "stat_largest_army",
            extension: ".svg"
        }, {
            name: "icon_largest_army_highlight",
            extension: ".svg"
        }, {
            name: "stat_longest_road",
            extension: ".svg"
        }, {
            name: "icon_longest_road_highlight",
            extension: ".svg"
        }, {
            name: "stat_chits",
            extension: ".svg"
        }, {
            name: "stat_defender",
            extension: ".svg"
        }, {
            name: "stat_metropolis",
            extension: ".svg"
        }, {
            name: "stat_merchant",
            extension: ".svg"
        }, {
            name: "stat_dev_card_income",
            extension: ".svg"
        }, {
            name: "stat_dev_card_loss",
            extension: ".svg"
        }, {
            name: "stat_dev_card_bought",
            extension: ".svg"
        }, {
            name: "stat_dev_card_used",
            extension: ".svg"
        }, {
            name: "stat_proposed_trades",
            extension: ".svg"
        }, {
            name: "stat_res_gain",
            extension: ".svg"
        }, {
            name: "stat_res_loss",
            extension: ".svg"
        }, {
            name: "stat_res_score",
            extension: ".svg"
        }, {
            name: "stat_resource_income_blocked",
            extension: ".svg"
        }, {
            name: "stat_resources_used",
            extension: ".svg"
        }, {
            name: "stat_robbing_income",
            extension: ".svg"
        }, {
            name: "stat_robbing_loss",
            extension: ".svg"
        }, {
            name: "stat_rolling_income",
            extension: ".svg"
        }, {
            name: "stat_rolling_loss",
            extension: ".svg"
        }, {
            name: "stat_successful_trades",
            extension: ".svg"
        }, {
            name: "stat_trade_income",
            extension: ".svg"
        }, {
            name: "stat_trade_loss",
            extension: ".svg"
        }, {
            name: "stat_gold_income",
            extension: ".svg"
        }, {
            name: "icon_lock_on",
            extension: ".svg"
        }, {
            name: "icon_lock_off",
            extension: ".svg"
        }, {
            name: "icon_trade_arrow_red",
            extension: ".svg"
        }, {
            name: "icon_trade_arrow_green",
            extension: ".svg"
        }, {
            name: "icon_trophy",
            extension: ".svg"
        }, {
            name: "icon_chit",
            extension: ".svg"
        }, {
            name: "icon_check",
            extension: ".svg"
        }, {
            name: "icon_x",
            extension: ".svg"
        }, {
            name: "icon_trade",
            extension: ".svg"
        }, {
            name: "icon_buy_dev_card",
            extension: ".svg"
        }, {
            name: "icon_pass_turn",
            extension: ".svg"
        }, {
            name: "icon_special_build_phase_flag",
            extension: ".svg"
        }, {
            name: "icon_add_friend",
            extension: ".svg"
        }, {
            name: "icon_report",
            extension: ".svg"
        }, {
            name: "icon_longest_road",
            extension: ".svg"
        }, {
            name: "icon_largest_army",
            extension: ".svg"
        }, {
            name: "icon_highlight_circle",
            extension: ".svg"
        }, {
            name: "icon_highlight_circle_white",
            extension: ".svg"
        }, {
            name: "icon_broken_connection",
            extension: ".svg"
        }, {
            name: "icon_square_active_politics",
            extension: ".svg"
        }, {
            name: "icon_square_active_science",
            extension: ".svg"
        }, {
            name: "icon_square_active_trade",
            extension: ".svg"
        }, {
            name: "icon_square_inactive_politics",
            extension: ".svg"
        }, {
            name: "icon_square_inactive_science",
            extension: ".svg"
        }, {
            name: "icon_square_inactive_trade",
            extension: ".svg"
        }, {
            name: "icon_square_frame",
            extension: ".svg"
        }, {
            name: "icon_square_framed_politics",
            extension: ".svg"
        }, {
            name: "icon_square_framed_science",
            extension: ".svg"
        }, {
            name: "icon_square_framed_trade",
            extension: ".svg"
        }, {
            name: "icon_highlight_square_white",
            extension: ".svg"
        }, {
            name: "icon_highlight_square_yellow",
            extension: ".svg"
        }, {
            name: "icon_arrow_player_profile",
            extension: ".svg"
        }, {
            name: "icon_defender",
            extension: ".svg"
        }, {
            name: "icon_triangle_politics",
            extension: ".svg"
        }, {
            name: "icon_triangle_science",
            extension: ".svg"
        }, {
            name: "icon_triangle_trade",
            extension: ".svg"
        }, {
            name: "icon_arrow_white",
            extension: ".svg"
        }, {
            name: "player_bg_black",
            extension: ".svg"
        }, {
            name: "player_bg_blue",
            extension: ".svg"
        }, {
            name: "player_bg_bronze",
            extension: ".svg"
        }, {
            name: "player_bg_gold",
            extension: ".svg"
        }, {
            name: "player_bg_green",
            extension: ".svg"
        }, {
            name: "player_bg_orange",
            extension: ".svg"
        }, {
            name: "player_bg_purple",
            extension: ".svg"
        }, {
            name: "player_bg_red",
            extension: ".svg"
        }, {
            name: "player_bg_silver",
            extension: ".svg"
        }, {
            name: "player_bg_mysticblue",
            extension: ".svg"
        }, {
            name: "player_bg_white",
            extension: ".svg"
        }, {
            name: "bg_section",
            extension: ".svg"
        }, {
            name: "bg_tooltip",
            extension: ".svg"
        }, {
            name: "bg_player_inactive",
            extension: ".svg"
        }, {
            name: "bg_button",
            extension: ".svg"
        }, {
            name: "bg_button_highlight",
            extension: ".svg"
        }, {
            name: "bg_text_button_active",
            extension: ".svg"
        }, {
            name: "bg_text_button_inactive",
            extension: ".svg"
        }, {
            name: "bg_text_button_dark_green",
            extension: ".svg"
        }, {
            name: "bg_text_button_light_green",
            extension: ".svg"
        }, {
            name: "button_badge_background_white",
            extension: ".svg"
        }, {
            name: "button_badge_background_blue",
            extension: ".svg"
        }, {
            name: "button_badge_background_red",
            extension: ".svg"
        }, {
            name: "button_badge_background_orange",
            extension: ".svg"
        }, {
            name: "button_badge_background_green",
            extension: ".svg"
        }, {
            name: "button_badge_background_gold",
            extension: ".svg"
        }, {
            name: "button_badge_background_silver",
            extension: ".svg"
        }, {
            name: "button_badge_background_bronze",
            extension: ".svg"
        }, {
            name: "button_badge_background_purple",
            extension: ".svg"
        }, {
            name: "button_badge_background_black",
            extension: ".svg"
        }, {
            name: "button_badge_background_mysticblue",
            extension: ".svg"
        }, {
            name: "barbarian_tracker_hex_active",
            extension: ".svg"
        }, {
            name: "barbarian_tracker_hex_inactive",
            extension: ".svg"
        }, {
            name: "barbarian_tracker_hex_attack",
            extension: ".svg"
        }, {
            name: "icon_barbarian_axes",
            extension: ".svg"
        }, {
            name: "icon_barbarian_ship",
            extension: ".svg"
        }, {
            name: "red_circle",
            extension: ".svg"
        }, {
            name: "green_circle",
            extension: ".svg"
        }, {
            name: "grey_circle",
            extension: ".svg"
        }, {
            name: "ribbon_large",
            extension: ".svg"
        }, {
            name: "ribbon_small",
            extension: ".svg"
        }, {
            name: "waitIconSpriteSpreadsheet",
            extension: ".json"
        }, {
            name: "Proposal",
            extension: ".png"
        }]
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewPopupLoading = void 0;
    const i = a(36),
        o = a(10);
    class n extends i.ViewPopup {
        constructor(e, t) {
            super("Assets Loading", "", () => {}, t, !0), this.completeAction = e, this.containerDiv = (0, o.createDivIn)(this.body, "popup-loader-container"), this.innderDiv = (0, o.createDivIn)(this.containerDiv, "popup-loader-inner"), this.removeCheckButton()
        }
        updateLoadPercentage(e) {
            const t = Math.round(e);
            this.innderDiv.innerText = t + "%", this.innderDiv.style.width = t + "%"
        }
        finishedLoading() {
            this.isRemoved() || (this.completeAction(), this.removePopup())
        }
    }
    t.ViewPopupLoading = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndController = void 0;
    const i = a(17),
        o = a(38),
        n = a(6),
        r = a(28),
        s = a(25),
        c = a(13),
        l = a(39),
        h = a(361),
        d = a(362),
        u = a(377),
        g = a(378),
        m = a(379),
        p = a(31),
        C = a(11);
    t.UIGameEndController = class {
        constructor(e, t) {
            this.proposalCheck = !1, this.uiGameManager = e, this.endGameState = t;
            const a = this.uiGameManager.canvasController;
            this.mainContainer = new i.SectionBgView(0, 0, a.appW - a.chatWidth, a.appH, a.app.stage, !0), this.mainContainer.drawBg(), this.contentContainer = new i.SectionBgView(0, 0, this.mainContainer.width, this.mainContainer.height, this.mainContainer), this.sectionSize = this.contentContainer.height / 6, this.columnWidth = this.contentContainer.width / 6, this.players = t.players, this.createLogo(), this.createTitle(), this.playVictorySound(), this.generalStats = new m.GameEndGeneralStatsView(0, 1.75 * this.sectionSize, this.contentContainer.width, .25 * this.sectionSize, this.contentContainer, t), this.returnToMapButton = new h.UIGameEndReturnToMapButtonController(this.uiGameManager, this.mainContainer, this);
            const o = 2 * this.sectionSize,
                n = 3 * this.sectionSize;
            this.statsController = new d.UIGameEndStatsController(this.uiGameManager, o, n, this.contentContainer, t);
            const r = o + n,
                s = 1 * this.sectionSize;
            this.footerController = new u.UIGameEndFooterController(this.uiGameManager, r, s, this.mainContainer), this.animate()
        }
        createTitle() {
            const e = this.getEndGameText();
            this.title = new o.TextView(e, 0, .85 * this.sectionSize, this.contentContainer.width, this.sectionSize, this.contentContainer, s.GameFont.Size.Giant, r.GameColor.getColor(r.GameColor.Color.Gray3)), this.title.centerXInParent()
        }
        createLogo() {
            const e = n.Loader.shared.resources.logo.texture;
            this.logo = new c.SpriteView(0, 0, this.sectionSize / .5, this.sectionSize, this.contentContainer, e), this.logo.centerXInParent()
        }
        playVictorySound() {
            for (const e of this.endGameState.players) e.winningPlayer && e.player.id == l.SocketController.session.id && C.Sound.playSound(C.Sound.SoundType.Victory)
        }
        getEndGameText() {
            for (const e of this.endGameState.players)
                if (e.player.id == l.SocketController.session.id) return e.rankText;
            return (0, p.logError)("getEndGameText", [this.endGameState.players]), "Well Played"
        }
        animate() {
            new g.UIGameAnimationWrapper(this.uiGameManager, this.contentContainer, 0, 1, 700), new g.UIGameAnimationWrapper(this.uiGameManager, this.logo, 0, 1, 300, 800), new g.UIGameAnimationWrapper(this.uiGameManager, this.title, 0, 1, 300, 800), new g.UIGameAnimationWrapper(this.uiGameManager, this.statsController.container, 0, 1, 300, 2e3), new g.UIGameAnimationWrapper(this.uiGameManager, this.returnToMapButton.button, 0, 1, 300, 4e3), new g.UIGameAnimationWrapper(this.uiGameManager, this.generalStats, 0, 1, 300, 4e3), new g.UIGameAnimationWrapper(this.uiGameManager, this.footerController.container, 0, 1, 300, 4e3)
        }
        setVisible(e) {
            this.mainContainer.visible = e, e ? this.statsController.showActiveView() : this.statsController.hideActiveView()
        }
        get isVisible() {
            return this.mainContainer.visible
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndReturnToMapButtonController = void 0;
    const i = a(88),
        o = a(14);
    var n = a(3).GameStateEnums.UIGameEventEnums;
    t.UIGameEndReturnToMapButtonController = class {
        constructor(e, t, a) {
            this.MAP_TEXT = "Open Stats", this.STATS_TEXT = "Return To Map", this.uiGameManager = e, this.gameEndContainer = t;
            const r = e.canvasController,
                s = 2 * r.itemSize,
                c = r.itemSize / 2,
                l = r.appW - r.chatWidth - s;
            this.button = new i.TextButtonView(l, 0, s, c, r.app.stage), this.button.updateText(this.STATS_TEXT), this.uiGameManager.mapController.disableInteraction(), this.button.updateAction(() => {
                o.CA.sendEvent(o.CA.Type.Click, o.CA.Category.EndGame, o.CA.Label.ClickedEndGameReturnToMap), a.isVisible ? (this.button.updateText(this.MAP_TEXT), this.uiGameManager.eventController.sendEvent(void 0, n.GameEndShowMap), this.uiGameManager.mapController.enableInteraction(), a.setVisible(!1)) : (this.button.updateText(this.STATS_TEXT), this.uiGameManager.eventController.sendEvent(void 0, n.GameEndHideMap), this.uiGameManager.mapController.disableInteraction(), a.setVisible(!0))
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndStatsController = void 0;
    const i = a(17),
        o = a(363),
        n = a(364),
        r = a(367),
        s = a(368),
        c = a(369),
        l = a(370),
        h = a(373),
        d = a(52),
        u = a(7),
        g = a(22);
    t.UIGameEndStatsController = class {
        constructor(e, t, a, n, d) {
            this.uiGameManager = e, this.container = new i.SectionBgView(0, t, n.width, a, n), this.itemSize = this.container.height / 9, this.tabView = new o.UIGameEndTabView(0, 0, this.container.width, this.itemSize, this.container, this), this.tableHeadView = new h.UIGameEndTableHeadView(0, this.itemSize, this.container.width, this.itemSize, this.container, d), this.playerStatsViewW = 7 * this.itemSize, this.playerStatsViewH = 7 * this.itemSize, this.playerStatsContainer = new l.UIGameEndPlayerStatsController(0, 2 * this.itemSize, this.container.width, this.playerStatsViewH, this.container, d.players);
            const u = this.playerStatsViewW,
                g = this.container.width - u,
                m = this.playerStatsViewH;
            this.overViewContainer = new r.GameEndStatsOverviewView(u, 0, g, m, this.playerStatsContainer.scrollBox.content, d), this.resourceStatsContainer = new s.GameEndStatsResourceStatsView(u, 0, g, m, this.playerStatsContainer.scrollBox.content, d.resourceStats), this.activityStatsContainer = new c.GameEndStatsActivityStatsView(u, 0, g, m, this.playerStatsContainer.scrollBox.content, d.activityStats), this.createDiceStats(d.diceStats), this.createResCardStats(d.resourceCardStats), this.createDevCardStats(d.developmentCardStats), this.hideAll(), this.activeTab = this.tabView.overView, this.clickedTab(this.tabView.overView), window.addEventListener("resize", this.resize.bind(this))
        }
        resize() {
            const {
                x: e,
                y: t,
                w: a,
                h: i
            } = this.calculateChartTransform();
            this.diceStatsElement.updateContainerTransform(e, t, a, i), this.resCardStatsElement.updateContainerTransform(e, t, a, i), this.devCardStatsElement.updateContainerTransform(e, t, a, i)
        }
        showActiveView() {
            this.activeTab == this.tabView.overView ? (this.overViewContainer.show(), this.tableHeadView.showOverviewHeader()) : this.activeTab == this.tabView.diceStats ? (this.diceStatsElement.show(), this.tableHeadView.hideHeaders()) : this.activeTab == this.tabView.resourceCardStats ? (this.resCardStatsElement.show(), this.tableHeadView.hideHeaders()) : this.activeTab == this.tabView.developmentCardStats ? (this.devCardStatsElement.show(), this.tableHeadView.hideHeaders()) : this.activeTab == this.tabView.resourceStats ? (this.resourceStatsContainer.show(), this.tableHeadView.showResourceStatsHeader()) : this.activeTab == this.tabView.activityStats && (this.activityStatsContainer.show(), this.tableHeadView.showActivityStatsHeader())
        }
        hideActiveView() {
            this.activeTab == this.tabView.overView ? this.overViewContainer.hide() : this.activeTab == this.tabView.diceStats ? this.diceStatsElement.hide() : this.activeTab == this.tabView.resourceCardStats ? this.resCardStatsElement.hide() : this.activeTab == this.tabView.developmentCardStats ? this.devCardStatsElement.hide() : this.activeTab == this.tabView.resourceStats ? this.resourceStatsContainer.hide() : this.activeTab == this.tabView.activityStats && this.activityStatsContainer.hide()
        }
        hideAll() {
            this.overViewContainer.hide(), this.resourceStatsContainer.hide(), this.activityStatsContainer.hide(), this.diceStatsElement.hide(), this.resCardStatsElement.hide(), this.devCardStatsElement.hide(), this.tabView.overView.removeHighlight(), this.tabView.resourceStats.removeHighlight(), this.tabView.diceStats.removeHighlight(), this.tabView.activityStats.removeHighlight(), this.tabView.developmentCardStats.removeHighlight(), this.tabView.resourceCardStats.removeHighlight(), this.tableHeadView.hideHeaders()
        }
        clickedTab(e) {
            this.activeTab.removeHighlight(), this.hideActiveView(), this.activeTab = e, e.highlight(), this.showActiveView()
        }
        createDiceStats(e) {
            const {
                x: t,
                y: a,
                w: i,
                h: o
            } = this.calculateChartTransform();
            this.diceStatsElement = new n.GameEndChartView(t, a, i, o, "Dice Rolls", ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], e)
        }
        createResCardStats(e) {
            const t = [],
                a = [],
                i = d.CardDataController.getCardEnumsOfTypes(this.uiGameManager.gameState.gameModeData.activeResourceCardTypes);
            for (const o of i) {
                const i = d.CardDataController.getCardDataForCard(o);
                if (null == i) continue;
                t.push(i.tipTitle);
                const n = (0, u.countOccurenceOfValueInArray)(e, o);
                a.push(n)
            }
            const {
                x: o,
                y: r,
                w: s,
                h: c
            } = this.calculateChartTransform();
            this.resCardStatsElement = new n.GameEndChartView(o, r, s, c, "Resource Cards Drawn", t, a)
        }
        createDevCardStats(e) {
            const t = [],
                a = [],
                i = d.CardDataController.getCardEnumsOfTypes(this.uiGameManager.gameState.gameModeData.activeDevelopmentCardTypes);
            for (const o of i) {
                const i = d.CardDataController.getCardDataForCard(o);
                if (null == i) continue;
                t.push(i.tipTitle);
                const n = (0, u.countOccurenceOfValueInArray)(e, o);
                a.push(n)
            }
            const {
                x: o,
                y: r,
                w: s,
                h: c
            } = this.calculateChartTransform();
            this.devCardStatsElement = new n.GameEndChartView(o, r, s, c, g.EnglishTexts.END_GAME_DEVELOPMENT_CARDS_DRAWN, t, a)
        }
        calculateChartTransform() {
            const e = this.playerStatsViewW + this.itemSize,
                t = this.tabView.height + this.tabView.getGlobalPosition().y,
                a = this.canvasPositionToDOM(e, t),
                i = this.canvasPositionToDOM(e + this.container.width - this.playerStatsViewW - this.itemSize, t + this.playerStatsViewH + this.itemSize),
                o = i.x - a.x,
                n = i.y - a.y;
            return {
                x: a.x,
                y: a.y,
                w: o,
                h: n
            }
        }
        canvasPositionToDOM(e, t) {
            const a = this.uiGameManager.canvasController;
            return {
                x: e = e / a.appW * a.app.view.offsetWidth + a.responsiveController.getCanvasX(),
                y: t = t / a.appH * a.app.view.offsetHeight + a.responsiveController.getCanvasY()
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndTabView = void 0;
    const i = a(17),
        o = a(88),
        n = a(14);
    class r extends i.SectionBgView {
        constructor(e, t, a, i, r, s) {
            super(e, t, a, i, r), this.statsController = s;
            const c = this.width / 6;
            this.overView = new o.TextButtonView(0, 0, c, this.height, this), this.overView.updateText("Overview"), this.overView.updateAction(() => {
                this.statsController.clickedTab(this.overView), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.EndGame, n.CA.Label.ClickedEndGameOverview)
            }), this.diceStats = new o.TextButtonView(c, 0, c, this.height, this), this.diceStats.updateText("Dice Stats"), this.diceStats.updateAction(() => {
                this.statsController.clickedTab(this.diceStats), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.EndGame, n.CA.Label.ClickedEndGameDiceStats)
            }), this.resourceCardStats = new o.TextButtonView(2 * c, 0, c, this.height, this), this.resourceCardStats.updateText("Res Card Stats"), this.resourceCardStats.updateAction(() => {
                this.statsController.clickedTab(this.resourceCardStats), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.EndGame, n.CA.Label.ClickedEndGameResourceCardStats)
            }), this.developmentCardStats = new o.TextButtonView(3 * c, 0, c, this.height, this), this.developmentCardStats.updateText("Dev Card Stats"), this.developmentCardStats.updateAction(() => {
                this.statsController.clickedTab(this.developmentCardStats), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.EndGame, n.CA.Label.ClickedEndGameDevelopmentCardStats)
            }), this.activityStats = new o.TextButtonView(4 * c, 0, c, this.height, this), this.activityStats.updateText("Activity Stats"), this.activityStats.updateAction(() => {
                this.statsController.clickedTab(this.activityStats), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.EndGame, n.CA.Label.ClickedEndGameActivityStats)
            }), this.resourceStats = new o.TextButtonView(5 * c, 0, c, this.height, this), this.resourceStats.updateText("Resource Stats"), this.resourceStats.updateAction(() => {
                this.statsController.clickedTab(this.resourceStats), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.EndGame, n.CA.Label.ClickedEndGameResourceStats)
            })
        }
    }
    t.UIGameEndTabView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameEndChartView = void 0;
    const i = a(365),
        o = a(28),
        n = a(10);
    t.GameEndChartView = class {
        constructor(e, t, a, i, o, r, s) {
            this.container = (0, n.createDivIn)(document.body, ""), this.container.style.position = "absolute", this.updateContainerTransform(e, t, a, i), this.chart = this.createChart(e, t, o, r, s)
        }
        createChart(e, t, a, r, s) {
            i.Chart.defaults.global.defaultFontColor = o.GameColor.getColor(o.GameColor.Color.Gray4);
            const c = [],
                l = [];
            for (const e of s) c.push("rgba(255, 99, 132, 1)"), l.push("rgba(255, 99, 132, 1)");
            const h = (0, n.createCanvasIn)(this.container, this.container.offsetWidth, this.container.offsetHeight, "");
            return new i.Chart(h, {
                type: "bar",
                data: {
                    labels: r,
                    datasets: [{
                        label: a,
                        data: s,
                        backgroundColor: c,
                        borderColor: l,
                        borderWidth: 3
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: !0
                            }
                        }]
                    },
                    responsive: !0,
                    maintainAspectRatio: !0
                }
            })
        }
        updateContainerTransform(e, t, a, i) {
            this.container.style.marginLeft = e + "px", this.container.style.marginTop = t + "px", this.container.style.width = a + "px", this.container.style.height = i + "px"
        }
        show() {
            this.container.style.display = "block"
        }
        hide() {
            this.container.style.display = "none"
        }
    }
}, , function(e, t, a) {
    var i = {
        "./af": 157,
        "./af.js": 157,
        "./ar": 158,
        "./ar-dz": 159,
        "./ar-dz.js": 159,
        "./ar-kw": 160,
        "./ar-kw.js": 160,
        "./ar-ly": 161,
        "./ar-ly.js": 161,
        "./ar-ma": 162,
        "./ar-ma.js": 162,
        "./ar-sa": 163,
        "./ar-sa.js": 163,
        "./ar-tn": 164,
        "./ar-tn.js": 164,
        "./ar.js": 158,
        "./az": 165,
        "./az.js": 165,
        "./be": 166,
        "./be.js": 166,
        "./bg": 167,
        "./bg.js": 167,
        "./bm": 168,
        "./bm.js": 168,
        "./bn": 169,
        "./bn.js": 169,
        "./bo": 170,
        "./bo.js": 170,
        "./br": 171,
        "./br.js": 171,
        "./bs": 172,
        "./bs.js": 172,
        "./ca": 173,
        "./ca.js": 173,
        "./cs": 174,
        "./cs.js": 174,
        "./cv": 175,
        "./cv.js": 175,
        "./cy": 176,
        "./cy.js": 176,
        "./da": 177,
        "./da.js": 177,
        "./de": 178,
        "./de-at": 179,
        "./de-at.js": 179,
        "./de-ch": 180,
        "./de-ch.js": 180,
        "./de.js": 178,
        "./dv": 181,
        "./dv.js": 181,
        "./el": 182,
        "./el.js": 182,
        "./en-SG": 183,
        "./en-SG.js": 183,
        "./en-au": 184,
        "./en-au.js": 184,
        "./en-ca": 185,
        "./en-ca.js": 185,
        "./en-gb": 186,
        "./en-gb.js": 186,
        "./en-ie": 187,
        "./en-ie.js": 187,
        "./en-il": 188,
        "./en-il.js": 188,
        "./en-nz": 189,
        "./en-nz.js": 189,
        "./eo": 190,
        "./eo.js": 190,
        "./es": 191,
        "./es-do": 192,
        "./es-do.js": 192,
        "./es-us": 193,
        "./es-us.js": 193,
        "./es.js": 191,
        "./et": 194,
        "./et.js": 194,
        "./eu": 195,
        "./eu.js": 195,
        "./fa": 196,
        "./fa.js": 196,
        "./fi": 197,
        "./fi.js": 197,
        "./fo": 198,
        "./fo.js": 198,
        "./fr": 199,
        "./fr-ca": 200,
        "./fr-ca.js": 200,
        "./fr-ch": 201,
        "./fr-ch.js": 201,
        "./fr.js": 199,
        "./fy": 202,
        "./fy.js": 202,
        "./ga": 203,
        "./ga.js": 203,
        "./gd": 204,
        "./gd.js": 204,
        "./gl": 205,
        "./gl.js": 205,
        "./gom-latn": 206,
        "./gom-latn.js": 206,
        "./gu": 207,
        "./gu.js": 207,
        "./he": 208,
        "./he.js": 208,
        "./hi": 209,
        "./hi.js": 209,
        "./hr": 210,
        "./hr.js": 210,
        "./hu": 211,
        "./hu.js": 211,
        "./hy-am": 212,
        "./hy-am.js": 212,
        "./id": 213,
        "./id.js": 213,
        "./is": 214,
        "./is.js": 214,
        "./it": 215,
        "./it-ch": 216,
        "./it-ch.js": 216,
        "./it.js": 215,
        "./ja": 217,
        "./ja.js": 217,
        "./jv": 218,
        "./jv.js": 218,
        "./ka": 219,
        "./ka.js": 219,
        "./kk": 220,
        "./kk.js": 220,
        "./km": 221,
        "./km.js": 221,
        "./kn": 222,
        "./kn.js": 222,
        "./ko": 223,
        "./ko.js": 223,
        "./ku": 224,
        "./ku.js": 224,
        "./ky": 225,
        "./ky.js": 225,
        "./lb": 226,
        "./lb.js": 226,
        "./lo": 227,
        "./lo.js": 227,
        "./lt": 228,
        "./lt.js": 228,
        "./lv": 229,
        "./lv.js": 229,
        "./me": 230,
        "./me.js": 230,
        "./mi": 231,
        "./mi.js": 231,
        "./mk": 232,
        "./mk.js": 232,
        "./ml": 233,
        "./ml.js": 233,
        "./mn": 234,
        "./mn.js": 234,
        "./mr": 235,
        "./mr.js": 235,
        "./ms": 236,
        "./ms-my": 237,
        "./ms-my.js": 237,
        "./ms.js": 236,
        "./mt": 238,
        "./mt.js": 238,
        "./my": 239,
        "./my.js": 239,
        "./nb": 240,
        "./nb.js": 240,
        "./ne": 241,
        "./ne.js": 241,
        "./nl": 242,
        "./nl-be": 243,
        "./nl-be.js": 243,
        "./nl.js": 242,
        "./nn": 244,
        "./nn.js": 244,
        "./pa-in": 245,
        "./pa-in.js": 245,
        "./pl": 246,
        "./pl.js": 246,
        "./pt": 247,
        "./pt-br": 248,
        "./pt-br.js": 248,
        "./pt.js": 247,
        "./ro": 249,
        "./ro.js": 249,
        "./ru": 250,
        "./ru.js": 250,
        "./sd": 251,
        "./sd.js": 251,
        "./se": 252,
        "./se.js": 252,
        "./si": 253,
        "./si.js": 253,
        "./sk": 254,
        "./sk.js": 254,
        "./sl": 255,
        "./sl.js": 255,
        "./sq": 256,
        "./sq.js": 256,
        "./sr": 257,
        "./sr-cyrl": 258,
        "./sr-cyrl.js": 258,
        "./sr.js": 257,
        "./ss": 259,
        "./ss.js": 259,
        "./sv": 260,
        "./sv.js": 260,
        "./sw": 261,
        "./sw.js": 261,
        "./ta": 262,
        "./ta.js": 262,
        "./te": 263,
        "./te.js": 263,
        "./tet": 264,
        "./tet.js": 264,
        "./tg": 265,
        "./tg.js": 265,
        "./th": 266,
        "./th.js": 266,
        "./tl-ph": 267,
        "./tl-ph.js": 267,
        "./tlh": 268,
        "./tlh.js": 268,
        "./tr": 269,
        "./tr.js": 269,
        "./tzl": 270,
        "./tzl.js": 270,
        "./tzm": 271,
        "./tzm-latn": 272,
        "./tzm-latn.js": 272,
        "./tzm.js": 271,
        "./ug-cn": 273,
        "./ug-cn.js": 273,
        "./uk": 274,
        "./uk.js": 274,
        "./ur": 275,
        "./ur.js": 275,
        "./uz": 276,
        "./uz-latn": 277,
        "./uz-latn.js": 277,
        "./uz.js": 276,
        "./vi": 278,
        "./vi.js": 278,
        "./x-pseudo": 279,
        "./x-pseudo.js": 279,
        "./yo": 280,
        "./yo.js": 280,
        "./zh-cn": 281,
        "./zh-cn.js": 281,
        "./zh-hk": 282,
        "./zh-hk.js": 282,
        "./zh-tw": 283,
        "./zh-tw.js": 283
    };

    function o(e) {
        var t = n(e);
        return a(t)
    }

    function n(e) {
        if (!a.o(i, e)) {
            var t = new Error("Cannot find module "" + e + """);
            throw t.code = "MODULE_NOT_FOUND", t
        }
        return i[e]
    }
    o.keys = function() {
        return Object.keys(i)
    }, o.resolve = n, e.exports = o, o.id = 366
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameEndStatsOverviewView = void 0;
    const i = a(120);
    class o extends i.UIGameEndTableView {
        constructor(e, t, a, i, o, n) {
            super(e, t, a, i, o);
            const r = n.getAllUniqueVictoryPointsEarnedByAllPlayers(),
                s = [];
            for (const e of n.players) {
                const t = [];
                for (const a of r) {
                    const i = n.highestVictoryPointScoreOfType(a),
                        o = e.victoryPoints.totalVictoryPointsOfType([a]),
                        r = o >= i;
                    t.push({
                        amount: o,
                        highest: r
                    })
                }
                s.push(t)
            }
            this.createPoints(s)
        }
    }
    t.GameEndStatsOverviewView = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameEndStatsResourceStatsView = void 0;
    const i = a(120);
    class o extends i.UIGameEndTableView {
        constructor(e, t, a, i, o, n) {
            super(e, t, a, i, o);
            const r = [];
            for (const e of n) {
                const t = [];
                t.push({
                    amount: e.totalResourceIncome,
                    highest: !1
                }), t.push({
                    amount: e.totalResourceLoss,
                    highest: !1
                }), t.push({
                    amount: e.totalResourceScore,
                    highest: !1
                }), t.push({
                    amount: e.rollingIncome,
                    highest: !1
                }), t.push({
                    amount: e.robbingIncome,
                    highest: !1
                }), t.push({
                    amount: e.devCardIncome,
                    highest: !1
                }), t.push({
                    amount: e.tradeIncome,
                    highest: !1
                }), t.push({
                    amount: e.rollingLoss,
                    highest: !1
                }), t.push({
                    amount: e.robbingLoss,
                    highest: !1
                }), t.push({
                    amount: e.devCardLoss,
                    highest: !1
                }), t.push({
                    amount: e.tradeLoss,
                    highest: !1
                }), t.push({
                    amount: e.goldIncome,
                    highest: !1
                }), r.push(t)
            }
            this.createPoints(r)
        }
    }
    t.GameEndStatsResourceStatsView = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameEndStatsActivityStatsView = void 0;
    const i = a(120);
    class o extends i.UIGameEndTableView {
        constructor(e, t, a, i, o, n) {
            super(e, t, a, i, o);
            const r = [];
            for (const e of n) {
                const t = [];
                t.push({
                    amount: e.proposedTrades,
                    highest: !1
                }), t.push({
                    amount: e.successfulTrades,
                    highest: !1
                }), t.push({
                    amount: e.resourcesUsed,
                    highest: !1
                }), t.push({
                    amount: e.resourceIncomeBlocked,
                    highest: !1
                }), t.push({
                    amount: e.devCardsBought,
                    highest: !1
                }), t.push({
                    amount: e.devCardsUsed,
                    highest: !1
                }), r.push(t)
            }
            this.createPoints(r)
        }
    }
    t.GameEndStatsActivityStatsView = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndPlayerStatsController = void 0;
    const i = a(17),
        o = a(284),
        n = a(371),
        r = a(27);
    class s extends i.SectionBgView {
        constructor(e, t, a, i, o, n) {
            super(e, t, a, i, o), this.playerEndGameViews = [], this.itemSize = this.height / 7, this.createPlayers(n)
        }
        createPlayers(e) {
            const t = new r.SectionView(0, 0, this.width, this.height, this);
            this.scrollBox = new o.Scrollbox({
                boxWidth: t.width,
                boxHeight: t.height
            }), this.scrollBox.overflowX = "hidden", t.addChild(this.scrollBox);
            for (const [t, a] of e.entries()) {
                const e = this.itemSize * t,
                    i = new n.UIGameEndPlayerStatsView(e, this.width, this.itemSize, this.scrollBox.content, t, a);
                this.playerEndGameViews.push(i)
            }
        }
    }
    t.UIGameEndPlayerStatsController = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndPlayerStatsView = void 0;
    const i = a(6),
        o = a(23),
        n = a(28),
        r = a(25),
        s = a(13),
        c = a(372),
        l = a(38),
        h = a(33),
        d = a(27),
        u = a(47),
        g = a(285),
        m = a(36);
    class p extends d.SectionView {
        constructor(e, t, a, d, p, C) {
            super(0, e, t, a, d);
            const y = i.Loader.shared.resources.icon_add_friend.texture,
                S = i.Loader.shared.resources.icon_report.texture,
                v = o.GameUIImages.getMedal(p),
                _ = .66 * a,
                P = (a - _) / 2,
                T = new s.SpriteView(0, P, _, _, this, y, .1 * _),
                b = new s.SpriteView(_, P, _, _, this, S, .1 * _);
            if (v) {
                const e = new s.SpriteView(2 * _, P, _, _, this, v);
                e.setTip(c.TipsGameEnd.getMedalTitle(e), [""])
            }
            const f = o.GameUIImages.getBannerForPlayer(C.player.selectedColor);
            new s.SpriteView(2 * a, 0, 4 * a, this.height, this, f).setClickAction(() => {
                window.open(window.location.origin + (0, u.getProfileURI)(C.player.userState.username))
            });
            new l.TextView(C.player.userState.username, 2.4 * a, 0, 4 * a, this.height, this, r.GameFont.Size.XL);
            new l.TextView(String(C.victoryPoints.totalPrivateVictoryPoints()), 6 * a, 0, a, a, this, r.GameFont.Size.XXL, n.GameColor.getColor(n.GameColor.Color.Gray3)).centerX(), T.setClickAction(() => {
                h.UIPopupController.createSimplePopup("Coming Soon", "We"re actively developing the game and this feature is coming soon. <a href=\"https://eepurl.com/dM8VFY\" target="_blank">Subscribe to our updates.</a>")
            });
            const I = C.player.userState.username;
            b.setClickAction(() => {
                new m.ViewPopup("Report " + I, `Are you sure you want to report ${I}?`, () => {
                    g.UIReportPlayer.create(I);
                    const e = new m.ViewPopup("Reported!", "The player has been reported. We have received the chat history, game log, and players` profiles of this game. Our mods will take appropriate action. Thanks for keeping the community clean.", () => {}, () => {}, !0);
                    e.removeXButton(), e.show()
                }, () => {}, !0).show()
            }), T.setTip("Add Friend", [""]), b.setTip("Report", [""])
        }
    }
    t.UIGameEndPlayerStatsView = p
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TipsGameEnd = void 0;
    const i = a(6),
        o = a(31);
    ! function(e) {
        e.getMedalTitle = function(e) {
            switch (e.texture) {
                case i.Loader.shared.resources.medal_gold.texture:
                    return "Gold Medal";
                case i.Loader.shared.resources.medal_silver.texture:
                    return "Silver Medal";
                case i.Loader.shared.resources.medal_bronze.texture:
                    return "Bronze Medal"
            }
            return (0, o.logError)("getMedalTitle", [e.texture.textureCacheIds]), ""
        }
    }(t.TipsGameEnd || (t.TipsGameEnd = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndTableHeadView = void 0;
    const i = a(27),
        o = a(6),
        n = a(13),
        r = a(374),
        s = a(22);
    class c extends i.SectionView {
        constructor(e, t, a, o, n, r) {
            super(e, t, a, o, n), this.itemSize = o, this.parentContainer = n, this.endGameState = r, this.createTrophy(), this.overviewHeader = new i.SectionView(7 * this.itemSize, 0, a - 7 * this.itemSize, o, this), this.activityStatsHeader = new i.SectionView(7 * this.itemSize, 0, a - 7 * this.itemSize, o, this), this.resourceStatsHeader = new i.SectionView(7 * this.itemSize, 0, a - 7 * this.itemSize, o, this), this.createOverviewHeader(), this.createActivityStatsHeader(), this.createResourceStatsHeader(), this.showOverviewHeader()
        }
        createActivityStatsHeader() {
            const e = o.Loader.shared.resources,
                t = [e.stat_proposed_trades.texture, e.stat_successful_trades.texture, e.stat_resources_used.texture, e.stat_resource_income_blocked.texture, e.stat_dev_card_bought.texture, e.stat_dev_card_used.texture],
                a = [s.EnglishTexts.END_GAME_ACTIVITY_PROPOSED_TRADES, s.EnglishTexts.END_GAME_ACTIVITY_SUCCESSFUL_TRADES, s.EnglishTexts.END_GAME_ACTIVITY_RESOURCES_USED, s.EnglishTexts.END_GAME_ACTIVITY_RESOURCE_INCOME_BLOCKED, s.EnglishTexts.END_GAME_ACTIVITY_DEV_CARDS_BOUGHT, s.EnglishTexts.END_GAME_ACTIVITY_DEV_CARDS_USED];
            this.createHeaders(t, a, this.activityStatsHeader), this.activityStatsHeader.visible = !1
        }
        createResourceStatsHeader() {
            const e = o.Loader.shared.resources,
                t = [e.stat_res_gain.texture, e.stat_res_loss.texture, e.stat_res_score.texture, e.stat_rolling_income.texture, e.stat_robbing_income.texture, e.stat_dev_card_income.texture, e.stat_trade_income.texture, e.stat_rolling_loss.texture, e.stat_robbing_loss.texture, e.stat_dev_card_loss.texture, e.stat_trade_loss.texture, e.stat_gold_income.texture],
                a = [s.EnglishTexts.END_GAME_TOTAL_RESOURCE_INCOME, s.EnglishTexts.END_GAME_TOTAL_RESOURCE_LOSS, s.EnglishTexts.END_GAME_TOTAL_RESOURCE_SCORE, s.EnglishTexts.END_GAME_ROLLING_INCOME, s.EnglishTexts.END_GAME_ROBBING_INCOME, s.EnglishTexts.END_GAME_DEV_CARD_INCOME, s.EnglishTexts.END_GAME_TRADE_INCOME, s.EnglishTexts.END_GAME_ROLLING_LOSS, s.EnglishTexts.END_GAME_ROBBING_LOSS, s.EnglishTexts.END_GAME_DEV_CARD_LOSS, s.EnglishTexts.END_GAME_TRADE_LOSS, s.EnglishTexts.END_GAME_GOLD_INCOME];
            this.createHeaders(t, a, this.resourceStatsHeader)
        }
        createOverviewHeader() {
            const e = o.Loader.shared.resources,
                t = this.endGameState.getAllUniqueVictoryPointsEarnedByAllPlayers(),
                a = [];
            for (const i of r.VictoryPointDataController.getEndGameVictoryPointImageFileNames(t)) a.push(e[i].texture);
            const i = r.VictoryPointDataController.getEndGameVictoryPointToolTips(t);
            this.createHeaders(a, i, this.overviewHeader)
        }
        createHeaders(e, t, a) {
            let i = 0;
            for (const [o, r] of e.entries()) {
                new n.SpriteView(i, 0, this.itemSize, this.itemSize, a, r, .1 * this.itemSize).setTip("", [t[o]]), i += this.itemSize
            }
        }
        createTrophy() {
            const e = o.Loader.shared.resources.icon_trophy.texture;
            new n.SpriteView(6 * this.itemSize, 0, this.itemSize, this.itemSize, this, e).setTip("Victory Points", [""])
        }
        hideHeaders() {
            this.overviewHeader.visible = !1, this.activityStatsHeader.visible = !1, this.resourceStatsHeader.visible = !1
        }
        showOverviewHeader() {
            this.hideHeaders(), this.overviewHeader.visible = !0
        }
        showActivityStatsHeader() {
            this.hideHeaders(), this.activityStatsHeader.visible = !0
        }
        showResourceStatsHeader() {
            this.hideHeaders(), this.resourceStatsHeader.visible = !0
        }
    }
    t.UIGameEndTableHeadView = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.VictoryPointDataController = void 0;
    const i = a(375),
        o = a(7);
    class n {
        static getEndGameVictoryPointImageFileNames(e) {
            const t = [];
            for (const a of n.victoryPointDataList)(0, o.elementInArray)(t, a.endGameImageFileName) || (0, o.elementInArray)(e, a.victoryPointType) && t.push(a.endGameImageFileName);
            return t
        }
        static getEndGameVictoryPointToolTips(e) {
            const t = [];
            for (const a of n.victoryPointDataList)(0, o.elementInArray)(t, a.endGameToolTip) || (0, o.elementInArray)(e, a.victoryPointType) && t.push(a.endGameToolTip);
            return t
        }
    }
    t.VictoryPointDataController = n, n.victoryPointDataList = [new i.VictoryPointDataSettlement, new i.VictoryPointDataCity, new i.VictoryPointDataDevelopmentCard, new i.VictoryPointDataLargestArmy, new i.VictoryPointDataLongestRoad, new i.VictoryPointDataChit, new i.VictoryPointDataMetropolis, new i.VictoryPointDataDefenderOfColonist, new i.VictoryPointDataProgressCard, new i.VictoryPointDataMerchant]
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.VictoryPointDataMerchant = t.VictoryPointDataProgressCard = t.VictoryPointDataDefenderOfColonist = t.VictoryPointDataMetropolis = t.VictoryPointDataChit = t.VictoryPointDataLongestRoad = t.VictoryPointDataLargestArmy = t.VictoryPointDataDevelopmentCard = t.VictoryPointDataCity = t.VictoryPointDataSettlement = void 0;
    const i = a(22),
        o = a(3),
        n = a(376);
    var r = o.GameStateEnums.VictoryPointTypes;
    class s extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.Settlement, this.value = 1, this.private = !1, this.endGameImageFileName = "settlement_mysticblue", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_SETTLEMENT_VP
        }
    }
    t.VictoryPointDataSettlement = s;
    class c extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.City, this.value = 2, this.private = !1, this.endGameImageFileName = "city_mysticblue", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_CITY_VP
        }
    }
    t.VictoryPointDataCity = c;
    class l extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.DevelopmentCardVictoryPoint, this.value = 1, this.private = !0, this.endGameImageFileName = "stat_vp", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_DEV_CARD_VP
        }
    }
    t.VictoryPointDataDevelopmentCard = l;
    class h extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.LargestArmy, this.value = 2, this.private = !1, this.endGameImageFileName = "stat_largest_army", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_LARGEST_ARMY
        }
    }
    t.VictoryPointDataLargestArmy = h;
    class d extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.LongestRoad, this.value = 2, this.private = !1, this.endGameImageFileName = "stat_longest_road", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_LONGEST_ROAD
        }
    }
    t.VictoryPointDataLongestRoad = d;
    class u extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.Chits, this.value = 1, this.private = !1, this.endGameImageFileName = "stat_chits", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_CHIT_VP
        }
    }
    t.VictoryPointDataChit = u;
    class g extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.Metropolis, this.value = 2, this.private = !1, this.endGameImageFileName = "stat_metropolis", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_METROPOLIS
        }
    }
    t.VictoryPointDataMetropolis = g;
    class m extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.DefenderOfColonist, this.value = 1, this.private = !1, this.endGameImageFileName = "stat_defender", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_DEFENDER_OF_COLONIST
        }
    }
    t.VictoryPointDataDefenderOfColonist = m;
    class p extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.ProgressCardVictoryPoint, this.value = 1, this.private = !1, this.endGameImageFileName = "stat_vp", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_DEV_CARD_VP
        }
    }
    t.VictoryPointDataProgressCard = p;
    class C extends n.BaseVictoryPointData {
        constructor() {
            super(...arguments), this.victoryPointType = r.Merchant, this.value = 1, this.private = !1, this.endGameImageFileName = "stat_merchant", this.endGameToolTip = i.EnglishTexts.END_GAME_OVERVIEW_MERCHANT
        }
    }
    t.VictoryPointDataMerchant = C
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BaseVictoryPointData = void 0;
    t.BaseVictoryPointData = class {}
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEndFooterController = void 0;
    const i = a(17),
        o = a(14),
        n = a(88),
        r = a(25),
        s = a(6);
    var c = a(3).GameStateEnums.UIGameEventEnums;
    const l = a(286);
    t.UIGameEndFooterController = class {
        constructor(e, t, a, o) {
            this.REMATCH_TEXT = "Rematch", this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.container = new i.SectionBgView(0, t, o.width, a, o), this.createButtons()
        }
        onEvent(e, t) {
            switch (t) {
                case c.GameEndRematchTextUpdated:
                    this.updatePlayerCount(e)
            }
        }
        updatePlayerCount(e) {
            const t = "(" + e + "/" + this.uiGameManager.gameState.gameSettings.maxPlayers + ") joined";
            this.rematchButton.updateText(this.REMATCH_TEXT + "\n" + t)
        }
        createButtons() {
            const e = this.container.width / 3,
                t = this.container.height / 1.5;
            this.rematchButton = new n.TextButtonView(e / 3, 0, e, t, this.container), this.rematchButton.viewContainer.drawRoundedBg(s.Loader.shared.resources.bg_text_button_dark_green.texture), this.rematchButton.updateText(this.REMATCH_TEXT), this.rematchButton.updateFont(r.GameFont.Size.XXL), this.rematchButton.updateAction(() => {
                o.CA.sendEvent(o.CA.Type.Click, o.CA.Category.EndGame, o.CA.Label.ClickedEndGameRematch), this.uiGameManager.socketGameSend.clickedRematch()
            });
            const a = new n.TextButtonView(e / 3 * 5, 0, e, t, this.container);
            a.updateText("Lobby"), a.updateFont(r.GameFont.Size.XXL), a.updateAction(() => {
                o.CA.sendEvent(o.CA.Type.Click, o.CA.Category.EndGame, o.CA.Label.ClickedEndGameLobby), l.SocketGameSend.clickedLobby()
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameAnimationWrapper = void 0;
    const i = a(31),
        o = a(16);
    t.UIGameAnimationWrapper = class {
        constructor(e, t, a, i, n, r = 0) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameAnimation(this), this.object = t, this.setAlpha(a), this.endAlpha = i, this.duration = n, this.delay = r, this.startedAnimation = (new Date).getTime(), this.dAlpha = (i - a) / (o.UIGameConstants.GAME_FPS * n / 1e3)
        }
        onGameTick(e) {
            this.animate(), this.animationComplete() && this.endAnimation()
        }
        animationComplete() {
            const e = this.startedAnimation + this.duration + this.delay < (new Date).getTime();
            return e && this.setAlpha(this.endAlpha), e
        }
        animate() {
            this.delayPassed() && this.incAlpha(this.dAlpha)
        }
        delayPassed() {
            return this.startedAnimation + this.delay < (new Date).getTime()
        }
        incAlpha(e) {
            if ((0, i.isElement)(this.object)) {
                const t = Number(this.object.style.opacity);
                this.setAlpha(t + e)
            } else {
                const t = this.object.alpha;
                this.setAlpha(t + e)
            }
        }
        setAlpha(e) {
            (0, i.isElement)(this.object) ? this.object.style.opacity = String(e): this.object.alpha = e
        }
        endAnimation() {
            this.uiGameManager.eventController.unregisterUIGameAnimation(this)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameEndGeneralStatsView = void 0;
    const i = a(17),
        o = a(28),
        n = a(38),
        r = a(25),
        s = a(54);
    class c extends i.SectionBgView {
        constructor(e, t, a, i, c, l) {
            super(e, t, a, i, c);
            const h = "Time: " + (0, s.turnSecondsInToTimerFormat)(l.time / 1e3) + " - Turns: " + String(l.diceCount);
            new n.TextView(h, 0, 0, this.width, this.height, this, r.GameFont.Size.XXL, o.GameColor.getColor(o.GameColor.Color.Gray3)).centerX()
        }
    }
    t.GameEndGeneralStatsView = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UserState = void 0;
    class i {
        static deserialize(e) {
            const t = new i;
            return t.id = e.id, t.username = e.username, t.isLoggedIn = e.isLoggedIn, t.passedTutorial = e.passedTutorial, t.isBot = e.isBot, t.adsEnabled = e.adsEnabled, t.icon = e.icon, t.karmaTextStatus = e.karmaTextStatus, t.karmaHoverStatus = e.karmaHoverStatus, t.completedGameCount = e.completedGameCount, t
        }
        isEqualTo(e) {
            return this.id == e.id && this.username == e.username
        }
    }
    t.UserState = i
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UserItems = void 0;
    const i = a(32),
        o = a(24),
        n = a(7);
    class r {
        constructor() {
            this.colonistCoins = 0, this.presalePacks = [], this.expansions = [], this.maps = [], this.icons = [], this.colors = []
        }
        static deserialize(e) {
            const t = new r;
            return t.colonistCoins = e.colonistCoins, t.presalePacks = e.presalePacks, t.expansions = e.expansions, t.maps = e.maps, t.icons = e.icons, t.colors = e.colors, t
        }
        hasAccessToStoreMap(e) {
            if (0 == e.length) return !0;
            for (const t of this.maps)
                if ((0, n.elementInArray)(e, t.type)) return !0;
            return !1
        }
        hasAccessToExpansion(e) {
            if (0 == e.length) return !0;
            for (const t of this.expansions)
                if ((0, n.elementInArray)(e, t.type)) return !0;
            return !1
        }
        hasAccessToPremiumMap(e) {
            if (!e.isMapPremium()) return !0;
            if (o.KatanConfigs.KATAN_SETTINGS.EXPANSIONS_AND_MAPS_FREE_TO_TEST_IN_STAGING) return !0;
            if (e.isMapRestrictedByPremiumGameMode() && !this.hasAccessToExpansion(e.premiumExpanionAccess)) return !1;
            return !(e.isMapRestrictedByPremiumMap() && !this.hasAccessToStoreMap(e.premiumMapAccess))
        }
        hasAccessToPremiumMode(e) {
            return !e.isGameModePremium() || (!!o.KatanConfigs.KATAN_SETTINGS.EXPANSIONS_AND_MAPS_FREE_TO_TEST_IN_STAGING || this.hasAccessToExpansion(e.premiumExpansionAccess))
        }
        highestLevelPack() {
            let e = -1;
            for (const t of this.presalePacks) t.type > e && (e = t.type);
            if (-1 != e) return e
        }
        purchasedPresalePacks() {
            return this.presalePacks.length > 0
        }
        addStoreItem(e) {
            switch (e.category) {
                case i.StoreItemCategory.PresalePack:
                    return void this.presalePacks.push(e);
                case i.StoreItemCategory.Expansion:
                    return void this.expansions.push(e);
                case i.StoreItemCategory.Map:
                    return void this.maps.push(e);
                case i.StoreItemCategory.Icon:
                    return void this.icons.push(e);
                case i.StoreItemCategory.Color:
                    return void this.colors.push(e)
            }
        }
        getAllItems() {
            const e = [];
            return e.push(...this.presalePacks), e.push(...this.expansions), e.push(...this.maps), e.push(...this.icons), e.push(...this.colors), e
        }
        hasAdsEnabled() {
            return 0 == this.presalePacks.length
        }
        hasItem(e) {
            for (const t of this.getAllItems())
                if (e.category == t.category && e.type == t.type) return !0;
            return !1
        }
    }
    t.UserItems = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RoomState = void 0;
    const i = a(288);
    class o {
        set guests(e) {
            this._guests = e
        }
        static deserialize(e) {
            const t = new o;
            t.gameSetting = e.gameSetting, t.roomStartTime = e.roomStartTime, t.hostSession = i.UserSessionState.deserialize(e.hostSession), t._guests = [];
            for (const a of e._guests) t._guests.push(i.UserSessionState.deserialize(a));
            return t.link = e.link, t
        }
        getSessionCount() {
            return this._guests.length + 1
        }
        getSessions() {
            const e = this.getGuestSessions();
            return e.push(this.hostSession), e
        }
        getGuestSessions() {
            const e = [];
            for (const t of this._guests) e.push(t);
            return e
        }
        getUsernames() {
            const e = [];
            e.push(this.hostSession.userState.username);
            for (const t of this._guests) e.push(t.userState.username);
            return e
        }
        isInRoom(e) {
            for (const t of this.getSessions())
                if (t.isEqualTo(e)) return !0;
            return !1
        }
        isMultiplayer() {
            for (const e of this.getGuestSessions())
                if (e.isHumanSession()) return !0;
            return !1
        }
        isHost(e) {
            return e == this.hostSession.id
        }
    }
    t.RoomState = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketDataTypes = void 0;
    const i = a(3);
    ! function(e) {
        class t {
            constructor() {
                this.userCountWithSocket = 0, this.userCountInRooms = 0, this.userCountInLobby = 0, this.userCountInGame = 0, this.userCountInSpectating = 0, this.gameCount = 0, this.roomCount = 0
            }
            addUserToWebsite() {
                this.userCountWithSocket += 1
            }
            addUserToLocation(e) {
                switch (e) {
                    case i.PlayerEnums.Location.Room:
                        return this.userCountInRooms += 1;
                    case i.PlayerEnums.Location.Lobby:
                        return this.userCountInLobby += 1;
                    case i.PlayerEnums.Location.Game:
                        return this.userCountInGame += 1;
                    case i.PlayerEnums.Location.SpectateGame:
                        return this.userCountInSpectating += 1;
                    default:
                        return []
                }
            }
            dataAsStringArray() {
                const e = [];
                return e.push("---ILobbyOnlinePlayerCountData---"), e.push("userCountWithSocket:" + this.userCountWithSocket), e.push("userCountInRooms:" + this.userCountInRooms), e.push("userCountInLobby:" + this.userCountInLobby), e.push("userCountInGame:" + this.userCountInGame), e.push("userCountInSpectating:" + this.userCountInSpectating), e.push("gameCount:" + this.gameCount), e.push("roomCount:" + this.roomCount), e.push("---ILobbyOnlinePlayerCountData---"), e
            }
            static deserialize(e) {
                const a = new t;
                return a.userCountWithSocket = e.userCountWithSocket, a.userCountInRooms = e.userCountInRooms, a.userCountInLobby = e.userCountInLobby, a.userCountInGame = e.userCountInGame, a.userCountInSpectating = e.userCountInSpectating, a.gameCount = e.gameCount, a.roomCount = e.roomCount, a
            }
        }
        e.LobbyOnlinePlayerCountData = t;
        class a {
            constructor() {
                this.games = []
            }
            static deserialize(e) {
                const t = new a;
                return t.games = e.games, t
            }
        }
        e.LobbyGameData = a;
        e.SimplePopupData = class {};
        e.BroadcastData = class {};
        e.NotificationData = class {};
        class o {}
        o.ERROR_CODE_CLOSE_SOCKET_ENDPOINT_GOING_AWAY = 1001, o.ERROR_CODE_CLOSE_SOCKET_FROM_ROOM = 4e3, e.SocketErrorTypes = o
    }(t.SocketDataTypes || (t.SocketDataTypes = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ClientSocketMessageLoadTest = void 0;
    class i {
        static processSocketData(e) {
            "number" == typeof e && (this.expectedSocketAmount = Number(e), this.receivedSocketAmount = 0, this.startingTime = Date.now(), console.log("-------------------------------------"), console.log("Expecting " + this.expectedSocketAmount)), "string" == typeof e && "test" == e && (this.receivedSocketAmount += 1), "string" == typeof e && "done" == e && (console.log("Expected " + this.expectedSocketAmount), console.log("Received " + this.receivedSocketAmount), console.log(`Took ${Date.now()-this.startingTime}ms`), this.expectedSocketAmount = 0, this.receivedSocketAmount = 0, this.startingTime = 0)
        }
    }
    t.ClientSocketMessageLoadTest = i, i.expectedSocketAmount = 0, i.receivedSocketAmount = 0, i.startingTime = 0
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomCenterCheckboxController = void 0;
    const i = a(40);
    t.UIRoomCenterCheckboxController = class {
        constructor() {
            this.checkboxDivPrivateGame = document.getElementById("room_center_privategame"), this.checkboxPrivateGame = document.getElementById("room_center_checkbox_privategame"), this.checkboxDivHideBankCards = document.getElementById("room_center_hidebankcards"), this.checkboxHideBankCards = document.getElementById("room_center_checkbox_hidebankcards"), this.checkboxDivFriendlyRobber = document.getElementById("room_center_friendlyrobber"), this.checkboxFriendlyRobber = document.getElementById("room_center_checkbox_friendlyrobber")
        }
        update(e) {
            this.checkboxPrivateGame.checked = e.gameSetting.privateGame, this.checkboxHideBankCards.checked = e.gameSetting.hideBankCards, this.checkboxFriendlyRobber.checked = e.gameSetting.friendlyRobber, this.checkboxDivPrivateGame.className = this.checkboxPrivateGame.checked ? "room_option_item selected" : "room_option_item deselected", this.checkboxDivHideBankCards.className = this.checkboxHideBankCards.checked ? "room_option_item selected" : "room_option_item deselected", this.checkboxDivFriendlyRobber.className = this.checkboxFriendlyRobber.checked ? "room_option_item selected" : "room_option_item deselected"
        }
        load(e) {
            this.checkboxPrivateGame.checked = e.gameSetting.privateGame, this.checkboxPrivateGame.onchange = () => {
                i.SocketLobbySend.clickedRoomSettingChangePrivateGame(this.checkboxPrivateGame.checked)
            }, this.checkboxHideBankCards.checked = e.gameSetting.hideBankCards, this.checkboxHideBankCards.onchange = () => {
                i.SocketLobbySend.clickedRoomSettingChangeHideBankCards(this.checkboxHideBankCards.checked)
            }, this.checkboxFriendlyRobber.checked = e.gameSetting.friendlyRobber, this.checkboxFriendlyRobber.onchange = () => {
                i.SocketLobbySend.clickedRoomSettingChangeFriendlyRobber(this.checkboxFriendlyRobber.checked)
            }
        }
        updateInteractabilityOfElements(e) {
            this.checkboxPrivateGame.disabled = e, this.checkboxFriendlyRobber.disabled = e, this.checkboxHideBankCards.disabled = e
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomCenterModeSettingsController = void 0;
    const i = a(39),
        o = a(3),
        n = a(40);
    var r = o.PlayerEnums.RoomSettingConstants;
    const s = a(33),
        c = a(10),
        l = a(66);
    class h {
        constructor() {
            this.selectModeSetting = document.getElementById("room_center_select_game_mode"), this.modeInfo = document.getElementById("room_center_game_mode_info"), this.modeSettingDiv = document.getElementById("room_center_game_mode_settings")
        }
        update(e) {
            (0, c.updateSelectElement)(this.selectModeSetting, o.ModeSettingEnum[e.gameSetting.modeSetting]), this.modeSettingDiv.className = this.selectModeSetting.value == o.ModeSettingEnum[r.DEFAULT_MODE_SETTING].toString() ? "room_option_item deselected" : "room_option_item selected"
        }
        load(e) {
            this.updateMapElement(e), this.modeInfo.onclick = () => {
                h.clickedModeInfo()
            }
        }
        updateMapElement(e) {
            const t = h.isGuest(e) ? "room-room_center_select room_center_select_disable" : "room_center_select-select";
            this.selectModeSetting.className = t, this.selectModeSetting.onchange = () => {
                n.SocketLobbySend.clickedRoomSettingUpdateGameModeSetting(this.selectModeSetting.value)
            };
            const a = l.GameModeDataController.gameModeDataList;
            for (const e of a) {
                let t = e.name;
                e.isGameModePremium() && i.SocketController.session.items.hasAccessToPremiumMode(e) && (t += " (owned)");
                const a = new Option(t, String(o.ModeSettingEnum[e.modeSetting]));
                this.selectModeSetting.options[this.selectModeSetting.options.length] = a, this.selectModeSetting.options[this.selectModeSetting.options.length - 1].disabled = !e.active, e.modeSetting == r.DEFAULT_MODE_SETTING && (this.selectModeSetting.options[this.selectModeSetting.options.length - 1].selected = !0)
            }
            this.addDisabledComingSoonOptions()
        }
        addDisabledComingSoonOptions() {
            const e = ["Super Host Powers", "2v2", "Multicatan"];
            for (const t of e) {
                const e = new Option(t + " (coming soon)", t);
                this.selectModeSetting.options[this.selectModeSetting.options.length] = e, this.selectModeSetting.options[this.selectModeSetting.options.length - 1].disabled = !0
            }
        }
        static clickedModeInfo() {
            let e = h.createSingleMapInfo("Base", ["Base rules", "19 of each resource card", "25 development cards"]);
            e += h.createSingleMapInfo("Tutorial", ["Always the same tutorial map", "Settlements pre-placed"]), e += h.createSingleMapInfo("5-6 Player", ["6 players map (30 tiles)", "24 of each resource card", "34 development cards", "Special build phase"]), e += h.createSingleMapInfo("7-8 Player Map", ["8 players map (37 tiles)", "29 of each resource card", "43 development cards", "Special build phase"]), e += h.createSingleMapInfo("Seafarers", ["Seafarers mechanics for 3-4 players", "Ships & Pirate", "Fog & Gold tile", "Islands"]), e += h.createSingleMapInfo("Seafarers 5-6 Player", ["Seafarers mechanics for 5-6 players (to play with 3 or 4 players, purchase Seafarers expansion)", "Ships & Pirate", "Fog & Gold tile", "Islands", "Special Build Phase"]), s.UIPopupController.createSimplePopup("Information", e)
        }
        static createSingleMapInfo(e, t) {
            let a = "<h3>" + e + "</h3>";
            for (const e of t) a += "- " + e, a += "<br>";
            return a += "<br>", a
        }
        updateInteractabilityOfElements(e) {
            this.selectModeSetting.disabled = e
        }
        static isGuest(e) {
            return i.SocketController.session.id != e.hostSession.id
        }
    }
    t.UIRoomCenterModeSettingsController = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomCenterSpeedSettingsView = void 0;
    const i = a(3);
    var o = i.PlayerEnums.RoomSettingConstants;
    const n = a(7),
        r = a(40),
        s = a(290);
    class c {
        constructor(e) {
            switch (e) {
                case s.UIRoomCenterSpeedSettingType.GameSpeed:
                    this.initGameSpeedSettings();
                    break;
                case s.UIRoomCenterSpeedSettingType.BotSpeed:
                    this.initBotSpeedSettings()
            }
            this.speedOptions = [], c.setSpeedOptions(this.speedSettings, this.speedOptions), this.speedInput.innerHTML = this.speedOptions[0]
        }
        initGameSpeedSettings() {
            this.speedInput = document.getElementById("room_center_gamespeed_settings_input"), this.speedRightArrow = document.getElementById("gamespeed_settings_right_arrow"), this.speedLeftArrow = document.getElementById("gamespeed_settings_left_arrow"), this.speedDivBody = document.getElementById("gamespeed_settings_body"), this.speedDiv = document.getElementById("room_center_gamespeed_settings"), this.speedInfo = document.getElementById("gamespeed_settings_speed_info"), this.speedSettings = i.PlayerEnums.GameSpeedSettings, this.speedDefaultSetting = this.speedSettings[o.DEFAULT_GAME_SPEED_SETTING].toString();
            this.speedSocketCommand = e => {
                r.SocketLobbySend.clickedRoomSettingChangeGameSpeed(e)
            }, this.speedInfo.onclick = () => {
                c.clickedSpeedInfo()
            }
        }
        static clickedSpeedInfo() {
            window.open("https://i.imgur.com/FGYFWVp.png")
        }
        initBotSpeedSettings() {
            this.speedInput = document.getElementById("room_center_botspeed_settings_input"), this.speedRightArrow = document.getElementById("botspeed_settings_right_arrow"), this.speedLeftArrow = document.getElementById("botspeed_settings_left_arrow"), this.speedDivBody = document.getElementById("botspeed_settings_body"), this.speedDiv = document.getElementById("room_center_botspeed_settings"), this.speedSettings = i.PlayerEnums.BotSpeedSettings, this.speedDefaultSetting = this.speedSettings[o.DEFAULT_BOT_SPEED_SETTING].toString();
            this.speedSocketCommand = e => {
                r.SocketLobbySend.clickedRoomSettingChangeBotSpeed(e)
            }
        }
        getSetting(e, t) {
            switch (t) {
                case s.UIRoomCenterSpeedSettingType.GameSpeed:
                    return this.speedSettings[e.gameSetting.gameSpeed];
                case s.UIRoomCenterSpeedSettingType.BotSpeed:
                    return this.speedSettings[e.gameSetting.botSpeed]
            }
        }
        static setSpeedOptions(e, t) {
            (0, n.loopEnums)(e, (a, i) => {
                t.push(e[a].toString())
            })
        }
    }
    t.UIRoomCenterSpeedSettingsView = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomCenterMapSettingsController = void 0;
    const i = a(39),
        o = a(3),
        n = a(40);
    var r = o.PlayerEnums.RoomSettingConstants;
    const s = a(10),
        c = a(37),
        l = a(33),
        h = a(115),
        d = a(35);
    class u {
        constructor() {
            this.selectElement = document.getElementById("room_center_select_map"), this.infoElement = document.getElementById("room_center_map_info"), this.divElement = document.getElementById("room_center_map_settings")
        }
        update(e) {
            this.updateElement(e), (0, s.updateSelectElement)(this.selectElement, o.MapSettingEnum[e.gameSetting.mapSetting]), this.divElement.className = this.selectElement.value == o.MapSettingEnum[r.DEFAULT_MAP_SETTING].toString() ? "room_option_item deselected" : "room_option_item selected"
        }
        load(e) {
            this.updateElement(e), this.infoElement.onclick = () => {
                u.clickedInfo()
            }
        }
        updateElement(e) {
            const t = e.isHost(i.SocketController.session.id) ? "room_center_select-select" : "room-room_center_select room_center_select_disable";
            this.clearAllDropDownOptions(), this.selectElement.className = t, this.selectElement.onchange = () => {
                n.SocketLobbySend.clickedRoomSettingUpdateMapSetting(this.selectElement.value)
            };
            const a = h.MapDataController.getMapDataCompatibleWithGameMode(e.gameSetting.modeSetting);
            for (const e of a) {
                if (!e.isActive) continue;
                let t = e.name;
                e.isMapPremium() && i.SocketController.session.items.hasAccessToPremiumMap(e) && (t += " (owned)"), e.mapEnum == d.UIUtilsEjsVariables.FREE_MAP && (t += " (free)");
                const a = new Option(t, String(o.MapSettingEnum[e.mapEnum]));
                this.selectElement.options.add(a), e.mapEnum == r.DEFAULT_MAP_SETTING && (this.selectElement.options[this.selectElement.options.length - 1].selected = !0)
            }
        }
        clearAllDropDownOptions() {
            if (0 != this.selectElement.options.length)
                for (let e = this.selectElement.length - 1; e >= 0; e--) this.selectElement.options.remove(e)
        }
        static clickedInfo() {
            let e = "The free map changes every week<br>";
            e += "<br><hr>", e += u.createSingleMapInfo("Base", ["19 tiles & 9 ports"]), e += "<br><hr>", e += u.createSingleMapInfo("Tutorial", ["Always the same tutorial map"]), e += "<br><hr>";
            const t = h.MapDataController.mapDataList;
            for (const a of t) {
                if (!a.isActive) continue;
                if (a.mapEnum == o.MapSettingEnum.Classic4P) continue;
                if (a.mapEnum == o.MapSettingEnum.TutorialClassic4P) continue;
                e += this.createSingleMapInfo(a.name, []);
                const t = c.LobbyImages.getLobbyImagePath(a.imagePath),
                    i = c.LobbyImages.getLobbyImageAlt(a.imagePath);
                e += (0, s.constructImgTag)(t, i, void 0, "disable_ab_block_profile"), e += "<br><hr>"
            }
            l.UIPopupController.createLargePopup("Map Information", e)
        }
        static createSingleMapInfo(e, t) {
            let a = "<h3>" + e + "</h3>";
            for (const e of t) a += "- " + e;
            return t.length > 0 && (a += "<br>"), a
        }
        updateInteractabilityOfElements(e) {
            this.selectElement.disabled = e
        }
    }
    t.UIRoomCenterMapSettingsController = u
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomCenterDiceSettingController = void 0;
    const i = a(3),
        o = a(10);
    var n = i.PlayerEnums.RoomSettingConstants;
    const r = a(39),
        s = a(40),
        c = a(7);
    t.UIRoomCenterDiceSettingController = class {
        constructor() {
            this.selectElement = document.getElementById("room_center_select_dice"), this.divElement = document.getElementById("room_center_dice_settings")
        }
        update(e) {
            (0, o.updateSelectElement)(this.selectElement, i.DiceSettingEnum[e.gameSetting.diceSetting]), this.divElement.className = this.selectElement.value == i.DiceSettingEnum[n.DEFAULT_DICE_SETTING].toString() ? "room_option_item deselected" : "room_option_item selected"
        }
        load(e) {
            this.updateElement(e)
        }
        updateElement(e) {
            const t = e.isHost(r.SocketController.session.id) ? "room_center_select-select" : "room-room_center_select room_center_select_disable";
            this.selectElement.className = t, this.selectElement.onchange = () => {
                s.SocketLobbySend.clickedRoomSettingUpdateDiceSetting(this.selectElement.value)
            }, (0, c.loopEnums)(i.DiceSettingEnum, (e, t) => {
                const a = new Option(i.DiceSettingEnum[e], String(i.DiceSettingEnum[e]));
                this.selectElement.options[this.selectElement.options.length] = a, t == n.DEFAULT_DICE_SETTING && (this.selectElement.options[this.selectElement.options.length - 1].selected = !0)
            })
        }
        updateInteractabilityOfElements(e) {
            this.selectElement.disabled = e
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UICornerPopupView = void 0;
    const i = a(15),
        o = a(10),
        n = a(37);
    t.UICornerPopupView = class {
        constructor(e, t) {
            this.container = document.getElementById("corner-popup-container"), this.popup = (0, o.createDivIn)(this.container, "corner-popup"), this.image = (0, o.createImgIn)(this.popup, "", "", n.LobbyImages.getLobbyImagePath(e), n.LobbyImages.getLobbyImageAlt(e)), this.text = (0, o.createDivIn)(this.popup, ""), this.text.innerHTML = t, this.crossImage = (0, o.createImgIn)(this.popup, "corner-popup-cross", "", n.LobbyImages.getLobbyImagePath(i.LobbyImage.XMark), n.LobbyImages.getLobbyImageAlt(i.LobbyImage.XMark)), this.crossImage.onclick = () => {
                this.close()
            }
        }
        close() {
            null != this.popup.parentElement && this.container.removeChild(this.popup)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewPopupTemporary = void 0;
    const i = a(10),
        o = a(37),
        n = a(15),
        r = a(11),
        s = a(19);
    t.ViewPopupTemporary = class {
        constructor(e, t) {
            this.container = (0, i.createDivIn)(document.body, "popup-notification"), this.contentContainer = (0, i.createDivIn)(this.container, "popup-content-temporary"), this.header = (0, i.createDivIn)(this.contentContainer, "popup-header"), this.body = (0, i.createDivIn)(this.contentContainer, "popup-body"), this.footer = (0, i.createDivIn)(this.contentContainer, "popup-footer");
            o.LobbyImages.getLobbyImagePath(n.LobbyImage.XMark), o.LobbyImages.getLobbyImageAlt(n.LobbyImage.XMark);
            this.setCancel(), this.checkButton = (0, i.createDivIn)(this.footer, "btn_general btn_general_check"), this.checkButton.onclick = () => {
                r.Sound.playSound(r.Sound.SoundType.Click), this.removePopup()
            }, this.positionContainerInTopRightCorner(), (0, i.createHeaderIn)(this.header, e, "", "", "H4"), (0, i.createParagraphIn)(this.body, t, ""), this.show();
            setTimeout(() => {
                this.removePopup()
            }, 6e3)
        }
        setCancel() {
            window.addEventListener("click", e => {
                e.target == this.container && this.removePopup()
            })
        }
        positionContainerInTopRightCorner() {
            const e = s.uiGameManager.canvasController,
                t = e.responsiveController.getCanvasX(),
                a = e.appW - 2 * e.chatWidth + t,
                i = e.responsiveController.getCanvasY();
            this.contentContainer.style.position = "absolute", this.contentContainer.style.transform = "none", this.contentContainer.style.width = e.chatWidth + "px", this.contentContainer.style.left = a + "px", this.contentContainer.style.top = i + "px", this.contentContainer.style.marginRight = e.margin + "px", this.contentContainer.style.marginTop = e.margin + "px"
        }
        removePopup() {
            this.container.style.display = "none", null != this.container.parentElement && this.container.parentElement.removeChild(this.container)
        }
        show() {
            this.container.style.display = "block"
        }
        isRemoved() {
            return "none" == this.container.style.display
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketMatchmakingListen = void 0;
    const i = a(3),
        o = a(45),
        n = a(19),
        r = a(35),
        s = a(40),
        c = a(100);
    t.SocketMatchmakingListen = class {
        constructor(e) {
            e.setSocketId(i.NetworkEnums.State.Connected.toString(), () => {
                r.UIUtilsEjsVariables.SERVER_TYPE == o.ServerTypes.Single || (c.SocketMatchmakingSend.sendFindGame(), s.SocketLobbySend.enteredMatchmaking())
            }), e.setSocketId(i.NetworkEnums.State.MatchmakingUpdate.toString(), e => {
                n.uiManager.matchmakingController.updateMatchmakingStatus(e)
            }), e.setSocketId(i.NetworkEnums.State.MatchmakingError.toString(), e => {
                n.uiManager.matchmakingController.showMatchmakingErrorPopup(e)
            }), e.setSocketId(i.NetworkEnums.State.MatchmakingMatchFound.toString(), () => {
                s.SocketLobbySend.requestToJoinMatchmakingMatch()
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Version = void 0;
    t.Version = class {
        constructor(e, t, a) {
            this.getStorageVersion = e, this.thisVersion = t, this.updateStorageVersion = a
        }
        setVersion() {
            this.updateStorageVersion(this.thisVersion)
        }
        isSameVersion() {
            return null != this.getStorageVersion() && this.getStorageVersion() == this.thisVersion
        }
        hasNoVersion() {
            const e = this.getStorageVersion();
            return 0 == e || null == e
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIManager = void 0;
    const i = a(395),
        o = a(402),
        n = a(85),
        r = a(410),
        s = a(291),
        c = a(413),
        l = a(417),
        h = a(418),
        d = a(419);
    t.UIManager = class {
        constructor() {
            this.header = new c.UIHeaderController, this.footer = new h.UIFooterController, this.landingPage = new l.UILandingPageController(this), this.lobby = new i.UILobbyController(this), this.room = new o.UIRoomController(this), this.sceneController = new n.UISceneController(this), this.adController = new r.UIAdController, this.urlController = new s.UIUrlController, this.matchmakingController = new d.UIMatchmakingFindGameController
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILobbyController = void 0;
    const i = a(396),
        o = a(400),
        n = a(401);
    t.UILobbyController = class {
        constructor(e) {
            this.uiManager = e, this.tableController = new i.UILobbyTableController, this.ctaController = new o.UILobbyCTAController, this.leftStoreAdController = new n.UILobbyLeftStoreAdController, this.lobbyContainerDiv = document.getElementById("scene_lobby_container")
        }
        hide() {
            this.lobbyContainerDiv.style.display = "none", this.leftStoreAdController.stop()
        }
        show() {
            this.lobbyContainerDiv.style.display = "flex", this.uiManager.adController.showLobbyVerticalAds(), this.leftStoreAdController.start()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILobbyTableController = void 0;
    const i = a(397),
        o = a(40),
        n = a(399);
    class r {
        constructor() {
            this.publicRoomRows = [], this.spectateRows = [], this.container = document.getElementById("scene_lobby_mid"), this.headerController = new n.UILobbyTableHeaderController, this.roomsTableBody = document.getElementById("lobby_center_rooms_container"), this.spectateTableBody = document.getElementById("lobby_center_spectate_container")
        }
        hide() {
            this.container.style.display = "none"
        }
        show() {
            this.container.style.display = "block"
        }
        updateRooms(e) {
            this.headerController.hideLoading(), r.removeOldRows(this.publicRoomRows, e);
            r.addNewRows(e, this.publicRoomRows, this.roomsTableBody, e => {
                o.SocketLobbySend.clickedJoinRoom(e)
            }), r.updateExistingRows(e, this.publicRoomRows)
        }
        updateRoom(e) {
            r.addNewRows([e], this.publicRoomRows, this.roomsTableBody, e => {
                o.SocketLobbySend.clickedJoinRoom(e)
            }), r.updateExistingRows([e], this.publicRoomRows)
        }
        removeRoom(e) {
            for (const [t, a] of this.publicRoomRows.entries()) a.getId() == String(e) && (a.remove(), this.publicRoomRows.splice(t, 1))
        }
        updateLobbyGames(e) {
            r.removeOldRows(this.spectateRows, e.games);
            r.addNewRows(e.games, this.spectateRows, this.spectateTableBody, e => {
                r.spectateAction(e)
            }), r.updateExistingRows(e.games, this.spectateRows)
        }
        static spectateAction(e) {
            o.SocketLobbySend.clickedSpectateGame(e)
        }
        static updateExistingRows(e, t) {
            for (const a of e)
                for (const e of t)
                    if (e.getId() == a.id) {
                        e.update(a);
                        break
                    }
        }
        static addNewRows(e, t, a, o) {
            for (const n of e) {
                if (r.dataExistsInRows(n, t)) continue;
                const e = a.children.length,
                    s = new i.UILobbyTableRowController(a, n, o, e);
                t.push(s)
            }
        }
        static removeOldRows(e, t) {
            for (const [a, i] of e.entries()) r.rowExistsInArray(i, t) || (i.remove(), e.splice(a, 1))
        }
        static dataExistsInRows(e, t) {
            for (const a of t)
                if (a.getId() == e.id) return !0;
            return !1
        }
        static rowExistsInArray(e, t) {
            for (const a of t)
                if (a.id == e.getId()) return !0;
            return !1
        }
    }
    t.UILobbyTableController = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILobbyTableRowController = void 0;
    const i = a(10),
        o = a(398),
        n = a(115),
        r = a(66),
        s = a(3);
    t.UILobbyTableRowController = class {
        constructor(e, t, a, n) {
            this.tableRow = e.insertRow(n), this.tableRow.id = t.id, this.tdMode = (0, i.createTDIn)(this.tableRow), this.tdMap = (0, i.createTDIn)(this.tableRow), this.tdSpeed = (0, i.createTDIn)(this.tableRow);
            const r = (0, i.createTDIn)(this.tableRow, "lobby_table_data_players");
            this.players = new o.UILobbyTableRowPlayersController(r, t), this.roomData = t, this.tableRow.onclick = () => {
                a(t.id)
            }
        }
        update(e) {
            var t, a;
            this.players.update(e.players, e.maxPlayers, this.roomData);
            const i = null === (t = r.GameModeDataController.getModeDataForMode(e.gameModeSetting)) || void 0 === t ? void 0 : t.name,
                o = null === (a = n.MapDataController.getMapDataForMap(e.gameMapSetting)) || void 0 === a ? void 0 : a.name,
                c = s.PlayerEnums.GameSpeedSettings[e.speed];
            if (null == o || null == i) return console.log("Error no such mode " + e.gameModeSetting), void console.log("Error no such map " + e.gameMapSetting);
            this.tdMode.innerHTML != i && (this.tdMode.innerHTML = i), this.tdMap.innerHTML != o && (this.tdMap.innerHTML = o), this.tdSpeed.innerHTML != c && (this.tdSpeed.innerHTML = c), this.roomData = e
        }
        remove() {
            this.tableRow.remove()
        }
        getId() {
            return this.roomData.id
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILobbyTableRowPlayersController = void 0;
    const i = a(10),
        o = a(15),
        n = a(37),
        r = a(47);
    class s {
        constructor(e, t) {
            this.players = (0, i.createDivIn)(e, "player_count"), this.update(t.players, t.maxPlayers)
        }
        setOpacity(e) {
            this.players.style.opacity = e
        }
        update(e, t, a) {
            s.changedPlayerData(e, t, a) && (this.removePlayers(), this.addRealPlayers(e), this.addHollowPlayers(t - e.length))
        }
        static changedPlayerData(e, t, a) {
            return null == a || (a.maxPlayers != t || a.players.length != e.length)
        }
        removePlayers() {
            this.players.innerHTML = ""
        }
        addRealPlayers(e) {
            for (const t of e) {
                const e = this.addPlayer(t.icon),
                    a = t.username + " " + t.hoverText;
                t.isBot || ((0, i.createSpanIn)(e, "tooltipmediumtext_right", a), e.onclick = () => {
                    window.open((0, r.getProfileURI)(t.username))
                })
            }
        }
        addHollowPlayers(e) {
            if (!(e <= 0))
                for (let t = 0; t < e; t += 1) this.addPlayer(o.LobbyImage.Guest, "0.5")
        }
        addPlayer(e, t) {
            const a = n.LobbyImages.getLobbyImagePath(e),
                o = n.LobbyImages.getLobbyImageAlt(e),
                r = (0, i.createDivIn)(this.players, "tooltip_container", ""),
                s = (0, i.createImgIn)(r, "tooltip_container", "", a, o);
            return t && (s.style.opacity = t), r
        }
    }
    t.UILobbyTableRowPlayersController = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILobbyTableHeaderController = void 0;
    const i = a(11),
        o = a(40),
        n = a(14);
    t.UILobbyTableHeaderController = class {
        constructor() {
            this.INACTIVE_TAB_CLASS = "", this.ACTIVE_TAB_CLASS = "scene_lobby_mid_tabs_active", this.roomsTabDiv = document.getElementById("lobby_center_table_rooms_tab_div"), this.spectateTabDiv = document.getElementById("lobby_center_table_spectate_tab_div"), this.loadingText = document.getElementById("scene_lobby_mid_tabs_loading"), this.roomsTable = document.getElementById("lobby_center_rooms_table"), this.spectateTable = document.getElementById("lobby_center_spectate_table"), this.tableHeaderActions()
        }
        hideLoading() {
            this.loadingText.style.display = "none"
        }
        tableHeaderActions() {
            this.roomsTabDiv.onclick = () => {
                this.refreshRooms()
            }, this.spectateTabDiv.onclick = () => {
                this.refreshSpectate()
            }
        }
        refreshSpectate() {
            i.Sound.playSound(i.Sound.SoundType.Click), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.Lobby, n.CA.Label.ClickedLobbySpectateTab), this.roomsTabDiv.className != this.INACTIVE_TAB_CLASS && (this.roomsTabDiv.className = this.INACTIVE_TAB_CLASS), this.spectateTabDiv.className != this.ACTIVE_TAB_CLASS && (this.spectateTabDiv.className = this.ACTIVE_TAB_CLASS), "none" != this.roomsTable.style.display && (this.roomsTable.style.display = "none"), "table" != this.spectateTable.style.display && (this.spectateTable.style.display = "table"), o.SocketLobbySend.clickedGamesListButton()
        }
        refreshRooms() {
            i.Sound.playSound(i.Sound.SoundType.Click), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.Lobby, n.CA.Label.ClickedLobbyRoomsTab), this.roomsTabDiv.className != this.ACTIVE_TAB_CLASS && (this.roomsTabDiv.className = this.ACTIVE_TAB_CLASS), this.spectateTabDiv.className != this.INACTIVE_TAB_CLASS && (this.spectateTabDiv.className = this.INACTIVE_TAB_CLASS), "none" != this.spectateTable.style.display && (this.spectateTable.style.display = "none"), "table" != this.roomsTable.style.display && (this.roomsTable.style.display = "table"), o.SocketLobbySend.clickedRoomsListButton()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILobbyCTAController = void 0;
    const i = a(3),
        o = a(14),
        n = a(19),
        r = a(40),
        s = a(11);
    t.UILobbyCTAController = class {
        constructor() {
            this.mainCTA = document.getElementById("lobby_cta_main"), this.createCTA = document.getElementById("lobby_cta_create"), this.botsCTA = document.getElementById("lobby_cta_playvsbots"), this.mainCTA.onclick = () => {
                s.Sound.playSound(s.Sound.SoundType.Click), o.CA.sendEvent(o.CA.Type.Click, o.CA.Category.Lobby, o.CA.Label.ClickedLobbyMainCTA), n.uiManager.matchmakingController.clickedFindGame()
            }, this.createCTA.onclick = () => {
                s.Sound.playSound(s.Sound.SoundType.Click), o.CA.sendEvent(o.CA.Type.Click, o.CA.Category.Lobby, o.CA.Label.ClickedCreateRoom), r.SocketLobbySend.clickedCreateRoom(i.PlayerEnums.RoomType.Standard)
            }, this.botsCTA.onclick = () => {
                s.Sound.playSound(s.Sound.SoundType.Click), o.CA.sendEvent(o.CA.Type.Click, o.CA.Category.Lobby, o.CA.Label.ClickedVSBots), r.SocketLobbySend.clickedStartFastBotGame()
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILobbyLeftStoreAdController = void 0;
    const i = a(293);
    t.UILobbyLeftStoreAdController = class {
        constructor() {
            this.UPDATE_AD_DURATION = 6e4, this.view = new i.UILobbyAdView(!0), this.start()
        }
        stop() {
            null != this.timer && clearTimeout(this.timer)
        }
        start() {
            this.stop(), this.view.update(), this.timer = setInterval(() => {
                this.view.update()
            }, this.UPDATE_AD_DURATION)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomController = void 0;
    const i = a(403),
        o = a(289),
        n = a(85),
        r = a(407);
    class s {
        constructor(e) {
            this.roomInitiated = !1, this.uiManager = e, this.container = document.getElementById("scene_room_container"), this.userList = new i.UIRoomUserListController, this.chat = new r.UIRoomChatController, this.center = new o.UIRoomCenterController
        }
        hide() {
            this.container.style.display = "none"
        }
        show() {
            this.container.style.display = "flex", this.userList.load(this.roomState), this.center.load(this.roomState)
        }
        updateRoom(e) {
            this.roomInitiated ? this.updateCurrentRoom(e) : this.initRoom(e)
        }
        initRoom(e) {
            s.updateURLToRoom(e), this.roomInitiated = !0, this.roomState = e, this.uiManager.sceneController.loadScene(n.Scene.Room)
        }
        updateCurrentRoom(e) {
            this.userList.update(e), this.center.update(this.roomState, e), this.roomState = e
        }
        static updateURLToRoom(e) {
            window.location.hash != "#" + e.gameSetting.id && window.location.assign("#" + e.gameSetting.id)
        }
    }
    t.UIRoomController = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomUserListController = void 0;
    const i = a(40),
        o = a(39),
        n = a(404),
        r = a(33),
        s = a(11),
        c = a(3),
        l = a(294),
        h = a(31);
    class d {
        constructor() {
            this.guestViews = [], this.header = document.getElementById("scene_room_left_header"), this.playerList = document.getElementById("scene_room_player_list")
        }
        load(e) {
            this.hostView = new n.RoomUserView(this.playerList), this.createGuestViews(), this.update(e)
        }
        update(e) {
            this.updateHeader(e.getSessionCount()), this.updateHostView(e), this.updateGuestSessions(e), this.updateBotButtonDisplays(e)
        }
        updateGuestSessions(e) {
            const t = e.getGuestSessions();
            for (const [a, n] of this.guestViews.entries()) {
                const r = t[a];
                e.gameSetting.maxPlayers - 1 < a + 1 && n.hideView(), e.gameSetting.maxPlayers - 1 >= a + 1 && n.showView(), null != r ? (n.isShowingPlayer() || (l.UIBrowserTabController.blinkTab("Joined Room  " + e.getSessionCount() + "/" + e.gameSetting.maxPlayers), s.Sound.playSound(s.Sound.SoundType.Notification)), n.update(r, o.SocketController.session.id), n.setColorChangeAction(e => {
                    i.SocketLobbySend.clickedRoomSelectColor(r.id, e)
                }), d.canClickPlayer(e.hostSession, r) && n.setOnclick(() => {
                    s.Sound.playSound(s.Sound.SoundType.Click), d.playerClickAction(e.hostSession, r)
                }), n.showColorSelect(r.id == o.SocketController.session.id || !r.isHumanSession() && o.SocketController.session.id == e.hostSession.id)) : n.isShowingPlayer() && (n.removePlayer(), l.UIBrowserTabController.blinkTab("Left Room  " + e.getSessionCount() + "/" + e.gameSetting.maxPlayers), s.Sound.playSound(s.Sound.SoundType.LeaveRoom))
            }
        }
        createGuestViews() {
            for (let e = 1; e < c.PlayerEnums.RoomSettingConstants.MAX_PLAYER_COUNT; e += 1) {
                const e = new n.RoomUserView(this.playerList);
                this.guestViews.push(e)
            }
        }
        updateHostView(e) {
            this.hostView.update(e.hostSession, o.SocketController.session.id), this.hostView.setColorChangeAction(t => {
                i.SocketLobbySend.clickedRoomSelectColor(e.hostSession.id, t)
            }), this.hostView.showColorSelect(e.hostSession.id == o.SocketController.session.id), d.canClickPlayer(e.hostSession, e.hostSession) && this.hostView.setOnclick(() => {
                s.Sound.playSound(s.Sound.SoundType.Click), d.playerClickAction(e.hostSession, e.hostSession)
            })
        }
        updateHeader(e) {
            const t = "Players (" + e + ")";
            this.header.innerText != t && (this.header.innerText = t)
        }
        updateBotButtonDisplays(e) {
            if (e.hostSession.isEqualTo(o.SocketController.session))
                for (const e of this.guestViews) e.displayBotButton();
            else
                for (const e of this.guestViews) e.hideBotButton()
        }
        static canClickPlayer(e, t) {
            return !!o.SocketController.session.isEqualTo(t) || !!o.SocketController.session.isEqualTo(e)
        }
        static playerClickAction(e, t) {
            d.clickedOnSelf(t) || o.SocketController.session.id == e.id && r.UIPopupController.create("Kick", "Kick player " + t.userState.username + "?", () => {
                i.SocketLobbySend.clickedRoomKickPlayer(t.id)
            }, () => {})
        }
        static clickedOnSelf(e) {
            return !!e.isEqualTo(o.SocketController.session) && ((0, h.usernameClickAction)(o.SocketController.session.userState.username), !0)
        }
    }
    t.UIRoomUserListController = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RoomUserView = void 0;
    const i = a(10),
        o = a(37),
        n = a(15),
        r = a(40),
        s = a(11),
        c = a(16),
        l = a(405),
        h = a(20);
    t.RoomUserView = class {
        constructor(e) {
            this.ICON_SIZE = 15, this.container = (0, i.createDivIn)(e, "room_player_name"), this.infoContainer = (0, i.createDivIn)(this.container, "room_player_info"), this.readyContainer = (0, i.createDivIn)(this.container, "room_player_not_ready"), this.nameContainer = (0, i.createDivIn)(this.infoContainer, ""), this.karmaContainer = (0, i.createDivIn)(this.infoContainer, ""), this.colorContainer = (0, i.createDivIn)(this.infoContainer, "room_player_color"), this.profilePic = o.LobbyImages.createImageIn(this.nameContainer, n.LobbyImage.Guest, this.ICON_SIZE), this.userName = (0, i.createSpanIn)(this.nameContainer, "", " Player "), this.editPic = o.LobbyImages.createImageIn(this.nameContainer, n.LobbyImage.Pencil, this.ICON_SIZE), this.karmaText = (0, i.createSpanIn)(this.karmaContainer, "", ""), this.karmaDiv = (0, i.createDivIn)(this.karmaContainer, "room_player_karma_img tooltip_container");
            o.LobbyImages.createImageIn(this.karmaDiv, n.LobbyImage.InfoIcon, this.ICON_SIZE);
            this.karmaSpan = (0, i.createSpanIn)(this.karmaDiv, "tooltiptext_bottom", "karma"), this.colorSelect = (0, i.createSelectIn)(this.colorContainer, "", "", e => {
                this.colorChangeAction(e)
            }), (0, i.populateSelectElementWithLoopEnums)(this.colorSelect, h.PlayerColors, "Red", h.PlayerColors.None), this.colorRoad = o.LobbyImages.createImageIn(this.colorContainer, n.LobbyImage.RoadBronze, this.ICON_SIZE), this.colorSettlement = o.LobbyImages.createImageIn(this.colorContainer, n.LobbyImage.SettlementBronze, this.ICON_SIZE), this.colorCity = o.LobbyImages.createImageIn(this.colorContainer, n.LobbyImage.CityBronze, this.ICON_SIZE), this.colorQuestionmark = o.LobbyImages.createImageIn(this.colorContainer, n.LobbyImage.QuestionMark, this.ICON_SIZE), this.colorQuestionmark.onclick = () => {
                new l.ViewPopupColorInfo
            }, this.statusText = (0, i.createSpanIn)(this.readyContainer, "", "Not Ready"), this.statusImg = o.LobbyImages.createImageIn(this.readyContainer, n.LobbyImage.XMark, this.ICON_SIZE), this.createAddBotButton(), this.removePlayer()
        }
        showPlayer() {
            this.infoContainer.style.display = "flex", this.readyContainer.style.display = "flex", this.hideBotButton()
        }
        isShowingPlayer() {
            return "flex" == this.infoContainer.style.display
        }
        hideView() {
            "none" != this.container.style.display && (this.container.style.display = "none")
        }
        showView() {
            "flex" != this.container.style.display && (this.container.style.display = "flex")
        }
        removePlayer() {
            this.infoContainer.style.display = "none", this.readyContainer.style.display = "none", this.addBotButton.style.display = "flex", this.state = void 0, this.container.onclick = () => {}, this.container.style.cursor = "default"
        }
        setColorChangeAction(e) {
            this.colorChangeAction = t => {
                s.Sound.playSound(s.Sound.SoundType.Click), e(Number(h.PlayerColors[t]))
            }
        }
        setOnclick(e) {
            this.container.onclick = t => {
                t.target != this.colorSelect && t.target != this.colorQuestionmark && t.target.parentElement != this.colorSelect && (s.Sound.playSound(s.Sound.SoundType.Click), e())
            }, this.container.style.cursor = "pointer"
        }
        displayBotButton() {
            null == this.state && (this.addBotButton.style.display = "flex")
        }
        hideBotButton() {
            this.addBotButton.style.display = "none"
        }
        createAddBotButton() {
            this.addBotButton = (0, i.createDivIn)(this.container, "btn_general ", "add-bot-button"), this.addBotButton.innerText = "Add Bot", this.addBotButton.onclick = () => {
                s.Sound.playSound(s.Sound.SoundType.Click), r.SocketLobbySend.clickedRoomAddBot()
            }
        }
        update(e, t) {
            this.updateEditPic(e.id == t), this.updateProfilePic(e.userState.icon), this.usernameChanged(e) && (this.userName.innerHTML = " " + e.userState.username + " "), this.colorChanged(e) && this.updateColor(e.selectedColor), this.selectChanged(e) && (0, i.updateSelectElement)(this.colorSelect, String(h.PlayerColors[e.selectedColor])), this.updateKarma(e), this.statusChanged(e) && this.updateStatusText(e), this.statusChanged(e) && this.updateReadyContainerClass(e), this.state = e, this.showPlayer()
        }
        updateEditPic(e) {
            this.editPic.style.display = e ? "inline-block" : "none"
        }
        showColorSelect(e) {
            this.colorSelect.style.display = e ? "initial" : "none"
        }
        updateProfilePic(e) {
            const t = o.LobbyImages.getLobbyImagePath(e);
            this.profilePic.src != t && (this.profilePic.src = t)
        }
        updateColor(e) {
            if (e == h.PlayerColors.None) return this.colorRoad.src = c.UIGameConstants.getImagePath("icon_hourglass.svg"), this.colorSettlement.src = c.UIGameConstants.getImagePath("icon_hourglass.svg"), void(this.colorCity.src = c.UIGameConstants.getImagePath("icon_hourglass.svg"));
            const t = h.PlayerColors[e].toLowerCase();
            this.colorRoad.src = c.UIGameConstants.getImagePath("road_" + t + ".svg"), this.colorSettlement.src = c.UIGameConstants.getImagePath("settlement_" + t + ".svg"), this.colorCity.src = c.UIGameConstants.getImagePath("city_" + t + ".svg")
        }
        updateKarma(e) {
            if (e.isHumanSession()) {
                const t = e.userState.karmaTextStatus + " ";
                return this.karmaText.innerHTML != t && (this.karmaText.innerHTML = t), void(this.karmaSpan.innerHTML != e.userState.karmaHoverStatus && (this.karmaSpan.innerHTML = e.userState.karmaHoverStatus))
            }
            "none" != this.karmaText.style.display && (this.karmaText.style.display = "none"), "none" != this.karmaDiv.style.display && (this.karmaDiv.style.display = "none")
        }
        updateReadyContainerClass(e) {
            this.readyContainer.className = e.isReadyToPlay ? "room_player_ready" : "room_player_not_ready"
        }
        selectChanged(e) {
            return String(e.selectedColor) != this.colorSelect.value
        }
        colorChanged(e) {
            return null == this.state || this.state.selectedColor != e.selectedColor
        }
        usernameChanged(e) {
            return null == this.state || this.state.userState.username != e.userState.username
        }
        statusChanged(e) {
            return null == this.state || this.state.isReadyToPlay != e.isReadyToPlay
        }
        updateStatusText(e) {
            this.statusText.innerText = e.isReadyToPlay ? "Ready" : "Not Ready";
            const t = e.isReadyToPlay ? n.LobbyImage.CheckMark : n.LobbyImage.XMark;
            this.statusImg.src = o.LobbyImages.getLobbyImagePath(t)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewPopupColorInfo = void 0;
    const i = a(36),
        o = a(406),
        n = a(16),
        r = a(20);
    class s extends i.ViewPopup {
        constructor() {
            super("Info", "", () => {}, () => {}, !0), this.body.style.flexDirection = "column", this.body.innerHTML = "";
            const e = [n.UIGameConstants.getImagePathsForColor(r.PlayerColors.Red), n.UIGameConstants.getImagePathsForColor(r.PlayerColors.Blue), n.UIGameConstants.getImagePathsForColor(r.PlayerColors.Orange), n.UIGameConstants.getImagePathsForColor(r.PlayerColors.Green), n.UIGameConstants.getImagePathsForColor(r.PlayerColors.Black)],
                t = (new o.PopupModuleImages(this.body, "Free Colors", "Free for everyone", e), [n.UIGameConstants.getImagePathsForColor(r.PlayerColors.White), n.UIGameConstants.getImagePathsForColor(r.PlayerColors.Purple), n.UIGameConstants.getImagePathsForColor(r.PlayerColors.MysticBlue)]);
            new o.PopupModuleImages(this.body, "Premium", "Available for purchase", t, "Visit Store", () => {
                window.open("/store")
            });
            this.removeXButton(), this.show()
        }
    }
    t.ViewPopupColorInfo = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PopupModuleImages = void 0;
    const i = a(10);
    t.PopupModuleImages = class {
        constructor(e, t, a, o, n, r, s) {
            const c = (0, i.createDivIn)(e, "popup-patchnote-div"),
                l = (0, i.createDivIn)(c, "popup-patchnote-header-div"),
                h = ((0, i.createHeaderIn)(l, t, "pn-title-announcement", "", "H4"), (0, i.createDivIn)(c, "popup-patchnote-body-div", ""));
            (0, i.createParagraphIn)(h, a, "").style.textAlign = "center";
            const d = (0, i.createDivIn)(h, "");
            d.style.textAlign = "center", d.style.marginBottom = "10px";
            for (const e of o) {
                const t = (0, i.createDivIn)(d, "", "");
                for (const a of e) {
                    (0, i.createImgIn)(t, "", "", a, "").height = 40
                }
            }
            if (s) {
                (0, i.createImgIn)(h, "", "", s, "").style.width = "100%"
            }
            if (n) {
                (0, i.createButtonIn)(h, "btn_general", n).onclick = () => {
                    r && r()
                }
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIRoomChatController = void 0;
    const i = a(39),
        o = a(11),
        n = a(15),
        r = a(33),
        s = a(121),
        c = a(295),
        l = a(41),
        h = a(99);
    t.UIRoomChatController = class {
        constructor() {
            this.chatContainer = document.getElementById("scene_room_right_message_container"), this.chatForm = document.getElementById("lobby_chat_form"), this.chatInput = document.getElementById("lobby_chat_input"), this.chatButton = document.getElementById("lobby_chat_button"), this.clearButton = document.getElementById("lobby_chat_clear_button"), this.muteButton = document.getElementById("lobby_chat_mute_button"), this.chatForm.onsubmit = e => {
                e.preventDefault(), this.sendChat()
            }, this.chatButton.onclick = () => {
                o.Sound.playSound(o.Sound.SoundType.Click), this.sendChat()
            }, this.clearButton.onclick = () => {
                o.Sound.playSound(o.Sound.SoundType.Click), this.chatContainer.innerHTML = ""
            }, this.setSound()
        }
        setSound() {
            this.muteButton.onclick = () => {
                const e = o.Sound.toggleSound();
                this.muteButton.src = e ? "../dist/images/icon_sound_off.svg" : "../dist/images/icon_sound_on.svg"
            }, o.Sound.init();
            const e = o.Sound.getStatus();
            null != e && (1 == e && (this.muteButton.src = "../dist/images/icon_sound_on.svg"), 0 == e && (this.muteButton.src = "../dist/images/icon_sound_off.svg"))
        }
        clear() {
            this.chatContainer.innerHTML = ""
        }
        isChatAllowed() {
            return "" != this.chatInput.value
        }
        sendChat() {
            if (!s.UIUtilsChat.canSendChat(this.chatInput.value)) return;
            const e = s.UIUtilsChat.getDebugClientText(this.chatInput.value);
            null != e && this.post(e, n.LobbyImage.Admin), this.isChatAllowed() && (h.SocketChat.sendChat(this.chatInput.value), this.chatInput.value = "")
        }
        post(e, t) {
            c.UIChatPost.post(this.chatContainer, e, t)
        }
        pmPlayer(e, t) {
            if (i.SocketController.session.userState.isLoggedIn) this.chatInput.value = "/pm " + e + "=", t && this.chatInput.focus();
            else {
                const e = "Login",
                    t = "<a href="" + l.UIAPIEndpoints.googleAuth() + "">Login</a> to use private messaging";
                r.UIPopupController.createSimplePopup(e, t)
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ChatLimitations = void 0;
    class i {
        static hasBadWords(e) {
            return i.badWords.test(e)
        }
        static overLengthLimit(e) {
            return e.length > this.chatMaximumCharacterLimit
        }
    }
    t.ChatLimitations = i, i.chatMaximumCharacterLimit = 200, i.badWordsList = a(409), i.badWords = new RegExp("[^!@#$%^&*]*(\\b" + i.badWordsList.join("\\b|\\b") + "\\b)[^!@#$%^&*]*", "i")
}, function(e) {
    e.exports = ["4r5e", "5h1t", "5hit", "a55", "anal", "anus", "ar5e", "arrse", "arse", "ass", "ass-fucker", "asses", "assfucker", "assfukka", "asshole", "assholes", "asswhole", "a_s_s", "b!tch", "b00bs", "b17ch", "b1tch", "ballbag", "balls", "ballsack", "bastard", "beastial", "beastiality", "bellend", "bestial", "bestiality", "bi+ch", "biatch", "bitch", "bitcher", "bitchers", "bitches", "bitchin", "bitching", "bloody", "blow job", "blowjob", "blowjobs", "boiolas", "bollock", "bollok", "boner", "boob", "boobs", "booobs", "boooobs", "booooobs", "booooooobs", "breasts", "buceta", "bugger", "bum", "bunny fucker", "butt", "butthole", "buttmunch", "buttplug", "c0ck", "c0cksucker", "carpet muncher", "cawk", "chink", "cipa", "cl1t", "clit", "clitoris", "clits", "cnut", "cock", "cock-sucker", "cockface", "cockhead", "cockmunch", "cockmuncher", "cocks", "cocksuck", "cocksucked", "cocksucker", "cocksucking", "cocksucks", "cocksuka", "cocksukka", "cok", "cokmuncher", "coksucka", "coon", "cox", "crap", "cum", "cummer", "cumming", "cums", "cumshot", "cunilingus", "cunillingus", "cunnilingus", "cunt", "cuntlick", "cuntlicker", "cuntlicking", "cunts", "cyalis", "cyberfuc", "cyberfuck", "cyberfucked", "cyberfucker", "cyberfuckers", "cyberfucking", "d1ck", "dick", "dickhead", "dildo", "dildos", "dink", "dinks", "dirsa", "dlck", "dog-fucker", "doggin", "dogging", "donkeyribber", "doosh", "duche", "dyke", "ejaculate", "ejaculated", "ejaculates", "ejaculating", "ejaculatings", "ejaculation", "ejakulate", "f u c k", "f u c k e r", "f4nny", "fag", "fagging", "faggitt", "faggot", "faggs", "fagot", "fagots", "fags", "fanny", "fannyflaps", "fannyfucker", "fanyy", "fatass", "fcuk", "fcuker", "fcuking", "feck", "fecker", "felching", "fellate", "fellatio", "fingerfuck", "fingerfucked", "fingerfucker", "fingerfuckers", "fingerfucking", "fingerfucks", "fistfuck", "fistfucked", "fistfucker", "fistfuckers", "fistfucking", "fistfuckings", "fistfucks", "flange", "fook", "fooker", "fuck", "fucka", "fucked", "fucker", "fuckers", "fuckhead", "fuckheads", "fuckin", "fucking", "fuckings", "fuckingshitmotherfucker", "fuckme", "fucks", "fuckwhit", "fuckwit", "fudge packer", "fudgepacker", "fuk", "fuker", "fukker", "fukkin", "fuks", "fukwhit", "fukwit", "fux", "fux0r", "f_u_c_k", "gangbang", "gangbanged", "gangbangs", "gaylord", "gaysex", "goatse", "god-dam", "god-damned", "goddamn", "goddamned", "hardcoresex", "heshe", "hoare", "hoer", "homo", "hore", "horniest", "horny", "hotsex", "jack-off", "jackoff", "jap", "jerk-off", "jism", "jiz", "jizm", "jizz", "kawk", "knob", "knobead", "knobed", "knobend", "knobhead", "knobjocky", "knobjokey", "kock", "kondum", "kondums", "kum", "kummer", "kumming", "kums", "kunilingus", "l3i+ch", "l3itch", "labia", "lmfao", "lust", "lusting", "m0f0", "m0fo", "m45terbate", "ma5terb8", "ma5terbate", "masochist", "master-bate", "masterb8", "masterbat*", "masterbat3", "masterbate", "masterbation", "masterbations", "masturbate", "mo-fo", "mof0", "mofo", "mothafuck", "mothafucka", "mothafuckas", "mothafuckaz", "mothafucked", "mothafucker", "mothafuckers", "mothafuckin", "mothafucking", "mothafuckings", "mothafucks", "mother fucker", "motherfuck", "motherfucked", "motherfucker", "motherfuckers", "motherfuckin", "motherfucking", "motherfuckings", "motherfuckka", "motherfucks", "muff", "mutha", "muthafecker", "muthafuckker", "muther", "mutherfucker", "n1gga", "n1gger", "nazi", "nigg3r", "nigg4h", "nigga", "niggah", "niggas", "niggaz", "nigger", "niggers", "nob", "nob jokey", "nobhead", "nobjocky", "nobjokey", "numbnuts", "nutsack", "orgasim", "orgasims", "orgasm", "orgasms", "p0rn", "pawn", "pecker", "penis", "penisfucker", "phonesex", "phuck", "phuk", "phuked", "phuking", "phukked", "phukking", "phuks", "phuq", "pigfucker", "pimpis", "piss", "pissed", "pisser", "pissers", "pisses", "pissflaps", "pissin", "pissing", "pissoff", "poop", "porn", "porno", "pornography", "pornos", "prick", "pricks", "pron", "pube", "pusse", "pussi", "pussies", "pussy", "pussys", "rectum", "retard", "retarded", "rimjaw", "rimming", "s hit", "s o b", "sadist", "schlong", "screwing", "scroat", "scrote", "scrotum", "semen", "sex", "sh!+", "sh!t", "sh1t", "shag", "shagger", "shaggin", "shagging", "shemale", "shi+", "shit", "shitdick", "shite", "shited", "shitey", "shitfuck", "shitfull", "shithead", "shiting", "shitings", "shits", "shitted", "shitter", "shitters", "shitting", "shittings", "shitty", "skank", "slut", "sluts", "smegma", "smut", "snatch", "son-of-a-bitch", "spac", "spunk", "s_h_i_t", "t1tt1e5", "t1tties", "teets", "teez", "testical", "testicle", "tit", "titfuck", "tits", "titt", "tittie5", "tittiefucker", "titties", "tittyfuck", "tittywank", "titwank", "tosser", "turd", "tw4t", "twat", "twathead", "twatty", "twunt", "twunter", "v14gra", "v1gra", "vagina", "viagra", "vulva", "w00se", "wang", "wank", "wanker", "wanky", "whoar", "whore", "willies", "willy", "xrated", "xxx"]
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIAdController = void 0;
    const i = a(14),
        o = a(6),
        n = a(19),
        r = a(123),
        s = a(411),
        c = a(412);
    class l {
        constructor() {
            this.AIP_GAME_BOTTOM_SMALL = "colonist-io_728x90_2", this.UPDATE_AD_DURATION = 3e4, this.adElements = new c.UIAdElements, this.privateAdController = new s.UIAdblockController(this.adElements), this.adBlockAction(), window.addEventListener("resize", () => {
                this.handleBottomInGameAd()
            })
        }
        adBlockAction() {
            (0, r.adBlockStateChanged)(() => {
                this.privateAdController.startRefreshing(), i.CA.sendEvent(i.CA.Type.General, i.CA.Category.General, i.CA.Label.GeneralUsesAdBlock), this.blockingAds = !0
            }, () => {
                this.privateAdController.removeAds(), this.startAdRefreshing(), i.CA.sendEvent(i.CA.Type.General, i.CA.Category.General, i.CA.Label.GeneralDoesntUseAdBlock), this.blockingAds = !1
            })
        }
        removeAllThirdPartyAds() {
            clearInterval(this.timer), this.removeLobbyAds(), this.removeInGameAds()
        }
        removeInGameAds() {
            this.adElements.containerGameRight.remove(), this.adElements.containerGameLeft.remove(), this.adElements.containerGameBottomSmall.remove()
        }
        showLobbyVerticalAds() {
            this.adElements.containerLobbyLeft.style.display = "block", this.adElements.containerLobbyRight.style.display = "block"
        }
        removeLobbyAds() {
            this.adElements.containerLobbyLeft.style.display = "none", this.adElements.containerLobbyRight.style.display = "none"
        }
        startAdRefreshing() {
            this.timer = setInterval(() => {
                this.refreshGameAd()
            }, this.UPDATE_AD_DURATION)
        }
        static refreshIfAdIsShowing(e, t) {
            null != e && "none" != window.getComputedStyle(e).display && refreshAIPAd(t)
        }
        refreshGameAd() {
            l.refreshIfAdIsShowing(this.adElements.containerGameBottomSmall, this.AIP_GAME_BOTTOM_SMALL)
        }
        showInGameAds() {
            o.utils.isMobile.phone || (this.showRightInGameAd(), this.showLeftInGameAd(), this.handleBottomInGameAd())
        }
        hideInGameAds() {
            this.hideRightInGameAd(), this.hideLeftInGameAd(), this.handleBottomInGameAd()
        }
        showRightInGameAd() {
            null != this.adElements.containerGameRight && (this.adElements.containerGameRight.style.display = "block")
        }
        showLeftInGameAd() {
            null != this.adElements.containerGameLeft && (this.adElements.containerGameLeft.style.display = "block")
        }
        hideRightInGameAd() {
            null != this.adElements.containerGameRight && (this.adElements.containerGameRight.style.display = "none")
        }
        hideLeftInGameAd() {
            null != this.adElements.containerGameLeft && (this.adElements.containerGameLeft.style.display = "none")
        }
        handleBottomInGameAd() {
            if (null == this.adElements.containerGameBottomSmall) return;
            const e = n.uiGameManager.canvasController.responsiveController.canShowBottomAd();
            this.adElements.containerGameBottomSmall.style.display = e ? "block" : "none"
        }
    }
    t.UIAdController = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIAdblockController = void 0;
    const i = a(10),
        o = a(16),
        n = a(11),
        r = a(14),
        s = a(7),
        c = a(293);
    t.UIAdblockController = class {
        constructor(e) {
            this.ads = [{
                imageUrl: "ab_contributor2.png",
                targetUrl: "/contribute"
            }, {
                imageUrl: "ab_binance_1.jpg",
                targetUrl: "https://www.binance.com/en/register?ref=36967673"
            }, {
                imageUrl: "ab_binance_2.jpg",
                targetUrl: "https://www.binance.com/en/register?ref=36967673"
            }, {
                imageUrl: "ab_binance_3.jpg",
                targetUrl: "https://www.binance.com/en/register?ref=36967673"
            }, {
                imageUrl: "ab_binance_4.jpg",
                targetUrl: "https://www.binance.com/en/register?ref=36967673"
            }, {
                imageUrl: "ab_cnk.png",
                targetUrl: "/store"
            }, {
                imageUrl: "ab_shapez.png",
                targetUrl: "https://analytics.shapez.io/track/cp_colonist?lpurl=https%3A%2F%2Fshapez.io"
            }, {
                imageUrl: "ab_shapez.png",
                targetUrl: "https://analytics.shapez.io/track/cp_colonist_steam?lpurl=https%3A%2F%2Fstore.steampowered.com%2Fapp%2F1318690%2Fshapezio%2F%3Futm_medium%3Dcolonist"
            }], this.UPDATE_AD_DURATION = 6e4, this.imageElements = [], this.adElements = e, this.lobbyRightStoreAd = new c.UILobbyAdView(!1)
        }
        startRefreshing() {
            this.createColonistAds(), this.updateColonistAds(), this.timer = setInterval(() => {
                this.updateColonistAds()
            }, this.UPDATE_AD_DURATION)
        }
        updateColonistAds() {
            for (const e of this.imageElements) {
                const t = (0, s.randomElementFromArray)(this.ads),
                    a = o.UIGameConstants.getImagePath(t.imageUrl);
                e.src = a, e.onclick = () => {
                    r.CA.sendEvent(r.CA.Type.Click, r.CA.Category.Lobby, r.CA.Label.ClickedAdblockAd), n.Sound.playSound(n.Sound.SoundType.Click), window.open(t.targetUrl)
                }
            }
            this.lobbyRightStoreAd.update()
        }
        createColonistAds() {
            this.lobbyRightStoreAd.show(), this.createAd(this.adElements.containerGameRight, 160, 600, ""), this.createAd(this.adElements.containerGameLeft, 160, 600, "")
        }
        createAd(e, t, a, o) {
            const n = (0, i.createImgIn)(e, "", "", "", "Colonist");
            n.width = t, n.height = a, n.id = o, n.style.cursor = "pointer", this.imageElements.push(n)
        }
        removeAds() {
            var e;
            this.lobbyRightStoreAd.hide(), clearInterval(this.timer);
            for (const t of this.imageElements) null != t.parentElement && (null === (e = t.parentElement) || void 0 === e || e.removeChild(t));
            this.imageElements = []
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIAdElements = void 0;
    t.UIAdElements = class {
        constructor() {
            this.containerLobbyLeft = document.getElementById("lobby_ad_left"), this.containerLobbyRight = document.getElementById("lobby_ad_right"), this.containerLobby300x250 = document.getElementById("lobby_ab_300x250_container"), this.lobbyAbVLI300x250 = document.getElementById("lobby_ab_vli_300x250"), this.containerGameLeft = document.getElementById("in-game-ab-left"), this.containerGameRight = document.getElementById("in-game-ab-right"), this.containerGameBottomSmall = document.getElementById("in-game-ad-bottom-small")
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIHeaderController = void 0;
    const i = a(46),
        o = a(11),
        n = a(414),
        r = a(14);
    t.UIHeaderController = class {
        constructor() {
            this.container = document.getElementById("page_header"), this.profileController = new n.UIHeaderProfileController, this.storeButton = document.getElementById("lobby_navigation_store"), this.storeButton.onclick = () => {
                i.StorageWrapper.setStoreNotificationBadgeVisible(!1), this.setStoreButtonBadgeVisible(!1)
            }, this.mobileMenu = document.getElementById("lobby_mobile_menu"), this.initMobileMenu()
        }
        hide() {
            this.container.style.display = "none"
        }
        show() {
            this.container.style.display = "flex"
        }
        setStoreButtonBadgeVisible(e) {
            const t = e ? "Store<span class="link-badge">NEW!</span>" : "Store";
            this.storeButton.innerHTML = t
        }
        initMobileMenu() {
            this.initBurgerButton(), this.initMenuCloseButton()
        }
        initBurgerButton() {
            const e = document.getElementById("lobby_mobile_burgerbutton");
            null != e && (e.onclick = () => {
                o.Sound.playSound(o.Sound.SoundType.Click), r.CA.sendEvent(r.CA.Type.Click, r.CA.Category.Mobile, r.CA.Label.MobileClickedBurgeButton), this.mobileMenu.className = "res_block active"
            })
        }
        initMenuCloseButton() {
            const e = document.getElementById("lobby_mobile_menuclosebutton");
            null != e && (e.onclick = () => {
                o.Sound.playSound(o.Sound.SoundType.Click), this.mobileMenu.className = "res_block"
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIHeaderProfileController = void 0;
    const i = a(14),
        o = a(41),
        n = a(11),
        r = a(37),
        s = a(415);
    t.UIHeaderProfileController = class {
        constructor() {
            this.loginButton = document.getElementById("header_profile_login_button"), this.container = document.getElementById("header_profile_loggedin_container"), this.playerIcon = document.getElementById("header_profile_player_icon"), this.username = document.getElementById("header_profile_username"), this.karma = document.getElementById("header_profile_karma"), this.dropdownController = new s.UIHeaderProfileDropdownController(this), this.loginButton.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.HeaderProfile, i.CA.Label.HeaderProfileClickedLogin), window.location.href = o.UIAPIEndpoints.googleAuth()
            }, this.playerIcon.onclick = () => {
                this.dropdownController.dropdownButtonAction()
            }, this.username.onclick = () => {
                this.dropdownController.dropdownButtonAction()
            }, this.karma.onclick = () => {
                this.dropdownController.dropdownButtonAction()
            }
        }
        setState(e) {
            e.userState.isLoggedIn && (this.loginButton.style.display = "none", this.container.style.display = "flex"), this.dropdownController.avatarEditor.setState(e)
        }
        update(e) {
            this.username.innerHTML != e.username && (this.username.innerHTML = e.username), this.karma.innerHTML != e.karmaStatus && (this.karma.innerHTML = e.karmaStatus), this.updateIcon(e.icon)
        }
        updateIcon(e) {
            const t = r.LobbyImages.getLobbyImagePath(e),
                a = r.LobbyImages.getLobbyImageAlt(e),
                i = r.LobbyImages.getLobbyImageExtension(e);
            this.playerIcon.src.includes(i) || (this.playerIcon.src = t), this.playerIcon.alt != a && (this.playerIcon.alt = a)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIHeaderProfileDropdownController = void 0;
    const i = a(14),
        o = a(41),
        n = a(11),
        r = a(47),
        s = a(31),
        c = a(416),
        l = a(33),
        h = a(35);
    class d {
        constructor(e) {
            this.profileController = e, this.avatarEditor = new c.UIProfileEditAvatarController, this.dropdownButton = document.getElementById("header_profile_dropdown_arrow"), this.viewStatsButton = document.getElementById("header_profile_dropdown_viewstats"), this.editNameButton = document.getElementById("header_profile_dropdown_editname"), this.editAvatarButton = document.getElementById("header_profile_dropdown_editavatar"), this.logoutButton = document.getElementById("header_profile_dropdown_logout"), this.dropdownView = document.getElementById("header_profile_dropdownview"), this.dropdownButton.onclick = () => {
                this.dropdownButtonAction()
            }, this.viewStatsButton.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.HeaderProfile, i.CA.Label.HeaderProfileClickedViewStats), this.loginCheck("Login to view stats") && window.open(window.location.origin + (0, r.getProfileURI)(this.profileController.username.innerHTML))
            }, this.editNameButton.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.HeaderProfile, i.CA.Label.HeaderProfileClickedEditName), this.loginCheck("Login to edit name") && (0, s.usernameClickAction)(this.profileController.username.innerHTML)
            }, this.editAvatarButton.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.HeaderProfile, i.CA.Label.HeaderProfileClickedEditAvatar), this.loginCheck("Login to edit avatar") && this.avatarEditor.setIconWindowVisible(!0)
            }, h.UIUtilsEjsVariables.PLAYER_LOGGEDIN || (this.logoutButton.innerHTML = "Login"), this.logoutButton.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.HeaderProfile, i.CA.Label.HeaderProfileClickedLogout), h.UIUtilsEjsVariables.PLAYER_LOGGEDIN ? d.logoutAction() : window.location.href = o.UIAPIEndpoints.googleAuth()
            }
        }
        dropdownButtonAction() {
            n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.HeaderProfile, i.CA.Label.HeaderProfileClickedDropdown), this.dropdownView.classList.toggle("show")
        }
        loginCheck(e) {
            return this.dropdownView.classList.toggle("show"), !!h.UIUtilsEjsVariables.PLAYER_LOGGEDIN || (l.UIPopupController.create("Login", e, () => {
                window.location.href = o.UIAPIEndpoints.googleAuth()
            }, () => {}), !1)
        }
        static logoutAction() {
            const e = new XMLHttpRequest;
            e.open("POST", o.UIAPIEndpoints.googleLogout(), !0), e.onreadystatechange = () => {
                4 == e.readyState && 200 == e.status && location.reload()
            }, e.send(null)
        }
    }
    t.UIHeaderProfileDropdownController = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIProfileEditAvatarController = void 0;
    const i = a(14),
        o = a(40),
        n = a(11),
        r = a(10),
        s = a(37);
    t.UIProfileEditAvatarController = class {
        constructor() {
            this.iconsContainer = document.getElementById("profile_iconselector_container"), this.iconsGrid = document.getElementById("profile_iconselector_grid"), this.changeIconContainer = document.getElementById("profile_iconselector_modal");
            document.getElementById("profile_iconselector_close").onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), this.setIconWindowVisible(!1)
            }, this.changeIconContainer.onclick = e => {
                e.target === this.changeIconContainer && this.setIconWindowVisible(!1)
            }
        }
        setState(e) {
            this.displayIcons(e.items.icons)
        }
        displayIcons(e) {
            if (this.iconsGrid.innerHTML = "", null != e && 0 != e.length) {
                for (const t of e) {
                    (0, r.createImgIn)(this.iconsGrid, "", "", s.LobbyImages.getLobbyImagePath(t.imagePath), "").onclick = () => {
                        n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.HeaderProfile, i.CA.Label.HeaderProfileClickedChangeIcon), this.setIconWindowVisible(!1), o.SocketLobbySend.clickedChangeIconButton(t.type)
                    }
                }(0, r.createDivIn)(this.iconsContainer, "profile_iconselector_noicons").innerHTML = "<a target="_blank" href="/store">Get More Avatars</a>"
            } else(0, r.createDivIn)(this.iconsContainer, "profile_iconselector_noicons").innerHTML = "You currently do not own any icons.<br/>Purchase them in the <a target="_blank" href="/store">store</a>."
        }
        setIconWindowVisible(e) {
            this.changeIconContainer.style.display = "" + (e ? "block" : "none")
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UILandingPageController = void 0;
    const i = a(14),
        o = a(40),
        n = a(11),
        r = a(36),
        s = a(85);
    t.UILandingPageController = class {
        constructor(e) {
            this.uiManager = e, this.landingPageContainerDiv = document.getElementById("scene_landing_page_container"), this.enterLobbyButton = document.getElementById("landingpage_enter_lobby_button"), this.landingPageCTAMain = document.getElementById("langingpage_cta_main"), this.botsCTA = document.getElementById("landingpage_cta_playvsbots"), null != this.enterLobbyButton && (this.enterLobbyButton.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.LandingPage, i.CA.Label.ClickedEnterLobby), this.uiManager.sceneController.loadScene(s.Scene.Lobby)
            }), this.botsCTA.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.LandingPage, i.CA.Label.ClickedLandingPageVSBots), o.SocketLobbySend.clickedStartFastBotGame()
            }, this.landingPageCTAMain.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.LandingPage, i.CA.Label.ClickedLandingPageMainCTA), this.mainCTAAction()
            }
        }
        mainCTAAction() {
            const e = new r.ViewPopup("New to Colonist?", "Play against Bots to practice.", () => {
                o.SocketLobbySend.clickedStartFastBotGame()
            }, () => {
                this.uiManager.matchmakingController.clickedFindGame()
            }, !0);
            e.changeXButtonText("Real Players"), e.changeCheckButtonText("Bots"), e.show()
        }
        hide() {
            null != this.landingPageContainerDiv && (this.landingPageContainerDiv.style.display = "none")
        }
        show() {
            null != this.landingPageContainerDiv && (this.landingPageContainerDiv.style.display = "none")
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIFooterController = void 0;
    const i = a(14),
        o = a(101),
        n = a(296),
        r = a(46),
        s = a(11),
        c = a(6);
    t.UIFooterController = class {
        constructor() {
            this.mobileMenuFooter = document.getElementById("footer-mobile"), this.desktopFooter = document.getElementById("footer-desktop"), this.patchnotesButton = document.getElementById("footer_version"), this.updatePatchNoteVersion(), this.registerPatchNotePopupListener()
        }
        hide() {
            this.desktopFooter.style.display = "none"
        }
        show() {
            c.utils.isMobile.phone || (this.desktopFooter.style.display = "flex")
        }
        updatePatchNoteVersion() {
            const e = r.StorageWrapper.getVersionNo();
            null != e && (this.patchnotesButton.innerHTML = "v" + e.toString())
        }
        registerPatchNotePopupListener() {
            this.patchnotesButton.removeAttribute("target"), this.patchnotesButton.href = "#", this.patchnotesButton.onclick = () => {
                s.Sound.playSound(s.Sound.SoundType.Click), i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.Lobby, i.CA.Label.ClickedLobbyPatchnotes);
                const e = new o.PatchNoteData;
                new n.ViewPopupPatchNotes(e.getLast5(), e.getAnnouncements(), () => {})
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIMatchmakingFindGameController = void 0;
    const i = a(22),
        o = a(297),
        n = a(100),
        r = a(36),
        s = a(420),
        c = a(421);
    t.UIMatchmakingFindGameController = class {
        constructor() {
            this.selectMatchPopupView = new c.UIMatchmakingSelectMatchPopupView, this.searchMatchPopupView = new s.UIMatchmakingSearchMatchPopupView
        }
        updateMatchmakingStatus(e) {
            this.selectMatchPopupView.remove(), this.searchMatchPopupView.update(e)
        }
        removePopups() {
            this.selectMatchPopupView.remove(), this.searchMatchPopupView.remove()
        }
        showMatchmakingMatchTypeSelector() {
            this.removePopups(), this.selectMatchPopupView.show()
        }
        clickedFindGame() {
            n.SocketMatchmakingSend.areProperSocketConnectionsEstablished() && this.showMatchmakingMatchTypeSelector()
        }
        sendFindGameMessageToServer() {
            this.showSearchMatchPopupBeforeConnectingToServerForFasterResponsiveness();
            const e = {
                matchPreferences: []
            };
            for (const t of this.selectMatchPopupView.selectedMatchTypes) {
                const a = {
                    matchType: t,
                    priority: o.MatchmakingPriority.High
                };
                e.matchPreferences.push(a)
            }
            n.SocketMatchmakingSend.connectToMatchmakingServerAndFindGame(e)
        }
        showMatchmakingErrorPopup(e) {
            this.removePopups();
            const t = i.EnglishTexts.MATCHMAKING_ERROR_TITLE,
                a = new r.ViewPopup(t, e, () => {}, () => {}, !0);
            a.show(), a.removeXButton()
        }
        showSearchMatchPopupBeforeConnectingToServerForFasterResponsiveness() {
            const e = {
                numberOfPlayersFound: 1,
                totalNumberOfPlayersNeeded: void 0
            };
            this.searchMatchPopupView.update(e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIMatchmakingSearchMatchPopupView = void 0;
    const i = a(7),
        o = a(19),
        n = a(100),
        r = a(35);
    class s {
        constructor() {
            this.counter = 0, this.container = document.getElementById("matchmaking-searchmatch-popup"), this.timeElement = document.getElementById("matchmaking_searchmatch_time"), this.text = document.getElementById("matchmaking_searchmatch_text"), this.tip = document.getElementById("matchmaking_searchmatch_tip"), this.cancelButton = document.getElementById("matchmaking_searchmatch_cancelbutton"), this.cancelButton.onclick = () => {
                n.SocketMatchmakingSend.sendCancelFindGame(), o.uiManager.matchmakingController.showMatchmakingMatchTypeSelector()
            }
        }
        static getTips() {
            return ["1v1 games take less time to find a game", `Join Colonist <a href="${r.UIUtilsEjsVariables.DISCORD_CHANNEL_URL}" target="_blank">Discord community</a>!`, "Nicer players have a higher ratio of winning"]
        }
        startTimer() {
            this.timeElement.style.display = "none", this.timeElement.innerHTML = (0, i.timeToStringMMSS)(1e3 * this.counter), this.timer = setInterval(() => {
                this.counter += 1, this.timeElement.innerHTML = (0, i.timeToStringMMSS)(1e3 * this.counter)
            }, 1e3)
        }
        update(e) {
            this.isShowing() || this.show();
            let t = "Looking for players with similar karma";
            null != e.totalNumberOfPlayersNeeded && (t += ` (${e.numberOfPlayersFound}/${e.totalNumberOfPlayersNeeded})`), this.text.innerHTML = t
        }
        isShowing() {
            return "block" == this.container.style.display
        }
        remove() {
            this.container.style.display = "none", clearInterval(this.timer), this.counter = 0
        }
        show() {
            this.startTimer(), this.tip.innerHTML = (0, i.randomElementFromArray)(s.getTips()), this.tip.style.display = "none", this.container.style.display = "block"
        }
    }
    t.UIMatchmakingSearchMatchPopupView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIMatchmakingSelectMatchPopupView = void 0;
    const i = a(297),
        o = a(19),
        n = a(11);
    t.UIMatchmakingSelectMatchPopupView = class {
        constructor() {
            this.selectedMatchTypes = [], this.container = document.getElementById("matchmaking-selectmatch-popup"), this.optionBase = document.getElementById("matchmaking_popup_item_base"), this.option1v1 = document.getElementById("matchmaking_popup_item_1v1"), this.optionFunmap = document.getElementById("matchmaking_popup_item_funmap"), this.findGameButton = document.getElementById("matchmaking_popup_findgamebutton"), this.optionBase.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), this.togglePreference(i.MatchmakingMatchTypes.UnrankedClassic4P, this.optionBase)
            }, this.option1v1.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), this.togglePreference(i.MatchmakingMatchTypes.UnrankedClassic1v1, this.option1v1)
            }, this.optionFunmap.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), this.togglePreference(i.MatchmakingMatchTypes.UnrankedClassicFreeMapRotation, this.optionFunmap)
            }, this.setCancel()
        }
        setCancel() {
            window.addEventListener("click", e => {
                e.target == this.container && this.remove()
            })
        }
        togglePreference(e, t) {
            this.removeAllSelections(), t.classList.add("selected"), this.selectedMatchTypes = [], this.selectedMatchTypes.push(e), this.updateFindGameButton()
        }
        removeAllSelections() {
            this.optionBase.classList.remove("selected"), this.option1v1.classList.remove("selected"), this.optionFunmap.classList.remove("selected")
        }
        updateFindGameButton() {
            0 != this.selectedMatchTypes.length || this.findGameButton.classList.contains("inactive") || (this.findGameButton.classList.add("inactive"), this.findGameButton.onclick = () => {}), this.selectedMatchTypes.length > 0 && this.findGameButton.classList.contains("inactive") && (this.findGameButton.classList.remove("inactive"), this.findGameButton.onclick = () => {
                n.Sound.playSound(n.Sound.SoundType.Click), o.uiManager.matchmakingController.sendFindGameMessageToServer()
            })
        }
        remove() {
            this.container.style.display = "none"
        }
        show() {
            this.container.style.display = "block"
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameManager = void 0;
    const i = a(423),
        o = a(426),
        n = a(433),
        r = a(436),
        s = a(443),
        c = a(452),
        l = a(471),
        h = a(472),
        d = a(482),
        u = a(483),
        g = a(484),
        m = a(513),
        p = a(515),
        C = a(517),
        y = a(520),
        S = a(524),
        v = a(526),
        _ = a(528),
        P = a(529),
        T = a(532),
        b = a(3);
    var f = b.GameStateEnums.UIGameEventEnums;
    const I = a(533),
        E = a(534),
        w = a(536),
        k = a(537),
        A = a(539),
        M = a(540),
        G = a(541),
        R = a(549),
        D = a(551),
        x = a(559),
        O = a(286),
        B = a(39),
        L = a(571),
        N = a(578),
        U = a(579),
        V = a(581),
        F = a(583),
        H = a(585),
        K = a(14),
        j = a(19);
    t.UIGameManager = class {
        constructor(e, t) {
            this.gameState = t, this.socketGameSend = new O.SocketGameSend(B.SocketController.socket), this.eventController = new _.UIGameEventController, this.canvasController = new s.UIGameCanvasController(this, e), this.toolTipController = new p.UIGameToolTipController(this.canvasController.app), this.adController = j.uiManager.adController, this.optionalGameMechanics = [], this.eventController.registerUIGameMechanic(K.CA)
        }
        buildGame(e) {
            this.mapController = new c.UIGameMapController(this), this.bankController = new l.UIGameBankController(this), this.playersController = new o.UIGamePlayersController(this), this.actionsController = new h.UIGameActionsController(this), this.tradeController = new n.UIGameTradeController(this), new v.UIGameVoteController(this), new i.UIGameCardController(this), new r.UIGameTradeInfoController(this), new d.UIGameStateController(this), new u.UIGameTimerController(this), new m.UIGameDiceController(this), new y.UIGameAchievementController(this), new P.UIGameSelectPlayerToStealController(this), new g.UIGameHelpButtonsController(this), new T.UIGameTurnSoundController(this), new x.UIGamePopupController(this), this.buildOrderDependentControllers(e)
        }
        buildOrderDependentControllers(e) {
            this.mapController.createMap(), this.buildOptionalMechanics(e), this.actionsController.buildButtonController(), this.mapController.mapView.sortChildren()
        }
        buildOptionalMechanics(e) {
            this.optionalGameMechanics.push(...e);
            for (const t of e) this.initOptionalMechanic(t)
        }
        initOptionalMechanic(e) {
            switch (e) {
                case b.OptionalGameMechanicEnum.IslandExploration:
                case b.OptionalGameMechanicEnum.IslandExplorationWithDesertAsForeignLand:
                    new w.UIGameMapChitController(this);
                    break;
                case b.OptionalGameMechanicEnum.Tutorial:
                    new C.UIGameTutorialController(this);
                    break;
                case b.OptionalGameMechanicEnum.SpecialBuildPhase:
                    new S.UIGameSpecialBuildPhaseButtonController(this);
                    break;
                case b.OptionalGameMechanicEnum.Pirate:
                    new I.UIGameMapPirateController(this);
                    break;
                case b.OptionalGameMechanicEnum.Ships:
                    this.actionsController.activateShipButtons();
                    break;
                case b.OptionalGameMechanicEnum.GoldTiles:
                    new A.UIGameGoldTileController(this);
                    break;
                case b.OptionalGameMechanicEnum.FogTiles:
                    new k.UIGameFogTileController(this);
                    break;
                case b.OptionalGameMechanicEnum.CityWall:
                    new M.UIGameMapCityWallController(this);
                    break;
                case b.OptionalGameMechanicEnum.Knights:
                    new G.UIGameKnightController(this);
                    break;
                case b.OptionalGameMechanicEnum.CityImprovements:
                    new D.UIGameCityImprovement(this);
                    break;
                case b.OptionalGameMechanicEnum.Barbarians:
                    new L.UIGameBarbarianInvasion(this);
                    break;
                case b.OptionalGameMechanicEnum.DevelopmentCards:
                    this.actionsController.activateBuyDevelopmentCardButton();
                    break;
                case b.OptionalGameMechanicEnum.Merchant:
                    new E.UIGameMerchantController(this);
                    break;
                case b.OptionalGameMechanicEnum.RedDice:
                    this.eventController.sendEvent(void 0, f.ActivateRedDice);
                    break;
                case b.OptionalGameMechanicEnum.EventDice:
                    new R.UIGameEventDiceController(this);
                    break;
                case b.OptionalGameMechanicEnum.InventorProgressCard:
                    new N.UIGameInventoryHighlightDiceController(this);
                    break;
                case b.OptionalGameMechanicEnum.LargestArmy:
                    new U.UIGamePlayerInformationLargestArmyController(this);
                    break;
                case b.OptionalGameMechanicEnum.LongestRoad:
                    new V.UIGamePlayerInformationLongestRoadController(this);
                    break;
                case b.OptionalGameMechanicEnum.ProgressCards:
                    new F.UIGamePlayerInformationProgressCardController(this), this.bankController.initBankControllerToContainCommodities();
                    break;
                case b.OptionalGameMechanicEnum.PlayerInformationArrowView:
                    new H.UIGamePlayerInformationArrayController(this)
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCardController = void 0;
    const i = a(424),
        o = a(6),
        n = a(3),
        r = a(26),
        s = a(31);
    var c = n.GameStateEnums.CardEnum,
        l = n.GameStateEnums.UIGameEventEnums,
        h = n.GameStateEnums.TurnStates;
    const d = a(20),
        u = a(82),
        g = a(79),
        m = a(7),
        p = a(298),
        C = a(52);
    t.UIGameCardController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this);
            const t = this.uiGameManager.canvasController,
                a = t.appH - t.itemSize,
                o = t.itemSize,
                n = t.appW - t.chatWidth,
                r = t.appW - 10 * t.itemSize,
                s = this.uiGameManager.gameState.isPlayerSpectator() ? n : r;
            this.cardContainerView = new g.UIGameCardContainerView(this.uiGameManager, 0, a, s, o, t.app.stage, void 0, void 0), this.cardAnimationController = new i.UIGameCardAnimationController(this.uiGameManager, this), this.cardsFlyingToHand = new p.UIGameCardViewInventory
        }
        onEvent(e, t) {
            switch (t) {
                case l.ShowDiscardCardUI:
                case l.ShowTradeUI:
                    this.hide();
                    break;
                case l.CloseDiscardCardUI:
                case l.CloseTradeUI:
                    this.show();
                    break;
                case l.GivePlayerCardFromTile:
                    this.addCardsFromTile(e);
                    break;
                case l.ExchangeCards:
                    this.exchangeCards(e);
                    break;
                case l.ContinueGame:
                    this.distributeOldCards()
            }
        }
        hide() {
            this.cardContainerView.parent.removeChild(this.cardContainerView), this.removeTip()
        }
        removeTip() {
            const e = this.uiGameManager.toolTipController;
            if (e.tipHasParent())
                for (const t of this.cardContainerView.cardInventory.cardViews)
                    if (t == e.tip.viewToPlaceAbove) {
                        e.removeTip();
                        break
                    }
        }
        show() {
            this.uiGameManager.canvasController.app.stage.addChildAt(this.cardContainerView, 5)
        }
        getCardObj(e, t, a, i) {
            const o = this.uiGameManager.gameState.isPlayerSpectator();
            return this.uiGameManager.gameState.myColor != a || o ? this.createNewCard(e, t, i) : this.getCardFromHand(t, i)
        }
        getCardFromHand(e, t) {
            const a = this.cardContainerView.cardInventory.getTopCardWithType(e);
            if (null != a) {
                a.hideBadge(), this.cardContainerView.removeCard(a.cardData.cardEnum), this.uiGameManager.canvasController.app.stage.addChild(a);
                const i = this.getCardAnimationPointForPlayer(this.uiGameManager.gameState.myColor, e);
                return a.x = i.x, a.y = i.y, this.setCardAnimationCompleteCallBack(t, a), a
            }
            for (const a of this.cardsFlyingToHand.cardViews)
                if (a.cardData.cardEnum == e) return (0, m.removeElementFromArray)(this.cardsFlyingToHand.cardViews, a), this.setCardAnimationCompleteCallBack(t, a), a;
            (0, s.logError)("getCardFromHand", [c[e]]);
            const i = new r.Point(this.cardContainerView.x, this.cardContainerView.y);
            return this.createNewCard(i, e, t)
        }
        createNewCard(e, t, a) {
            const i = this.cardContainerView.cardInventory.getCardTypeCount(t),
                o = new u.CardView(this.uiGameManager, i, e.x, e.y, this.cardContainerView.cardW, this.cardContainerView.cardH, t, this.uiGameManager.canvasController.app.stage, !0);
            return this.setCardAnimationCompleteCallBack(a, o), o.hideBadge(), o
        }
        setCardAnimationCompleteCallBack(e, t) {
            const a = this.uiGameManager.gameState.isPlayerSpectator();
            e != this.uiGameManager.gameState.myColor || a ? this.setCardAnimationCompleteCallbackRemoveCard(t) : this.setCardAnimationCompleteCallbackToMyHand(t)
        }
        setCardAnimationCompleteCallbackRemoveCard(e) {
            e.animationController.animationCompleteCallBack = () => {
                this.uiGameManager.canvasController.app.stage.removeChild(e)
            }
        }
        setCardAnimationCompleteCallbackToMyHand(e) {
            this.cardsFlyingToHand.addCardView(e), e.hideBadge(), e.animationController.animationCompleteCallBack = () => {
                (0, m.removeElementFromArray)(this.cardsFlyingToHand.cardViews, e), e.parent.removeChild(e), this.cardContainerView.addExistingCard(e), e.activateInventoryCard()
            }
        }
        addDevCardsToHand(e, t) {
            for (const a of t) this.gainCardFromBank(e, a)
        }
        distributeOldCards() {
            if (this.uiGameManager.gameState.isPlayerSpectator()) return;
            const e = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor);
            this.addCardFromTile(e.resourceCards, 0, e.color), this.addDevCardsToHand(e.color, e.developmentCards)
        }
        gainCardFromBank(e, t) {
            const a = this.uiGameManager.bankController.getPointFromBank(t),
                i = this.getCardAnimationPointForPlayer(e, t),
                o = this.createNewCard(a, t, e);
            this.cardAnimationController.addCardToAnimationQueue(o, i)
        }
        exchangeCards(e) {
            this.playerExchange(e.receivingPlayer, e.givingPlayer, e.givingCards), this.playerExchange(e.givingPlayer, e.receivingPlayer, e.receivingCards)
        }
        playerExchange(e, t, a) {
            for (const i of a) {
                const a = this.getCardAnimationPointForPlayer(t, i),
                    o = this.getCardAnimationPointForPlayer(e, i),
                    n = this.getCardObj(a, i, t, e);
                this.cardAnimationController.addCardToAnimationQueue(n, o)
            }
        }
        addCardsFromTile(e) {
            for (const t of e) this.addCardFromTile([t.card], t.tileIndex, t.owner)
        }
        addCardFromTile(e, t, a) {
            for (const i of e) {
                this.hightlightTileDuringGameSetup(t);
                const e = this.getPointFromMap(t),
                    o = this.getCardAnimationPointForPlayer(a, i),
                    n = this.createNewCard(e, i, a);
                this.cardAnimationController.addCardToAnimationQueue(n, o)
            }
        }
        getPointFromMap(e) {
            const t = this.uiGameManager.mapController.tileViews[e],
                a = t.x + t.width / 2 - this.cardContainerView.cardW / 2,
                i = t.y + t.height / 2 - this.cardContainerView.cardH / 2,
                n = new o.Point(a, i);
            return this.uiGameManager.mapController.worldToScreenPoint(n)
        }
        getCardAnimationPointForPlayer(e, t) {
            if (e == d.PlayerColors.None) return this.uiGameManager.bankController.getPointFromBank(t);
            const a = this.cardContainerView.y + this.cardContainerView.cardY,
                i = this.cardContainerView.getXOfType(t),
                o = new r.Point(i, a);
            if (this.uiGameManager.gameState.myColor == e) return o;
            const n = C.CardDataController.isResourceCard(t) ? this.uiGameManager.playersController.getGlobalPositionOfPlayerResCard(e) : this.uiGameManager.playersController.getGlobalPositionOfPlayerDevelopmentCard(e);
            return null != n ? n : new r.Point(0, 0)
        }
        hightlightTileDuringGameSetup(e) {
            if (this.uiGameManager.gameState.currentTurnState != h.GameSetup) return;
            this.uiGameManager.mapController.tileViews[e].highlightTileForTime(.5)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCardAnimationController = void 0;
    t.UIGameCardAnimationController = class {
        constructor(e, t) {
            this.ANIMATION_DELAY = 30, this.uiGameManager = e, this.lastAnimateTime = (new Date).getTime(), this.animationQueue = [], this.cardController = t
        }
        onGameTick(e) {
            this.animate()
        }
        startAnimation() {
            this.uiGameManager.eventController.registerUIGameAnimation(this)
        }
        stopAnimation() {
            this.uiGameManager.eventController.unregisterUIGameAnimation(this)
        }
        animate() {
            if (this.animationQueue.length <= 0 && this.stopAnimation(), !this.canAnimateCard()) return;
            const e = this.animationQueue[0];
            this.animationQueue.shift(), e.cardView.animationController.animateTo(e.endPoint)
        }
        addCardToAnimationQueue(e, t) {
            this.animationQueue.push({
                cardView: e,
                endPoint: t
            }), this.startAnimation()
        }
        canAnimateCard() {
            return !(this.lastAnimateTime + this.ANIMATION_DELAY > (new Date).getTime()) && (0 != this.animationQueue.length && (this.lastAnimateTime = (new Date).getTime(), !0))
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCardCountBadgeView = void 0;
    const i = a(6),
        o = a(25),
        n = a(38),
        r = a(13),
        s = a(28);
    t.UIGameCardCountBadgeView = class {
        constructor(e, t) {
            this.cardView = t;
            const a = this.cardView.view.height / 3,
                o = .02 * this.cardView.view.width,
                n = this.cardView.view.width - a - o;
            this.badgeBackground = new r.SpriteView(n, 0, a, a, this.cardView, i.Loader.shared.resources.card_badge_background.texture), this.createCardCountText(e)
        }
        createCardCountText(e) {
            const t = this.badgeBackground.width;
            this.countTextView = new n.TextView(String(e), .68 * this.cardView.view.width, .04 * this.cardView.height, t, t, this.cardView, void 0, void 0, !1);
            const a = o.GameFont.Size.L,
                i = s.GameColor.getColor(s.GameColor.Color.DarkGrey),
                r = s.GameColor.getColor(s.GameColor.Color.OffWhite);
            this.countTextView.style = {
                fontSize: a + "px",
                display: "block",
                fill: r,
                fontStyle: "bold",
                stroke: i,
                strokeThickness: 2,
                trim: !0
            }, this.updateText(e)
        }
        updateText(e) {
            if (this.countTextView.text == String(e)) return;
            this.countTextView.text = String(e);
            const t = .018 * this.cardView.view.height;
            let a = o.GameFont.Size.L * t;
            if (e > 9) {
                const e = .9;
                a = o.GameFont.Size.L * t * e, this.countTextView.x = .68 * this.cardView.view.width - .1 * this.cardView.view.width
            }
            this.countTextView.style.fontSize = a + "px"
        }
        resetCardBadge(e) {
            const t = null == this.countTextView.parent;
            null != this.countTextView.parent && this.countTextView.parent.removeChild(this.countTextView), this.createCardCountText(e), t && this.hideBadge()
        }
        hideBadge() {
            null != this.badgeBackground.parent && this.badgeBackground.parent.removeChild(this.badgeBackground), null != this.countTextView.parent && this.countTextView.parent.removeChild(this.countTextView)
        }
        showBadge() {
            null == this.badgeBackground.parent && this.cardView.addChild(this.badgeBackground), null == this.countTextView.parent && this.cardView.addChild(this.countTextView)
        }
        fadeCardBadge() {
            this.badgeBackground.tint = s.GameColor.getColorHexValue(s.GameColor.Color.CardViewFadedTint), this.countTextView.tint = s.GameColor.getColorHexValue(s.GameColor.Color.CardViewFadedTint)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayersController = void 0;
    const i = a(427),
        o = a(284),
        n = a(27),
        r = a(20),
        s = a(3),
        c = a(431),
        l = a(17);
    t.UIGamePlayersController = class {
        constructor(e) {
            this.playerInformationViews = [], this.uiGameManager = e;
            const t = e.canvasController,
                a = t.appW - t.chatWidth,
                i = t.appH - 4.5 * t.itemSize,
                o = t.chatWidth,
                n = 4.5 * t.itemSize;
            this.createContainers(a, i, o, n, t.app.stage), this.createAllPlayers(), this.initPlayerInformationWaitIconViews()
        }
        initPlayerInformationWaitIconViews() {
            for (const e of this.playerInformationViews) e.player.color != this.uiGameManager.gameState.myColor && new c.UIGamePlayerInformationWaitIconView(this.uiGameManager, e)
        }
        createContainers(e, t, a, i, r) {
            const c = i / 4.5 * 3,
                h = i / 4.5 * 1.5;
            this.container = new l.SectionBgView(e, t, a, i, r, !0), this.container.makeRoundedBgInvisibleToTrackMouseActions(), this.container.interactive = !0, this.container.on("pointerout", e => {
                this.uiGameManager.eventController.sendEvent(void 0, s.GameStateEnums.UIGameEventEnums.PointerOutPlayerInformationView)
            });
            const d = this.uiGameManager.canvasController,
                u = new o.Scrollbox({
                    boxWidth: a,
                    boxHeight: c,
                    divWheel: d.app.view,
                    interaction: d.app.plugins.interaction
                });
            this.container.addChild(u);
            new n.SectionView(0, 0, a, c, u.content, !0);
            this.opponentsContainer = u.content, this.playerContainer = new n.SectionView(0, i - h, a, h, this.container, !0), u.scrollbarSize = a / 100
        }
        getPlayerInformationViewWithColor(e) {
            for (const t of this.playerInformationViews)
                if (t.player.color == e) return t
        }
        getGlobalPositionOfPlayerResCard(e) {
            for (const t of this.playerInformationViews)
                if (t.player.color == e) return t.resourceCardView.view.getGlobalPosition()
        }
        getGlobalPositionOfPlayerDevelopmentCard(e) {
            for (const t of this.playerInformationViews)
                if (t.player.color == e) return t.developmentCardView.view.getGlobalPosition()
        }
        createAllPlayers() {
            if (this.areViewsCreated()) return;
            const e = this.container.height / 4.5,
                t = this.container.width,
                a = this.uiGameManager.gameState.isPlayerSpectator() ? this.uiGameManager.gameState.playOrder[0] : this.uiGameManager.gameState.myColor;
            this.createOpponentPlayerInformationViews(e, t, a), this.creatMyPlayerInformationView(e, t, a)
        }
        createOpponentPlayerInformationViews(e, t, a) {
            let o = this.uiGameManager.gameState.players.length >= 4 ? 0 : 4 - this.uiGameManager.gameState.players.length;
            const n = this.getPlayerOrderWhereMyColorIsLast();
            for (const r of n) {
                if (r == a) continue;
                const n = this.uiGameManager.gameState.getPlayerWithColor(r),
                    s = e * o,
                    c = new i.UIGamePlayerInformationView(this.uiGameManager, n, s, t, e, this.opponentsContainer, !1);
                this.playerInformationViews.push(c), o += 1
            }
        }
        creatMyPlayerInformationView(e, t, a) {
            const o = this.uiGameManager.gameState.getPlayerWithColor(a),
                n = new i.UIGamePlayerInformationView(this.uiGameManager, o, 0, t, 1.5 * e, this.playerContainer, !0);
            this.playerInformationViews.push(n)
        }
        areViewsCreated() {
            return this.playerInformationViews.length > 0
        }
        getPlayerOrderWhereMyColorIsLast() {
            if (this.uiGameManager.gameState.myColor == r.PlayerColors.None) return this.uiGameManager.gameState.playOrder;
            const e = [],
                t = this.uiGameManager.gameState.playOrder.indexOf(this.uiGameManager.gameState.myColor),
                a = this.uiGameManager.gameState.playOrder.length;
            for (let i = t + 1; i <= a + t; i++) e.push(this.uiGameManager.gameState.playOrder[i % a]);
            return e
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationView = void 0;
    const i = a(6),
        o = a(126),
        n = a(25),
        r = a(17),
        s = a(23),
        c = a(299),
        l = a(47),
        h = a(3);
    var d = h.GameStateEnums.TurnStates,
        u = h.GameStateEnums.UIGameEventEnums,
        g = h.GameStateEnums.CardEnum;
    const m = a(27),
        p = a(82),
        C = a(429),
        y = a(430),
        S = a(22),
        v = a(50);
    class _ extends r.SectionBgView {
        constructor(e, t, a, i, o, n, r) {
            super(0, a, i, o, n), this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.player = t, this.drawRoundedBg(), r ? this.createMyPlayerNameAndImage() : this.createOpponentPlayerNameAndImage(), this.setPlayerAvatarClickAction(), this.updatePlayer(), this.updateTurn()
        }
        onEvent(e, t) {
            switch (t) {
                case u.GameStateUpdated:
                    this.updateTurn();
                    break;
                case u.PlayerControllerStateUpdated:
                    this.updatePlayer()
            }
        }
        updateTurn() {
            const e = this.getPlayerToHighlight();
            this.player.color == e ? this.drawRoundedBg() : this.drawRoundedBg(i.Loader.shared.resources.bg_player_inactive.texture)
        }
        getPlayerToHighlight() {
            const e = this.uiGameManager.gameState.lastPlayerToRollDice;
            return this.uiGameManager.gameState.currentTurnState == d.SpecialBuildPhase ? e : this.uiGameManager.gameState.currentTurnPlayerColor
        }
        createMyPlayerNameAndImage() {
            const e = .303 * this.width,
                t = .0111 * this.height,
                a = .3984 * this.width,
                i = .3444 * this.height,
                r = new m.SectionView(e, t, a, i, this, !0);
            this.playerName = new o.TextMaskedView("", 0, 0, r.width, r.height, r, n.GameFont.Size.XL), this.playerName.style.align = "left";
            const s = .0598 * this.width,
                c = .2667 * this.height,
                l = .2147 * this.width;
            this.playerAvatar = new v.UIGamePlayerAvatarView(s, c, l, this, this.player);
            const h = s,
                d = .7547 * this.height,
                u = l,
                g = .1906 * this.height;
            this.victoryPointRibbon = new C.RibbonCountView(h, d, u, g, this, !0);
            const p = this.uiGameManager.gameState.gameSettings.victoryPointsToWin;
            this.victoryPointRibbon.setTip(S.EnglishTexts.PLAYER_INFORMATION_VICTORY_POINT_TITLE, [S.EnglishTexts.getPlayerInformationVictoryPointBody(p)]), this.createMyCardSection(), this.createMySpecialIconView()
        }
        createMyCardSection() {
            const e = .3354 * this.width,
                t = .4444 * this.height,
                a = .1209 * this.width,
                i = .4611 * this.height;
            this.resourceCardView = new p.CardView(this.uiGameManager, 0, e, t, a, i, g.ResourceBack, this), this.resourceCardView.view.setTip(S.EnglishTexts.PLAYER_INFORMATION_RESOURCE_CARD_TITLE, [S.EnglishTexts.PLAYER_INFORMATION_RESOURCE_CARD_BODY]);
            const o = .4736 * this.width,
                n = t;
            this.developmentCardView = new p.CardView(this.uiGameManager, 0, o, n, a, i, g.DevelopmentBack, this, void 0, !0), this.developmentCardView.view.setTip(S.EnglishTexts.PLAYER_INFORMATION_DEVELOPMENT_CARD_TITLE, [S.EnglishTexts.PLAYER_INFORMATION_DEVELOPMENT_CARD_BODY])
        }
        createMySpecialIconView() {
            const e = .0398 * this.width,
                t = .025 * this.height,
                a = .2547 * this.width,
                i = .24 * this.height;
            this.specialIconView = new y.AdaptiveSpriteSectionView(e, t, a, i, this, !0)
        }
        createOpponentPlayerNameAndImage() {
            const e = .1069 * this.width,
                t = .2759 * this.height,
                a = .1238 * this.width;
            this.playerAvatar = new v.UIGamePlayerAvatarView(e, t, a, this, this.player);
            const i = .1077 * this.width,
                n = .66 * this.height,
                r = .122 * this.width,
                s = .2586 * this.height;
            this.victoryPointRibbon = new C.RibbonCountView(i, n, r, s, this, !1);
            const c = this.uiGameManager.gameState.gameSettings.victoryPointsToWin;
            this.victoryPointRibbon.setTip(S.EnglishTexts.PLAYER_INFORMATION_VICTORY_POINT_TITLE, [S.EnglishTexts.getPlayerInformationVictoryPointBody(c)]);
            const l = .0142 * this.width,
                h = .0517 * this.height,
                d = .311 * this.width,
                u = .2069 * this.height,
                g = new m.SectionView(l, h, d, u, this, !0);
            this.playerName = new o.TextMaskedView("", 0, 0, d, u, g), this.createOpponentCardSection(), this.createOpponentSpecialIconView()
        }
        createOpponentCardSection() {
            const e = .3354 * this.width,
                t = .1422 * this.height,
                a = .1222 * this.width,
                i = .7155 * this.height;
            this.resourceCardView = new p.CardView(this.uiGameManager, 0, e, t, a, i, g.ResourceBack, this), this.resourceCardView.view.setTip(S.EnglishTexts.PLAYER_INFORMATION_RESOURCE_CARD_TITLE, [S.EnglishTexts.PLAYER_INFORMATION_RESOURCE_CARD_BODY]);
            const o = .4736 * this.width,
                n = t;
            this.developmentCardView = new p.CardView(this.uiGameManager, 0, o, n, a, i, g.DevelopmentBack, this, void 0, !0), this.developmentCardView.view.setTip(S.EnglishTexts.PLAYER_INFORMATION_DEVELOPMENT_CARD_TITLE, [S.EnglishTexts.PLAYER_INFORMATION_DEVELOPMENT_CARD_BODY])
        }
        createOpponentSpecialIconView() {
            const e = .0183 * this.width,
                t = .2759 * this.height,
                a = .0772 * this.width,
                i = .6628 * this.height;
            this.specialIconView = new y.AdaptiveSpriteSectionView(e, t, a, i, this, !1)
        }
        updatePlayer() {
            this.updateTextView(), this.playerAvatar.updatePlayerIcon(s.GameUIImages.getPlayerIcon(this.player.icon));
            const e = this.player.victoryPointState.totalPublicVictoryPoints(),
                t = this.player.victoryPointState.totalPrivateVictoryPoints();
            let a = String(e);
            e != t && 0 != t && (a += ` (${t})`), this.victoryPointRibbon.updateText(a);
            const o = this.player.developmentCards.length;
            this.developmentCardView.updateBadge(o);
            const n = this.player.resourceCards.length;
            this.resourceCardView.updateBadge(n);
            const r = n > this.player.cardDiscardLimit,
                c = i.Loader.shared.resources.card_rescardback.texture,
                l = i.Loader.shared.resources.card_rescardoverlimit.texture;
            r ? this.resourceCardView.updateTexture(l) : this.resourceCardView.updateTexture(c)
        }
        updateTextView() {
            this.playerName.text != this.player.username && (this.playerName.text = this.player.username, this.playerName.centerXInParent())
        }
        setPlayerAvatarClickAction() {
            this.player.isBot || (this.playerAvatar.setClickAction(() => {
                this.clickOnPlayerAction()
            }), this.playerName.setClickAction(() => {
                this.clickOnPlayerAction()
            }))
        }
        clickOnPlayerAction() {
            if (this.player.color == this.uiGameManager.gameState.myColor) return void window.open((0, l.getProfileURI)(this.player.username));
            const e = this.uiGameManager.canvasController.app.view,
                t = this.playerAvatar.getGlobalPosition();
            t.y = t.y / e.offsetHeight, t.x = t.x / e.offsetWidth, new c.UIPlayerOptionsPopup(t, this.player.username)
        }
    }
    t.UIGamePlayerInformationView = _
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIPlayerOptionsPopupOptionView = void 0;
    const i = a(10),
        o = a(16),
        n = a(299),
        r = a(122);
    t.UIPlayerOptionsPopupOptionView = class {
        constructor(e, t, a = "No playerName input") {
            switch (t) {
                case n.UIPlayerOptionButtonType.Report:
                    this.buttonContainer = (0, i.createDivIn)(e, "player_options_dropdown_button_top"), this.buttonText = (0, i.createParagraphIn)(this.buttonContainer, "Report", "player_options_dropdown_button_text"), this.buttonIcon = (0, i.createImgIn)(this.buttonContainer, "player_options_dropdown_icon_info", "reportIcon", o.UIGameConstants.getImagePath("icon_info.svg"), "!");
                    break;
                case n.UIPlayerOptionButtonType.Mute:
                    this.buttonContainer = (0, i.createDivIn)(e, "player_options_dropdown_button"), r.UIMutePlayer.isMute(a) ? (this.buttonText = (0, i.createParagraphIn)(this.buttonContainer, "Unmute", "player_options_dropdown_button_text"), this.buttonIcon = (0, i.createImgIn)(this.buttonContainer, "player_options_dropdown_icon", "muteIcon", o.UIGameConstants.getImagePath("icon_sound_off.svg"), "!")) : (this.buttonText = (0, i.createParagraphIn)(this.buttonContainer, "Mute", "player_options_dropdown_button_text"), this.buttonIcon = (0, i.createImgIn)(this.buttonContainer, "player_options_dropdown_icon", "muteIcon", o.UIGameConstants.getImagePath("icon_sound_on.svg"), "!"));
                    break;
                case n.UIPlayerOptionButtonType.Profile:
                    this.buttonContainer = (0, i.createDivIn)(e, "player_options_dropdown_button_bottom"), this.buttonText = (0, i.createParagraphIn)(this.buttonContainer, "View Profile", "player_options_dropdown_button_text")
            }
        }
        setAction(e) {
            this.buttonContainer.onclick = () => {
                e()
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.RibbonCountView = void 0;
    const i = a(27),
        o = a(6),
        n = a(13),
        r = a(38),
        s = a(25);
    class c extends i.SectionView {
        constructor(e, t, a, i, c, l) {
            const h = l ? o.Loader.shared.resources.ribbon_large.texture : o.Loader.shared.resources.ribbon_small.texture;
            super(e, t, a, i, c, !0), this.ribbonView = new n.SpriteView(0, 0, a, i, this, h), this.ribbonView.centerXInParent();
            const d = l ? .15 * i : .165 * i;
            this.countView = new r.TextView("0", 0, d, a, i, this, s.GameFont.Size.L), this.countView.style.trim = !0, this.countView.centerXInParent()
        }
        updateText(e) {
            this.countView.text = e, this.countView.centerXInParent();
            const t = .01 * this.width;
            this.countView.x -= t
        }
    }
    t.RibbonCountView = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.AdaptiveSpriteSectionView = void 0;
    const i = a(27),
        o = a(7);
    class n extends i.SectionView {
        constructor(e, t, a, i, o, n) {
            super(e, t, a, i, o, !0), this.initialX = e, this.initialY = t, this.initialW = a, this.initialH = i, this.spriteViews = [], this.isPrimaryAxisHorizontal = n
        }
        addSpriteView(e) {
            null != e.parent && e.parent.removeChild(e), this.scaleSpriteToFit(e), this.addChild(e), this.spriteViews.unshift(e), this.isPrimaryAxisHorizontal ? e.centerYInParent() : e.centerXInParent(), this.spreadSprites()
        }
        scaleSpriteToFit(e) {
            this.isPrimaryAxisHorizontal ? this.scaleSpriteToFitHeight(e) : this.scaleSpriteToFitWidth(e)
        }
        scaleSpriteToFitHeight(e) {
            const t = this.initialH;
            if (e.height <= t) return;
            const a = t / e.height;
            e.height *= a, e.width *= a
        }
        scaleSpriteToFitWidth(e) {
            const t = this.initialW;
            if (e.width <= t) return;
            const a = t / e.width;
            e.height *= a, e.width *= a
        }
        removeSpriteView(e) {
            null != e.parent && e.parent.removeChild(e), (0, o.removeElementFromArray)(this.spriteViews, e), this.spreadSprites()
        }
        spreadSprites() {
            this.isPrimaryAxisHorizontal ? this.spreadSpritesAlongHorizontalAxis() : this.spreadSpritesAlongVerticalAxis()
        }
        spreadSpritesAlongHorizontalAxis() {
            const e = this.spriteViews.length;
            if (e <= 0) return;
            const t = e + 1,
                a = this.initialW / t;
            let i = a;
            for (const e of this.spriteViews) {
                const t = e.width > a ? a / e.width : 1;
                e.width *= t, e.height *= t;
                const o = e.width / 2;
                e.x = i - o, e.centerYInParent(), i += a
            }
        }
        spreadSpritesAlongVerticalAxis() {
            const e = this.spriteViews.length;
            if (e <= 0) return;
            const t = e,
                a = this.initialH / t,
                i = a - .05 * a;
            let o = a / 2;
            for (const e of this.spriteViews) {
                const t = e.height > i ? i / e.height : 1;
                e.width *= t, e.height *= t, e.y = o - e.height / 2, e.centerXInParent(), o += a
            }
        }
    }
    t.AdaptiveSpriteSectionView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationWaitIconView = void 0;
    const i = a(3);
    var o = i.GameStateEnums.UIGameEventEnums,
        n = i.GameStateEnums.ActionStates;
    const r = a(6),
        s = a(7),
        c = a(432);
    t.UIGamePlayerInformationWaitIconView = class {
        constructor(e, t) {
            this.uiGameManager = e, this.playerInformation = t, this.uiGameManager.eventController.registerUIGameMechanic(this);
            const a = this.uiGameManager.gameState.myColor == t.player.color ? .85 * this.playerInformation.specialIconView.height : .85 * this.playerInformation.specialIconView.width,
                i = r.Loader.shared.resources.waitIconSpriteSpreadsheet.spritesheet;
            if (null == i) return;
            const o = i.textures["waitIcon_01.png"],
                s = o.height / o.width * a;
            this.waitIcon = new c.AnimatedSpriteView(0, 0, a, s, this.playerInformation.specialIconView, i.animations.waitIcon), this.waitIcon.animationSpeed = .25, this.resetPlayerInformationWaitIcons(), this.originalActionState = n.None
        }
        onEvent(e, t) {
            switch (t) {
                case o.PlayersTakingAction:
                    this.showIconForPlayers(e);
                    break;
                case o.PlayersDoneTakingAction:
                    this.hideIconForPlayers(e);
                    break;
                case o.GameStateUpdated:
                    this.updateIconForState()
            }
        }
        showIconForPlayers(e) {
            (0, s.elementInArray)(e, this.playerInformation.player.color) && (this.waitIcon.play(), this.playerInformation.specialIconView.addSpriteView(this.waitIcon), this.originalActionState = this.uiGameManager.gameState.currentActionState)
        }
        hideIconForPlayers(e) {
            (0, s.elementInArray)(e, this.playerInformation.player.color) && null != this.waitIcon.parent && (this.waitIcon.stop(), this.playerInformation.specialIconView.removeSpriteView(this.waitIcon))
        }
        updateIconForState() {
            this.originalActionState != this.uiGameManager.gameState.currentActionState && this.resetPlayerInformationWaitIcons()
        }
        resetPlayerInformationWaitIcons() {
            const e = this.uiGameManager.gameState.playOrder;
            this.hideIconForPlayers(e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.AnimatedSpriteView = void 0;
    const i = a(6);
    class o extends i.AnimatedSprite {
        constructor(e, t, a, i, o, n, r = 0) {
            super(n), this.x = e + r, this.y = t + r, this.width = a - 2 * r, this.height = i - 2 * r, o.addChild(this)
        }
        centerXInParent() {
            null != this.parent && (this.x = this.parent.width / 2 - this.width / 2)
        }
        centerYInParent() {
            null != this.parent && (this.y = this.parent.height / 2 - this.height / 2)
        }
    }
    t.AnimatedSpriteView = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameTradeController = void 0;
    const i = a(62),
        o = a(3);
    var n = o.GameStateEnums.TurnStates,
        r = o.GameStateEnums.UIGameEventEnums;
    const s = a(31),
        c = a(434),
        l = a(435),
        h = a(127),
        d = a(17),
        u = a(6),
        g = a(118),
        m = a(78),
        p = a(7);
    t.UIGameTradeController = class {
        constructor(e) {
            this.editingOffer = !1, this.editedOfferId = "", this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playersToTradeWith = [];
            const t = this.uiGameManager.canvasController,
                a = t.appH - 2 * t.itemSize,
                o = t.appW - t.chatWidth - t.itemSize,
                n = 2 * t.itemSize;
            this.container = new d.SectionBgView(0, a, o, n, t.app.stage, !0);
            const r = this.container.width - t.itemSize,
                s = u.Loader.shared.resources.icon_check.texture;
            this.actionButton = new i.SpriteButtonView(r, 0, t.itemSize, t.itemSize, this.container), this.actionButton.addCenteredIcon(s), this.actionButton.inactivateOpacity();
            const h = u.Loader.shared.resources.icon_x.texture;
            this.cancelButton = new i.SpriteButtonView(r, t.itemSize, t.itemSize, t.itemSize, this.container), this.cancelButton.addCenteredIcon(h);
            const g = (this.container.width - t.itemSize) / 2,
                m = 2 * t.itemSize,
                p = () => {
                    this.updateCheckButtonOpacity(), this.rightExchangeController.updateBankOpponentView()
                };
            this.leftExchangeController = new l.UITradeLeftExchangeController(this.uiGameManager, g, m, this.container, p), this.rightExchangeController = new c.UITradeRightExchangeController(this.uiGameManager, g, m, this.container, p), this.setButtonActions(), this.container.parent.removeChild(this.container)
        }
        onEvent(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.ifCardsUpdatedResetTradeWindow();
                    break;
                case r.GameStateUpdated:
                    this.gameStateUpdated()
            }
        }
        setButtonActions() {
            this.actionButton.updateAction(() => {
                this.clickedActionButton()
            }), this.cancelButton.updateAction(() => {
                this.closeTradeUI()
            })
        }
        showTradeUI(e) {
            null == this.container.parent && (this.playersToTradeWith = e, this.actionButton.inactivateOpacity(), this.cancelButton.activateOpacity(), this.leftExchangeController.updatePlayerCards(), this.rightExchangeController.updateAndShowUI(), this.uiGameManager.canvasController.app.stage.addChild(this.container), this.uiGameManager.eventController.sendEvent(void 0, r.ShowTradeUI))
        }
        ifCardsUpdatedResetTradeWindow() {
            if (null == this.container.parent) return;
            const e = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor).resourceCards.sort((e, t) => e - t),
                t = this.leftExchangeController.getAllActiveCards().sort((e, t) => e - t);
            (0, p.arraysEqual)(e, t) || this.resetTradeWindow()
        }
        resetTradeWindow() {
            null != this.container.parent && (this.closeTradeUI(), this.showTradeUI(this.uiGameManager.gameState.getOtherActivePlayerColors()))
        }
        closeTradeUI() {
            null != this.container.parent && (this.editingOffer = !1, this.container.parent.removeChild(this.container), this.uiGameManager.eventController.sendEvent(void 0, r.CloseTradeUI), h.GameUIToolTips.removeAllToolTips())
        }
        gameStateUpdated() {
            null != this.container && this.uiGameManager.gameState.currentTurnState != n.Turn && this.closeTradeUI()
        }
        clickedTrade(e) {
            const t = this.uiGameManager.gameState;
            t.currentTurnPlayerColor == t.myColor ? (0, p.elementInArray)(o.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) ? t.currentTurnState != o.GameStateEnums.TurnStates.SpecialBuildPhase ? t.currentTurnState == o.GameStateEnums.TurnStates.Turn ? this.showTradeUI(this.uiGameManager.gameState.getOtherActivePlayerColors()) : new m.FloatingText("Finish current action", e) : new m.FloatingText("Trading disabled", e) : new m.FloatingText("Finish current action", e) : new m.FloatingText("It is not your turn", e)
        }
        updateCheckButtonOpacity() {
            this.actionButton.inactivateOpacity(), this.canCompleteOffer() && this.actionButton.activateOpacity()
        }
        canCompleteOffer() {
            const e = this.getTradeOffer();
            return 0 != e.totalOfferedResourceCount() && 0 != e.totalWantedResourceCount()
        }
        getTradeOffer() {
            const e = this.uiGameManager.gameState.gameModeData.activeResourceCardTypes,
                t = new g.TradeOffer("0", this.uiGameManager.gameState.myColor, this.rightExchangeController.activePlayers, e);
            return t.offeredResources.addCards(this.leftExchangeController.exchangeView.cardContainer.cardInventory.getAllCardEnums()), t.wantedResources.addCards(this.rightExchangeController.exchangeView.cardContainer.cardInventory.getAllCardEnums()), t
        }
        clickedActionButton() {
            if (!this.canCompleteOffer()) return;
            const e = this.getTradeOffer();
            if (this.editingOffer) return this.uiGameManager.socketGameSend.createdCounterOffer(this.editedOfferId, e), void this.closeTradeUI();
            this.uiGameManager.socketGameSend.createdPlayerOffer(e), e.correctBankRatio(this.uiGameManager.gameState.myBankTradeRatios) && this.resetTradeWindow()
        }
        addCardToLeftContainer(e) {
            this.leftExchangeController.clickedResourceCard(e)
        }
        editOffer(e) {
            this.closeTradeUI();
            const t = this.uiGameManager.gameState.getPlayerWithColor(e.creator);
            null != t ? (this.editingOffer = !0, this.editedOfferId = e.id, this.showTradeUI([e.creator]), this.leftExchangeController.clickedCounterOffer(e.wantedResources.getCards()), this.rightExchangeController.exchangeView.cardContainer.addMultipleCards(e.offeredResources.getCards())) : (0, s.logError)("editoffer", [t, e.creator, e])
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UITradeRightExchangeController = void 0;
    const i = a(6),
        o = a(300),
        n = a(17),
        r = a(128),
        s = a(7);
    var c = a(3).GameStateEnums.UIGameEventEnums;
    const l = a(13),
        h = a(129);
    t.UITradeRightExchangeController = class {
        constructor(e, t, a, i, r) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.cardViews = [], this.cardViewsWithBoldedText = [], this.activePlayers = this.uiGameManager.gameState.getOtherActivePlayerColors();
            this.exchangeView = new o.TradeExchangeView(e, t, 0, t, a / 2, i, !1, this.activePlayers, e => {
                this.opponentAvatarClickAction(e)
            }), this.exchangeView.cardContainer.setCardRemoveAction(() => {
                r()
            }), this.exchangeView.cardContainer.setCardAddAction(() => {
                r()
            }), this.bankRatioContainer = new n.SectionBgView(t, a / 2, t, a / 2, i), this.bankRatioContainer.drawRoundedBg()
        }
        onEvent(e, t) {
            switch (t) {
                case c.MerchantBankTradeRatioActive:
                    this.addMerchantIconToCardView(e);
                    break;
                case c.BoldTextInTradeWindow:
                    this.cardViewsWithBoldedText = e
            }
        }
        updateAndShowUI() {
            this.resetCards();
            this.exchangeView.selectPlayerContainer.playerAvatars.length != this.uiGameManager.tradeController.playersToTradeWith.length && this.exchangeView.resetSelectPlayerContainer(this.uiGameManager.tradeController.playersToTradeWith, !1), this.uiGameManager.tradeController.editingOffer || this.exchangeView.updatePlayerAvatarStatus(this.activePlayers), this.updateBankRatios(), this.exchangeView.showOpponents(), this.resetMerchantIcon()
        }
        updateBankRatios() {
            const e = this.uiGameManager.gameState.myBankTradeRatios.getAllBankTradeRatios(),
                t = this.bankRatioContainer.width / e.length;
            e.sort((e, t) => e.resource > t.resource ? 1 : -1);
            for (const [a, i] of e.entries()) {
                const e = new r.CardCountView(t * a, 0, t, this.bankRatioContainer.height, this.bankRatioContainer, i.resource);
                e.updateText(i.tradeRatio + ":1"), e.view.setClickAction(() => {
                    this.exchangeView.cardContainer.addNewCardOfType(i.resource)
                }), this.cardViews.push(e), (0, s.elementInArray)(this.cardViewsWithBoldedText, e.cardData.cardEnum) && e.boldText()
            }
        }
        resetCards() {
            this.exchangeView.cardContainer.removeAllCards();
            for (const e of this.cardViews) e.parent.removeChild(e);
            this.cardViews = []
        }
        addMerchantIconToCardView(e) {
            const t = this.getCardViewForCard(e);
            if (null == t) return;
            const a = h.MerchantPiece.getMerchantImageNameForPlayer(this.uiGameManager.gameState.myColor),
                o = i.Loader.shared.resources[a].texture,
                n = .55 * t.view.width,
                r = t.x + t.view.x + t.view.width - .65 * n,
                s = .1 * n;
            this.merchantIcon = new l.SpriteView(r, s, n, n, this.bankRatioContainer, o)
        }
        resetMerchantIcon() {
            null != this.merchantIcon && null != this.merchantIcon.parent && this.merchantIcon.parent.removeChild(this.merchantIcon)
        }
        updateBankOpponentView() {
            this.uiGameManager.tradeController.getTradeOffer().correctBankRatio(this.uiGameManager.gameState.myBankTradeRatios) ? this.exchangeView.showBank() : this.exchangeView.showOpponents()
        }
        opponentAvatarClickAction(e) {
            this.uiGameManager.tradeController.editingOffer || ((0, s.elementInArray)(this.activePlayers, e) ? (0, s.removeElementFromArray)(this.activePlayers, e) : this.activePlayers.push(e), this.exchangeView.updatePlayerAvatarStatus(this.activePlayers))
        }
        getCardViewForCard(e) {
            for (const t of this.cardViews)
                if (t.cardData.cardEnum == e) return t
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UITradeLeftExchangeController = void 0;
    const i = a(300),
        o = a(79);
    t.UITradeLeftExchangeController = class {
        constructor(e, t, a, n, r) {
            this.uiGameManager = e, this.exchangeView = new i.TradeExchangeView(this.uiGameManager, 0, 0, t, a / 2, n, !0, [this.uiGameManager.gameState.myColor]), this.exchangeView.cardContainer.setCardRemoveAction(() => {
                r()
            }), this.exchangeView.cardContainer.setCardAddAction(() => {
                r()
            }), this.exchangeView.cardContainer.setCardClickAction(e => {
                this.exchangeView.cardContainer.removeCard(e), this.playerCardContainer.addNewCardOfType(e)
            }), this.playerCardContainer = new o.UIGameCardContainerView(this.uiGameManager, 0, a / 2, t, a / 2, n, !1, !1), this.playerCardContainer.setCardClickAction(e => {
                this.playerCardContainer.removeCard(e), this.exchangeView.cardContainer.addNewCardOfType(e)
            })
        }
        updatePlayerCards() {
            this.resetCards();
            const e = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor);
            for (const t of e.resourceCards) this.playerCardContainer.addNewCardOfType(t, !1)
        }
        clickedCounterOffer(e) {
            for (const t of e) this.exchangeView.cardContainer.addNewCardOfType(t), this.playerCardContainer.removeCard(t)
        }
        clickedResourceCard(e) {
            this.canAddResource(e) && (this.exchangeView.cardContainer.addNewCardOfType(e), this.playerCardContainer.removeCard(e))
        }
        canAddResource(e) {
            return this.playerCardContainer.cardInventory.hasCardOfType(e)
        }
        resetCards() {
            this.playerCardContainer.removeAllCards(), this.exchangeView.cardContainer.removeAllCards()
        }
        getAllActiveCards() {
            const e = [];
            for (const t of this.exchangeView.cardContainer.cardInventory.cardViews) e.push(t.cardData.cardEnum);
            for (const t of this.playerCardContainer.cardInventory.cardViews) e.push(t.cardData.cardEnum);
            return e
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameTradeInfoController = void 0;
    const i = a(437),
        o = a(438),
        n = a(50);
    var r = a(3).GameStateEnums.UIGameEventEnums;
    const s = a(90);
    t.UIGameTradeInfoController = class {
        constructor(e) {
            this.offers = [], this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), window.uiGameTradeInfoController = this
        }
        onEvent(e, t) {
            switch (t) {
                case r.EmbargoStatusUpdated:
                    this.updateEmbargoStatuses();
                    break;
                case r.RemoveTradeOffer:
                    this.removeOffer(e);
                    break;
                case r.TradeOfferRejected:
                    this.playerRejectedOffer(e.offerId, e.rejectedPlayer);
                    break;
                case r.TradeOfferAccepted:
                    this.playerAcceptedOffer(e.offerId, e.acceptedPlayer);
                    break;
                case r.NewTradeOfferReceived:
                    this.showOffer(e)
            }
        }
        showOffer(e) {
            null == this.tradeInfoContainer && this.createUI(), null != this.tradeInfoContainer && (this.offers.push(new o.UIGameTradeInfoOfferController(this.uiGameManager, this.tradeInfoContainer, e)), this.arrangeOffers())
        }
        createUI() {
            const e = this.uiGameManager.gameState.getOtherActivePlayerColors();
            this.tradeInfoContainer = new i.ViewTradeInfoContainer;
            this.playerAvatarContainer = new s.UIGamePlayerAvatarContainerView(this.uiGameManager, 0, 0, this.tradeInfoContainer.width, this.tradeInfoContainer.height, e, e => {
                this.uiGameManager.socketGameSend.embargoPlayer(e)
            }, this.tradeInfoContainer, !1), this.playerAvatarContainer.resetAllPlayerAlpha(), this.playerAvatarContainer.removeSpacingBetweenPlayerAvatarsAndCenterInContainer(), this.updateEmbargoStatuses()
        }
        updateEmbargoStatuses() {
            const e = this.uiGameManager.gameState;
            for (const t of e.playOrder) {
                if (t == e.myColor) continue;
                const a = e.didIEmbargoPlayer(t);
                this.updateEmbargoForPlayer(t, a)
            }
        }
        updateEmbargoForPlayer(e, t) {
            null != this.playerAvatarContainer && this.playerAvatarContainer.setPlayerStatus(e, t ? n.UIGamePlayerAvatarStatus.Declined : n.UIGamePlayerAvatarStatus.Accepted)
        }
        closeView() {
            null != this.tradeInfoContainer && 0 == this.offers.length && null != this.tradeInfoContainer.parent && (this.playerAvatarContainer.removeHovers(), this.tradeInfoContainer.parent.removeChild(this.tradeInfoContainer), this.tradeInfoContainer = void 0)
        }
        playerRejectedOffer(e, t) {
            if (null != this.tradeInfoContainer)
                for (const a of this.offers)
                    if (a.offer.id == e) return void a.view.playerRejected(t)
        }
        playerAcceptedOffer(e, t) {
            if (null != this.tradeInfoContainer)
                for (const a of this.offers) a.offer.id == e && a.view.playerAccepted(t)
        }
        removeOffer(e) {
            for (const t of this.offers)
                if (t.offer.id == e) {
                    t.remove();
                    const e = this.offers.indexOf(t);
                    this.offers.splice(e, 1);
                    break
                } this.arrangeOffers()
        }
        arrangeOffers() {
            let e = this.playerAvatarContainer.y + this.playerAvatarContainer.height + this.uiGameManager.canvasController.margin;
            for (const t of this.offers) t.view.y = e, e += t.view.height;
            this.closeView()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewTradeInfoContainer = void 0;
    const i = a(17),
        o = a(19);
    class n extends i.SectionBgView {
        constructor() {
            const e = o.uiGameManager.canvasController,
                t = 6.5 * e.itemSize,
                a = t / 10;
            super(e.appW - e.chatWidth - t, 0, t, a, e.app.stage, !0)
        }
    }
    t.ViewTradeInfoContainer = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameTradeInfoOfferController = void 0;
    const i = a(439);
    t.UIGameTradeInfoOfferController = class {
        constructor(e, t, a) {
            this.uiGameManager = e, this.offer = a;
            const o = this.uiGameManager.gameState.myColor == a.creator;
            this.view = new i.ViewTradeInfoOffer(this.uiGameManager, t, a, o)
        }
        remove() {
            this.view.removeCardHover(), this.view.parent.removeChild(this.view)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewTradeInfoOffer = void 0;
    const i = a(6),
        o = a(118),
        n = a(440),
        r = a(441),
        s = a(442),
        c = a(17),
        l = a(7);
    class h extends c.SectionBgView {
        constructor(e, t, a, i) {
            const c = t.width,
                h = t.width / 10;
            super(0, 0, c, h, t, !0), this.uiGameManager = e, this.offer = a;
            const d = 7 * h / 2,
                u = 3 * h,
                g = a.getUILeftPlayer(this.uiGameManager.gameState.myColor),
                m = a.getOfferedResourcesForPlayer(this.uiGameManager.gameState.myColor);
            this.leftProposal = new n.ViewTradeProposal(this.uiGameManager, this, 0, d, this.height, g, m, !0);
            const p = a.getUIRightPlayers(this.uiGameManager.gameState.myColor),
                C = a.getWantedResourcesForPlayer(this.uiGameManager.gameState.myColor);
            if (i) {
                const e = u + d;
                this.creatorProposal = new s.ViewTradeInfoOfferCreatorProposal(this.uiGameManager, d, e, this.height, p, this, C, e => {
                    this.uiGameManager.socketGameSend.takeAcceptedOffer(a.id, e)
                }, () => {
                    this.uiGameManager.socketGameSend.rejectedOffer(a.id)
                })
            } else {
                this.rightProposal = new n.ViewTradeProposal(this.uiGameManager, this, d, d, this.height, p[0], C, !1);
                const e = a.getActionsOfPlayer(this.uiGameManager.gameState.myColor).allowedTradeActions,
                    t = (0, l.elementInArray)(e, o.OfferActions.Edit),
                    i = (0, l.elementInArray)(e, o.OfferActions.Reject),
                    s = (0, l.elementInArray)(e, o.OfferActions.Accept),
                    c = !this.amIParticipatingInTrade(a.creator, a.targets);
                new r.ViewTradeInfoOfferAction(this.uiGameManager, this, 2 * d, u, this.height, a, t, i, s, c)
            }
        }
        playerAccepted(e) {
            for (const t of this.leftProposal.playerAvatars) t.playerState.color == e && t.updatePlayerIcon(i.Loader.shared.resources.icon_check.texture);
            if (null != this.rightProposal)
                for (const t of this.rightProposal.playerAvatars) t.playerState.color == e && t.updatePlayerIcon(i.Loader.shared.resources.icon_check.texture);
            null != this.creatorProposal && this.creatorProposal.playerAccepted(e)
        }
        playerRejected(e) {
            for (const t of this.leftProposal.playerAvatars) t.playerState.color == e && t.updatePlayerIcon(i.Loader.shared.resources.icon_x.texture);
            if (null != this.rightProposal)
                for (const t of this.rightProposal.playerAvatars) t.playerState.color == e && t.updatePlayerIcon(i.Loader.shared.resources.icon_x.texture);
            null != this.creatorProposal && this.creatorProposal.playerRejected(e)
        }
        removeCardHover() {
            null != this.leftProposal && this.leftProposal.removeHover(), null != this.rightProposal && this.rightProposal.removeHover(), null != this.creatorProposal && this.creatorProposal.removeHover()
        }
        amIParticipatingInTrade(e, t) {
            if (this.uiGameManager.gameState.myColor == e) return !0;
            for (const e of t)
                if (this.uiGameManager.gameState.myColor == e) return !0;
            return !1
        }
    }
    t.ViewTradeInfoOffer = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewTradeProposal = void 0;
    const i = a(301),
        o = a(104),
        n = a(17),
        r = a(50);
    class s extends n.SectionBgView {
        constructor(e, t, a, n, s, c, l, h) {
            super(a, 0, n, s, t), this.uiGameManager = e, this.drawRoundedBg();
            const d = .8 * this.height,
                u = d / 1.3,
                g = d,
                m = h ? 0 : this.width - d,
                p = h ? m + d : m - g,
                C = h ? p + g : 0,
                y = h ? this.width - C : p,
                S = this.uiGameManager.gameState.getPlayerWithColor(c),
                v = new r.UIGamePlayerAvatarView(m, 0, d, this, S);
            v.centerYInParent(), this.playerAvatars = [], this.playerAvatars.push(v);
            new o.TradeArrowView(p, 0, g, this, !h, !0);
            this.cardStack = new i.ViewStackedCards(C, y, this.height, this, l, u)
        }
        removeHover() {
            null != this.cardStack && this.cardStack.removeHoverResourceInfoLabel()
        }
    }
    t.ViewTradeProposal = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewTradeInfoOfferAction = void 0;
    const i = a(6),
        o = a(17),
        n = a(62);
    class r extends o.SectionBgView {
        constructor(e, t, a, o, r, s, c, l, h, d) {
            super(a, 0, o, r, t, !0), this.uiGameManager = e;
            const u = i.Loader.shared.resources;
            if (this.buttonX = 0, this.createButton(c, u.icon_pencil.texture, () => {
                    this.uiGameManager.tradeController.editOffer(s)
                }), this.createButton(l, u.icon_x.texture, () => {
                    this.uiGameManager.socketGameSend.rejectedOffer(s.id)
                }), this.createButton(h, u.icon_check.texture, () => {
                    this.uiGameManager.socketGameSend.acceptedOffer(s.id)
                }), d) {
                const e = new n.SpriteButtonView(0, 0, this.height, this.height, this);
                e.addCenteredIcon(u.icon_hourglass.texture), e.inactivateOpacity()
            }
        }
        createButton(e, t, a) {
            if (!e) return;
            const i = new n.SpriteButtonView(this.buttonX, 0, this.height, this.height, this);
            i.addCenteredIcon(t), i.updateAction(a), this.buttonX += this.height
        }
    }
    t.ViewTradeInfoOfferAction = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ViewTradeInfoOfferCreatorProposal = void 0;
    const i = a(6),
        o = a(62),
        n = a(301),
        r = a(104),
        s = a(17),
        c = a(50);
    class l extends s.SectionBgView {
        constructor(e, t, a, i, o, s, c, l, h) {
            super(t, 0, a, i, s), this.uiGameManager = e, this.drawRoundedBg();
            const d = .8 * this.height,
                u = d / 1.3,
                g = d,
                m = o.length * d,
                p = this.width - m - d,
                C = p - g,
                y = C;
            new r.TradeArrowView(C, 0, g, this, !0);
            this.cardStack = new n.ViewStackedCards(0, y, this.height, this, c, u), this.playerAvatars = [], this.createPlayerAvatars(p, m, o, d, l), this.createRejectButton(p + m, d, h)
        }
        createRejectButton(e, t, a) {
            const n = i.Loader.shared.resources.icon_x.texture,
                r = this.height / 2 - t / 2,
                s = new o.SpriteButtonView(e, r, t, t, this);
            s.addCenteredIcon(n), s.updateAction(a)
        }
        createPlayerAvatars(e, t, a, i, o) {
            const n = new s.SectionBgView(e, 0, t, this.height, this);
            let r = 0;
            const l = n.height / 2 - i / 2;
            for (const e of a) {
                const t = this.uiGameManager.gameState.getPlayerWithColor(e),
                    a = new c.UIGamePlayerAvatarView(r, l, i, n, t);
                a.setClickAction(() => {
                    o(e)
                }), a.alpha = .5, r += a.width, this.playerAvatars.push(a)
            }
        }
        playerAccepted(e) {
            for (const t of this.playerAvatars)
                if (t.playerState.color == e) return t.updatePlayerIcon(i.Loader.shared.resources.icon_check.texture), void(t.alpha = 1)
        }
        playerRejected(e) {
            for (const t of this.playerAvatars)
                if (t.playerState.color == e) return t.updatePlayerIcon(i.Loader.shared.resources.icon_x.texture), void(t.alpha = .5)
        }
        removeHover() {
            null != this.cardStack && this.cardStack.removeHoverResourceInfoLabel()
        }
    }
    t.ViewTradeInfoOfferCreatorProposal = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCanvasController = void 0;
    const i = a(6),
        o = a(444),
        n = a(16),
        r = a(28),
        s = a(447),
        c = a(46),
        l = a(448),
        h = a(451);
    class d extends h.UICanvasController {
        constructor(e, t) {
            super(), this.uiGameManager = e, d.setInitialValues(), this.createPixiApplication(t), this.responsiveController = new s.UIGameResponsiveController(this.uiGameManager)
        }
        static setInitialValues() {
            null == c.StorageWrapper.getAntialias() && c.StorageWrapper.setAntialias(window.devicePixelRatio * window.innerWidth <= 2e3);
            const e = c.StorageWrapper.getResolution();
            null != e && 0 != e || c.StorageWrapper.setResolution(window.devicePixelRatio);
            const t = c.StorageWrapper.getPowerPreference();
            null != t && "" != t || c.StorageWrapper.setPowerPreference(c.StorageWrapper.PowerPreference.Low.toString());
            null == c.StorageWrapper.getAnimation() && c.StorageWrapper.setAnimation(!0)
        }
        createPixiApplication(e) {
            var t, a, s;
            i.utils.skipHello();
            const l = null !== (t = c.StorageWrapper.getAntialias()) && void 0 !== t && t,
                h = null !== (a = c.StorageWrapper.getResolution()) && void 0 !== a ? a : 1,
                d = null !== (s = c.StorageWrapper.getPowerPreference()) && void 0 !== s ? s : c.StorageWrapper.PowerPreference.Low.toString(),
                u = {
                    antialias: l,
                    resolution: h,
                    backgroundColor: r.GameColor.getColorHexValue(r.GameColor.Color.Sea),
                    powerPreference: d
                },
                g = !e && n.UIGameConstants.GAME_RENDERER_STATS;
            super.createPIXIApplication(u, g), e || (this.fps = new o, this.fps.div.style.display = "none")
        }
        builtGame() {
            return "block" == this.app.view.style.display
        }
        buildCanvas() {
            this.app.view.style.position = "absolute", this.app.view.style.display = "block"
        }
        buildDocument() {
            window.addEventListener("resize", () => {
                this.responsiveController.resizeScreen()
            }), document.body.style.backgroundColor = r.GameColor.getColor(r.GameColor.Color.Primary0), document.body.appendChild(this.app.view), document.body.style.overflow = "hidden", null != document.documentElement && (document.documentElement.style.overflow = "hidden")
        }
        buildGame() {
            this.builtGame() || (this.buildDocument(), this.buildCanvas(), this.responsiveController.buildRenderer(), this.responsiveController.resizeScreen(), this.setupGameContainers(), null != this.fps && (this.fps.div.style.display = "block"))
        }
        setupGameContainers() {
            super.setCanvasConfigVariables(), this.chatWidth = 4 * this.itemSize, this.popupWidth = 5 * this.itemSize, this.uiGameManager.chatController = new l.UIGameChatController(this.uiGameManager), this.kickOffAppLoading();
            let e = 0;
            this.app.ticker.add(() => {
                var t;
                e += .1, this.uiGameManager.eventController.gameTick(e), null === (t = this.fps) || void 0 === t || t.frame()
            })
        }
        kickOffAppLoading() {
            const e = new i.Container;
            this.uiGameManager.canvasController.app.stage.addChild(e), e.parent.removeChild(e)
        }
    }
    t.UIGameCanvasController = d
}, , , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameResponsiveController = void 0;
    const i = a(39),
        o = a(6);
    var n = a(3).GameStateEnums.UIGameEventEnums;
    class r {
        constructor(e) {
            this.uiGameManager = e
        }
        buildRenderer() {
            const e = this.getAppWnH();
            this.uiGameManager.canvasController.app.resize(e.w, e.h), this.uiGameManager.canvasController.app.view.style.top = "50%", this.uiGameManager.canvasController.app.view.style.transform = "translate(0%, -50%)"
        }
        resizeScreen() {
            r.showVerticalAds() ? this.uiGameManager.adController.showInGameAds() : this.uiGameManager.adController.hideInGameAds(), this.resizeCanvas()
        }
        resizeCanvas() {
            const e = this.getAppWnH();
            null == this.initialRatio && (this.initialRatio = e.w / e.h), this.uiGameManager.canvasController.app.view.style.width = e.w + "px", this.uiGameManager.canvasController.app.view.style.height = e.h + "px", this.uiGameManager.canvasController.app.view.style.left = this.getCanvasX() + "px", this.uiGameManager.eventController.sendEvent(void 0, n.CavasResized)
        }
        getCanvasY() {
            const e = this.uiGameManager.canvasController.app.view;
            return e.offsetTop - e.clientHeight / 2
        }
        getCanvasX() {
            const e = r.showVerticalAds() ? r.getInGameVerticalAdWidth() : 0;
            return e + (window.innerWidth - this.getAppWnH().w - 2 * e) / 2
        }
        static showVerticalAds() {
            return !!i.SocketController.session.userState.adsEnabled && (!o.utils.isMobile.phone && (window.innerWidth > 1500 || !(window.innerWidth < window.innerHeight)))
        }
        static showHorizontalAds() {
            return !!i.SocketController.session.userState.adsEnabled && !(window.innerHeight < 1e3)
        }
        getAppWnH() {
            const e = r.showVerticalAds() ? window.innerWidth - 2 * r.getInGameVerticalAdWidth() : window.innerWidth;
            let t = r.showHorizontalAds() ? window.innerHeight - r.getInGameHorizontalAdHeight() : window.innerHeight;
            return r.isDeviceHorizontalandHaveHomeIndicator() && (t -= 15), null == this.initialRatio ? e / t >= 15 / 11 ? {
                w: e,
                h: t
            } : {
                w: e,
                h: e / (15 / 11)
            } : e / t > this.initialRatio ? {
                w: t * this.initialRatio,
                h: t
            } : e / t < this.initialRatio ? {
                w: e,
                h: e / this.initialRatio
            } : {
                w: e,
                h: t
            }
        }
        static getInGameVerticalAdWidth() {
            return 165
        }
        canShowBottomAd() {
            return (window.innerHeight - this.getAppWnH().h) / 2 - 7.5 >= r.getInGameHorizontalAdHeight()
        }
        static getInGameHorizontalAdHeight() {
            return 90
        }
        static isDeviceHorizontalandHaveHomeIndicator() {
            const e = /iPhone/.test(navigator.userAgent) && !window.MSStream,
                t = window.screen.width / window.screen.height;
            return !(!e || "0.462" !== t.toFixed(3))
        }
    }
    t.UIGameResponsiveController = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameChatController = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(15),
        n = a(28),
        r = a(449),
        s = a(11),
        c = a(295),
        l = a(121),
        h = a(450),
        d = a(14),
        u = a(99);
    class g {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.view = new h.GameChatView, this.bindContainers(), this.bindSubmit()
        }
        onEvent(e, t) {
            switch (t) {
                case i.CavasResized:
                    this.resizeChatBox()
            }
        }
        bindSubmit() {
            this.view.formElement.onsubmit = e => {
                if (e.preventDefault(), "" != this.view.inputElement.value) {
                    if (!l.UIUtilsChat.canSendChat(this.view.inputElement.value)) return;
                    if (r.UIAjaxTournamentResult.sendTournamentData(this.view.inputElement.value, this.uiGameManager.gameState)) return;
                    u.SocketChat.sendChat(this.view.inputElement.value);
                    const e = l.UIUtilsChat.getDebugClientText(this.view.inputElement.value);
                    null != e && this.writeToChat(e, o.LobbyImage.Admin), this.view.inputElement.value = "", d.CA.sendEventSummed(d.CA.Type.General, d.CA.Category.Game, d.CA.Label.GameChatMessagesSent, i.GameEnd)
                }
            }
        }
        writeToChat(e, t) {
            l.UIUtilsChat.isMutedText(e) || (g.post(this.view.chatContainer, this.preventChatScrollUpdate, e, t, !0), s.Sound.playSound(s.Sound.SoundType.MessageNotification))
        }
        writeToLog(e, t) {
            g.post(this.view.logContainer, this.preventLogScrollUpdate, e, t, !1)
        }
        static post(e, t, a, i, o) {
            c.UIChatPost.post(e, a, i, t, n.GameColor.Color.Gray1, o)
        }
        resizeChatBox() {
            const e = parseFloat(this.uiGameManager.canvasController.app.view.style.width),
                t = parseFloat(this.uiGameManager.canvasController.app.view.style.height);
            this.view.resizeChatBox(e, t)
        }
        bindContainers() {
            this.view.logContainer.onmouseenter = () => this.preventLogScrollUpdate = !0, this.view.logContainer.onmouseleave = () => this.preventLogScrollUpdate = !1, this.view.chatContainer.onmouseleave = () => this.preventChatScrollUpdate = !1, this.view.chatContainer.onmouseenter = () => this.preventChatScrollUpdate = !0
        }
        getLogContainerHeight() {
            return this.view.getMainLogBlockHeight()
        }
    }
    t.UIGameChatController = g
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIAjaxTournamentResult = void 0;
    const i = a(3),
        o = a(33),
        n = a(49);
    class r {
        static sendTournamentData(e, t) {
            const a = "/logTournament";
            if (e.slice(0, a.length) !== a) return !1;
            if (t.currentTurnState != i.GameStateEnums.TurnStates.GameEnd) return o.UIPopupController.createSimplePopup("Error", "Can not log unfinished games. Contact your tournament host if there is a problem."), !0;
            const n = e.slice(a.length, e.length).trim(),
                r = [],
                s = [];
            for (const e of t.players) {
                r.push(e.username);
                const t = e.victoryPointState.totalPrivateVictoryPoints();
                s.push(t)
            }
            const c = {
                tournamentId: n,
                gameId: t.gameSettings.id,
                playerName: r,
                playerVP: s
            };
            return this.sendData(c), !0
        }
        static sendData(e) {
            n.UIAjaxWrapper.postRequest(this.GOOGLE_SHEET, void 0, JSON.stringify(e), e => {
                o.UIPopupController.createSimplePopup("Check", "Please check if the log has been recorded correctly: <a href="" + this.GOOGLE_SHEET_DATA + "" target="_blank">sheet</a>"), console.log(e)
            })
        }
    }
    t.UIAjaxTournamentResult = r, r.GOOGLE_SHEET = "https://script.google.com/macros/s/AKfycbwiyX1oFOgbvbcO2BJ7eGfLoJfZyKTYIrGzX8uQoRsBzIFHt8A/exec", r.GOOGLE_SHEET_DATA = "https://docs.google.com/spreadsheets/d/1dNC-0bc_7GcCs4U3j1YeKjbz_LvGM-RjN7I4NU8FsqY/edit#gid=0"
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GameChatView = void 0;
    const i = a(10),
        o = a(6),
        n = a(19);
    t.GameChatView = class {
        constructor() {
            this.INPUT_ELEMENT_HEIGHT = 27, this.GAME_BLOCK_PADDING = 20;
            const e = n.uiGameManager.canvasController,
                t = e.responsiveController.getCanvasX(),
                a = e.responsiveController.getCanvasY(),
                i = e.chatWidth,
                o = e.appH - 5.5 * e.itemSize;
            this.createLogs(), this.createChats(), this.resizeSize(i, o), this.resizePosition(t, a)
        }
        createLogs() {
            this.mainLogBlock = (0, i.createDivIn)(document.body, "main_block game_chat_block"), this.logContainer = (0, i.createDivIn)(this.mainLogBlock, "game_chat_text_div", "game-log-text"), this.mainLogBlock.style.position = "absolute"
        }
        createChats() {
            this.mainChatBlock = (0, i.createDivIn)(document.body, "main_block game_chat_block"), this.chatContainer = (0, i.createDivIn)(this.mainChatBlock, "game_chat_text_div", "game-chat-text"), this.createInputElement(this.mainChatBlock), this.mainChatBlock.style.position = "absolute"
        }
        createInputElement(e) {
            this.formElement = (0, i.createFormIn)(e, "", "game-chat-form"), this.inputElement = (0, i.createInputIn)(this.formElement, "form-control", "game-chat-input"), this.inputElement.type = "text", this.inputElement.autocomplete = "off", this.inputElement.placeholder = "Say Hello"
        }
        resizeChatBox(e, t) {
            const a = n.uiGameManager.canvasController,
                i = e / a.appW,
                o = t / a.appH,
                r = a.responsiveController.getCanvasX(),
                s = a.responsiveController.getCanvasY(),
                c = i * a.chatWidth,
                l = o * (a.appH - 5.5 * a.itemSize);
            this.resizeSize(c, l), this.resizePosition(r, s)
        }
        resizeSize(e, t) {
            let a = 1;
            o.utils.isMobile.phone && (a = .5), this.mainChatBlock.style.zoom = "" + a, this.mainLogBlock.style.zoom = "" + a;
            const i = n.uiGameManager.canvasController.margin;
            this.mainChatBlock.style.marginTop = i / a + "px";
            const r = t / a - 3 * i / a - this.INPUT_ELEMENT_HEIGHT - 2 * this.GAME_BLOCK_PADDING;
            this.chatContainer.style.height = .4 * r + "px", this.chatContainer.style.width = e / a - 2 * i / a - this.GAME_BLOCK_PADDING + "px", this.formElement.style.width = e / a - 2 * i / a - this.GAME_BLOCK_PADDING + "px", this.logContainer.style.height = .6 * r + "px", this.logContainer.style.width = e / a - 2 * i / a - this.GAME_BLOCK_PADDING + "px"
        }
        resizePosition(e, t) {
            const a = n.uiGameManager.canvasController.margin;
            this.mainLogBlock.style.right = e + a + "px", this.mainChatBlock.style.right = e + a + "px", this.mainLogBlock.style.top = t + a + "px", this.mainChatBlock.style.top = this.mainLogBlock.clientHeight + t + a + "px"
        }
        getMainLogBlockHeight() {
            return this.mainLogBlock.offsetHeight
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UICanvasController = void 0;
    const i = a(6),
        o = a(8),
        n = a(119),
        r = a(35);
    class s {
        constructor() {
            this.uiCanvasConfig = n.UICanvasConfig
        }
        createPIXIApplication(e, t) {
            i.utils.skipHello(), this.app = t ? new i.ApplicationDebug(e) : new i.Application(e), s.registerPixiInspector()
        }
        static registerPixiInspector() {
            if (r.UIUtilsEjsVariables.IS_PRODUCTION) return;
            const e = window.__PIXI_INSPECTOR_GLOBAL_HOOK__;
            null != e && (window.PIXI = o, e.register({
                PIXI: o
            }))
        }
        setCanvasConfigVariables() {
            n.UICanvasConfig.setCanvasConfigVariables(this.app)
        }
        get appW() {
            return this.uiCanvasConfig.appWidth
        }
        get appH() {
            return this.uiCanvasConfig.appHeight
        }
        get itemSize() {
            return this.uiCanvasConfig.itemSize
        }
        get margin() {
            return this.uiCanvasConfig.margin
        }
    }
    t.UICanvasController = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapController = void 0;
    const i = a(453),
        o = a(457),
        n = a(458),
        r = a(461),
        s = a(463),
        c = a(467),
        l = a(469),
        h = a(470);
    t.UIGameMapController = class {
        constructor(e) {
            this.uiGameManager = e;
            const t = this.uiGameManager.canvasController,
                a = t.appW - t.chatWidth,
                o = t.appH - t.itemSize;
            this.mapView = new r.UIGameMapView(0, 0, a, o, t.app), this.tileViews = [], this.highlightController = new i.UIMapHighlightController(this.uiGameManager)
        }
        disableInteraction() {
            this.mapView.disableInteraction()
        }
        enableInteraction() {
            this.mapView.enableInteraction()
        }
        createMap() {
            new h.UIGameMapViewBoudaries(this.uiGameManager), new o.UIGameMapRobberController(this.uiGameManager), new s.UIGameGeneralTileController(this.uiGameManager), new c.UIGameMapPortController(this.uiGameManager), new l.UIGameMapCornerController(this.uiGameManager), new n.UIGameMapEdgeController(this.uiGameManager), this.mapView.sortChildren()
        }
        worldToScreenPoint(e) {
            return this.mapView.toScreen(e)
        }
        getTileViewForHexFace(e) {
            for (const t of this.tileViews)
                if (t.hexFace.sameFace(e)) return t
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIMapHighlightController = void 0;
    const i = a(303),
        o = a(6),
        n = a(454),
        r = a(3),
        s = a(7);
    var c = r.GameStateEnums.ActionStates,
        l = r.GameStateEnums.UIGameEventEnums;
    t.UIMapHighlightController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.highlightViews = [], this.roadEdges = [], this.shipEdges = [], this.corners = [], this.tiles = [], this.buttonScaleForMobile = o.utils.isMobile.phone ? 1.75 : 1, this.confirmActionController = new n.UIConfirmActionController(this.uiGameManager)
        }
        onEvent(e, t) {
            switch (t) {
                case l.SetRoadEdgeHighlight:
                    this.setRoadEdges(e);
                    break;
                case l.SetShipEdgeHighlight:
                    this.setShipEdges(e);
                    break;
                case l.SetCornerHighlight:
                    this.setCorners(e);
                    break;
                case l.SetTileHighlight:
                    this.setTiles(e)
            }
        }
        onGameTick(e) {
            this.animateCircles(e)
        }
        setRoadEdges(e) {
            this.roadEdges = e, this.updateHighlights()
        }
        setShipEdges(e) {
            this.shipEdges = e, this.updateHighlights()
        }
        setCorners(e) {
            this.corners = e, this.updateHighlights()
        }
        setTiles(e) {
            this.tiles = this.tiles.concat(e), 0 == e.length && (this.tiles = []), this.updateHighlights()
        }
        removeHighlights() {
            for (const e of this.highlightViews) this.uiGameManager.mapController.mapView.removeChild(e);
            this.highlightViews = [], this.confirmActionController.cleanupConfirmation()
        }
        updateHighlights() {
            this.removeHighlights(), (this.roadEdges.length || this.corners.length || this.tiles.length || this.shipEdges.length) && this.confirmActionController.setupInvisibleBackground();
            for (const e of this.roadEdges)(0, s.elementInArray)(this.shipEdges, e) ? this.highlightEdgeForRoadOrShip(this.uiGameManager.gameState.mapState.tileState.tileEdges[e].hexEdge, e) : this.highlightEdge(this.uiGameManager.gameState.mapState.tileState.tileEdges[e].hexEdge, e);
            for (const e of this.shipEdges)(0, s.elementInArray)(this.roadEdges, e) || this.highlightEdge(this.uiGameManager.gameState.mapState.tileState.tileEdges[e].hexEdge, e);
            for (const e of this.corners) this.highlightCorner(this.uiGameManager.gameState.mapState.tileState.tileCorners[e].hexCorner, e);
            for (const e of this.tiles) this.highlightTile(this.uiGameManager.gameState.mapState.tileState.tiles[e].hexFace, e);
            this.highlightViews.length > 0 && this.startAnimation()
        }
        highlight(e, t, a, o) {
            const n = new i.UIGameMapHighlightView(this.uiGameManager, e, t, a, this.uiGameManager.mapController.mapView, o);
            this.highlightViews.push(n)
        }
        startAnimation() {
            this.uiGameManager.eventController.registerUIGameAnimation(this)
        }
        endAnimation() {
            this.uiGameManager.eventController.unregisterUIGameAnimation(this)
        }
        animateCircles(e) {
            this.highlightViews.length <= 0 && this.endAnimation();
            for (const t of this.highlightViews) t.animate(e)
        }
        highlightTile(e, t) {
            const a = this.uiGameManager.mapController.mapView.getTileLeftCenterCircle(e),
                i = 2.5 * a.radius;
            this.highlight(a.x - i / 2, a.y - i / 2, i, () => {
                const e = .7 * i * this.buttonScaleForMobile,
                    o = a.x - e / 2,
                    n = a.y + i / 2;
                this.uiGameManager.gameState.currentActionState != c.SelectKnightAction ? this.confirmActionController.showConfirmation(a.x - i / 2, a.y - i / 2, i, o, n, e, () => {
                    this.uiGameManager.socketGameSend.selectedTile(t)
                }) : this.uiGameManager.socketGameSend.selectedTile(t)
            })
        }
        highlightCorner(e, t) {
            const a = e.toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                i = 1.2 * this.uiGameManager.mapController.mapView.cornerCircleR;
            this.highlight(a.x - i / 2, a.y - i / 2, i, () => {
                if (this.uiGameManager.gameState.currentTurnState === r.GameStateEnums.TurnStates.GameSetup) {
                    const e = 1.1 * i * this.buttonScaleForMobile,
                        o = a.x - e / 2,
                        n = a.y + i / 2;
                    this.confirmActionController.showConfirmation(a.x - i / 2, a.y - i / 2, i, o, n, e, () => {
                        this.confirmedCornerSelection(t)
                    })
                } else this.confirmedCornerSelection(t)
            })
        }
        confirmedCornerSelection(e) {
            switch (this.uiGameManager.gameState.currentActionState) {
                case c.PlaceCityWithDiscount:
                case c.PlaceCity:
                    this.uiGameManager.socketGameSend.confirmBuildCity(e);
                    break;
                case c.PlaceSettlement:
                case c.GameSetupPlaceSettlement:
                    this.uiGameManager.socketGameSend.confirmBuildSettlement(e);
                    break;
                case c.GameSetupPlaceCity:
                    this.uiGameManager.socketGameSend.confirmBuildCity(e);
                    break;
                case c.PlaceCityWall:
                case c.PlaceCityWallForFree:
                    this.uiGameManager.socketGameSend.confirmBuildCityWall(e);
                    break;
                case c.PlaceKnightForFree:
                case c.PlaceKnight:
                    this.uiGameManager.socketGameSend.confirmPlaceKnight(e);
                    break;
                case c.UpgradeKnightForFree:
                case c.UpgradeKnight:
                    this.uiGameManager.socketGameSend.confirmUpgradeKnight(e);
                    break;
                case c.ActivateKnight:
                    this.uiGameManager.socketGameSend.confirmActivateKnight(e);
                    break;
                case c.PlaceMetropolis:
                    this.uiGameManager.socketGameSend.confirmPlaceMetropolis(e);
                    break;
                case c.SelectCityToPillage:
                    this.uiGameManager.socketGameSend.confirmPillageCity(e);
                    break;
                case c.SelectKnightToTakeAction:
                    this.uiGameManager.socketGameSend.confirmSelectKnightToTakeAction(e);
                    break;
                case c.SelectKnightAction:
                    this.uiGameManager.socketGameSend.confirmMoveKnight(e);
                    break;
                case c.MoveKnightOffTurn:
                    this.uiGameManager.socketGameSend.confirmMoveKnightOffTurn(e);
                    break;
                case c.SelectKnightToRemove:
                case c.IntrigueSelectKnightToMove:
                    this.uiGameManager.socketGameSend.confirmRemoveKnight(e)
            }
        }
        highlightEdge(e, t) {
            const a = e.endPoints()[0].toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                i = e.endPoints()[1].toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                o = Math.sqrt(Math.abs(a.x - i.x) * Math.abs(a.x - i.x) + Math.abs(a.y - i.y) * Math.abs(a.y - i.y)) / 2,
                n = (a.x + i.x) / 2 - o / 2,
                s = (a.y + i.y) / 2 - o / 2;
            this.highlight(n, s, o, () => {
                if (this.uiGameManager.gameState.currentTurnState === r.GameStateEnums.TurnStates.GameSetup) {
                    const e = 1.1 * o * this.buttonScaleForMobile,
                        r = (a.x + i.x) / 2 - e / 2,
                        c = (a.y + i.y) / 2 + o / 2;
                    this.confirmActionController.showConfirmation(n, s, o, r, c, e, () => {
                        this.confirmedEdgeSelection(t)
                    })
                } else this.confirmedEdgeSelection(t)
            })
        }
        confirmedEdgeSelection(e) {
            switch (this.uiGameManager.gameState.currentActionState) {
                case c.PlaceRoad:
                case c.PlaceRoadForFree:
                    this.uiGameManager.socketGameSend.confirmBuildRoad(e);
                    break;
                case c.GameSetupRoadPlacement:
                    this.uiGameManager.socketGameSend.confirmBuildRoad(e), this.uiGameManager.socketGameSend.confirmBuildShip(e);
                    break;
                case c.Place2MoreRoadBuilding:
                case c.Place1MoreRoadBuilding:
                    this.uiGameManager.socketGameSend.confirmBuildRoad(e), this.uiGameManager.socketGameSend.confirmBuildShip(e);
                    break;
                case c.PlaceShip:
                case c.PlaceShipForFree:
                    this.uiGameManager.socketGameSend.confirmBuildShip(e);
                    break;
                case c.SelectShipToMove:
                    this.uiGameManager.socketGameSend.selectedShipToMove(e);
                    break;
                case c.MoveShip:
                    this.uiGameManager.socketGameSend.confirmMoveShip(e);
                    break;
                case c.SelectRoadToRemove:
                    this.uiGameManager.socketGameSend.confirmRemoveRoad(e)
            }
        }
        highlightEdgeForRoadOrShip(e, t) {
            const a = e.endPoints()[0].toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                i = e.endPoints()[1].toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                o = Math.sqrt(Math.abs(a.x - i.x) * Math.abs(a.x - i.x) + Math.abs(a.y - i.y) * Math.abs(a.y - i.y)) / 2,
                n = (a.x + i.x) / 2 - o / 2,
                r = (a.y + i.y) / 2 - o / 2;
            this.highlight(n, r, o, () => {
                const e = 1.1 * o,
                    s = (a.x + i.x) / 2 - e / 2,
                    c = (a.y + i.y) / 2 + e / 2;
                this.confirmActionController.showRoadShipConfirmation(n, r, o, s, c, e, t)
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIConfirmActionController = void 0;
    const i = a(26),
        o = a(62),
        n = a(23),
        r = a(303),
        s = a(455),
        c = a(456);
    t.UIConfirmActionController = class {
        constructor(e) {
            this.uiGameManager = e
        }
        setupInvisibleBackground() {
            this.removeInvisibleBackground(), this.invisibleBackground = new c.UIInvisibleBackgroundView(-this.uiGameManager.mapController.mapView.worldWidth, -this.uiGameManager.mapController.mapView.worldHeight, 2 * this.uiGameManager.mapController.mapView.worldWidth, 2 * this.uiGameManager.mapController.mapView.worldHeight, this.uiGameManager.mapController.mapView, () => {
                this.removeButtons()
            }), this.invisibleBackground.drawBg()
        }
        showConfirmation(e, t, a, i, o, n, r) {
            this.removeButtons(), this.highlightWhite(e, t, a), this.confirmButton = new s.UIConfirmationButton(i, o, n, n, this.uiGameManager.mapController.mapView, () => {
                this.cleanupConfirmation(), r()
            })
        }
        showRoadShipConfirmation(e, t, a, r, c, l, h) {
            this.removeButtons(), this.highlightWhite(e, t, a);
            const d = 1.5 * l,
                u = n.GameUIImages.getRoadForPlayer(this.uiGameManager.gameState.myColor);
            this.roadButton = new o.SpriteButtonView(r + .5 * l - d, c - l - d, d, d, this.uiGameManager.mapController.mapView), this.roadButton.addCenteredIcon(u);
            const g = n.GameUIImages.getShipForPlayer(this.uiGameManager.gameState.myColor, i.HexShapeEnums.EdgeVariables.NorthWest);
            this.shipButton = new o.SpriteButtonView(r + .5 * l, c - l - d, d, d, this.uiGameManager.mapController.mapView), this.shipButton.addCenteredIcon(g), this.roadButton.updateAction(() => {
                null != this.roadButton && null != this.shipButton && (this.removeConfirmButton(), this.roadButton.highlight(), this.shipButton.removeHighlight(), this.confirmButton = new s.UIConfirmationButton(r, c, l, l, this.uiGameManager.mapController.mapView, () => {
                    this.cleanupConfirmation(), this.uiGameManager.socketGameSend.confirmBuildRoad(h)
                }))
            }), this.shipButton.updateAction(() => {
                null != this.roadButton && null != this.shipButton && (this.removeConfirmButton(), this.shipButton.highlight(), this.roadButton.removeHighlight(), this.confirmButton = new s.UIConfirmationButton(r, c, l, l, this.uiGameManager.mapController.mapView, () => {
                    this.cleanupConfirmation(), this.uiGameManager.socketGameSend.confirmBuildShip(h)
                }))
            })
        }
        cleanupConfirmation() {
            this.removeInvisibleBackground(), this.removeButtons()
        }
        removeButtons() {
            this.removeWhiteHighlight(), this.removeConfirmButton(), this.removeRoadButtons(), this.removeShipButton()
        }
        highlightWhite(e, t, a) {
            this.whiteHighlightView = new r.UIGameMapHighlightView(this.uiGameManager, e, t, a, this.uiGameManager.mapController.mapView, () => this.removeButtons(), !0), this.uiGameManager.mapController.highlightController.highlightViews.push(this.whiteHighlightView)
        }
        removeConfirmButton() {
            null != this.confirmButton && (this.uiGameManager.mapController.mapView.removeChild(this.confirmButton), this.confirmButton = void 0)
        }
        removeWhiteHighlight() {
            null != this.whiteHighlightView && (this.uiGameManager.mapController.mapView.removeChild(this.whiteHighlightView), this.whiteHighlightView = void 0)
        }
        removeInvisibleBackground() {
            null != this.invisibleBackground && (this.uiGameManager.mapController.mapView.removeChild(this.invisibleBackground), this.invisibleBackground = void 0)
        }
        removeRoadButtons() {
            null != this.roadButton && (this.uiGameManager.mapController.mapView.removeChild(this.roadButton), this.roadButton = void 0)
        }
        removeShipButton() {
            null != this.shipButton && (this.uiGameManager.mapController.mapView.removeChild(this.shipButton), this.shipButton = void 0)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIConfirmationButton = void 0;
    const i = a(6),
        o = a(62);
    class n extends o.SpriteButtonView {
        constructor(e, t, a, o, n, r) {
            super(e, t, a, o, n), this.addCenteredIcon(i.Loader.shared.resources.icon_check.texture), this.updateAction(r)
        }
    }
    t.UIConfirmationButton = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIInvisibleBackgroundView = void 0;
    const i = a(27),
        o = a(6);
    class n extends i.SectionView {
        constructor(e, t, a, i, o, n) {
            super(e, t, a, i, o), this.setClickAction(n)
        }
        setClickAction(e) {
            this.interactive || (this.interactive = !0), this.on("click", () => {
                e()
            }), this.on("tap", () => {
                e()
            })
        }
        drawBg() {
            this.bg = new o.Graphics, this.bg.beginFill(0, .01), this.bg.drawRoundedRect(0, 0, this.width, this.height, 5), this.bg.endFill(), this.addChild(this.bg)
        }
    }
    t.UIInvisibleBackgroundView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapRobberController = void 0;
    const i = a(6),
        o = a(21);
    var n = o.TileEnums.TilePieceTypes;
    const r = a(26);
    var s = a(3).GameStateEnums.UIGameEventEnums;
    const c = a(83);
    t.UIGameMapRobberController = class {
        constructor(e) {
            this.uiGameManager = e;
            const t = this.uiGameManager.gameState.mapState.tileState.getTileWithPiece(n.Robber);
            if (null == t) return;
            this.lastRobberTile = t;
            const a = this.getRobberCoords(this.lastRobberTile),
                o = i.Loader.shared.resources.icon_robber_santa.texture;
            this.robberView = new c.MovingSpriteView(a.x, a.y, this.uiGameManager.mapController.mapView.robberRadius, this.uiGameManager.mapController.mapView.robberRadius, this.uiGameManager.mapController.mapView, o), this.robberView.zIndex = this.uiGameManager.mapController.mapView.layers.robber, this.robberView.animationController.animationCompleteCallBack = () => {
                this.robberView.zIndex = this.uiGameManager.mapController.mapView.layers.robber, this.uiGameManager.mapController.mapView.sortChildren()
            }, this.uiGameManager.eventController.registerUIGameMechanic(this)
        }
        onEvent(e, t) {
            switch (t) {
                case s.MapStateUpdated:
                    this.updateRobber()
            }
        }
        updateRobber() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tiles)
                if (e.tilePieceTypes == o.TileEnums.TilePieceTypes.Robber) return void this.moveRobber(e)
        }
        moveRobber(e) {
            if (e.sameTileHex(this.lastRobberTile)) return;
            this.robberView.zIndex = this.uiGameManager.mapController.mapView.layers.topLayer, this.uiGameManager.mapController.mapView.sortChildren();
            const t = this.getRobberCoords(e);
            this.robberView.animationController.animateTo(t), this.lastRobberTile = e, this.uiGameManager.eventController.sendEvent(void 0, s.RobberMoved)
        }
        getRobberCoords(e) {
            const t = e.hexFace.toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                a = t.x - 1.2 * this.uiGameManager.mapController.mapView.robberRadius,
                i = t.y - .7 * this.uiGameManager.mapController.mapView.robberRadius;
            return new r.Point(a, i)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapEdgeController = void 0;
    const i = a(21);
    var o = i.TileEnums.EdgeTypes;
    const n = a(459),
        r = a(460),
        s = a(7);
    var c = a(3).GameStateEnums.UIGameEventEnums;
    t.UIGameMapEdgeController = class {
        constructor(e) {
            this.roadViews = [], this.shipViews = [], this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.updateEdges()
        }
        onEvent(e, t) {
            switch (t) {
                case c.MapStateUpdated:
                    this.updateEdges()
            }
        }
        updateEdges() {
            this.updateMovedShips(), this.updateRemovedRoads();
            for (const e of this.uiGameManager.gameState.mapState.tileState.tileEdges) e.type != o.Empty && (this.edgeExists(e) || this.shipEdgeExists(e) || this.drawEdge(e))
        }
        edgeExists(e) {
            for (const t of this.roadViews)
                if (t.edge.sameEdge(e)) return !0;
            return !1
        }
        shipEdgeExists(e) {
            for (const t of this.shipViews)
                if (t.edge.sameEdge(e)) return !0;
            return !1
        }
        updateRemovedRoads() {
            for (const e of this.roadViews) {
                e.edge.type == o.Empty && (e.removeView(), (0, s.removeElementFromArray)(this.roadViews, e))
            }
        }
        updateMovedShips() {
            for (const e of this.shipViews) {
                e.edge.type == o.Empty && (e.removeView(), (0, s.removeElementFromArray)(this.shipViews, e))
            }
        }
        drawEdge(e) {
            if (e.type == i.TileEnums.EdgeTypes.Road) {
                const t = new n.UIGameMapRoadView(e, this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight, this.uiGameManager.mapController.mapView.layers.mapEdgePieces, this.uiGameManager.mapController.mapView);
                this.roadViews.push(t), t.executeStartAnimation(), this.uiGameManager.mapController.mapView.sortChildren()
            }
            if (e.type == i.TileEnums.EdgeTypes.Ship) {
                const t = new r.UIGameMapShipView(this.uiGameManager, e, this.uiGameManager.mapController.mapView);
                this.shipViews.push(t), t.executeStartAnimation(), this.uiGameManager.mapController.mapView.sortChildren()
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapRoadView = void 0;
    const i = a(26),
        o = a(23);
    var n = i.HexShapeEnums.EdgeVariables;
    const r = a(83);
    t.UIGameMapRoadView = class {
        constructor(e, t, a, n, s) {
            this.edge = e;
            const c = o.GameUIImages.getRoadForPlayer(e.owner),
                l = a / 2,
                h = a / 2,
                d = e.hexEdge.centerPointToPixel(t, a / 2);
            this.point = new i.Point(d.x - h / 2, d.y - l / 2);
            const u = new i.Point(this.point.x, this.point.y - a);
            this.view = new r.MovingSpriteView(u.x, u.y, h, l, s, c), this.view.zIndex = n, this.rotate(e.hexEdge.z)
        }
        rotate(e) {
            switch (e) {
                case n.SouthWest:
                    this.view.rotate(-60);
                    break;
                case n.NorthWest:
                    this.view.rotate(60);
                    break;
                case n.West:
                    return
            }
            this.point.x += this.view.width / 2, this.point.y += this.view.height / 2
        }
        executeStartAnimation() {
            this.view.animationController.animateTo(this.point)
        }
        removeView() {
            null != this.view.parent && this.view.parent.removeChild(this.view)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapShipView = void 0;
    const i = a(26);
    var o = i.HexShapeEnums.EdgeVariables;
    const n = a(23),
        r = a(20),
        s = a(83),
        c = a(3);
    t.UIGameMapShipView = class {
        constructor(e, t, a) {
            this.uiGameManager = e;
            const o = this.uiGameManager.mapController.mapView,
                r = o.hexagonHeight;
            this.edge = t;
            const c = n.GameUIImages.getShipForPlayer(t.owner, t.hexEdge.z),
                l = r / 2,
                h = r / 2,
                d = t.hexEdge.centerPointToPixel(o.mapCenter, r / 2);
            this.point = new i.Point(d.x - h / 2, d.y - l / 2);
            const u = new i.Point(this.point.x, this.point.y - r),
                g = l / 2 * 1.15,
                m = c.width / c.height * g;
            this.view = new s.MovingSpriteView(u.x, u.y, m, g, a, c), this.setShipLayer(), this.positionShipForEdge(t.hexEdge.z)
        }
        positionShipForEdge(e) {
            switch (e) {
                case o.NorthWest:
                    this.point.x += .5 * this.view.width, this.point.y += .15 * this.view.height;
                    break;
                case o.West:
                    this.view.width *= .95, this.view.height *= .95, this.point.x += .78 * this.view.width, this.point.y += .38 * this.view.height;
                    break;
                case o.SouthWest:
                    this.point.x += .55 * this.view.width, this.point.y += .17 * this.view.height
            }
            this.view.x = this.point.x
        }
        executeStartAnimation() {
            this.view.animationController.animateTo(this.point)
        }
        removeView() {
            null != this.view.parent && this.view.parent.removeChild(this.view)
        }
        setShipLayer() {
            const e = this.uiGameManager.mapController.mapView.layers.mapEdgePieces,
                t = this.uiGameManager.mapController.mapView.layers.mapCornerPieces + .5;
            this.view.zIndex = this.isShipPlacedOnWestEdgeAndBelowCornerBuilding() ? t : e
        }
        isShipPlacedOnWestEdgeAndBelowCornerBuilding() {
            if (this.edge.hexEdge.z != o.West) return !1;
            for (const e of this.edge.hexEdge.endPoints()) {
                if (e.y >= this.edge.hexEdge.y) continue;
                const t = this.uiGameManager.gameState.mapState.tileState.getTileCorner(e);
                if (null != t && (!c.GameStateEnums.GameConstants.isCornerBuildingKnight(t.buildingType) && t.owner != r.PlayerColors.None)) return !0
            }
            return !1
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapView = void 0;
    const i = a(6),
        o = a(145),
        n = a(17),
        r = a(462);
    class s extends o.Viewport {
        constructor(e, t, a, i, o) {
            super({
                screenWidth: a,
                screenHeight: i,
                interaction: o.plugins.interaction,
                divWheel: o.view
            });
            new n.SectionBgView(e, t, a, i, this);
            o.stage.addChild(this), this.drag().pinch().wheel().decelerate(), this.initMapSizes(), this.layers = new r.UIGameMapViewLayers
        }
        initMapSizes() {
            this.hexagonHeight = this.height / 5.3, this.hexagonWidth = this.hexagonHeight / 2 * Math.sqrt(3), this.robberRadius = this.hexagonHeight / 3, this.pirateRadius = this.hexagonHeight / 3, this.merchantRadius = this.hexagonHeight / 4.7, this.cornerCircleR = this.hexagonHeight / 5.2
        }
        disableInteraction() {
            this.plugins.pause("drag"), this.plugins.pause("pinch"), this.plugins.pause("wheel"), this.plugins.pause("decelerate"), this.plugins.pause("clamp"), this.plugins.pause("clampZoom")
        }
        enableInteraction() {
            this.plugins.resume("drag"), this.plugins.resume("pinch"), this.plugins.resume("wheel"), this.plugins.resume("decelerate"), this.plugins.resume("clamp"), this.plugins.resume("clampZoom")
        }
        getTileLeftCenterCircle(e) {
            const t = e.toPixel(this.mapCenter, this.hexagonHeight / 2);
            return new i.Circle(t.x, t.y - this.hexagonHeight / 6, this.hexagonHeight / 6)
        }
    }
    t.UIGameMapView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapViewLayers = void 0;
    t.UIGameMapViewLayers = class {
        constructor() {
            this.bottomLayer = 0, this.mapTiles = 1, this.ports = 2, this.pirate = 3, this.mapEdgePieces = 4, this.mapCityWall = 5, this.mapCornerPieces = 6, this.mapCornerKnightPieces = 7, this.robber = 8, this.metropolis = 9, this.chits = 10, this.topLayer = 11
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameGeneralTileController = void 0;
    const i = a(304),
        o = a(466);
    var n = a(3).GameStateEnums.UIGameEventEnums;
    class r extends i.UIGameBaseTileController {
        constructor(e) {
            super(e), this.uiGameManager.eventController.registerUIGameMechanic(this), this.tilesToHighlight = [], this.drawTiles(), new o.UIGameGeneralShoreTileController(this.uiGameManager)
        }
        onEvent(e, t) {
            switch (t) {
                case n.DiceStateUpdated:
                    this.rolledTile();
                    break;
                case n.MapStateUpdated:
                    this.updateDiceProbabilities()
            }
        }
        drawTiles() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tiles) {
                const t = this.drawTile(e);
                this.uiGameManager.mapController.tileViews.push(t)
            }
        }
        rolledTile() {
            this.uiGameManager.gameState.diceThrown && (this.updateTilesToHighlight(), this.animateTiles())
        }
        updateTilesToHighlight() {
            const e = this.uiGameManager.gameState.lastDice1 + this.uiGameManager.gameState.lastDice2;
            for (const t of this.uiGameManager.gameState.mapState.tileState.tiles) {
                if (t.diceNumber != e) continue;
                const a = this.uiGameManager.mapController.getTileViewForHexFace(t.hexFace);
                null != a && this.tilesToHighlight.push(a)
            }
        }
        animateTiles() {
            for (const e of this.tilesToHighlight) e.highlightTileForTime(2);
            this.tilesToHighlight = []
        }
        updateDiceProbabilities() {
            const e = this.getTileViewsUpdatingDiceProbabilites();
            0 != e.length && (2 != e.length ? this.redrawDiceProbability(e) : this.animateDiceNumbersSwapping(e))
        }
        getTileViewsUpdatingDiceProbabilites() {
            const e = [];
            for (const t of this.uiGameManager.gameState.mapState.tileState.tiles) {
                const a = this.uiGameManager.mapController.getTileViewForHexFace(t.hexFace);
                null != a && (a.diceNumber != t.diceNumber && e.push(a))
            }
            return e
        }
        animateDiceNumbersSwapping(e) {
            if (2 != e.length) return;
            const t = e[0].probabilityView,
                a = e[1].probabilityView;
            if (null == t) return;
            if (null == a) return;
            const i = e[0].getDiceProbabilityMapPoint();
            if (null == i) return;
            const o = e[1].getDiceProbabilityMapPoint();
            if (null == o) return;
            const n = e[0].diceNumber;
            if (null == n) return;
            const r = e[1].diceNumber;
            null != r && (this.animateDiceProbability(t, i, o, n, e[1]), this.animateDiceProbability(a, o, i, r, e[0]))
        }
        animateDiceProbability(e, t, a, i, o) {
            null != e.parent && e.parent.removeChild(e), this.uiGameManager.mapController.mapView.addChild(e), e.x = t.x, e.y = t.y, e.animationController.animationCompleteCallBack = () => {
                null != e.parent && e.parent.removeChild(e), o.drawProbability(i)
            }, e.animationController.animateTo(a)
        }
        redrawDiceProbability(e) {
            for (const t of e) {
                const e = this.uiGameManager.gameState.mapState.tileState.getTileHex(t.hexFace);
                null != e && t.drawProbability(e.diceNumber)
            }
        }
    }
    t.UIGameGeneralTileController = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapDiceProbabilityView = void 0;
    const i = a(26),
        o = a(306),
        n = a(13),
        r = a(465);
    class s extends o.MovingSectionView {
        constructor(e, t, a, o, s, c, l) {
            super(e, t, a, o, c), this.size = a, this.center = new i.Point(e + this.size / 2, t + this.size / 2), this.diceProbabilityView = new n.SpriteView(0, 0, this.width, this.height, this, l);
            const h = .01 * -this.width,
                d = .01 * -this.height,
                u = .96 * a;
            this.highlightDiceView = new r.UIGameMapDiceHighlightView(h, d, u, this), this.highlightDiceView.hide(), this.hexFace = s
        }
        highlight() {
            this.highlightDiceView.show()
        }
        removeHighlight() {
            this.highlightDiceView.hide()
        }
        setClickAction(e) {
            this.diceProbabilityView.setClickAction(() => {
                e(this)
            })
        }
        removeClickAction() {
            this.diceProbabilityView.removeAllListeners()
        }
        resetSize() {
            this.animate(this.size)
        }
        animate(e) {
            const t = this.getAnimationSize(e);
            this.scale.x = t / this.size, this.scale.y = t / this.size, this.x = this.center.x - t / 2, this.y = this.center.y - t / 2
        }
        getAnimationSize(e) {
            const t = 1 + .1 * Math.sin(.5 * e);
            return this.size * t
        }
    }
    t.UIGameMapDiceProbabilityView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapDiceHighlightView = void 0;
    const i = a(26),
        o = a(13),
        n = a(6);
    class r extends o.SpriteView {
        constructor(e, t, a, o) {
            super(e, t, a, a, o, n.Loader.shared.resources.icon_highlight_square_yellow.texture), this.originalParent = o, this.size = a, this.center = new i.Point(e + a / 2, t + a / 2)
        }
        hide() {
            null != this.parent && this.parent.removeChild(this)
        }
        show() {
            null == this.parent && this.originalParent.addChild(this)
        }
        setActiveTexture() {
            this.texture = n.Loader.shared.resources.icon_highlight_square_white.texture
        }
        setInactiveTexture() {
            this.texture = n.Loader.shared.resources.icon_highlight_square_yellow.texture
        }
    }
    t.UIGameMapDiceHighlightView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameGeneralShoreTileController = void 0;
    const i = a(307);
    class o extends i.UIGameBaseShoreTileController {
        constructor(e) {
            super(e), this.shoreHexes = [], this.findShoreHexes(), this.drawShore()
        }
        findShoreHexes() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tiles)
                if (e.isTileLand())
                    for (const t of e.hexFace.neighbors()) this.isNeighborLand(t) || this.isNeighborFog(t) || this.isNeighborShore(t) || this.shoreHexes.push(t)
        }
        drawShore() {
            for (const e of this.shoreHexes) {
                const t = this.getTextureAndAngle(e);
                this.drawShoreTile(e, t.texture, t.angle)
            }
        }
        isNeighborShore(e) {
            for (const t of this.shoreHexes)
                if (t.x == e.x && t.y == e.y) return !0;
            return !1
        }
    }
    t.UIGameGeneralShoreTileController = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapPortController = void 0;
    const i = a(23),
        o = a(13),
        n = a(6),
        r = a(468);
    class s {
        constructor(e) {
            this.uiGameManager = e, this.drawPorts()
        }
        drawPorts() {
            for (const e of this.uiGameManager.gameState.mapState.portState.portEdges)
                for (const t of e.hexEdge.touchingFaces()) {
                    const a = this.uiGameManager.gameState.mapState.tileState.getTileHex(t);
                    null != a && a.isTileLand() || this.drawPort(t, e)
                }
        }
        drawPort(e, t) {
            const a = i.GameUIImages.getPortImage(t.portType);
            if (null == a) return;
            const n = e.toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2);
            this.drawPier(t.hexEdge.endPoints()[0].toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2), n), this.drawPier(t.hexEdge.endPoints()[1].toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2), n);
            const s = this.uiGameManager.mapController.mapView.hexagonHeight / 2,
                c = n.x - s / 2 - .1 * s,
                l = n.y - s / 2 - .3 * s,
                h = new o.SpriteView(c, l, s, s, this.uiGameManager.mapController.mapView, a);
            h.zIndex = this.uiGameManager.mapController.mapView.layers.ports, h.setTip(r.TipsPort.title(t.portType), [r.TipsPort.body(t.portType)])
        }
        drawPier(e, t) {
            const a = e.x - t.x,
                i = e.y - t.y,
                r = 80 * this.uiGameManager.mapController.mapView.hexagonHeight / 100 / 8,
                c = 240 * this.uiGameManager.mapController.mapView.hexagonHeight / 100 / 8,
                l = e.x - a / 3 - r / 2,
                h = e.y - i / 3 - c / 2,
                d = new o.SpriteView(l, h, r, c, this.uiGameManager.mapController.mapView, n.Loader.shared.resources.port_pier.texture);
            d.zIndex = this.uiGameManager.mapController.mapView.layers.mapTiles, d.rotate(s.getPierAngle(a, i))
        }
        static getPierAngle(e, t) {
            return 180 * Math.atan2(t, e) / Math.PI - 90
        }
    }
    t.UIGameMapPortController = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TipsPort = void 0;
    const i = a(21),
        o = a(31);
    ! function(e) {
        e.title = function(e) {
            switch (e) {
                case i.TileEnums.CornerPortTypes.Port:
                    return "General Port";
                case i.TileEnums.CornerPortTypes.PortLumber:
                    return "Lumber Port";
                case i.TileEnums.CornerPortTypes.PortBrick:
                    return "Brick Port";
                case i.TileEnums.CornerPortTypes.PortWool:
                    return "Wool Port";
                case i.TileEnums.CornerPortTypes.PortGrain:
                    return "Grain Port";
                case i.TileEnums.CornerPortTypes.PortOre:
                    return "Ore Port";
                case i.TileEnums.CornerPortTypes.Empty:
            }
            return (0, o.logError)("getPortTitle", [e]), ""
        }, e.body = function(e) {
            switch (e) {
                case i.TileEnums.CornerPortTypes.Port:
                    return "Building a settlement or a city on this port allows the player to exchange 3 of the same resource for any other resource";
                case i.TileEnums.CornerPortTypes.PortLumber:
                    return "Building a settlement or a city on this port allows the player to exchange 2 Lumber for any other resource";
                case i.TileEnums.CornerPortTypes.PortBrick:
                    return "Building a settlement or a city on this port allows the player to exchange 2 Brick for any other resource";
                case i.TileEnums.CornerPortTypes.PortWool:
                    return "Building a settlement or a city on this port allows the player to exchange 2 Wool for any other resource";
                case i.TileEnums.CornerPortTypes.PortGrain:
                    return "Building a settlement or a city on this port allows the player to exchange 2 Grain for any other resource";
                case i.TileEnums.CornerPortTypes.PortOre:
                    return "Building a settlement or a city on this port allows the player to exchange 2 Ore for any other resource";
                case i.TileEnums.CornerPortTypes.Empty:
            }
            return (0, o.logError)("getPortBody", [e]), ""
        }
    }(t.TipsPort || (t.TipsPort = {}))
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapCornerController = void 0;
    const i = a(21);
    var o = i.TileEnums.CornerBuildingTypes;
    const n = a(23),
        r = a(3);
    var s = r.GameStateEnums.UIGameEventEnums;
    const c = a(105),
        l = a(26),
        h = a(7),
        d = a(31);
    t.UIGameMapCornerController = class {
        constructor(e) {
            this.buildingViews = [], this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.drawCorners()
        }
        onEvent(e, t) {
            switch (t) {
                case s.MapStateUpdated:
                    this.drawCorners()
            }
        }
        drawCorners() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tileCorners) this.removePreviouslyDrawnCorner(e), e.buildingType != i.TileEnums.CornerBuildingTypes.Empty && (this.cornerExists(e) || this.drawCorner(e))
        }
        cornerExists(e) {
            for (const t of this.buildingViews)
                if (t.corner.sameCorner(e)) return !0;
            return !1
        }
        removePreviouslyDrawnCorner(e) {
            const t = this.getCornerView(e.hexCorner);
            null != t && t.buildingType != e.buildingType && (t.parent.removeChild(t), (0, h.removeElementFromArray)(this.buildingViews, t))
        }
        getCornerView(e) {
            for (const t of this.buildingViews)
                if (t.corner.hexCorner.sameCorner(e)) return t
        }
        drawCorner(e) {
            const t = n.GameUIImages.getCornerImage(e);
            if (null == t) return;
            const a = this.uiGameManager.mapController.mapView,
                i = e.hexCorner.toPixel(a.mapCenter, a.hexagonHeight / 2),
                o = this.getPointForBuilding(e.buildingType, i);
            if (null == o) return;
            const s = o.y - a.hexagonHeight,
                h = this.getBuildingSize(e.buildingType),
                d = r.GameStateEnums.GameConstants.isCornerBuildingKnight(e.buildingType) ? a.layers.mapCornerKnightPieces : a.layers.mapCornerPieces,
                u = new c.UIGameMapCornerView(e, o.x, s, h, h, d, t, a),
                g = new l.Point(u.x, o.y);
            u.animationController.animateTo(g), this.buildingViews.push(u), this.uiGameManager.mapController.mapView.sortChildren()
        }
        getBuildingSize(e) {
            switch (e) {
                case o.Empty:
                    return (0, d.logError)("getBuildingSize", ["tried to get size for empty corner"]), 0;
                case o.Settlement:
                case o.DestroyedCity:
                case o.City:
                    return 2 * this.uiGameManager.mapController.mapView.cornerCircleR;
                case o.KnightActiveLevel1:
                case o.KnightActiveLevel2:
                case o.KnightActiveLevel3:
                case o.KnightInactiveLevel1:
                case o.KnightInactiveLevel2:
                case o.KnightInactiveLevel3:
                    return 1.6 * this.uiGameManager.mapController.mapView.cornerCircleR
            }
        }
        getPointForBuilding(e, t) {
            switch (e) {
                case o.Empty:
                    return (0, d.logError)("getPointForBuilding", ["tried searchs for empty corner texture"]), new l.Point(0, 0);
                case o.Settlement:
                case o.DestroyedCity:
                case o.City:
                    return this.getPointForCityAndSettlement(t);
                case o.KnightActiveLevel1:
                case o.KnightActiveLevel2:
                case o.KnightActiveLevel3:
                case o.KnightInactiveLevel1:
                case o.KnightInactiveLevel2:
                case o.KnightInactiveLevel3:
                    return this.getPointForKnight(t)
            }
        }
        getPointForCityAndSettlement(e) {
            const t = e.x - this.uiGameManager.mapController.mapView.cornerCircleR,
                a = e.y - 1.3 * this.uiGameManager.mapController.mapView.cornerCircleR;
            return new l.Point(t, a)
        }
        getPointForKnight(e) {
            const t = 1.6 * this.uiGameManager.mapController.mapView.cornerCircleR,
                a = e.x - t / 2,
                i = e.y - t / 2;
            return new l.Point(a, i)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapViewBoudaries = void 0;
    const i = a(16),
        o = a(26);
    t.UIGameMapViewBoudaries = class {
        constructor(e) {
            this.uiGameManager = e, this.initMapWorldBoundaries(), this.initZoomClamp(), this.centerMapView(), this.initClamps(), this.uiGameManager.mapController.mapView.on("zoomed", () => this.resizeClamps(this.uiGameManager.mapController.mapView.hitArea.width, this.uiGameManager.mapController.mapView.hitArea.height))
        }
        initMapWorldBoundaries() {
            const e = [],
                t = [];
            for (const a of this.uiGameManager.gameState.mapState.tileState.tiles) e.push(a.hexFace.x + .5 * a.hexFace.y), t.push(.75 * a.hexFace.y);
            const a = Math.max(...e) + 1,
                o = Math.min(...e) - 1,
                n = Math.max(...t) + .75,
                r = Math.min(...t) - .75,
                s = a - o + 1,
                c = n - r + 1;
            this.mapWidth = this.uiGameManager.mapController.mapView.hexagonWidth * s, this.mapHeight = this.uiGameManager.mapController.mapView.hexagonHeight * c, this.uiGameManager.mapController.mapView.worldHeight = this.mapHeight * i.UIGameConstants.GAME_WORLD_ZOOM_CLAMP_MULTIPLIER, this.uiGameManager.mapController.mapView.worldWidth = this.mapWidth * i.UIGameConstants.GAME_WORLD_ZOOM_CLAMP_MULTIPLIER, this.mapHorzOffCenterCorrection = (o + a) * this.uiGameManager.mapController.mapView.hexagonWidth, this.mapVertOffCenterCorrection = (n + r) * this.uiGameManager.mapController.mapView.hexagonHeight
        }
        initZoomClamp() {
            this.uiGameManager.mapController.mapView.clampZoom({
                maxHeight: this.uiGameManager.mapController.mapView.worldHeight,
                maxWidth: this.uiGameManager.mapController.mapView.worldWidth,
                minHeight: 3 * this.uiGameManager.mapController.mapView.hexagonHeight,
                minWidth: 3 * this.uiGameManager.mapController.mapView.hexagonWidth
            })
        }
        centerMapView() {
            this.uiGameManager.mapController.mapView.left = -this.uiGameManager.mapController.mapView.screenWidth / 2 + this.mapHorzOffCenterCorrection, this.uiGameManager.mapController.mapView.top = -this.uiGameManager.mapController.mapView.screenHeight / 2 + this.mapVertOffCenterCorrection, this.uiGameManager.mapController.mapView.mapCenter = new o.Point(0 + this.mapHorzOffCenterCorrection / 2, 0 + this.mapVertOffCenterCorrection / 2)
        }
        initClamps() {
            this.resizeClamps(this.uiGameManager.mapController.mapView.screenWidth, this.uiGameManager.mapController.mapView.screenHeight)
        }
        resizeClamps(e, t) {
            const a = 2 * e < this.mapWidth ? this.mapWidth / 2 : e,
                i = 2 * t < this.mapHeight ? this.mapHeight / 2 : t;
            this.uiGameManager.mapController.mapView.clamp({
                left: -a + this.mapHorzOffCenterCorrection,
                right: a + this.mapHorzOffCenterCorrection,
                top: -i + this.mapVertOffCenterCorrection,
                bottom: i + this.mapVertOffCenterCorrection,
                underflow: "center"
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameBankController = void 0;
    const i = a(6),
        o = a(17),
        n = a(13),
        r = a(128),
        s = a(3);
    var c = s.GameStateEnums.CardEnum,
        l = s.GameStateEnums.CardTypeEnum,
        h = s.GameStateEnums.UIGameEventEnums;
    const d = a(52),
        u = a(27),
        g = a(308),
        m = a(22),
        p = a(309),
        C = a(54);
    t.UIGameBankController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this);
            const t = this.uiGameManager.canvasController,
                a = t.appW - t.chatWidth,
                s = t.appH - 5.5 * t.itemSize,
                l = t.chatWidth,
                h = t.itemSize;
            this.container = new o.SectionBgView(a, s, l, h, t.app.stage), this.container.drawRoundedBg();
            const d = i.Loader.shared.resources.bank.texture,
                p = .15 * this.container.height;
            this.icon = new n.SpriteView(0, 0, this.container.height, this.container.height, this.container, d, p), this.icon.setTip("Bank", [""]), this.cardW = (this.container.width - this.container.height) / 6, this.cardH = this.container.height;
            this.cardCountViewContainer = new u.SectionView(this.cardH, 0, 5 * this.cardW, this.cardH, this.container, !0), this.resourceCardCountViews = [], this.initResourceCardCountViews(), this.showContractedContainerView(), this.developmentCardCountView = new r.CardCountView(this.cardH + 5 * this.cardW, 0, this.cardW, this.cardH, this.container, c.DevelopmentBack), this.developmentCardCountView.view.setTip(m.EnglishTexts.DEVELOPMENT_CARD_BACK_TIP_TITLE, [m.EnglishTexts.DEVELOPMENT_CARD_BACK_TIP_BODY]), this.update();
            const C = .05 * this.container.width,
                y = .5 * this.container.height,
                S = (this.container.height - y) / 2;
            this.bankExpansionArrowContainer = new u.SectionView(0, S, C, y, this.container, !0), this.bankExpansionArrow = new g.SpriteExpanionArrowView(0, 0, this.bankExpansionArrowContainer), this.hideBankExpansionArrow()
        }
        initResourceCardCountViews() {
            const e = d.CardDataController.getBaseCardDataForType(this.uiGameManager.gameState.gameModeData.activeResourceCardTypes);
            let t = 0;
            for (const a of e) {
                const e = new r.CardCountView(t, 0, this.cardW, this.cardH, this.cardCountViewContainer, a.cardEnum);
                this.resourceCardCountViews.push(e), e.view.setTip(a.tipTitle, [a.tipBody]), t += this.cardW, e.parent.removeChild(e)
            }
        }
        initBankControllerToContainCommodities() {
            this.showBankExansionArrow(), this.container.interactive = !0, this.container.on("pointerout", e => {
                this.isBankInterfaceExpanded() && this.contractBankInterface()
            }), this.container.on("pointerover", e => {
                this.isBankInterfaceExpanded() || this.expandBankInterface()
            });
            const e = i.Loader.shared.resources.card_progress_back.texture;
            this.developmentCardCountView.view.texture = e, this.developmentCardCountView.view.removeAllListeners();
            this.developmentCardCountView.view.setHoverAction(() => {
                this.showProgressCardToolTip()
            }, () => {
                this.removeProgressCardToolTip()
            })
        }
        showContractedContainerView() {
            for (let e = 0; e < 5; e += 1) this.cardCountViewContainer.addChild(this.resourceCardCountViews[e])
        }
        onEvent(e, t) {
            switch (t) {
                case h.BankStateUpdated:
                    this.update()
            }
        }
        update() {
            const e = this.uiGameManager.gameState.bank,
                t = this.uiGameManager.gameState.gameSettings.hideBankCards,
                a = e.totalDevelopmentCards(),
                i = (0, C.getQuestionMarkAmountForCard)(a, t);
            this.developmentCardCountView.updateText(i);
            for (const a of this.resourceCardCountViews) {
                const i = e.totalResourceCardOfType(a.cardData.cardEnum);
                a.updateText((0, C.getQuestionMarkAmountForCard)(i, t))
            }
        }
        getPointFromBank(e) {
            for (const t of this.resourceCardCountViews) {
                if (t.cardData.cardEnum != e) continue;
                return null != t.parent ? t.view.getGlobalPosition() : this.icon.getGlobalPosition()
            }
            const t = d.CardDataController.getCardDataForCard(e);
            if (null == t) return this.icon.getGlobalPosition();
            switch (t.cardTypeEnum) {
                case l.ProgressPolitics:
                case l.ProgressScience:
                case l.ProgressTrade:
                case l.Development:
                    return this.developmentCardCountView.view.getGlobalPosition();
                case l.Resource:
                case l.Commodity:
            }
            return this.icon.getGlobalPosition()
        }
        contractBankInterface() {
            const e = this.container.initialPosition.w / this.container.width;
            this.container.scale.x *= e, this.cardCountViewContainer.scale.x *= 1 / e, this.developmentCardCountView.scale.x *= 1 / e, this.container.x = this.container.initialPosition.x, this.showBankIcon(), this.cardCountViewContainer.x = this.cardH, this.developmentCardCountView.x = this.developmentCardCountView.initialPosition.x;
            this.showFirstXCards(5), this.showBankExansionArrow()
        }
        expandBankInterface() {
            const e = this.uiGameManager.canvasController.margin,
                t = 3 * this.cardW - this.icon.width - this.bankExpansionArrowContainer.width - 2.42 * e,
                a = (this.container.width + t) / this.container.width;
            this.container.scale.x *= a, this.cardCountViewContainer.scale.x *= 1 / a, this.developmentCardCountView.scale.x *= 1 / a, this.container.x -= t, this.hideBankIcon(), this.developmentCardCountView.x = this.container.initialPosition.w - this.developmentCardCountView.width - e / a, this.cardCountViewContainer.x = e / a;
            this.showFirstXCards(8), this.hideBankExpansionArrow()
        }
        showFirstXCards(e) {
            for (const [t, a] of this.resourceCardCountViews.entries()) null != a.parent && a.parent.removeChild(a), t >= e || this.cardCountViewContainer.addChild(a)
        }
        isBankInterfaceExpanded() {
            return null == this.icon.parent
        }
        hideBankExpansionArrow() {
            null != this.bankExpansionArrowContainer.parent && this.bankExpansionArrowContainer.parent.removeChild(this.bankExpansionArrowContainer)
        }
        showBankExansionArrow() {
            null == this.bankExpansionArrowContainer.parent && this.container.addChild(this.bankExpansionArrowContainer)
        }
        showBankIcon() {
            null == this.icon.parent && this.container.addChild(this.icon)
        }
        hideBankIcon() {
            null != this.icon.parent && this.icon.parent.removeChild(this.icon)
        }
        showProgressCardToolTip() {
            const e = this.uiGameManager.gameState.bank.hiddenDevelopmentCards,
                t = this.uiGameManager.gameState.gameSettings.hideBankCards;
            this.developmentCardProgressCardToolTipView = new p.UIGamePlayerInformationProgressCardToolTipView(this.uiGameManager, "Bank", this.developmentCardCountView.view, e, t)
        }
        removeProgressCardToolTip() {
            null != this.developmentCardProgressCardToolTipView && this.developmentCardProgressCardToolTipView.removeToolTip()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionsController = void 0;
    const i = a(17),
        o = a(473),
        n = a(474),
        r = a(475),
        s = a(476),
        c = a(477),
        l = a(478),
        h = a(479),
        d = a(480);
    var u = a(3).GameStateEnums.UIGameEventEnums;
    const g = a(481);
    t.UIGameActionsController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.buttonViews = [];
            const t = this.uiGameManager.canvasController,
                a = t.appW - t.chatWidth - t.itemSize,
                o = t.appH - t.itemSize,
                c = t.itemSize,
                l = t.itemSize;
            this.container = new i.SectionBgView(a, o, c, l, t.app.stage, !0), this.numberOfColumns = 1, this.uiGameManager.gameState.isPlayerSpectator() || (this.buttonViews.push(new d.UIGameActionButtonViewTrade(this.uiGameManager, this.container)), this.buttonViews.push(new n.UIGameActionButtonViewRoad(this.uiGameManager, this.container)), this.buttonViews.push(new r.UIGameActionButtonViewSettlement(this.uiGameManager, this.container)), this.buttonViews.push(new s.UIGameActionButtonViewCity(this.uiGameManager, this.container)), this.buttonViews.push(new h.UIGameActionButtonViewTurn(this.uiGameManager, this.container)))
        }
        onEvent(e, t) {
            switch (t) {
                case u.ShowTradeUI:
                    this.hide();
                    break;
                case u.CloseTradeUI:
                    this.show();
                    break;
                case u.GameEnd:
                    this.disable()
            }
        }
        addButton(e) {
            this.buttonViews.push(e)
        }
        activateBuyDevelopmentCardButton() {
            this.uiGameManager.gameState.isPlayerSpectator() || this.buttonViews.push(new c.UIGameActionButtonBuyDevelopmentCard(this.uiGameManager, this.container))
        }
        activateShipButtons() {
            this.uiGameManager.gameState.isPlayerSpectator() || (this.buttonViews.push(new l.UIGameActionButtonViewShip(this.uiGameManager, this.container)), this.buttonViews.push(new o.UIGameActionButtonViewShipMove(this.uiGameManager, this.container)))
        }
        activateCityWallButton() {
            this.uiGameManager.gameState.isPlayerSpectator() || this.buttonViews.push(new g.UIGameActionButtonViewCitywall(this.uiGameManager, this.container))
        }
        buildButtonController() {
            this.buttonViews.sort((e, t) => e.preferedPosition > t.preferedPosition ? 1 : -1), this.resizeContainerForButtons();
            const e = this.buttonViews.length - 6,
                t = e > 2 ? e - 2 : 0;
            for (const [e, a] of this.buttonViews.entries()) {
                const i = Math.floor(e / this.numberOfColumns),
                    o = e % this.numberOfColumns,
                    n = i == 1 ? o - t : o;
                this.repositionButton(a, i, n)
            }
        }
        resizeContainerForButtons() {
            const e = this.buttonViews.length;
            this.numberOfColumns = Math.min(e, 6);
            const t = this.uiGameManager.canvasController;
            this.container.x = t.appW - t.chatWidth - this.numberOfColumns * t.itemSize
        }
        repositionButton(e, t, a) {
            const i = this.uiGameManager.canvasController,
                o = i.margin;
            e.x = o + a * i.itemSize, e.y = o - t * i.itemSize, e.repositionedButton()
        }
        hide() {
            const e = this.container.width - this.uiGameManager.canvasController.itemSize;
            for (const t of this.buttonViews) null != t.parent && (t.x > e || t.parent.removeChild(t))
        }
        show() {
            for (const e of this.buttonViews) null == e.parent && this.container.addChild(e)
        }
        disable() {
            for (const e of this.buttonViews) e.interactive = !1
        }
        getButtonWithTexture(e) {
            for (const t of this.buttonViews)
                if (t.isSameTexture(e)) return t
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewShipMove = void 0;
    const i = a(22),
        o = a(6),
        n = a(80),
        r = a(3);
    var s = r.GameStateEnums.TurnStates,
        c = r.GameStateEnums.ActionStates,
        l = r.GameStateEnums.UIGameEventEnums;
    const h = a(7),
        d = a(20),
        u = a(31);
    class g extends n.UIGameActionButtonView {
        constructor(e, t) {
            super(e, 7, t);
            const a = this.uiGameManager.gameState.isPlayerSpectator(),
                o = g.getMoveShipTextureForColor(e.gameState.myColor, a);
            this.addCenteredIcon(o, .75), this.setUpdateAction(), this.stateUpdated(), this.setTip(i.EnglishTexts.MOVE_SHIP_TIP, [""])
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case l.PlayerControllerStateUpdated:
                case l.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedShipMoveButton()
            })
        }
        clickedShipMoveButton() {
            this.cancelBuild() || this.canPerformBuyAction(this.myPlayer.canMoveShip) && this.uiGameManager.socketGameSend.moveShip()
        }
        cancelBuild() {
            if (this.uiGameManager.gameState.currentTurnPlayerColor != this.uiGameManager.gameState.myColor) return !1;
            const e = [c.SelectShipToMove, c.MoveShip];
            return !!(0, h.elementInArray)(e, this.uiGameManager.gameState.currentActionState) && (this.uiGameManager.eventController.sendEvent([], l.SetRoadEdgeHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0)
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.myPlayer.canMoveShip.canTakeAction && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, h.elementInArray)(r.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && this.activateOpacity()
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == s.Turn
        }
        updateHighlightForActionState() {
            this.allowableActionStates() && (this.activateOpacity(), this.highlight())
        }
        allowableActionStates() {
            return this.uiGameManager.gameState.currentActionState == c.MoveShip || this.uiGameManager.gameState.currentActionState == c.SelectShipToMove
        }
        static getMoveShipTextureForColor(e, t) {
            if (t) return o.Loader.shared.resources.ship_move_green.texture;
            switch (e) {
                case d.PlayerColors.Blue:
                    return o.Loader.shared.resources.ship_move_blue.texture;
                case d.PlayerColors.Red:
                    return o.Loader.shared.resources.ship_move_red.texture;
                case d.PlayerColors.Orange:
                    return o.Loader.shared.resources.ship_move_orange.texture;
                case d.PlayerColors.Green:
                    return o.Loader.shared.resources.ship_move_green.texture;
                case d.PlayerColors.Bronze:
                    return o.Loader.shared.resources.ship_move_bronze.texture;
                case d.PlayerColors.Silver:
                    return o.Loader.shared.resources.ship_move_silver.texture;
                case d.PlayerColors.Gold:
                    return o.Loader.shared.resources.ship_move_gold.texture;
                case d.PlayerColors.Black:
                    return o.Loader.shared.resources.ship_move_black.texture;
                case d.PlayerColors.Purple:
                    return o.Loader.shared.resources.ship_move_purple.texture;
                case d.PlayerColors.MysticBlue:
                    return o.Loader.shared.resources.ship_move_mysticblue.texture;
                case d.PlayerColors.White:
                    return o.Loader.shared.resources.ship_move_white.texture;
                case d.PlayerColors.None:
            }
            return (0, u.logError)("getMoveShipTextureForColor", [e]), o.Loader.shared.resources.ship_move_green.texture
        }
    }
    t.UIGameActionButtonViewShipMove = g
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewRoad = void 0;
    const i = a(3);
    var o = i.GameStateEnums.TurnStates,
        n = i.GameStateEnums.ActionStates,
        r = i.GameStateEnums.UIGameEventEnums,
        s = i.GameStateEnums.CardEnum;
    const c = a(23),
        l = a(58),
        h = a(7);
    class d extends l.UIGameActionButtonViewWithBadge {
        constructor(e, t) {
            const a = c.GameUIImages.getRoadForPlayer(e.gameState.myColor),
                i = e.gameState.getPlayerWithColor(e.gameState.myColor).bankRoadAmount;
            super(e, 1, t, i), this.addCenteredIcon(a), this.setUpdateAction(), this.stateUpdated();
            const o = [s.Lumber, s.Brick];
            this.setHoverAction(o)
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.stateUpdated(), this.playerStateUpdated();
                    break;
                case r.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickRoadButton()
            })
        }
        clickRoadButton() {
            this.cancelBuild() || this.canPerformBuyAction(this.myPlayer.canPlaceRoad) && this.uiGameManager.socketGameSend.buildRoad()
        }
        playerStateUpdated() {
            this.updateBadgeCount(this.myPlayer.bankRoadAmount)
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.myPlayer.canPlaceRoad.canTakeAction && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, h.elementInArray)(i.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && this.activateOpacity()
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == o.Turn || this.uiGameManager.gameState.currentTurnState == o.SpecialBuildPhase
        }
        updateHighlightForActionState() {
            this.uiGameManager.gameState.currentActionState == n.PlaceRoad && (this.activateOpacity(), this.highlight())
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.uiGameManager.gameState.currentActionState == n.PlaceRoad && (this.uiGameManager.eventController.sendEvent([], r.SetRoadEdgeHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
    }
    t.UIGameActionButtonViewRoad = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewSettlement = void 0;
    const i = a(3);
    var o = i.GameStateEnums.TurnStates,
        n = i.GameStateEnums.ActionStates,
        r = i.GameStateEnums.UIGameEventEnums,
        s = i.GameStateEnums.CardEnum;
    const c = a(23),
        l = a(58),
        h = a(7);
    class d extends l.UIGameActionButtonViewWithBadge {
        constructor(e, t) {
            const a = c.GameUIImages.getSettlementForPlayer(e.gameState.myColor),
                i = e.gameState.getPlayerWithColor(e.gameState.myColor).bankSettlementAmount;
            super(e, 2, t, i), this.addCenteredIcon(a), this.setUpdateAction(), this.stateUpdated();
            const o = [s.Lumber, s.Brick, s.Wool, s.Grain];
            this.setHoverAction(o)
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.playerStateUpdated(), this.stateUpdated();
                    break;
                case r.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedSettlementButton()
            })
        }
        clickedSettlementButton() {
            this.cancelBuild() || this.canPerformBuyAction(this.myPlayer.canPlaceSettlement) && this.uiGameManager.socketGameSend.buildSettlement()
        }
        playerStateUpdated() {
            this.updateBadgeCount(this.myPlayer.bankSettlementAmount)
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.myPlayer.canPlaceSettlement.canTakeAction && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, h.elementInArray)(i.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && this.activateOpacity()
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == o.Turn || this.uiGameManager.gameState.currentTurnState == o.SpecialBuildPhase
        }
        updateHighlightForActionState() {
            this.uiGameManager.gameState.currentActionState == n.PlaceSettlement && (this.activateOpacity(), this.highlight())
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.uiGameManager.gameState.currentActionState == n.PlaceSettlement && (this.uiGameManager.eventController.sendEvent([], r.SetCornerHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
    }
    t.UIGameActionButtonViewSettlement = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewCity = void 0;
    const i = a(3);
    var o = i.GameStateEnums.TurnStates,
        n = i.GameStateEnums.ActionStates,
        r = i.GameStateEnums.UIGameEventEnums,
        s = i.GameStateEnums.CardEnum;
    const c = a(23),
        l = a(58),
        h = a(7);
    class d extends l.UIGameActionButtonViewWithBadge {
        constructor(e, t) {
            const a = c.GameUIImages.getCityForPlayer(e.gameState.myColor),
                i = e.gameState.getPlayerWithColor(e.gameState.myColor).bankCityAmount;
            super(e, 3, t, i), this.addCenteredIcon(a), this.setUpdateAction(), this.stateUpdated();
            const o = [s.Grain, s.Grain, s.Ore, s.Ore, s.Ore];
            this.setHoverAction(o)
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.stateUpdated(), this.playerStateUpdated();
                    break;
                case r.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedCityButton()
            })
        }
        clickedCityButton() {
            this.cancelBuild() || this.canPerformBuyAction(this.myPlayer.canPlaceCity) && this.uiGameManager.socketGameSend.buildCity()
        }
        playerStateUpdated() {
            this.updateBadgeCount(this.myPlayer.bankCityAmount)
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.myPlayer.canPlaceCity.canTakeAction && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, h.elementInArray)(i.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && this.activateOpacity()
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == o.Turn || this.uiGameManager.gameState.currentTurnState == o.SpecialBuildPhase
        }
        updateHighlightForActionState() {
            this.uiGameManager.gameState.currentActionState == n.PlaceCity && (this.activateOpacity(), this.highlight())
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.uiGameManager.gameState.currentActionState == n.PlaceCity && (this.uiGameManager.eventController.sendEvent([], r.SetCornerHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
    }
    t.UIGameActionButtonViewCity = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonBuyDevelopmentCard = void 0;
    const i = a(3);
    var o = i.GameStateEnums.TurnStates,
        n = i.GameStateEnums.UIGameEventEnums,
        r = i.GameStateEnums.CardEnum;
    const s = a(6),
        c = a(80),
        l = a(7);
    class h extends c.UIGameActionButtonView {
        constructor(e, t) {
            const a = s.Loader.shared.resources.icon_buy_dev_card.texture;
            super(e, 0, t), this.addCenteredIcon(a), this.setUpdateAction(), this.gameStateUpdated();
            const i = [r.Wool, r.Grain, r.Ore];
            this.setHoverAction(i)
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case n.PlayerControllerStateUpdated:
                case n.GameStateUpdated:
                    this.gameStateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedBuyDevelopmentCard()
            })
        }
        clickedBuyDevelopmentCard() {
            this.canPerformBuyAction(this.myPlayer.canBuyDevelopmentCard) && this.uiGameManager.socketGameSend.buyDevCard()
        }
        gameStateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.myPlayer.canBuyDevelopmentCard.canTakeAction && this.updateOpacityForTurnState()
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, l.elementInArray)(i.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && this.activateOpacity()
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == o.Turn || this.uiGameManager.gameState.currentTurnState == o.SpecialBuildPhase
        }
    }
    t.UIGameActionButtonBuyDevelopmentCard = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewShip = void 0;
    const i = a(3);
    var o = i.GameStateEnums.TurnStates,
        n = i.GameStateEnums.ActionStates,
        r = i.GameStateEnums.UIGameEventEnums,
        s = i.GameStateEnums.CardEnum;
    const c = a(23),
        l = a(58),
        h = a(26),
        d = a(7);
    class u extends l.UIGameActionButtonViewWithBadge {
        constructor(e, t) {
            const a = c.GameUIImages.getShipForPlayer(e.gameState.myColor, h.HexShapeEnums.EdgeVariables.NorthWest),
                i = e.gameState.getPlayerWithColor(e.gameState.myColor).bankShipAmount;
            super(e, 6, t, i), this.addCenteredIcon(a), this.setUpdateAction(), this.stateUpdated();
            const o = [s.Lumber, s.Wool];
            this.setHoverAction(o)
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.stateUpdated(), this.playerStateUpdated();
                    break;
                case r.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedShipButton()
            })
        }
        clickedShipButton() {
            this.cancelBuild() || this.canPerformBuyAction(this.myPlayer.canPlaceShip) && this.uiGameManager.socketGameSend.buildShip()
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.uiGameManager.gameState.currentActionState == n.PlaceShip && (this.uiGameManager.eventController.sendEvent([], r.SetRoadEdgeHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
        playerStateUpdated() {
            this.updateBadgeCount(this.myPlayer.bankShipAmount)
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.myPlayer.canPlaceShip.canTakeAction && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, d.elementInArray)(i.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && this.activateOpacity()
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == o.Turn || this.uiGameManager.gameState.currentTurnState == o.SpecialBuildPhase
        }
        updateHighlightForActionState() {
            this.uiGameManager.gameState.currentActionState == n.PlaceShip && (this.activateOpacity(), this.highlight())
        }
    }
    t.UIGameActionButtonViewShip = u
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewTurn = void 0;
    const i = a(78),
        o = a(6),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums,
        s = n.GameStateEnums.ActionStates,
        c = n.GameStateEnums.TurnStates;
    const l = a(80);
    class h extends l.UIGameActionButtonView {
        constructor(e, t) {
            const a = o.Loader.shared.resources.icon_hourglass.texture;
            super(e, 5, t), this.addCenteredIcon(a), this.setTip("End Turn", [""]), this.setUpdateAction(), this.stateUpdated(), this.tradeWindowOpen = !1
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case r.CloseTradeUI:
                case r.PlayerControllerStateUpdated:
                case r.GameStateUpdated:
                    this.stateUpdated();
                    break;
                case r.ShowTradeUI:
                    this.fadeButton()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedTurnButton()
            })
        }
        clickedTurnButton() {
            this.tradeWindowOpen ? new i.FloatingText("Close trade window", this) : this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor ? this.uiGameManager.gameState.currentActionState == s.None ? this.uiGameManager.socketGameSend.clickedPassTurn() : new i.FloatingText("Finish current action", this) : new i.FloatingText("It is not your turn", this)
        }
        stateUpdated() {
            this.tradeWindowOpen = !1, this.deactivateEndTurn(), this.updateButtonForTurnState()
        }
        updateButtonForTurnState() {
            this.allowableTurnStates() && this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && this.uiGameManager.gameState.currentActionState == s.None && this.activateEndTurn()
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == c.Turn || this.uiGameManager.gameState.currentTurnState == c.SpecialBuildPhase
        }
        activateEndTurn() {
            this.updateTexture(o.Loader.shared.resources.icon_pass_turn.texture), this.activateOpacity()
        }
        deactivateEndTurn() {
            this.updateTexture(o.Loader.shared.resources.icon_hourglass.texture), this.inactivateOpacity()
        }
        fadeButton() {
            this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.tradeWindowOpen = !0, this.inactivateOpacity())
        }
    }
    t.UIGameActionButtonViewTurn = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewTrade = void 0;
    const i = a(3),
        o = a(6);
    var n = i.GameStateEnums.UIGameEventEnums,
        r = i.GameStateEnums.TurnStates;
    const s = a(80),
        c = a(7);
    class l extends s.UIGameActionButtonView {
        constructor(e, t) {
            const a = o.Loader.shared.resources.icon_trade.texture;
            super(e, 4, t), this.addCenteredIcon(a), this.setTip("Trade", [""]), this.setUpdateAction(), this.stateUpdated()
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case n.PlayerControllerStateUpdated:
                case n.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.uiGameManager.tradeController.clickedTrade(this), this.uiGameManager.toolTipController.removeTip()
            })
        }
        stateUpdated() {
            this.inactivateOpacity(), this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && this.uiGameManager.gameState.currentTurnState == r.Turn && (0, c.elementInArray)(i.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && this.activateOpacity()
        }
    }
    t.UIGameActionButtonViewTrade = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewCitywall = void 0;
    const i = a(3);
    var o = i.GameStateEnums.TurnStates,
        n = i.GameStateEnums.ActionStates,
        r = i.GameStateEnums.UIGameEventEnums;
    const s = a(23),
        c = a(58),
        l = a(7);
    class h extends c.UIGameActionButtonViewWithBadge {
        constructor(e, t) {
            const a = s.GameUIImages.getCityWallForPlayer(e.gameState.myColor),
                o = e.gameState.getPlayerWithColor(e.gameState.myColor).bankCityWallAmount;
            super(e, 0, t, o), this.addCenteredIcon(a), this.setUpdateAction(), this.stateUpdated();
            const n = i.GameStateEnums.GameConstants.getCardEnumsForPiece(i.GameStateEnums.PieceTypes.CityWall);
            this.setHoverAction(n)
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.stateUpdated(), this.playerStateUpdated();
                    break;
                case r.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedCityWallButton()
            })
        }
        playerStateUpdated() {
            this.updateBadgeCount(this.myPlayer.bankCityWallAmount)
        }
        clickedCityWallButton() {
            this.cancelBuild() || this.canPerformBuyAction(this.myPlayer.canPlaceCityWall) && this.uiGameManager.socketGameSend.buildCityWall()
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.uiGameManager.gameState.currentActionState == n.PlaceCityWall && (this.uiGameManager.eventController.sendEvent([], r.SetCornerHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.myPlayer.canPlaceCityWall.canTakeAction && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, l.elementInArray)(i.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && this.activateOpacity()
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == o.Turn || this.uiGameManager.gameState.currentTurnState == o.SpecialBuildPhase
        }
        updateHighlightForActionState() {
            this.uiGameManager.gameState.currentActionState == n.PlaceCityWall && (this.activateOpacity(), this.highlight())
        }
    }
    t.UIGameActionButtonViewCitywall = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameStateController = void 0;
    const i = a(17),
        o = a(6),
        n = a(3),
        r = a(149);
    var s = n.GameStateEnums.UIGameEventEnums,
        c = n.GameStateEnums.ActionStates;
    const l = a(7),
        h = a(50),
        d = a(126);
    t.UIGameStateController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this);
            const t = e.canvasController,
                a = t.appW - t.chatWidth - 4 * t.itemSize,
                n = t.appH - 1.5 * t.itemSize,
                s = 3 * t.itemSize,
                c = t.itemSize / 2;
            this.container = new i.SectionBgView(a, n, s, c, t.app.stage), this.container.drawRoundedBg();
            const l = new r.PlayerControllerState;
            this.playerAvatar = new h.UIGamePlayerAvatarView(0, 0, this.container.height, this.container, l), this.playerAvatar.updatePlayerIcon(o.Loader.shared.resources.icon_bot.texture);
            const u = this.playerAvatar.x + this.playerAvatar.width,
                g = this.container.width - u;
            this.stateText = new d.TextMaskedView("", u, 0, g, this.container.height, this.container), this.connectedToGame()
        }
        onEvent(e, t) {
            switch (t) {
                case s.GameStateUpdated:
                    this.update();
                    break;
                case s.ShowTradeUI:
                    this.hide();
                    break;
                case s.CloseTradeUI:
                    this.show()
            }
        }
        connectedToGame() {
            this.updateTextForAllPlayers("Connected to game");
            const e = 3 * l.Utils.MILLISECONDS;
            setTimeout(() => {
                this.update()
            }, e)
        }
        updateTextForAllPlayers(e) {
            this.stateText.text != e && (this.stateText.text = e, this.stateText.centerX())
        }
        hide() {
            this.container.parent.removeChild(this.container)
        }
        show() {
            this.uiGameManager.canvasController.app.stage.addChildAt(this.container, 5)
        }
        update() {
            const e = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.currentTurnPlayerColor);
            this.playerAvatar.udpatePlayerColor(e), this.uiGameManager.gameState.currentActionState == n.GameStateEnums.ActionStates.None ? this.displayTurnState(e) : this.displayActionState(e)
        }
        displayActionState(e) {
            const t = e.username + " Turn";
            let a = "",
                i = "";
            switch (this.uiGameManager.gameState.currentActionState) {
                case c.DiplomatSelectWhetherToPlaceNewEdgePiece:
                case c.None:
                    return !0;
                case c.GameSetupPlaceSettlement:
                    return this.updateTextForAllPlayers(e.username + " is placing settlement"), !0;
                case c.GameSetupPlaceCity:
                    return this.updateTextForAllPlayers(e.username + " is placing city"), !0;
                case c.GameSetupRoadPlacement:
                    return this.updateTextForAllPlayers(e.username + " is placing road"), !0;
                case c.PlaceRoadForFree:
                case c.PlaceRoad:
                    return a = "Build Road", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.PlaceSettlement:
                    return a = "Build Settlement", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.PlaceCityWithDiscount:
                case c.PlaceCity:
                    return a = "Build City", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.PlaceShipForFree:
                case c.PlaceShip:
                    return a = "Build Ship", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.SelectShipToMove:
                    return a = "Select Ship to Move", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.MoveShip:
                    return a = "Move Ship", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.PlaceCityWallForFree:
                case c.PlaceCityWall:
                    return a = "Build City Wall", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.PlaceKnightForFree:
                case c.PlaceKnight:
                    return a = "Place knight", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.UpgradeKnightForFree:
                case c.UpgradeKnight:
                    return a = "Upgrade knight", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.ActivateKnight:
                    return a = "Activate knight", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.SelectKnightToTakeAction:
                    return a = "Select Knight", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.SelectKnightAction:
                    return a = "Select Knight Action", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.MoveKnightOffTurn:
                    return i = "Moving Knight", this.updateTextForAllPlayers(i), !0;
                case c.SelectKnightToRemove:
                    return i = "Remove Knight", this.updateTextForAllPlayers(i), !0;
                case c.PlaceRobberOnly:
                case c.PlaceRobberOrPirate:
                    return i = e.username + " Placing Robber", this.updateTextForAllPlayers(i), !0;
                case c.PlacePirateOnly:
                    return i = e.username + " Placing Pirate", this.updateTextForAllPlayers(i), !0;
                case c.SelectWhoToRob:
                    return i = e.username + " Selecting Who To Rob", this.updateTextForAllPlayers(i), !0;
                case c.SelectCardsToDiscard:
                case c.SelectProgressCardsToDiscard:
                    return i = "Players Discarding", this.updateTextForAllPlayers(i), !0;
                case c.Place2MoreRoadBuilding:
                    return a = "Place 2 roads", i = e.username + " placing 2 roads", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.Place1MoreRoadBuilding:
                    return a = "Place 1 road", i = e.username + " placing 1 road", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.Select2ResourcesForYearOfPlenty:
                    return a = "Select 2 resources", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.Select1ResourceForMonopoly:
                    return a = "Use Monopoly", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.SelectCardsForPendingDistributions:
                    return i = "Players selecting resources", this.updateTextForAllPlayers(i), !0;
                case c.PlaceMetropolis:
                    return i = e.username + " is placing Metropolis", this.updateTextForAllPlayers(i), !0;
                case c.SelectProgressCard:
                    return i = "Select Progress Card", this.updateTextForAllPlayers(i), !0;
                case c.SelectCityToPillage:
                    return i = "Remove City", this.updateTextForAllPlayers(i), !0;
                case c.PlaceMerchant:
                    return a = "Place Merchant", i = e.username + " is placing Merchant", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.SelectDiceForAlchemist:
                    return a = "Select Dice", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.SelectTileProductionNumbersToSwap:
                    return a = "Select numbers to swap", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.SelectPlayerForDeserter:
                    return a = "Select Player", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.SelectRoadToRemove:
                    return a = "Select road to remove", i = e.username + " is removing road", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.IntrigueSelectKnightToMove:
                    return a = "Select knight", i = e.username + " selecting knight", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.SpySelectPlayer:
                    return a = "Select Player", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.SpySelectProgressCard:
                    return a = "Select Card", i = e.username + " using spy", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.SelectCardsForWedding:
                    return a = "Opponents selecting resources", i = "Select resources", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.CommercialHarborSelectPlayerAndResource:
                    return a = "Select player and card", i = e.username + " using Commercial Harbor", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.CommercialHarborOpponentSelectsCard:
                    return a = "Opponent selecting card", i = e.username + " using Commercial Harbor", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.MasterMerchantSelectPlayer:
                    return a = "Select Player", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.MasterMerchantSelectCards:
                    return a = "Select Resources", i = e.username + " using Master Merchant", this.updateTextForYouAndOpponentDifferently(a, i), !0;
                case c.MerchantFleetSelectResource:
                case c.ResourceMonopolySelectResource:
                    return a = "Select Resource", this.updateTextForYouAndOpponentDifferently(a, t), !0;
                case c.CommodityMonopolySelectResource:
                    return a = "Select Commodity", this.updateTextForYouAndOpponentDifferently(a, t), !0
            }
        }
        displayTurnState(e) {
            switch (this.uiGameManager.gameState.currentTurnState) {
                case n.GameStateEnums.TurnStates.GameSetup:
                    this.updateTextForAllPlayers("Game Setting Up");
                    break;
                case n.GameStateEnums.TurnStates.Dice:
                    this.uiGameManager.gameState.myColor == this.uiGameManager.gameState.currentTurnPlayerColor ? this.updateTextForAllPlayers("Roll Dice") : this.updateTextForAllPlayers(e.username + " Rolling Dice");
                    break;
                case n.GameStateEnums.TurnStates.Turn:
                    this.updateTextForAllPlayers(e.username + " Turn");
                    break;
                case n.GameStateEnums.TurnStates.SpecialBuildPhase:
                    this.updateTextForAllPlayers(e.username + " Special Build Phase");
                    break;
                case n.GameStateEnums.TurnStates.GameEnd:
                    this.updateTextForAllPlayers("Game End")
            }
        }
        updateTextForYouAndOpponentDifferently(e, t) {
            this.uiGameManager.gameState.myColor == this.uiGameManager.gameState.currentTurnPlayerColor ? this.updateTextForAllPlayers(e) : this.updateTextForAllPlayers(t)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameTimerController = void 0;
    const i = a(125),
        o = a(28),
        n = a(11),
        r = a(17),
        s = a(54);
    var c = a(3).GameStateEnums.UIGameEventEnums;
    const l = a(7);
    t.UIGameTimerController = class {
        constructor(e) {
            this.timerEndTime = 0, this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this);
            const t = e.canvasController,
                a = t.appW - t.chatWidth - t.itemSize,
                o = t.appH - 1.5 * t.itemSize,
                n = t.itemSize,
                s = t.itemSize / 2;
            this.container = new r.SectionBgView(a, o, n, s, t.app.stage), this.container.drawRoundedBg(), this.text = new i.BitmapText("00:00", 0, 0, this.container.width, this.container.height, this.container, 14, !0), this.text.centerX(), this.updateTimer()
        }
        onEvent(e, t) {
            switch (t) {
                case c.GameStateUpdated:
                    this.updateTimer();
                    break;
                case c.GameEnd:
                    this.stop()
            }
        }
        updateTimer() {
            const e = this.uiGameManager.gameState.secondsLeftForNextState();
            this.timerEndTime = Date.now() / l.Utils.MILLISECONDS + e, clearInterval(this.interval), this.updateTimeText(e), this.startTimer()
        }
        stop() {
            clearInterval(this.interval);
            this.updateTimeText(0)
        }
        startTimer() {
            this.interval = setInterval(() => {
                let e = Math.round(this.timerEndTime - Date.now() / l.Utils.MILLISECONDS);
                e <= 0 && (e = 0), this.updateTimeText(e), this.playTickingReminderSoundAtEndOfTurn(e)
            }, 1e3)
        }
        updateTimeText(e) {
            const t = (0, s.turnSecondsInToTimerFormat)(e);
            this.text.text != t && (this.text.text = t), this.text.centerX(), this.text.repositionY(!0);
            const a = this.isPlayerTakingActionAtTheEndOfTheirTurn(e) ? o.GameColor.Color.RedDark : o.GameColor.Color.Gray0;
            this.text.tint = o.GameColor.getColorHexValue(a)
        }
        isPlayerTakingActionAtTheEndOfTheirTurn(e) {
            if (!this.uiGameManager.gameState.isPlayerTakingAction()) return !1;
            return !(e > 5)
        }
        playTickingReminderSoundAtEndOfTurn(e) {
            if (!this.isPlayerTakingActionAtTheEndOfTheirTurn(e)) return;
            5 == e ? n.Sound.playSound(n.Sound.SoundType.FirstReminder) : n.Sound.playSound(n.Sound.SoundType.Tick)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameHelpButtonsController = void 0;
    const i = a(3),
        o = a(485),
        n = a(512);
    var r = i.GameStateEnums.UIGameEventEnums;
    t.UIGameHelpButtonsController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.view = new o.UIGameHelpButtons(this.uiGameManager, this, this.uiGameManager.gameState.gameSettings), this.spectatorDisplay = new n.default(this.view.container), this.view.resize()
        }
        onEvent(e, t) {
            switch (t) {
                case r.CavasResized:
                    this.resizeHelpButtons();
                    break;
                case r.GameEnd:
                case r.GameEndHideMap:
                    this.hide();
                    break;
                case r.GameEndShowMap:
                    this.show();
                    break;
                case r.SpectatorCountUpdated:
                    this.updateSpectatorCount(e);
                    break;
                case r.GameStateUpdated:
                    this.gameSettingsChanged()
            }
        }
        gameSettingsChanged() {
            this.view.loadNewSettings(this.uiGameManager.gameState.gameSettings)
        }
        resizeHelpButtons() {
            this.view.resize()
        }
        updateSpectatorCount(e) {
            this.spectatorDisplay.updateSpectatorCount(e)
        }
        closeAllContainers() {
            this.view.closeAllContainers()
        }
        hide() {
            this.view.hide()
        }
        show() {
            this.view.show()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameHelpButtons = void 0;
    const i = a(10),
        o = a(486),
        n = a(487),
        r = a(508),
        s = a(509),
        c = a(511);
    t.UIGameHelpButtons = class {
        constructor(e, t, a) {
            this.uiGameManager = e;
            const l = document.getElementById("help_buttons_section");
            l && l.remove(), this.container = (0, i.createDivIn)(document.body, "help_buttons_section", "help_buttons_section"), this.leaveButton = new o.default(t, this.container), this.rulesButton = new n.default(t, this.container, a), this.volumeButton = new r.default(t, this.container), this.settingsButton = new s.default(t, this.container, a), this.supportButton = new c.default(t, this.container), this.windowClickCheck = [this.volumeButton, this.settingsButton, this.supportButton], this.resize(), window.addEventListener("pointerup", this.windowClick.bind(this)), this.allHelpButtons = [], this.allHelpButtons.push(this.leaveButton), this.allHelpButtons.push(this.rulesButton), this.allHelpButtons.push(this.volumeButton), this.allHelpButtons.push(this.settingsButton), this.allHelpButtons.push(this.supportButton)
        }
        loadNewSettings(e) {
            this.settingsButton.writeGameSettings(e)
        }
        windowClick(e) {
            for (const e of this.windowClickCheck)
                if (e.mouseDownRecently) return void(e.mouseDownRecently = !1);
            this.closeAllContainers()
        }
        resize() {
            const e = this.uiGameManager.canvasController,
                t = e.responsiveController.getCanvasX(),
                a = e.responsiveController.getCanvasY(),
                i = parseFloat(e.app.view.style.height),
                o = .045 * i,
                n = .005 * i;
            this.container.style.margin = `${a+n}px 0 0 ${t}px`;
            for (const e of this.container.children) "spectator-count-display" != e.id && (e.style.height = o + "px", e.style.width = o + "px", e.style.padding = `${n}px 0 ${n}px ${2*n}px`)
        }
        closeAllContainers() {
            this.volumeButton.setContainerActive(!1), this.settingsButton.setContainerActive(!1), this.supportButton.setContainerActive(!1)
        }
        hide() {
            this.closeAllContainers(), this.container.style.display = "none"
        }
        show() {
            this.container.style.display = "block"
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const i = a(14),
        o = a(33),
        n = a(91);
    class r extends n.default {
        constructor(e, t) {
            super(e, t, "leave_button", "icon_arrow.svg")
        }
        clicked(e) {
            super.clicked(e);
            i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.Game, i.CA.Label.ClickedGameLobbyButton), o.UIPopupController.create("Leave Game?", "Go back to lobby?", () => {
                i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.Game, i.CA.Label.ClickedGameLobbyButtonAccept), window.location.href = ""
            }, () => {})
        }
    }
    t.default = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const i = a(3),
        o = a(42),
        n = a(14),
        r = a(488),
        s = a(91);
    class c extends s.default {
        constructor(e, t, a) {
            super(e, t, "rules_button", "icon_book.svg"), this.defaultRulebookPage = c.gameModeToRulebookPage(a.modeSetting)
        }
        clicked(e) {
            super.clicked(e), n.CA.sendEvent(n.CA.Type.Click, n.CA.Category.Game, n.CA.Label.ClickedGameRulesButton), new r.UIPopupRulebook(this.defaultRulebookPage).show()
        }
        static gameModeToRulebookPage(e) {
            switch (e) {
                case i.ModeSettingEnum.Classic56P:
                case i.ModeSettingEnum.Classic78P:
                    return o.RulebookPage.Classic56P;
                case i.ModeSettingEnum.Seafarers4P:
                case i.ModeSettingEnum.Seafarers56P:
                    return o.RulebookPage.Seafarers4P;
                case i.ModeSettingEnum.CitiesAndKnights4P:
                case i.ModeSettingEnum.CitiesAndKnights56P:
                case i.ModeSettingEnum.CitiesAndKnightsSeafarers4P:
                case i.ModeSettingEnum.CitiesAndKnightsSeafarers56P:
                    return o.RulebookPage.CitiesAndKnights4P;
                default:
                    return o.RulebookPage.Classic4P
            }
        }
    }
    t.default = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIPopupRulebook = void 0;
    const i = a(42),
        o = a(55),
        n = a(34),
        r = a(138),
        s = a(10),
        c = a(507);
    class l extends c.UIPopup {
        constructor(e) {
            super(), this.contentContainer = (0, s.createDivIn)(this.container, "popup-rulebook"), n.RulebookDictionary.setLanguage(n.RulebookLanguage.English);
            const t = (0, i.generateRulebook)(document, e);
            this.contentContainer.appendChild(t);
            new r.UIRulebookController(!1);
            document.getElementById(o.RulebookConfig.navigationCloseID).onclick = () => {
                this.removePopup()
            }
        }
    }
    t.UIPopupRulebook = l
}, , , , , , , , , , , , , , , , , , , function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIPopup = void 0;
    const i = a(10);
    t.UIPopup = class {
        constructor() {
            this.container = (0, i.createDivIn)(document.body, "popup"), this.container.onclick = this.containerClicked.bind(this)
        }
        containerClicked(e) {
            e.target === this.container && this.removePopup()
        }
        show() {
            this.container.style.display = "block"
        }
        removePopup() {
            this.container.style.display = "none", null != this.container.parentElement && this.container.parentElement.removeChild(this.container)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const i = a(14),
        o = a(11),
        n = a(46),
        r = a(10),
        s = a(91);
    class c extends s.default {
        constructor(e, t) {
            super(e, t, "volume_button", "icon_sound_on.svg"), this.volume = .5, this.mouseDown = !1, this.sliderContainer = (0, r.createDivIn)(this.content, "volume_slider_container", "volume_slider_container"), this.sliderText = (0, r.createDivIn)(this.sliderContainer, "volume_slider_text", "volume_slider_text"), this.sliderInterior = (0, r.createDivIn)(this.sliderContainer, "volume_slider_interior", "volume_slider_interior"), this.sliderContainer.onpointerdown = () => {
                this.startInput()
            }, window.onpointerup = () => {
                this.endInput()
            }, window.ontouchmove = this.touchMoved.bind(this), window.onmousemove = this.mouseMoved.bind(this);
            const a = n.StorageWrapper.getVolume();
            this.setVolume(a)
        }
        startInput() {
            i.CA.sendEvent(i.CA.Type.Click, i.CA.Category.Game, i.CA.Label.ClickedGameSoundButton), this.mouseDown = !0, this.sliderContainer.style.opacity = "1"
        }
        endInput() {
            this.mouseDown = !1, this.sliderContainer.style.opacity = "", o.Sound.setVolume(this.volume), n.StorageWrapper.setVolume(this.volume)
        }
        touchMoved(e) {
            const t = e.touches[0];
            this.inputMoved(t.clientX, t.clientY)
        }
        mouseMoved(e) {
            this.inputMoved(e.clientX, e.clientY)
        }
        inputMoved(e, t) {
            if (!this.mouseDown) return;
            const a = this.sliderContainer.getBoundingClientRect(),
                i = (e - a.x) / a.width;
            this.setVolume(i)
        }
        setVolume(e) {
            const t = Math.max(Math.min(e, 1), 0),
                a = Math.round(100 * t);
            this.sliderInterior.style.width = a + "%", this.sliderText.innerHTML = `Volume: ${a}%`;
            const i = 0 == a ? "icon_sound_off.svg" : "icon_sound_on.svg";
            this.swapImage(i), this.volume = t
        }
    }
    t.default = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const i = a(10),
        o = a(91),
        n = a(510);
    class r extends o.default {
        constructor(e, t, a) {
            super(e, t, "settings_button", "icon_settings.svg"), this.optionContainer = (0, i.createDivIn)(this.content, "option_container"), this.refreshButton = new s(this.optionContainer), this.animationButton = new n.AnimationButton(this.optionContainer, "Animation", ["Active", "Inactive"], this), this.antialiasButton = new n.AntialiasButton(this.optionContainer, "Antialias", ["True", "False"], this), this.resolutionButton = new n.ResolutionButton(this.optionContainer, "Resolution", ["0.5", "1", "1.5", "2", "2.5", "3"], this), this.powerButton = new n.PowerButton(this.optionContainer, "Power", ["Low-power", "Default", "High-performance"], this), this.infoBox = (0, i.createDivIn)(this.optionContainer, "option info_option"), this.writeGameSettings(a)
        }
        writeGameSettings(e) {
            const t = e.settingTexts();
            this.infoBox.innerHTML = "";
            for (const e of t) this.infoBox.innerHTML += `${e[0]}: <b>${e[1]}</b><br/>`
        }
        showRefreshTabButton() {
            this.refreshButton.setVisible(!0)
        }
    }
    t.default = r;
    class s {
        constructor(e) {
            this.element = (0, i.createDivIn)(e, "option refresh_button"), this.element.innerHTML = "Refresh Tab", this.element.onclick = s.clicked.bind(this), this.setVisible(!1)
        }
        setVisible(e) {
            const t = e ? "visible" : "hidden";
            this.element.style.visibility = t
        }
        static clicked() {
            location.reload()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PowerButton = t.ResolutionButton = t.AntialiasButton = t.AnimationButton = t.UIGameSettingsToggleButton = void 0;
    const i = a(46),
        o = a(10);
    class n {
        constructor(e, t, a, n) {
            this.storageWrapper = i.StorageWrapper, this.title = t, this.options = a, this.selection = this.read(), this.uiGameSettingsButton = n, this.element = (0, o.createDivIn)(e, "option", t + "_option"), this.element.onclick = this.clicked.bind(this), this.setSelection(this.selection)
        }
        setSelection(e) {
            this.element.innerHTML = `${this.title}: <b>${this.options[this.selection]}</b>`
        }
        clicked() {
            this.selection += 1, this.selection >= this.options.length && (this.selection = this.selection % this.options.length), this.setSelection(this.selection), this.save(this.selection)
        }
    }
    t.UIGameSettingsToggleButton = n;
    t.AnimationButton = class extends n {
        read() {
            return !0 === this.storageWrapper.getAnimation() ? 0 : 1
        }
        save(e) {
            this.storageWrapper.setAnimation(0 === e)
        }
    };
    t.AntialiasButton = class extends n {
        read() {
            return !0 === this.storageWrapper.getAntialias() ? 0 : 1
        }
        save(e) {
            this.uiGameSettingsButton.showRefreshTabButton(), this.storageWrapper.setAntialias(0 === e)
        }
    };
    t.ResolutionButton = class extends n {
        read() {
            const e = this.storageWrapper.getResolution(),
                t = null == e ? 1 : e;
            return Math.floor(2 * t - 1)
        }
        save(e) {
            this.uiGameSettingsButton.showRefreshTabButton(), this.storageWrapper.setResolution((e + 1) / 2)
        }
    };
    t.PowerButton = class extends n {
        read() {
            switch (this.storageWrapper.getPowerPreference()) {
                case "low-power":
                    return 0;
                case "default":
                    return 1;
                case "high-performance":
                    return 2;
                default:
                    return 0
            }
        }
        save(e) {
            this.uiGameSettingsButton.showRefreshTabButton(), this.storageWrapper.setPowerPreference((() => {
                switch (e) {
                    case 0:
                        return "low-power";
                    case 1:
                        return "default";
                    case 2:
                        return "high-performance"
                }
                return "low-power"
            })())
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const i = a(24),
        o = a(10),
        n = a(16),
        r = a(91);
    class s extends r.default {
        constructor(e, t) {
            super(e, t, "support_button", "icon_support.svg");
            const a = (0, o.createDivIn)(this.content, "option_container"),
                r = (0, o.createDivIn)(a, "option discord_option", "discord_option");
            r.innerHTML = `<img src="${n.UIGameConstants.getImagePath("icon_discord_3.png")}"> <div class="discord_option_text">Join Discord Server</div>`, r.onclick = () => {
                window.open(i.KatanConfigs.DISCORD_CHANNEL, "_blank")
            };
            (0, o.createDivIn)(a, "option info_option").innerHTML = "Get dev support, voice chat with other players, info on tournaments and more!"
        }
    }
    t.default = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    const i = a(10),
        o = a(16);
    t.default = class {
        constructor(e) {
            this.spectatorCountDisplay = (0, i.createDivIn)(e, "spectator_count_display", "spectator-count-display"), (0, i.createImgIn)(this.spectatorCountDisplay, "spectator_count_display_img", "", o.UIGameConstants.getImagePath("icon_eye.svg"), ""), this.spectatorCountText = (0, i.createSpanIn)(this.spectatorCountDisplay, "spectator_count_display_text", "0"), this.updateSpectatorCount(0)
        }
        updateSpectatorCount(e) {
            e <= 0 ? this.setVisible(!1) : (this.setVisible(!0), this.spectatorCountText.innerHTML = "" + e)
        }
        setVisible(e) {
            this.spectatorCountDisplay.style.display = "" + (e ? "block" : "none")
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameDiceController = void 0;
    const i = a(23),
        o = a(3);
    var n = o.GameStateEnums.UIGameEventEnums;
    const r = a(11),
        s = a(514),
        c = a(78);
    t.UIGameDiceController = class {
        constructor(e) {
            this.easeAnimationCount = 0, this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.redDiceActive = !1, this.view = new s.DiceView(e), this.view.dice1.setClickAction(() => {
                this.clickedDice(this.view.dice1)
            }), this.view.dice2.setClickAction(() => {
                this.clickedDice(this.view.dice2)
            }), this.view.resetDice(), this.startDiceAnimation(), this.updateDiceImage()
        }
        onEvent(e, t) {
            switch (t) {
                case n.DiceStateUpdated:
                    this.updateDiceImage();
                    break;
                case n.GameStateUpdated:
                    this.startDiceAnimation();
                    break;
                case n.ActivateRedDice:
                    this.redDiceActive = !0, this.forceUpdateDiceImage()
            }
        }
        onGameTick(e) {
            this.animateDice(e)
        }
        clickedDice(e) {
            r.Sound.playSound(r.Sound.SoundType.Click), this.stopAnimation(), this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor ? this.uiGameManager.gameState.currentActionState == o.GameStateEnums.ActionStates.None ? this.uiGameManager.socketGameSend.clickedDice() : new c.FloatingText("Finish action first", e) : new c.FloatingText("It is not your turn", e)
        }
        animateDice(e) {
            0 == this.easeAnimationCount && (this.easeAnimationCount = e), this.view.animate(e - this.easeAnimationCount)
        }
        updateDiceImage() {
            this.uiGameManager.gameState.diceThrown && (this.view.dice1.texture = i.GameUIImages.getDiceImage(this.uiGameManager.gameState.lastDice1, this.redDiceActive), this.view.dice2.texture = i.GameUIImages.getDiceImage(this.uiGameManager.gameState.lastDice2), r.Sound.playSound(r.Sound.SoundType.DiceRoll), this.stopAnimation())
        }
        forceUpdateDiceImage() {
            this.view.dice1.texture = i.GameUIImages.getDiceImage(1, this.redDiceActive), this.view.dice2.texture = i.GameUIImages.getDiceImage(2), this.updateDiceImage()
        }
        startDiceAnimation() {
            this.uiGameManager.gameState.currentActionState != o.GameStateEnums.ActionStates.SelectDiceForAlchemist ? (this.uiGameManager.gameState.currentTurnState == o.GameStateEnums.TurnStates.GameEnd && this.stopAnimation(), this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && this.uiGameManager.gameState.currentTurnState == o.GameStateEnums.TurnStates.Dice && (this.uiGameManager.gameState.diceThrown || (this.uiGameManager.eventController.registerUIGameAnimation(this), this.view.tintActive()))) : this.stopAnimation()
        }
        stopAnimation() {
            this.easeAnimationCount = 0, this.uiGameManager.eventController.unregisterUIGameAnimation(this), this.view.resetDice()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.DiceView = void 0;
    const i = a(17),
        o = a(6),
        n = a(13),
        r = a(26),
        s = a(28);
    class c extends i.SectionBgView {
        constructor(e) {
            const t = e.canvasController,
                a = t.appW - t.chatWidth - 2.25 * t.itemSize,
                i = t.appH - 2.75 * t.itemSize,
                s = t.itemSize,
                c = s + t.margin;
            super(a, i, 2 * s, s, t.app.stage, !0), this.diceSize = s, this.dice1 = new n.SpriteView(0, 0, s, s, this, o.Loader.shared.resources.dice_1.texture), this.dice2 = new n.SpriteView(c, 0, s, s, this, o.Loader.shared.resources.dice_2.texture), this.dice1Center = new r.Point(this.dice1.x + this.dice1.width / 2, this.dice1.y + this.dice1.height / 2), this.dice2Center = new r.Point(this.dice2.x + this.dice2.width / 2, this.dice2.y + this.dice2.height / 2)
        }
        animate(e) {
            const t = this.getAnimationSize(e);
            c.changeDiceSize(this.dice1, this.dice1Center, t), c.changeDiceSize(this.dice2, this.dice2Center, t)
        }
        static changeDiceSize(e, t, a) {
            e.width = a, e.height = a, e.x = t.x - a / 2, e.y = t.y - a / 2
        }
        resetDice() {
            c.changeDiceSize(this.dice1, this.dice1Center, this.diceSize), c.changeDiceSize(this.dice2, this.dice2Center, this.diceSize), this.tintPassive()
        }
        tintActive() {
            this.dice1.tint = s.GameColor.getColorHexValue(s.GameColor.Color.Gray4), this.dice2.tint = s.GameColor.getColorHexValue(s.GameColor.Color.Gray4)
        }
        tintPassive() {
            this.dice1.tint = s.GameColor.getColorHexValue(s.GameColor.Color.Gray2), this.dice2.tint = s.GameColor.getColorHexValue(s.GameColor.Color.Gray2)
        }
        getAnimationSize(e) {
            const t = 1 + .1 * Math.sin(.8 * e);
            return this.diceSize * t
        }
    }
    t.DiceView = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameToolTipController = void 0;
    const i = a(516);
    t.UIGameToolTipController = class {
        constructor(e) {
            this.app = e
        }
        startedHovering(e) {
            setTimeout(() => {
                const t = this.app.plugins.interaction.mouse.global,
                    a = t.x > e.getGlobalPosition().x,
                    i = t.x < e.getGlobalPosition().x + e.width,
                    o = t.y > e.getGlobalPosition().y,
                    n = t.y < e.getGlobalPosition().y + e.height;
                a && i && o && n && this.hoverAction()
            }, 500)
        }
        tipHasParent() {
            return null != this.tip && null != this.tip.parent
        }
        removeTip() {
            this.tipHasParent() && this.tip.parent.removeChild(this.tip)
        }
        createTip(e, t, a) {
            "" == e && "" == t[0] || (a.interactive = !0, a.on("pointerover", o => {
                this.startedHovering(a), this.hovering = !0, this.hoverAction = () => {
                    this.removeTip(), this.isChildOf(a, this.app.stage) && (this.tip = new i.ToolTip(e, t, a, this.app.stage))
                }
            }), a.on("pointerout", e => {
                this.removeTip(), this.hovering = !1
            }))
        }
        isChildOf(e, t) {
            return null != e.parent && (e.parent == t || this.isChildOf(e.parent, t))
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.ToolTip = void 0;
    const i = a(6),
        o = a(125),
        n = a(25),
        r = a(130),
        s = a(19);
    class c extends i.Container {
        constructor(e, t, a, i) {
            super(), this.padding = s.uiGameManager.canvasController.itemSize / 4, this.tipWidth = 3 * s.uiGameManager.canvasController.itemSize, this.TITLE_FONT = n.GameFont.Size.L, this.BODY_FONT = n.GameFont.Size.Normal, this.viewToPlaceAbove = a, this.paddingBetweenTitleAndBody = this.padding / 2, this.paddingBetweenBodyParagraphs = 3 * this.paddingBetweenTitleAndBody / 4;
            const o = this.getText([e], this.TITLE_FONT, this.padding);
            this.titleText = null == o ? void 0 : o[0], this.bodyTexts = this.getText(t, this.BODY_FONT, 0), this.container = new r.ToolTipBgView(0, 0, this.getContainerW(), this.getContainerH(), this), this.repositionTexts(), i.addChild(this), this.setCoordinates()
        }
        repositionTexts() {
            const e = [];
            null != this.titleText && e.push(this.titleText), null != this.bodyTexts && e.push(...this.bodyTexts);
            for (const t of e) this.repositionText(t);
            if (null == this.bodyTexts) return void this.centerTitleIfNoBodyText();
            let t = null == this.titleText ? this.padding : this.titleText.height + this.titleText.y + this.paddingBetweenTitleAndBody;
            for (const e of this.bodyTexts) e.y = t, t += this.paddingBetweenBodyParagraphs + e.height
        }
        centerTitleIfNoBodyText() {
            null != this.titleText && (this.titleText.y = (this.container.height - this.titleText.height) / 2)
        }
        repositionText(e) {
            e && (this.removeChild(e), this.addChild(e), e.centerX(), e.x = (this.container.width - e.width) / 2)
        }
        getContainerH() {
            let e = this.padding;
            if (this.titleText && (e += this.titleText.height), this.bodyTexts) {
                for (const t of this.bodyTexts) e += t.height;
                e += (this.bodyTexts.length - 1) * this.paddingBetweenBodyParagraphs
            }
            return this.titleText && !this.bodyTexts && (e += this.padding / 2), this.bodyTexts && (e += this.padding), e
        }
        getContainerW() {
            return this.width + this.padding + this.padding
        }
        getText(e, t, a) {
            const i = [];
            for (const n of e) {
                if ("" == n) continue;
                const e = c.generateMultipleTextLine(n);
                i.push(new o.BitmapText(e, a, this.padding, this.tipWidth, 0, this, t))
            }
            if (0 != i.length) return i
        }
        static generateMultipleTextLine(e) {
            const t = e.split(" ");
            let a = "",
                i = "",
                o = 0;
            for (const e of t) {
                o += e.length + 1;
                const n = o > 33,
                    r = e == t[t.length - 1],
                    s = e.includes("\n");
                e.replace("\n", "");
                n || r || s ? (a += n ? "\n" + e : e + "\n", i += a, a = " ", o = e.length + 1) : a += e + " "
            }
            return i
        }
        setCoordinates() {
            const e = s.uiGameManager.canvasController,
                t = this.viewToPlaceAbove.getGlobalPosition();
            this.x = t.x - this.width / 2 + this.viewToPlaceAbove.width / 2, this.x + this.width > e.appW && (this.x = e.appW - this.width - this.padding), this.x < 0 && (this.x = 0), this.y = t.y + this.viewToPlaceAbove.height, this.y + this.height > e.appH && (this.y = t.y - this.height)
        }
    }
    t.ToolTip = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameTutorialController = void 0;
    const i = a(6),
        o = a(518),
        n = a(519),
        r = a(3);
    var s = r.GameStateEnums.TurnStates,
        c = r.GameStateEnums.ActionStates,
        l = r.GameStateEnums.UIGameEventEnums;
    const h = a(23);
    t.UIGameTutorialController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.skipTutorial = !1, this.sawDice = !1, this.sawActions = !1
        }
        onEvent(e, t) {
            const a = this.uiGameManager.gameState.myColor;
            if (this.uiGameManager.gameState.currentTurnPlayerColor == a) switch (t) {
                case l.GameStateUpdated:
                    this.showStart(), this.showActions()
            }
        }
        removeBg() {
            null != this.bg && null != this.bg.parent && this.bg.parent.removeChild(this.bg)
        }
        createBg(e, t, a, i) {
            const o = this.uiGameManager.canvasController;
            this.bg = new n.TutorialBgView(o.app.stage, o.appW, o.appH, e, t, a, i)
        }
        createTutorialView(e, t, a, i, n, r) {
            const s = this.uiGameManager.canvasController;
            this.tutorialView = new o.TutorialView(e, t, a, i, s.app.stage, n, () => {
                this.skipButtonAction()
            }), this.tutorialView.nextButton.updateAction(() => {
                this.removeTutorialView(), this.removeBg(), r()
            })
        }
        removeTutorialView() {
            null != this.tutorialView && null != this.tutorialView.parent && this.tutorialView.parent.removeChild(this.tutorialView)
        }
        skipButtonAction() {
            this.removeTutorialView(), this.removeBg(), this.skipTutorial = !0
        }
        showStart() {
            if (this.uiGameManager.gameState.currentTurnState != r.GameStateEnums.TurnStates.Dice) return;
            if (this.skipTutorial || this.sawDice) return;
            this.sawDice = !0;
            const e = this.uiGameManager.canvasController,
                t = 3 * e.itemSize,
                a = e.itemSize,
                i = e.appW / 2 - t / 2,
                o = e.appH / 2 - a / 2;
            this.createBg(0, 0, 0, 0), this.createTutorialView(i, o, t, a, "Welcome to colonist tutorial", () => {
                this.showDice()
            })
        }
        showDice() {
            const e = this.uiGameManager.canvasController,
                t = e.itemSize,
                a = 2 * t + e.margin,
                i = e.appW - e.chatWidth - 2.25 * e.itemSize,
                o = e.appH - 2.75 * e.itemSize,
                n = 3 * e.itemSize,
                r = e.itemSize,
                s = i + a / 2 - n / 2,
                c = o - r - e.itemSize / 2;
            this.createBg(i, o, a, t), this.createTutorialView(s, c, n, r, "Each turn starts with rolling dice", () => {})
        }
        showActions() {
            if (this.uiGameManager.gameState.currentTurnState != s.Turn) return;
            if (this.uiGameManager.gameState.currentActionState != c.None) return;
            if (this.skipTutorial || this.sawActions) return;
            this.sawActions = !0, this.removeTutorialView(), this.removeBg();
            const e = this.uiGameManager.canvasController,
                t = this.uiGameManager.actionsController.container,
                a = i.Loader.shared.resources.icon_trade.texture,
                o = this.uiGameManager.actionsController.getButtonWithTexture(a);
            if (null == o) return;
            const n = o.getGlobalPosition(),
                r = 3 * e.itemSize,
                l = e.itemSize,
                h = n.x + (t.width + o.width) / 2 - r / 2,
                d = n.y - l - e.itemSize / 2;
            this.createBg(n.x, n.y, o.width + t.width, o.height), this.createTutorialView(h, d, r, l, "During your turn you can do these 5 actions", () => {
                this.trade()
            })
        }
        trade() {
            const e = this.uiGameManager.canvasController,
                t = i.Loader.shared.resources.icon_trade.texture,
                a = this.uiGameManager.actionsController.getButtonWithTexture(t);
            if (null == a) return;
            const o = a.getGlobalPosition(),
                n = 3 * e.itemSize,
                r = e.itemSize,
                s = o.x + a.width / 2 - n / 2,
                c = o.y - r - e.itemSize / 2;
            this.createBg(o.x, o.y, a.width, a.height), this.createTutorialView(s, c, n, r, "Trade with other players", () => {
                this.build()
            })
        }
        build() {
            const e = h.GameUIImages.getRoadForPlayer(this.uiGameManager.gameState.myColor),
                t = this.uiGameManager.canvasController,
                a = this.uiGameManager.actionsController.getButtonWithTexture(e);
            if (null == a) return;
            const i = a.getGlobalPosition(),
                o = 3 * t.itemSize,
                n = t.itemSize,
                r = i.x + 3 * t.itemSize / 2 - o / 2,
                s = i.y - n - t.itemSize / 2;
            this.createBg(i.x, i.y, 3 * t.itemSize, a.height), this.createTutorialView(r, s, o, n, "Build road, settlement & city", () => {
                this.buy()
            })
        }
        buy() {
            const e = i.Loader.shared.resources.icon_buy_dev_card.texture,
                t = this.uiGameManager.canvasController,
                a = this.uiGameManager.actionsController.getButtonWithTexture(e);
            if (null == a) return;
            const o = a.getGlobalPosition(),
                n = 3 * t.itemSize,
                r = t.itemSize,
                s = o.x + a.width / 2 - n / 2,
                c = o.y - r - t.itemSize / 2;
            this.createBg(o.x, o.y, a.width, a.height), this.createTutorialView(s, c, n, r, "Buy development card", () => {
                this.trackOpponents()
            })
        }
        trackOpponents() {
            const e = this.uiGameManager.canvasController,
                t = this.uiGameManager.playersController.container,
                a = t.getGlobalPosition(),
                i = 3 * e.itemSize,
                o = e.itemSize,
                n = a.x - i,
                r = a.y + t.height / 2 - o / 2 - e.itemSize / 4;
            this.createBg(a.x, a.y, t.width, t.height), this.createTutorialView(n, r, i, o, "You can track your opponents & yourself here", () => {
                this.aim()
            })
        }
        aim() {
            const e = this.uiGameManager.canvasController,
                t = 3.5 * e.itemSize,
                a = 2 * e.itemSize,
                i = e.appW / 2 - t / 2,
                o = e.appH / 2 - a / 2;
            this.createBg(0, 0, 0, 0);
            this.createTutorialView(i, o, t, a, "Aim: get to 10 Victory Points\n\nSettlement = 1 VP\nCity = 2 VP\nVP card = 1 VP\nLongest Road or Largest Army = 2 VP", () => {})
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TutorialView = void 0;
    const i = a(130),
        o = a(88),
        n = a(38),
        r = a(25),
        s = a(28),
        c = a(6),
        l = a(19);
    class h extends c.Container {
        constructor(e, t, a, c, h, d, u) {
            super(), this.x = e, this.y = t;
            const g = l.uiGameManager.canvasController.itemSize / 2;
            this.textContainer = new i.ToolTipBgView(0, 0, a, c, this), this.skipButton = new o.TextButtonView(0, c, a / 2, g, this), this.skipButton.highlight(), this.skipButton.updateText("Skip Tutorial"), this.skipButton.updateAction(u), this.nextButton = new o.TextButtonView(a / 2, c, a / 2, g, this), this.nextButton.highlight(), this.nextButton.updateText("Next");
            const m = r.GameFont.Size.Normal,
                p = s.GameColor.getColor(s.GameColor.Color.Gray0);
            new n.TextView(d, 5, 5, a - 10, c - 10, this.textContainer, m, p, !0).centerX(), h.addChild(this)
        }
    }
    t.TutorialView = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TutorialBgView = void 0;
    const i = a(6);
    class o extends i.Graphics {
        constructor(e, t, a, i, o, n, r) {
            super();
            this.beginFill(0, .8), this.drawRoundedRect(0, 0, t, a, 5), this.beginHole(), this.drawRoundedRect(i, o, n, r, 5), this.endHole(), e.addChild(this)
        }
    }
    t.TutorialBgView = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameAchievementController = void 0;
    const i = a(6),
        o = a(319),
        n = a(521),
        r = a(522);
    var s = a(3).GameStateEnums.UIGameEventEnums;
    const c = a(7),
        l = 500,
        h = 500,
        d = 250,
        u = 500,
        g = 500;
    class m extends i.Container {
        constructor(e) {
            super(), this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this);
            this.uiGameManager.canvasController.app.stage.addChild(this), this.ease = new o.Ease({
                useRaf: !1
            }), this.achievements = this.addChild(new i.Container), this.confetti = this.addChild(new r.UIGameAchievementConfetti), this.queue = [];
            this.zIndex = 1e4
        }
        onEvent(e, t) {
            switch (t) {
                case s.PlayerReceivedAchievement:
                    this.achieve(e)
            }
        }
        onGameTick(e) {
            this.animate(e)
        }
        animate(e) {
            this.confetti.update(e)
        }
        launchConfetti(e) {
            const t = this.uiGameManager.canvasController,
                a = t.appW - t.chatWidth;
            this.confetti.launch({
                x: a - e.width / 2,
                y: e.height / 2,
                speed: [.07, .3],
                angle: [0, 2 * Math.PI],
                slow: 1e-4,
                gravity: [.1, .2],
                count: 100,
                wait: d
            }, e.achievementOptions.playSound)
        }
        iconFly(e, t) {
            if (null == t.optionalIconStartingPoint) return;
            if (null == t.optionalIconStartingSize) return;
            const a = this.toLocal(new i.Point, e.iconContainer);
            this.addChild(e.iconContainer), e.iconContainer.position = a;
            this.ease.add(e.iconContainer, {
                x: t.optionalIconStartingPoint.x,
                y: t.optionalIconStartingPoint.y,
                scale: t.optionalIconStartingSize
            }, {
                duration: g,
                ease: "easeOutSine"
            }).on("complete", () => this.removeChild(e.iconContainer))
        }
        achievementEnd() {
            if (this.active = !1, this.uiGameManager.eventController.unregisterUIGameAnimation(this), 0 === this.queue.length) {
                this.ease.add(this.confetti, {
                    alpha: 0
                }, {
                    duration: u
                }).on("complete", () => this.confetti.afterFade())
            } else this.achieve(this.queue.pop())
        }
        achievementHide(e, t) {
            const a = this.uiGameManager.canvasController.appH,
                i = this.ease.add(e, {
                    y: a
                }, {
                    duration: h,
                    ease: "easeInSine",
                    wait: t.achievementDurationInSeconds * c.Utils.MILLISECONDS
                });
            i.on("wait-end", () => this.iconFly(e, t)), i.on("complete", () => this.achievementEnd())
        }
        achieve(e) {
            if (this.active) this.queue.push(e);
            else {
                this.active = !0, this.uiGameManager.eventController.registerUIGameAnimation(this);
                const t = new n.AchievementView(e, this.uiGameManager);
                this.achievements.addChild(t), null != this.parent && this.parent.sortChildren();
                e.player == this.uiGameManager.gameState.myColor && this.launchConfetti(t);
                const a = this.uiGameManager.canvasController.margin;
                this.ease.add(t, {
                    y: a
                }, {
                    duration: l,
                    ease: "easeOutBounce"
                }).on("complete", () => this.achievementHide(t, e))
            }
        }
    }
    t.UIGameAchievementController = m
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.AchievementView = void 0;
    const i = a(6),
        o = a(155),
        n = a(25),
        r = a(50),
        s = a(38),
        c = {
            firstLine: n.GameFont.Size.Small,
            secondLine: n.GameFont.Size.Normal
        };
    class l extends i.Container {
        constructor(e, t) {
            super(), this.achievementOptions = e, this.uiGameManager = t;
            const a = this.uiGameManager.canvasController,
                i = a.appW - a.chatWidth;
            this.drawBackground(), this.margin = .05 * this.height, this.drawTitle(e), this.drawSubtitle(e), this.drawBottomDescription(e), this.drawIcons(e.iconContainer), this.resizeContainer(), this.position.set(i - this.width - a.margin, -this.height - a.margin)
        }
        resizeContainer() {
            const e = this.uiGameManager.chatController.getLogContainerHeight() / this.height;
            this.scale.x = this.scale.x * e, this.scale.y = this.scale.y * e
        }
        drawBackground() {
            const e = this.uiGameManager.chatController.getLogContainerHeight();
            this.background = new o.RoundedBgView(e, e, this, i.Loader.shared.resources.bg_section.texture)
        }
        drawTitle(e) {
            const t = {
                    fontFamily: "Arial",
                    fontSize: n.GameFont.getResponsiveSize(c.firstLine)
                },
                a = this.uiGameManager.gameState.getPlayerWithColor(e.player),
                i = .15 * this.height;
            this.playerAvatar = new r.UIGamePlayerAvatarView(0, 0, i, this, a), this.playerAvatar.position.set(this.margin, this.margin);
            const o = .1 * this.height;
            this.title = new s.TextView(e.title, 0, this.margin, this.width, o, this), this.title.style = t, this.title.centerX()
        }
        drawSubtitle(e) {
            const t = {
                    fontFamily: "Arial",
                    fontSize: n.GameFont.getResponsiveSize(c.secondLine)
                },
                a = this.title.y + this.title.height + this.margin / 2;
            this.subtitle = new s.TextView(e.subtitle, 0, a, this.width, this.title.height, this), this.subtitle.style = t, this.subtitle.centerX()
        }
        drawBottomDescription(e) {
            const t = {
                    fontFamily: "Arial",
                    fontSize: n.GameFont.getResponsiveSize(c.secondLine),
                    wordWrap: !0,
                    wordWrapWidth: .9 * this.width,
                    align: "center"
                },
                a = e.bottomDescription,
                i = .1 * this.height;
            this.bottomDescription = new s.TextView(a, 0, 0, this.width, i, this), this.bottomDescription.style = t, this.bottomDescription.centerX(), this.bottomDescription.y = this.height - this.bottomDescription.height - this.margin
        }
        drawIcons(e) {
            this.iconContainer = e;
            const t = this.getMaxIconHeight(),
                a = this.width,
                i = t / this.iconContainer.height,
                o = a / this.iconContainer.width,
                n = Math.min(i, o);
            this.iconContainer.scale.x = this.iconContainer.scale.x * n, this.iconContainer.scale.y = this.iconContainer.scale.y * n, this.iconContainer.x = this.width / 2 - this.iconContainer.width / 2;
            const r = this.getIconUpperYLimit();
            this.iconContainer.y = t / 2 - this.iconContainer.height / 2 + r, this.addChild(this.iconContainer)
        }
        getMaxIconHeight() {
            const e = this.getIconUpperYLimit();
            return this.bottomDescription.y - this.margin - e
        }
        getIconUpperYLimit() {
            return this.subtitle.y + this.subtitle.height + this.margin
        }
    }
    t.AchievementView = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameAchievementConfetti = void 0;
    const i = a(6),
        o = a(523),
        n = a(11);
    class r extends i.Container {
        constructor() {
            super(), this.queue = [];
            for (let e = 0; e < 1e3; e += 1) {
                const e = new o.UIGameAchievementConfettiItem;
                this.queue.push(e)
            }
        }
        launch(e, t) {
            for (let t = 0; t < e.count; t += 1)
                if (0 !== this.queue.length) {
                    this.addChild(this.queue.pop()).reset(e)
                } else this.addChild(new o.UIGameAchievementConfettiItem(e));
            t && n.Sound.playSound(n.Sound.SoundType.Confetti)
        }
        update(e) {
            for (let t = this.children.length - 1; t >= 0; t--) this.children[t].update(e) && this.children.splice(t, 1)
        }
        afterFade() {
            this.removeChildren(), this.alpha = 1
        }
    }
    t.UIGameAchievementConfetti = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameAchievementConfettiItem = void 0;
    const i = a(6),
        o = a(7),
        n = a(28),
        r = [10, 20],
        s = [n.GameColor.getColorHexValue(n.GameColor.Color.PlayerBlueBgDark), n.GameColor.getColorHexValue(n.GameColor.Color.PlayerRedBgDark), n.GameColor.getColorHexValue(n.GameColor.Color.PlayerOrangeBgDark), n.GameColor.getColorHexValue(n.GameColor.Color.PlayerGreenBgDark)];
    class c extends i.Sprite {
        constructor(e) {
            super(i.Texture.WHITE), e && this.reset(e), this.anchor.set(.5)
        }
        reset(e) {
            this.position.set(e.x, e.y), this.tint = (0, o.randomElementFromArray)(s);
            const t = (0, o.randomNumberBetweenFloat)(e.angle[0], e.angle[1]),
                a = (0, o.randomNumberBetweenFloat)(e.speed[0], e.speed[1]);
            this.vx = Math.cos(t) * a, this.vy = Math.sin(t) * a, this.gravity = (0, o.randomNumberBetweenFloat)(e.gravity[0], e.gravity[1]), this.height = (0, o.randomNumberBetweenFloat)(r[0], r[1]), this.width = this.height / 2, this.rotation = (0, o.randomAngle)(), this.skew.set(0, 0), this.skewX = (0, o.randomNegativePositive)(.05), this.skewY = (0, o.randomNegativePositive)(.05), this.slow = e.slow, this.wait = void 0 === e.wait ? 0 : e.wait
        }
        update(e) {
            if (this.wait > 0) {
                if (this.wait -= e, !(this.wait <= 0)) return !1;
                this.wait = 0
            }
            return this.skew.x += this.skewX, this.skew.y += this.skewY, this.x += this.vx * e, this.y += this.vy * e, this.vx < 0 ? (this.vx += this.slow * e, this.vx = this.vx > 0 ? 0 : this.vx) : this.vx > 0 && (this.vx -= this.slow * e, this.vx = this.vx < 0 ? 0 : this.vx), this.vy < this.gravity ? (this.vy += this.slow * e, this.vy = this.vy > this.gravity ? this.gravity : this.vy) : this.vy > this.gravity && (this.vy -= this.slow * e, this.vy = this.vy < this.gravity ? this.gravity : this.vy), this.y - this.height > window.innerHeight
        }
    }
    t.UIGameAchievementConfettiItem = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameSpecialBuildPhaseButtonController = void 0;
    const i = a(62),
        o = a(78),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums;
    const s = a(6),
        c = a(525);
    t.UIGameSpecialBuildPhaseButtonController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this);
            const t = this.uiGameManager.canvasController,
                a = t.itemSize / 2,
                o = t.itemSize / 2,
                n = t.appW - t.chatWidth - 5 * t.itemSize + a,
                r = t.appH - 2 * t.itemSize + a,
                c = s.Loader.shared.resources.icon_special_build_phase_flag.texture;
            this.button = new i.SpriteButtonView(n, r, a, o, t.app.stage), this.button.addCenteredIcon(c), this.button.updateAction(() => {
                this.clickedSpecialBuildPhaseButton()
            }), this.button.setTip("Request special build phase", [""]), this.isRequestingSpecialBuildPhase = !1, this.showView(), this.repositionButtonForGameMode(), this.inititiatePlayerInformationSpecialBuildPhaseFlagViews()
        }
        onEvent(e, t) {
            switch (t) {
                case r.CancelSpecialBuildPhase:
                    this.cancelSpecialBuildPhase();
                    break;
                case r.PlayerControllerStateUpdated:
                case r.GameStateUpdated:
                    this.updateOpacity()
            }
        }
        repositionButtonForGameMode() {
            if (!this.isModeWithSpecialBuildPhaseButtonRepositioned()) return;
            const e = this.uiGameManager.canvasController;
            this.button.y -= e.itemSize / 2, this.button.x += e.itemSize / 2
        }
        isModeWithSpecialBuildPhaseButtonRepositioned() {
            return this.uiGameManager.gameState.gameSettings.modeSetting == n.ModeSettingEnum.Seafarers56P || (this.uiGameManager.gameState.gameSettings.modeSetting == n.ModeSettingEnum.CitiesAndKnights56P || this.uiGameManager.gameState.gameSettings.modeSetting == n.ModeSettingEnum.CitiesAndKnightsSeafarers56P)
        }
        clickedSpecialBuildPhaseButton() {
            this.canToggleSpecialBuildPhase(!0) && this.toggleSpecialBuildPhase()
        }
        canToggleSpecialBuildPhase(e) {
            this.uiGameManager.gameState.myColor;
            return !this.uiGameManager.gameState.isPlayerSpectator() && (!this.uiGameManager.gameState.isGameSetup() || (e && new o.FloatingText("Finish game setup", this.button), !1))
        }
        toggleSpecialBuildPhase() {
            this.isRequestingSpecialBuildPhase = !this.isRequestingSpecialBuildPhase, this.isRequestingSpecialBuildPhase ? (this.button.highlight(), this.uiGameManager.socketGameSend.requestSpecialBuildPhase()) : (this.button.removeHighlight(), this.uiGameManager.socketGameSend.cancelSpecialBuildPhase())
        }
        cancelSpecialBuildPhase() {
            this.isRequestingSpecialBuildPhase = !1, this.button.removeHighlight()
        }
        updateOpacity() {
            this.button.activateOpacity(), this.canToggleSpecialBuildPhase(!1) || this.button.inactivateOpacity()
        }
        showView() {
            null == this.button.parent && this.uiGameManager.canvasController.app.stage.addChild(this.button)
        }
        inititiatePlayerInformationSpecialBuildPhaseFlagViews() {
            for (const e of this.uiGameManager.playersController.playerInformationViews) new c.UIGamePlayerInformationSpecialBuildPhaseFlagController(this.uiGameManager, e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationSpecialBuildPhaseFlagController = void 0;
    const i = a(6),
        o = a(13),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums,
        s = n.GameStateEnums.TurnStates;
    t.UIGamePlayerInformationSpecialBuildPhaseFlagController = class {
        constructor(e, t) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerInformation = t;
            const a = this.uiGameManager.gameState.myColor;
            this.flagView = a == this.playerInformation.player.color ? this.creatMyFlagView() : this.createOpponentFlagView()
        }
        onEvent(e, t) {
            switch (t) {
                case r.GameStateUpdated:
                    this.updateSpecialBuildPhaseFlag()
            }
        }
        creatMyFlagView() {
            const e = this.playerInformation.specialIconView.height,
                t = new o.SpriteView(0, 0, e, e, this.playerInformation, i.Loader.shared.resources.icon_special_build_phase_flag.texture);
            return t.parent.removeChild(t), t
        }
        createOpponentFlagView() {
            const e = this.playerInformation.specialIconView.width,
                t = new o.SpriteView(0, 0, e, e, this.playerInformation, i.Loader.shared.resources.icon_special_build_phase_flag.texture);
            return t.parent.removeChild(t), t
        }
        updateSpecialBuildPhaseFlag() {
            this.resetPlayerInformationFlatView(), this.uiGameManager.gameState.currentTurnState == s.SpecialBuildPhase && this.uiGameManager.gameState.currentTurnPlayerColor == this.playerInformation.player.color && this.playerInformation.specialIconView.addSpriteView(this.flagView)
        }
        resetPlayerInformationFlatView() {
            null != this.flagView && null != this.flagView.parent && this.playerInformation.specialIconView.removeSpriteView(this.flagView)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameVoteController = void 0;
    const i = a(6),
        o = a(319),
        n = a(527),
        r = a(7);
    var s = a(3).GameStateEnums.UIGameEventEnums;
    const c = 500;
    t.UIGameVoteController = class {
        constructor(e) {
            var t, a;
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.log = null === (t = document.getElementById("game-log-text")) || void 0 === t ? void 0 : t.parentNode, this.chat = null === (a = document.getElementById("game-chat-text")) || void 0 === a ? void 0 : a.parentNode;
            const n = e.canvasController;
            this.ease = new o.Ease({
                useRaf: !1
            }), this.votes = new i.Container, n.app.stage.addChild(this.votes), this.queue = []
        }
        onEvent(e, t) {
            switch (t) {
                case s.VoteReceived:
                    this.updateVote(e)
            }
        }
        voteEnd() {
            this.active = !1, 0 !== this.queue.length && this.showVote(this.queue.pop())
        }
        voteHide(e) {
            this.log.style.visibility = "visible", this.chat.style.visibility = "visible", this.votes.removeChildren(), this.activeVote = void 0, this.voteEnd()
        }
        voteAccepted() {
            this.activeVote && this.voteHide(this.activeVote.view)
        }
        voteDeclined() {
            this.activeVote && this.voteHide(this.activeVote.view)
        }
        showVote(e) {
            this.active = !0;
            const t = this.uiGameManager.canvasController,
                a = i.utils.isMobile.phone ? this.log.clientWidth / 2 : this.log.clientWidth,
                o = t.appW - a - t.margin,
                r = this.log.clientHeight,
                s = new n.VoteView(this.uiGameManager, o, 0, a, r, this.votes, e, () => {
                    this.voteAccepted(), this.uiGameManager.socketGameSend.clickedVote(e.id, !0)
                }, () => {
                    this.voteDeclined(), this.uiGameManager.socketGameSend.clickedVote(e.id, !1)
                });
            this.log.style.visibility = "hidden", i.utils.isMobile.phone && (this.chat.style.visibility = "hidden");
            const l = t.margin;
            this.ease.add(s, {
                y: l
            }, {
                duration: c,
                ease: "easeOutBounce"
            });
            this.activeVote = {
                vote: e,
                view: s
            }
        }
        updateVote(e) {
            if (e.done) this.activeVote && this.voteHide(this.activeVote.view);
            else if ((0, r.elementInArray)(e.participatingPlayers, this.uiGameManager.gameState.myColor)) {
                for (const t of e.acceptedVotes)
                    if (t == this.uiGameManager.gameState.myColor) return;
                for (const t of this.queue)
                    if (t.id == e.id) return void(t.acceptedVotes = e.acceptedVotes);
                if (this.activeVote && this.activeVote.vote.id == e.id) return this.activeVote.vote.acceptedVotes = e.acceptedVotes, void this.activeVote.view.loadDataIntoPlayerList(this.activeVote.vote);
                this.active ? this.queue.push(e) : this.showVote(e)
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.VoteView = void 0;
    const i = a(6),
        o = a(25),
        n = a(88),
        r = a(22),
        s = a(17),
        c = a(50),
        l = a(90),
        h = i.utils.isMobile.phone ? 10 : 20;
    class d extends s.SectionBgView {
        constructor(e, t, a, i, o, s, c, d, u) {
            super(t, a, i, o, s, !0), this.uiGameManager = e, this.drawRoundedBg(), this.drawTitle(c);
            const g = this.height / 4.5,
                m = this.firstLine.y + this.firstLine.height + h;
            this.playerAvatarsContainer = new l.UIGamePlayerAvatarContainerView(this.uiGameManager, 0, m, this.width, g, c.participatingPlayers, () => {}, this, !1), this.playerAvatarsContainer.removeSpacingBetweenPlayerAvatarsAndCenterInContainer(), this.playerAvatarsContainer.removeRoundedBackground(), this.playerAvatarsContainer.resetAllPlayerAlpha(), this.loadDataIntoPlayerList(c);
            const p = (this.width - 100) / 2,
                C = this.height / 5,
                y = this.height / 10 + C;
            this.buttonAccept = new n.TextButtonView(this.width / 2 - p - 10, this.height - y, p, C, this), this.buttonAccept.updateAction(d), this.buttonAccept.updateText(r.EnglishTexts.ACCEPT), this.buttonDecline = new n.TextButtonView(this.width / 2 + 10, this.height - y, p, C, this), this.buttonDecline.updateAction(u), this.buttonDecline.updateText(r.EnglishTexts.DECLINE)
        }
        loadDataIntoPlayerList(e) {
            for (const t of e.participatingPlayers) {
                const a = e.acceptedVotes.indexOf(t) >= 0 ? c.UIGamePlayerAvatarStatus.Accepted : c.UIGamePlayerAvatarStatus.Waiting;
                this.playerAvatarsContainer.setPlayerStatus(t, a)
            }
        }
        drawTitle(e) {
            const t = {
                fontFamily: "Arial",
                fontSize: o.GameFont.getResponsiveSize(o.GameFont.Size.XL)
            };
            this.firstLine = new i.Text(e.title, t), this.firstLine.anchor.set(.5, 0), this.firstLine.position.set(this.width / 2, h), this.addChild(this.firstLine)
        }
    }
    t.VoteView = d
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEventController = void 0;
    const i = a(7);
    t.UIGameEventController = class {
        constructor() {
            this.uiGameMechanics = [], this.uiGameAnimations = []
        }
        registerUIGameMechanic(e) {
            (0, i.elementInArray)(this.uiGameMechanics, e) || this.uiGameMechanics.push(e)
        }
        sendEvent(e, t) {
            for (const a of this.uiGameMechanics) a.onEvent(e, t)
        }
        registerUIGameAnimation(e) {
            (0, i.elementInArray)(this.uiGameAnimations, e) || this.uiGameAnimations.push(e)
        }
        unregisterUIGameAnimation(e) {
            (0, i.removeElementFromArray)(this.uiGameAnimations, e)
        }
        gameTick(e) {
            for (const t of this.uiGameAnimations) t.onGameTick(e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameSelectPlayerToStealController = void 0;
    const i = a(530),
        o = a(31);
    var n = a(3).GameStateEnums.UIGameEventEnums;
    t.UIGameSelectPlayerToStealController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this)
        }
        onEvent(e, t) {
            switch (t) {
                case n.SelectPlayer:
                    this.createSelectPlayerUI(e);
                    break;
                case n.GameStateUpdated:
                    this.isWrongState() && this.closeUI()
            }
        }
        createSelectPlayerUI(e) {
            this.allowableActionState = e.allowableActionState, this.ui = new i.SelectPlayerUI(this.uiGameManager, e.text, e.playersToSelect, () => {
                this.checkAction()
            }, e => {
                this.selectPlayerAction(e)
            }), this.updateCheckmark(), this.unSelectAllPlayers()
        }
        isWrongState() {
            return this.uiGameManager.gameState.currentActionState != this.allowableActionState
        }
        unSelectAllPlayers() {
            for (const e of this.ui.playerAvatarContainer.playerAvatars) this.ui.playerAvatarContainer.updatePlayerAlpha(e.playerState.color, o.INACTIVE_OPACITY);
            this.selectedPlayer = void 0
        }
        selectPlayerAction(e) {
            this.unSelectAllPlayers(), this.ui.playerAvatarContainer.updatePlayerAlpha(e, o.ACTIVE_OPACITY), this.selectedPlayer = e, this.updateCheckmark()
        }
        checkAction() {
            this.selectedPlayer && (this.uiGameManager.socketGameSend.selectPlayer(this.selectedPlayer), this.closeUI())
        }
        closeUI() {
            var e, t;
            null === (t = null === (e = this.ui) || void 0 === e ? void 0 : e.parent) || void 0 === t || t.removeChild(this.ui)
        }
        updateCheckmark() {
            this.ui.bottomUI.checkButton.inactivateOpacity(), this.selectedPlayer && this.ui.bottomUI.checkButton.activateOpacity()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SelectPlayerUI = void 0;
    const i = a(63),
        o = a(38),
        n = a(25),
        r = a(531),
        s = a(90);
    class c extends r.UIGameSelectView {
        constructor(e, t, a, r, c) {
            super(), this.topTextPartition = .7, this.playerAvatarPartition = 1, this.bottomPartition = .7, this.uiGameManager = e;
            const l = this.topTextPartition + this.playerAvatarPartition + this.bottomPartition,
                h = this.height / l * this.topTextPartition,
                d = this.height / l * this.playerAvatarPartition,
                u = this.height / l * this.bottomPartition;
            new o.TextView(t, 0, 0, this.width, h, this, n.GameFont.Size.XL).centerXInParent();
            const g = .85 * this.uiGameManager.canvasController.itemSize;
            this.playerAvatarContainer = new s.UIGamePlayerAvatarContainerView(this.uiGameManager, 0, h, this.width, g, a, c, this, !0), this.bottomUI = new i.UIGamePopupConfirmationButtons(0, h + d, this.width, u, r, Function, this, !1)
        }
    }
    t.SelectPlayerUI = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameSelectView = void 0;
    const i = a(17),
        o = a(19);
    class n extends i.SectionBgView {
        constructor() {
            const e = o.uiGameManager.canvasController,
                t = e.popupWidth,
                a = 2.5 * e.itemSize;
            super(0, e.appH - e.itemSize - a, t, a, e.app.stage), this.drawRoundedBg()
        }
    }
    t.UIGameSelectView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameTurnSoundController = void 0;
    const i = a(3);
    var o = i.GameStateEnums.TurnStates,
        n = i.GameStateEnums.ActionStates,
        r = i.GameStateEnums.UIGameEventEnums;
    const s = a(11);
    t.UIGameTurnSoundController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.oldState = o.GameSetup
        }
        onEvent(e, t) {
            switch (t) {
                case r.GameStateUpdated:
                    this.playTurnSound()
            }
            this.oldState = this.uiGameManager.gameState.currentTurnState
        }
        playTurnSound() {
            this.uiGameManager.gameState.currentActionState == n.None && this.uiGameManager.gameState.currentTurnState != this.oldState && this.uiGameManager.gameState.myColor == this.uiGameManager.gameState.currentTurnPlayerColor && this.statesToPlayTurnSound() && s.Sound.playSound(s.Sound.SoundType.YourTurn)
        }
        statesToPlayTurnSound() {
            return this.uiGameManager.gameState.currentTurnState == o.Dice
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapPirateController = void 0;
    const i = a(6),
        o = a(21);
    var n = o.TileEnums.TilePieceTypes;
    const r = a(26);
    var s = a(3).GameStateEnums.UIGameEventEnums;
    const c = a(83);
    t.UIGameMapPirateController = class {
        constructor(e) {
            this.uiGameManager = e;
            const t = this.uiGameManager.gameState.mapState.tileState.getTileWithPiece(n.Pirate);
            if (null == t) return;
            this.lastPirateTile = t;
            const a = this.getPirateCoords(this.lastPirateTile),
                o = i.Loader.shared.resources.icon_pirate_ship.texture;
            this.pirateView = new c.MovingSpriteView(a.x, a.y, this.uiGameManager.mapController.mapView.pirateRadius, this.uiGameManager.mapController.mapView.pirateRadius, this.uiGameManager.mapController.mapView, o), this.pirateView.zIndex = this.uiGameManager.mapController.mapView.layers.pirate, this.pirateView.animationController.animationCompleteCallBack = () => {
                this.pirateView.zIndex = this.uiGameManager.mapController.mapView.layers.pirate, this.uiGameManager.mapController.mapView.sortChildren()
            }, this.uiGameManager.eventController.registerUIGameMechanic(this)
        }
        onEvent(e, t) {
            switch (t) {
                case s.MapStateUpdated:
                    this.updatePirate()
            }
        }
        updatePirate() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tiles)
                if (e.tilePieceTypes == o.TileEnums.TilePieceTypes.Pirate) return void this.movePirate(e)
        }
        movePirate(e) {
            if (e.sameTileHex(this.lastPirateTile)) return;
            const t = this.getPirateCoords(e);
            this.pirateView.zIndex = this.uiGameManager.mapController.mapView.layers.topLayer, this.uiGameManager.mapController.mapView.sortChildren(), this.pirateView.animationController.animateTo(t), this.lastPirateTile = e
        }
        getPirateCoords(e) {
            const t = e.hexFace.toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                a = t.x - 1.2 * this.uiGameManager.mapController.mapView.pirateRadius,
                i = t.y - .25 * this.uiGameManager.mapController.mapView.pirateRadius,
                o = t.x + .1 * this.uiGameManager.mapController.mapView.pirateRadius,
                n = t.y - .3 * this.uiGameManager.mapController.mapView.pirateRadius,
                s = this.uiGameManager.gameState.mapState.isPortOnEastSideOfTile(e),
                c = s ? a : o,
                l = s ? i : n;
            return new r.Point(c, l)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMerchantController = void 0;
    const i = a(129);
    var o = a(3).GameStateEnums.UIGameEventEnums;
    const n = a(83),
        r = a(6),
        s = a(26),
        c = a(535);
    t.UIGameMerchantController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.merchant = new i.MerchantPiece;
            const t = r.Loader.shared.resources.icon_merchant_green.texture,
                a = this.uiGameManager.mapController.mapView;
            this.merchantView = new n.MovingSpriteView(0, 0, a.merchantRadius, a.merchantRadius, a, t), this.merchantView.zIndex = a.layers.robber, this.hideMerchant(), this.merchantPlayerInformationViews = [], this.initMerchantPlayerInformationViews()
        }
        onEvent(e, t) {
            switch (t) {
                case o.MerchantStateReceived:
                    this.updateMerchant(e);
                    break;
                case o.ShowTradeUI:
                    this.displayMerchantBonusIcon()
            }
        }
        updateMerchant(e) {
            this.hideMerchant(), this.merchant.deserialize(e), this.repositionMerchant(), this.uiGameManager.eventController.sendEvent(void 0, o.MerchantStateUpdated)
        }
        hideMerchant() {
            null != this.merchantView.parent && this.merchantView.parent.removeChild(this.merchantView)
        }
        initMerchantPlayerInformationViews() {
            for (const e of this.uiGameManager.playersController.playerInformationViews) this.merchantPlayerInformationViews.push(new c.UIGamePlayerInformationMerchantView(this.uiGameManager, e, this.merchant))
        }
        repositionMerchant() {
            if (null == this.merchant.location) return;
            const e = this.merchant.getMerchantImageName(),
                t = r.Loader.shared.resources[e].texture;
            this.merchantView.texture = t;
            const a = this.getMerchantPosition(this.merchant.location),
                i = a.y - this.uiGameManager.mapController.mapView.hexagonHeight;
            this.merchantView.x = a.x, this.merchantView.y = i, this.uiGameManager.mapController.mapView.addChild(this.merchantView), this.merchantView.animationController.animateTo(a)
        }
        getMerchantPosition(e) {
            const t = e.hexFace.toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                a = this.uiGameManager.mapController.mapView,
                i = t.x + a.hexagonWidth / 4 - a.merchantRadius / 2,
                o = t.y - a.hexagonHeight / 4 + a.merchantRadius / 4;
            return new s.Point(i, o)
        }
        displayMerchantBonusIcon() {
            this.merchant.owner == this.uiGameManager.gameState.currentTurnPlayerColor && null != this.merchant.activeTradeBonus && this.uiGameManager.eventController.sendEvent(this.merchant.activeTradeBonus, o.MerchantBankTradeRatioActive)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationMerchantView = void 0;
    const i = a(13),
        o = a(6),
        n = a(129);
    var r = a(3).GameStateEnums.UIGameEventEnums;
    const s = a(22);
    t.UIGamePlayerInformationMerchantView = class {
        constructor(e, t, a) {
            this.uiGameManager = e, this.playerInformation = t, this.merchant = a, this.uiGameManager.eventController.registerUIGameMechanic(this);
            const i = this.uiGameManager.gameState.myColor == t.player.color;
            this.merchantIconView = i ? this.getMyMerchantIconView() : this.getOpponentMerchantIconView(), this.merchantIconView.setTip(s.EnglishTexts.PROGRESS_CARD_TRADE_MERCHANT_TIP_TITLE, [s.EnglishTexts.PROGRESS_CARD_TRADE_MERCHANT_TIP_BODY]), this.resetMerchantIconPlayerInformationView()
        }
        onEvent(e, t) {
            switch (t) {
                case r.MerchantStateUpdated:
                    this.merchantStateUpdated()
            }
        }
        getMyMerchantIconView() {
            const e = .85 * this.playerInformation.specialIconView.height,
                t = n.MerchantPiece.getMerchantImageNameForPlayer(this.playerInformation.player.color),
                a = o.Loader.shared.resources[t].texture;
            return new i.SpriteView(0, 0, e, e, this.playerInformation.specialIconView, a)
        }
        getOpponentMerchantIconView() {
            const e = .85 * this.playerInformation.specialIconView.width,
                t = n.MerchantPiece.getMerchantImageNameForPlayer(this.playerInformation.player.color),
                a = o.Loader.shared.resources[t].texture;
            return new i.SpriteView(0, 0, e, e, this.playerInformation.specialIconView, a)
        }
        merchantStateUpdated() {
            this.resetMerchantIconPlayerInformationView(), this.merchant.owner == this.playerInformation.player.color && this.playerInformation.specialIconView.addSpriteView(this.merchantIconView)
        }
        resetMerchantIconPlayerInformationView() {
            null != this.merchantIconView && null != this.merchantIconView.parent && this.playerInformation.specialIconView.removeSpriteView(this.merchantIconView)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapChitController = void 0;
    const i = a(21),
        o = a(6);
    var n = a(3).GameStateEnums.UIGameEventEnums;
    const r = a(105),
        s = a(26);
    t.UIGameMapChitController = class {
        constructor(e) {
            this.chitViews = [], this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.drawChits()
        }
        onEvent(e, t) {
            switch (t) {
                case n.MapStateUpdated:
                    this.drawChits()
            }
        }
        drawChits() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tileCorners) e.buildingType != i.TileEnums.CornerBuildingTypes.Empty && e.checkForBonusOfType(i.TileEnums.CornerBonusTypes.IslandSettlingChits) && (this.cornerExists(e) || this.drawChitOnCorner(e))
        }
        cornerExists(e) {
            for (const t of this.chitViews)
                if (t.corner.sameCorner(e)) return !0;
            return !1
        }
        drawChitOnCorner(e, t = !0) {
            const a = e.hexCorner.toPixel(this.uiGameManager.mapController.mapView.mapCenter, this.uiGameManager.mapController.mapView.hexagonHeight / 2),
                i = a.x + .15 * this.uiGameManager.mapController.mapView.cornerCircleR,
                n = a.y - 1.1 * this.uiGameManager.mapController.mapView.cornerCircleR,
                c = t ? n - this.uiGameManager.mapController.mapView.hexagonHeight : n,
                l = this.uiGameManager.mapController.mapView.cornerCircleR,
                h = l,
                d = o.Loader.shared.resources.icon_chit.texture,
                u = new r.UIGameMapCornerView(e, i, c, l, h, this.uiGameManager.mapController.mapView.layers.chits, d, this.uiGameManager.mapController.mapView),
                g = new s.Point(i, n);
            u.animationController.animateTo(g), this.chitViews.push(u)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameFogTileController = void 0;
    const i = a(21),
        o = a(23),
        n = a(304),
        r = a(538);
    var s = a(3).GameStateEnums.UIGameEventEnums;
    class c extends n.UIGameBaseTileController {
        constructor(e) {
            super(e), this.uiGameManager.eventController.registerUIGameMechanic(this), this.fogTiles = [], this.populateFogTiles(), this.fogTileShoreController = new r.UIGameFogShoreTileController(this.uiGameManager)
        }
        onEvent(e, t) {
            switch (t) {
                case s.MapStateUpdated:
                    this.updateFogTiles()
            }
        }
        populateFogTiles() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tiles) {
                if (e.tileType != i.TileEnums.TileTypes.Fog) continue;
                const t = new i.TileHex(e.hexFace, e.tileType, e.diceNumber, e.tilePieceTypes);
                this.fogTiles.push(t)
            }
        }
        updateFogTiles() {
            if (0 != this.fogTiles.length)
                for (let e of this.fogTiles)
                    if (e.tileType == i.TileEnums.TileTypes.Fog) {
                        for (const t of this.uiGameManager.gameState.mapState.tileState.tiles) t.hexFace.sameFace(e.hexFace) && t.tileType != i.TileEnums.TileTypes.Fog && (e = t, this.updateTileTexture(e), this.fogTileShoreController.redrawShoreAroundTile(e));
                        this.uiGameManager.mapController.mapView.sortChildren()
                    }
        }
        updateTileTexture(e) {
            const t = o.GameUIImages.getHexImage(e.tileType);
            if (null != t)
                for (const a of this.uiGameManager.mapController.tileViews) e.hexFace.sameFace(a.hexFace) && (a.tileSpriteView.texture = t)
        }
    }
    t.UIGameFogTileController = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameFogShoreTileController = void 0;
    const i = a(307),
        o = a(21),
        n = a(6),
        r = a(7);
    class s extends i.UIGameBaseShoreTileController {
        constructor(e) {
            super(e), this.hexesAroundFogTiles = [], this.fogNeighborsTileViews = [], this.findHexesAroundFogTiles(), this.drawTemporaryFogShoreTiles()
        }
        findHexesAroundFogTiles() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tiles)
                if (e.tileType == o.TileEnums.TileTypes.Fog) {
                    this.hexesAroundFogTiles.push(e.hexFace);
                    for (const t of e.hexFace.neighbors()) this.isNeighboringFogHexAlreadyTracker(t) || this.isNeighborLand(t) || (0, r.elementInArray)(this.hexesAroundFogTiles, t) || this.hexesAroundFogTiles.push(t)
                }
        }
        isNeighboringFogHexAlreadyTracker(e) {
            for (const t of this.hexesAroundFogTiles)
                if (t.sameFace(e)) return !0;
            return !1
        }
        drawTemporaryFogShoreTiles() {
            const e = n.Loader.shared.resources.tile_blank.texture;
            for (const t of this.hexesAroundFogTiles) {
                const a = this.drawShoreTile(t, e);
                this.fogNeighborsTileViews.push(a)
            }
        }
        redrawShoreAroundTile(e) {
            this.updateTileType(e);
            let t = e.hexFace.neighbors();
            t.push(e.hexFace), e.tileType == o.TileEnums.TileTypes.Sea && (t = [e.hexFace]);
            for (const e of t) this.isNeighborFog(e) || this.isNeighborLand(e) || this.updateTileTexture(e)
        }
        updateTileTexture(e) {
            for (const t of this.fogNeighborsTileViews) {
                if (!t.hexFace.sameFace(e)) continue;
                const a = this.getTextureAndAngle(t.hexFace);
                t.tileSpriteView.texture = a.texture, t.tileSpriteView.rotate(a.angle)
            }
        }
        updateTileType(e) {
            for (const t of this.uiGameManager.gameState.mapState.tileState.tiles)
                if (t.hexFace.sameFace(e.hexFace)) return void(t.tileType = e.tileType)
        }
    }
    t.UIGameFogShoreTileController = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameGoldTileController = void 0;
    const i = a(3);
    var o = i.GameStateEnums.ActionStates,
        n = i.GameStateEnums.TurnStates,
        r = i.GameStateEnums.UIGameEventEnums;
    const s = a(28),
        c = a(21),
        l = a(20);
    class h {
        constructor(e) {
            this.uiGameManager = e, this.animate = !1, this.tilesToAnimate = [], this.oldActionState = o.None, this.uiGameManager.eventController.registerUIGameMechanic(this)
        }
        onEvent(e, t) {
            switch (t) {
                case r.DiceStateUpdated:
                    this.findGoldTilesToAnimate();
                    break;
                case r.GameStateUpdated:
                    this.checkIfGoldTileShouldBeFlashing()
            }
        }
        onGameTick(e) {
            this.animateGoldTile(e)
        }
        findGoldTilesToAnimate() {
            if (!this.uiGameManager.gameState.diceThrown) return;
            this.resetTilesToAnimate();
            const e = this.uiGameManager.gameState.lastDice1 + this.uiGameManager.gameState.lastDice2;
            for (const t of this.uiGameManager.gameState.mapState.tileState.tiles) {
                if (t.tileType != c.TileEnums.TileTypes.Gold) continue;
                if (t.diceNumber != e) continue;
                if (!this.isPlayerTouchingGoldTile(t)) continue;
                const a = this.uiGameManager.mapController.getTileViewForHexFace(t.hexFace);
                null != a && this.tilesToAnimate.push(a)
            }
            this.tilesToAnimate.length > 0 && this.startAnimation()
        }
        isPlayerTouchingGoldTile(e) {
            for (const t of e.hexFace.corners()) {
                const e = this.uiGameManager.gameState.mapState.tileState.getTileCorner(t);
                if (null != e && e.owner != l.PlayerColors.None) return !0
            }
            return !1
        }
        resetTilesToAnimate() {
            this.tilesToAnimate = []
        }
        startAnimation() {
            this.uiGameManager.eventController.registerUIGameAnimation(this)
        }
        endAnimation() {
            this.uiGameManager.eventController.unregisterUIGameAnimation(this), this.animate = !1;
            for (const e of this.tilesToAnimate) e.resetHighlight()
        }
        checkIfGoldTileShouldBeFlashing() {
            if (this.shouldGoldAnimationEnd() && this.endAnimation(), this.didFogTileGetRevealedAsGold()) return;
            this.oldActionState = this.uiGameManager.gameState.currentActionState;
            this.uiGameManager.gameState.currentActionState == i.GameStateEnums.ActionStates.SelectCardsForPendingDistributions && (this.animate = !0)
        }
        shouldGoldAnimationEnd() {
            if (!(this.oldActionState == o.SelectCardsForPendingDistributions)) return !1;
            return !(this.uiGameManager.gameState.currentActionState == o.SelectCardsForPendingDistributions)
        }
        didFogTileGetRevealedAsGold() {
            return this.uiGameManager.gameState.currentTurnState == n.Turn || this.uiGameManager.gameState.currentTurnState == n.SpecialBuildPhase
        }
        animateGoldTile(e) {
            if (!this.animate) return;
            const t = Math.round(5 * Math.sin(.8 * e) + 5),
                a = h.getGrayScaleForCount(t);
            for (const e of this.tilesToAnimate) e.tileSpriteView.tint = a
        }
        static getGrayScaleForCount(e) {
            switch (e % 12) {
                case 0:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale13);
                case 1:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale14);
                case 2:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale15);
                case 3:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale16);
                case 4:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale17);
                case 5:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale18);
                case 6:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale19);
                case 7:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale20);
                case 8:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale21);
                case 9:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale22);
                case 10:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale23);
                case 11:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale24);
                case 12:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale25);
                default:
                    return s.GameColor.getColorHexValue(s.GameColor.Color.GrayScale0)
            }
        }
    }
    t.UIGameGoldTileController = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapCityWallController = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(105),
        n = a(21);
    var r = n.TileEnums.CornerBonusTypes;
    const s = a(7),
        c = a(23),
        l = a(26);
    t.UIGameMapCityWallController = class {
        constructor(e) {
            this.cityWallViews = [], this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.uiGameManager.actionsController.activateCityWallButton(), this.cityWallViews = [], this.drawCityWalls()
        }
        onEvent(e, t) {
            switch (t) {
                case i.MapStateUpdated:
                    this.drawCityWalls()
            }
        }
        drawCityWalls() {
            this.checkAndRemoveCityWallsThatWereDestroyed();
            for (const e of this.uiGameManager.gameState.mapState.tileState.tileCorners) e.buildingType == n.TileEnums.CornerBuildingTypes.City && e.checkForBonusOfType(n.TileEnums.CornerBonusTypes.CityWall) && (this.cornerExists(e) || this.drawCityWallOnCorner(e))
        }
        checkAndRemoveCityWallsThatWereDestroyed() {
            for (const e of this.cityWallViews) e.corner.checkForBonusOfType(r.CityWall) || (e.parent.removeChild(e), (0, s.removeElementFromArray)(this.cityWallViews, e))
        }
        cornerExists(e) {
            for (const t of this.cityWallViews)
                if (t.corner.sameCorner(e)) return !0;
            return !1
        }
        drawCityWallOnCorner(e) {
            const t = c.GameUIImages.getCityWallForPlayer(e.owner),
                a = this.uiGameManager.mapController.mapView,
                i = e.hexCorner.toPixel(a.mapCenter, a.hexagonHeight / 2),
                n = i.y - .6 * a.cornerCircleR,
                r = i.x - a.cornerCircleR,
                s = 2 * a.cornerCircleR,
                h = s,
                d = a.layers.mapCityWall,
                u = n - a.hexagonHeight,
                g = new o.UIGameMapCornerView(e, r, u, s, h, d, t, a),
                m = new l.Point(g.x, n);
            g.animationController.animateTo(m), this.cityWallViews.push(g), this.uiGameManager.mapController.mapView.sortChildren()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameKnightController = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(320),
        n = a(542),
        r = a(543),
        s = a(544),
        c = a(545),
        l = a(546),
        h = a(547),
        d = a(6);
    t.UIGameKnightController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerKnightStates = [], this.initPlayerKnightStates(), this.initKnightButton(), this.playerInformationKnightIconViews = [], this.initPlayerInformationKnightIconViews()
        }
        initPlayerKnightStates() {
            for (const e of this.uiGameManager.gameState.players) this.playerKnightStates.push(new l.PlayerKnightState(e.color))
        }
        initPlayerInformationKnightIconViews() {
            for (const e of this.playerKnightStates) {
                const t = new h.UIGamePlayerInformationKnightView(this.uiGameManager, e);
                this.playerInformationKnightIconViews.push(t)
            }
        }
        getPlayerKnightState(e) {
            for (const t of this.playerKnightStates)
                if (t.player == e) return t
        }
        getPlayerInformationKightIconView(e) {
            for (const t of this.playerInformationKnightIconViews)
                if (t.playerKnightState.player == e) return t
        }
        onEvent(e, t) {
            switch (t) {
                case i.KnightStateReceived:
                    this.updateMyKnightState(e)
            }
        }
        initKnightButton() {
            if (this.uiGameManager.gameState.isPlayerSpectator()) return;
            const e = this.uiGameManager.actionsController.container,
                t = new o.UIGameActionButtonMultiView(this.uiGameManager, 9, e),
                a = d.Loader.shared.resources.knight_active_level1.texture;
            t.addCenteredIcon(a), t.setTip("Knight Actions", [""]), this.uiGameManager.actionsController.addButton(t);
            const i = this.getPlayerKnightState(this.uiGameManager.gameState.myColor);
            null != i && (t.addButton(new r.UIGameActionButtonViewKnightPlacement(this.uiGameManager, e, t, i)), t.addButton(new n.UIGameActionButtonViewKnightActivation(this.uiGameManager, e, t, i)), t.addButton(new s.UIGameActionButtonViewKnightUpgrade(this.uiGameManager, e, t, i)), t.addButton(new c.UIGameActionButtonViewKnightActions(this.uiGameManager, e, t, i)))
        }
        updateMyKnightState(e) {
            for (const t of e) {
                const e = this.getPlayerKnightState(t.player);
                null != e && e.deserialize(t)
            }
            this.highlightPlayerWithHighestKnightStrength(), this.uiGameManager.eventController.sendEvent(void 0, i.KnightStateUpdated)
        }
        highlightPlayerWithHighestKnightStrength() {
            const e = this.getHighestKnightStrength();
            for (const t of this.playerKnightStates) {
                const a = t.getPlayerKnightStrength(),
                    i = 0 != e && a == e,
                    o = this.getPlayerInformationKightIconView(t.player);
                null != o && o.highlight(i)
            }
        }
        getHighestKnightStrength() {
            let e = 0;
            for (const t of this.playerKnightStates) {
                const a = t.getPlayerKnightStrength();
                a <= e || (e = a)
            }
            return e
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewKnightActivation = void 0;
    const i = a(58),
        o = a(23),
        n = a(21),
        r = a(3);
    var s = r.GameStateEnums.UIGameEventEnums,
        c = r.GameStateEnums.ActionStates,
        l = r.GameStateEnums.TurnStates,
        h = r.GameStateEnums.CardEnum;
    const d = a(93),
        u = a(7);
    class g extends i.UIGameActionButtonViewWithBadge {
        constructor(e, t, a, i) {
            const r = n.TileEnums.CornerBuildingTypes.KnightActiveLevel1,
                s = o.GameUIImages.getKnightForPlayer(e.gameState.myColor, r);
            super(e, 2, t, i.getAmountOfKnightsEligibleForUpgrade()), this.addCenteredIcon(s), this.parentButton = a, this.myKnightState = i, this.setUpdateAction();
            const c = [h.Grain];
            this.setHoverAction(c), this.setTip("Activate Knight", [""])
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case s.KnightStateUpdated:
                    this.stateUpdated(), this.playerStateUpdated();
                    break;
                case s.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        playerStateUpdated() {
            const e = this.myKnightState.getAmountOfKnightsEligibleForActivation();
            this.updateBadgeCount(e)
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedActivateKnight()
            })
        }
        clickedActivateKnight() {
            if (this.cancelBuild()) return;
            const e = this.myKnightState.getKnightActionOfType(d.KnightActionTypes.ActivateKnight);
            null != e && this.canPerformBuyAction(e.actionStatus) && this.uiGameManager.socketGameSend.activateKnight()
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.uiGameManager.gameState.currentActionState == c.ActivateKnight && (this.uiGameManager.eventController.sendEvent([], s.SetCornerHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.canPlayerActivateKnight() && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        canPlayerActivateKnight() {
            const e = this.myKnightState.getKnightActionOfType(d.KnightActionTypes.ActivateKnight);
            return null != e && e.actionStatus.canTakeAction
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, u.elementInArray)(r.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && (this.activateOpacity(), this.parentButton.activateOpacity())
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == l.Turn || this.uiGameManager.gameState.currentTurnState == l.SpecialBuildPhase
        }
        updateHighlightForActionState() {
            this.uiGameManager.gameState.currentActionState == c.ActivateKnight && (this.activateOpacity(), this.highlight())
        }
    }
    t.UIGameActionButtonViewKnightActivation = g
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewKnightPlacement = void 0;
    const i = a(58),
        o = a(23),
        n = a(21),
        r = a(3);
    var s = r.GameStateEnums.UIGameEventEnums,
        c = r.GameStateEnums.ActionStates,
        l = r.GameStateEnums.TurnStates;
    const h = a(93),
        d = a(7);
    class u extends i.UIGameActionButtonViewWithBadge {
        constructor(e, t, a, i) {
            const s = n.TileEnums.CornerBuildingTypes.KnightInactiveLevel1,
                c = o.GameUIImages.getKnightForPlayer(e.gameState.myColor, s);
            super(e, 1, t, i.getAmountOfKnightsOfLevelThatCanBePlacedOnMap(1)), this.addCenteredIcon(c), this.parentButton = a, this.myKnightState = i, this.setUpdateAction(), this.stateUpdated();
            const l = r.GameStateEnums.GameConstants.getCardEnumsForPiece(r.GameStateEnums.PieceTypes.Knight);
            this.setHoverAction(l), this.setTip("Purchase Knight", [""])
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case s.KnightStateUpdated:
                    this.stateUpdated(), this.playerStateUpdated();
                    break;
                case s.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        playerStateUpdated() {
            const e = this.myKnightState.getAmountOfKnightsOfLevelThatCanBePlacedOnMap(1);
            this.updateBadgeCount(e)
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedKnightButton()
            })
        }
        clickedKnightButton() {
            if (this.cancelBuild()) return;
            const e = this.myKnightState.getKnightActionOfType(h.KnightActionTypes.PlaceKnight);
            null != e && this.canPerformBuyAction(e.actionStatus) && this.uiGameManager.socketGameSend.placeKnight()
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.uiGameManager.gameState.currentActionState == c.PlaceKnight && (this.uiGameManager.eventController.sendEvent([], s.SetCornerHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.canPlayerPlaceLevel1Knight() && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        canPlayerPlaceLevel1Knight() {
            const e = this.myKnightState.getKnightActionOfType(h.KnightActionTypes.PlaceKnight);
            return null != e && e.actionStatus.canTakeAction
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, d.elementInArray)(r.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && (this.activateOpacity(), this.parentButton.activateOpacity())
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == l.Turn || this.uiGameManager.gameState.currentTurnState == l.SpecialBuildPhase
        }
        updateHighlightForActionState() {
            this.uiGameManager.gameState.currentActionState == c.PlaceKnight && (this.activateOpacity(), this.highlight())
        }
    }
    t.UIGameActionButtonViewKnightPlacement = u
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewKnightUpgrade = void 0;
    const i = a(58),
        o = a(6),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums,
        s = n.GameStateEnums.ActionStates,
        c = n.GameStateEnums.TurnStates;
    const l = a(93),
        h = a(13),
        d = a(7);
    class u extends i.UIGameActionButtonViewWithBadge {
        constructor(e, t, a, i) {
            super(e, 3, t, i.getAmountOfKnightsEligibleForUpgrade()), this.parentButton = a, this.myKnightState = i;
            const r = o.Loader.shared.resources.knight_active_level1.texture,
                s = .2 * this.width,
                c = .6 * this.height,
                l = r.width / r.height * c,
                d = new h.SpriteView(s, 0, l, c, this.viewContainer, r);
            this.addAsset(d), this.centerIconInY(d);
            const u = o.Loader.shared.resources.icon_arrow_white.texture,
                g = .4 * this.width,
                m = .55 * this.height,
                p = u.width / u.height * m,
                C = new h.SpriteView(g, 0, p, m, this.viewContainer, u);
            C.rotate(-90), C.x = .65 * this.width, C.y = .5 * this.height, this.addAsset(C), this.setUpdateAction(), this.stateUpdated();
            const y = n.GameStateEnums.GameConstants.getCardEnumsForPiece(n.GameStateEnums.PieceTypes.Knight);
            this.setHoverAction(y), this.setTip("Upgrade Knight", [""])
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case r.KnightStateUpdated:
                    this.stateUpdated(), this.playerStateUpdated();
                    break;
                case r.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        playerStateUpdated() {
            const e = this.myKnightState.getAmountOfKnightsEligibleForUpgrade();
            this.updateBadgeCount(e)
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedKnightUpgrade()
            })
        }
        clickedKnightUpgrade() {
            if (this.cancelBuild()) return;
            const e = this.myKnightState.getKnightActionOfType(l.KnightActionTypes.UpgradeKnight);
            null != e && this.canPerformBuyAction(e.actionStatus) && this.uiGameManager.socketGameSend.upgradeKnight()
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (this.uiGameManager.gameState.currentActionState == s.UpgradeKnight && (this.uiGameManager.eventController.sendEvent([], r.SetCornerHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.canPlayerUpgradeKnight() && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        canPlayerUpgradeKnight() {
            const e = this.myKnightState.getKnightActionOfType(l.KnightActionTypes.UpgradeKnight);
            return null != e && e.actionStatus.canTakeAction
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, d.elementInArray)(n.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && (this.activateOpacity(), this.parentButton.activateOpacity())
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == c.Turn || this.uiGameManager.gameState.currentTurnState == c.SpecialBuildPhase
        }
        updateHighlightForActionState() {
            this.uiGameManager.gameState.currentActionState == s.UpgradeKnight && (this.activateOpacity(), this.highlight())
        }
    }
    t.UIGameActionButtonViewKnightUpgrade = u
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewKnightActions = void 0;
    const i = a(6),
        o = a(58),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums,
        s = n.GameStateEnums.ActionStates,
        c = n.GameStateEnums.TurnStates;
    const l = a(93),
        h = a(20),
        d = a(31),
        u = a(7);
    class g extends o.UIGameActionButtonViewWithBadge {
        constructor(e, t, a, i) {
            super(e, 4, t, 0);
            const o = this.uiGameManager.gameState.isPlayerSpectator(),
                n = g.getMoveKnightTextureForColor(e.gameState.myColor, o);
            this.addCenteredIcon(n, .75), this.parentButton = a, this.myKnightState = i, this.setTip("Knight Action", [""]), this.setUpdateAction()
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case r.KnightStateUpdated:
                    this.stateUpdated(), this.playerStateUpdated();
                    break;
                case r.GameStateUpdated:
                    this.stateUpdated()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedKnightAction()
            })
        }
        playerStateUpdated() {
            this.updateBadgeCount(this.myKnightState.knightsLocationsEligibleForActions.length)
        }
        clickedKnightAction() {
            if (this.cancelBuild()) return;
            const e = this.myKnightState.getKnightActionOfType(l.KnightActionTypes.UseKnight);
            null != e && this.canPerformBuyAction(e.actionStatus) && this.uiGameManager.socketGameSend.takeKnightAction()
        }
        allowableActionStates() {
            return this.uiGameManager.gameState.currentActionState == s.SelectKnightToTakeAction || this.uiGameManager.gameState.currentActionState == s.SelectKnightAction
        }
        cancelBuild() {
            return this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && (!!this.allowableActionStates() && (this.uiGameManager.eventController.sendEvent([], r.SetCornerHighlight), this.uiGameManager.eventController.sendEvent([], r.SetTileHighlight), this.uiGameManager.socketGameSend.cancelAction(), !0))
        }
        canPlayerTakeKnightAction() {
            const e = this.myKnightState.getKnightActionOfType(l.KnightActionTypes.UseKnight);
            return null != e && e.actionStatus.canTakeAction
        }
        stateUpdated() {
            this.inactivateOpacity(), this.removeHighlight(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.canPlayerTakeKnightAction() && (this.updateOpacityForTurnState(), this.updateHighlightForActionState())
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, u.elementInArray)(n.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && (this.activateOpacity(), this.parentButton.activateOpacity())
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == c.Turn
        }
        updateHighlightForActionState() {
            this.allowableActionStates() && (this.activateOpacity(), this.highlight())
        }
        static getMoveKnightTextureForColor(e, t) {
            if (t) return i.Loader.shared.resources.knight_move_green.texture;
            switch (e) {
                case h.PlayerColors.Blue:
                    return i.Loader.shared.resources.knight_move_blue.texture;
                case h.PlayerColors.Red:
                    return i.Loader.shared.resources.knight_move_red.texture;
                case h.PlayerColors.Orange:
                    return i.Loader.shared.resources.knight_move_orange.texture;
                case h.PlayerColors.Green:
                    return i.Loader.shared.resources.knight_move_green.texture;
                case h.PlayerColors.Bronze:
                    return i.Loader.shared.resources.knight_move_bronze.texture;
                case h.PlayerColors.Silver:
                    return i.Loader.shared.resources.knight_move_silver.texture;
                case h.PlayerColors.Gold:
                    return i.Loader.shared.resources.knight_move_gold.texture;
                case h.PlayerColors.Black:
                    return i.Loader.shared.resources.knight_move_black.texture;
                case h.PlayerColors.Purple:
                    return i.Loader.shared.resources.knight_move_purple.texture;
                case h.PlayerColors.MysticBlue:
                    return i.Loader.shared.resources.knight_move_mysticblue.texture;
                case h.PlayerColors.White:
                    return i.Loader.shared.resources.knight_move_white.texture;
                case h.PlayerColors.None:
            }
            return (0, d.logError)("getMoveKnightTextureForColor", [e]), i.Loader.shared.resources.knight_move_green.texture
        }
    }
    t.UIGameActionButtonViewKnightActions = g
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PlayerKnightState = void 0;
    const i = a(93);
    class o {
        constructor(e) {
            this.player = e, this.knights = [], this.possibleKnightActions = [], this.knightsLocationsEligibleForActions = []
        }
        getKnightWithLevelFromInventory(e, t = !1) {
            for (const a of this.knights) {
                if (null != a.mapLocation) continue;
                if (a.level != e) continue;
                if (t || a.unlocked) return a
            }
        }
        getAllKnightsWithLevelFromMap(e) {
            const t = [];
            for (const a of this.knights) null != a.mapLocation && a.level == e && t.push(a);
            return t
        }
        getHighestKnightWithLevelFromInventory(e, t) {
            for (let a = e; a > 0; a--) {
                const e = this.getKnightWithLevelFromInventory(a, t);
                if (null != e) return e
            }
        }
        getLowestLevelKnightFromMapWithPriorityOnDeactivatedKnights() {
            for (let e = 1; e <= 3; e++) {
                const t = this.getAllKnightsWithLevelFromMap(e);
                if (0 != t.length) {
                    for (const e of t)
                        if (!e.activated) return e;
                    return t[0]
                }
            }
        }
        getKnightAtLocation(e) {
            for (const t of this.knights)
                if (null != t.mapLocation && t.mapLocation.sameCorner(e)) return t
        }
        getAmountOfKnightsOfLevelThatCanBePlacedOnMap(e) {
            let t = 0;
            for (const a of this.knights) null == a.mapLocation && a.level == e && (t += 1);
            return t
        }
        getAmountOfKnightsEligibleForActivation() {
            let e = 0;
            for (const t of this.knights) null != t.mapLocation && 1 != t.activated && (t.activatedThisTurn || (e += 1));
            return e
        }
        getAmountOfKnightsEligibleForUpgrade() {
            let e = 0;
            for (const t of this.knights) {
                if (null == t.mapLocation) continue;
                if (t.upgradedThisTurn) continue;
                null != this.getKnightWithLevelFromInventory(t.level + 1) && (e += 1)
            }
            return e
        }
        getPlayerKnightStrength() {
            let e = 0;
            for (const t of this.knights) e += t.getKnightStrength();
            return e
        }
        unlockedAllKnightsWithLevel(e) {
            for (const t of this.knights) t.level == e && (t.unlocked = !0)
        }
        getPartialPlayerKnightState() {
            const e = new o(this.player);
            return e.knights = this.knights, e
        }
        getKnightActionOfType(e) {
            for (const t of this.possibleKnightActions)
                if (t.knightActionType == e) return t
        }
        deserialize(e) {
            for (const t of Object.keys(this)) "knights" != t && (this[t] = e[t]);
            this.knights = [];
            for (const t of e.knights) {
                const e = Object.assign(new i.KnightPiece(this.player, t.level, t.unlocked), t);
                this.knights.push(e)
            }
        }
    }
    t.PlayerKnightState = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationKnightView = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(6),
        n = a(94),
        r = a(22);
    t.UIGamePlayerInformationKnightView = class {
        constructor(e, t) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerKnightState = t;
            const a = this.uiGameManager.playersController.getPlayerInformationViewWithColor(this.playerKnightState.player);
            if (null == a) return;
            this.playerInformation = a;
            const i = this.uiGameManager.gameState.isPlayerSpectator() ? this.uiGameManager.gameState.playOrder[0] : this.uiGameManager.gameState.myColor;
            this.playerInformation.player.color == i ? this.createMyKnightStateView() : this.createOpponentKnightView(), this.knightStrengthView.view.setTip(r.EnglishTexts.PLAYER_INFORMATION_KNIGHT_STRENGTH_TITLE, [r.EnglishTexts.PLAYER_INFORMATION_KNIGHT_STRENGTH_BODY]), this.updateKnightStrengthCount()
        }
        onEvent(e, t) {
            switch (t) {
                case i.KnightStateUpdated:
                    this.updateKnightStrengthCount();
                    break;
                case i.HoveredOverPlayerInformationArrow:
                    this.knightStrengthView.hideView();
                    break;
                case i.PointerOutPlayerInformationView:
                    this.knightStrengthView.showView(this.playerInformation)
            }
        }
        createMyKnightStateView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                i = .809 * t,
                r = .71 * a,
                s = .0804 * t,
                c = .22 * a,
                l = .8943 * t,
                h = r,
                d = .1 * t,
                u = c,
                g = .0786 * -s;
            this.knightStrengthView = new n.ItemCountView(i, r, s, c, this.playerInformation, e.icon_swords.texture, l, h, d, u, g), this.knightStrengthView.resetTextYPosition()
        }
        createOpponentKnightView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                i = .809 * t,
                r = .5545 * a,
                s = .0804 * t,
                c = .341 * a,
                l = .8943 * t,
                h = r,
                d = .1 * t,
                u = c,
                g = .0786 * -s;
            this.knightStrengthView = new n.ItemCountView(i, r, s, c, this.playerInformation, e.icon_swords.texture, l, h, d, u, g), this.knightStrengthView.resetTextYPosition()
        }
        updateKnightStrengthCount() {
            const e = this.playerKnightState.getPlayerKnightStrength();
            this.knightStrengthView.updateText(String(e))
        }
        highlight(e) {
            const t = o.Loader.shared.resources.icon_swords.texture,
                a = o.Loader.shared.resources.icon_swords_highlight.texture;
            e ? this.knightStrengthView.view.updateTexture(a) : this.knightStrengthView.view.updateTexture(t)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.HighlightableSpriteView = void 0;
    const i = a(13),
        o = a(6);
    class n extends i.SpriteView {
        constructor(e, t, a, n, r, s, c = 0) {
            super(e, t, a, n, s, r, c);
            const l = -.2 * a / 2;
            this.bgHighlight = new i.SpriteView(e, t, a, n, s, o.Loader.shared.resources.icon_highlight_circle.texture, l), s.removeChild(this), s.addChild(this), this.highlight(!1)
        }
        isHighlighted() {
            return 1 === this.bgHighlight.alpha
        }
        highlight(e) {
            e && 0 == this.bgHighlight.alpha && (this.bgHighlight.alpha = 1), e || 1 != this.bgHighlight.alpha || (this.bgHighlight.alpha = 0)
        }
        centerYInParent() {
            null != this.parent && (this.y = this.parent.height / 2 - this.height / 2, this.bgHighlight.y = this.parent.height / 2 - this.bgHighlight.height / 2)
        }
        centerXInParent() {
            super.centerXInParent(), null != this.parent && (this.bgHighlight.x = this.parent.width / 2 - this.bgHighlight.width / 2)
        }
        showView(e) {
            null == this.bgHighlight.parent && e.addChild(this.bgHighlight), null == this.parent && e.addChild(this)
        }
        hideView() {
            null != this.parent && this.parent.removeChild(this), null != this.bgHighlight.parent && this.bgHighlight.parent.removeChild(this.bgHighlight)
        }
        updateTexture(e) {
            this.texture = e
        }
    }
    t.HighlightableSpriteView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameEventDiceController = void 0;
    const i = a(23),
        o = a(3);
    var n = o.GameStateEnums.UIGameEventEnums;
    const r = a(11),
        s = a(550),
        c = a(78);
    t.UIGameEventDiceController = class {
        constructor(e) {
            this.easeAnimationCount = 0, this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.view = new s.EventDiceView(e), this.view.diceBackground.setClickAction(() => {
                this.clickedDice(this.view.diceBackground)
            }), this.view.resetDice(), this.startDiceAnimation(), this.updateDiceImage()
        }
        onEvent(e, t) {
            switch (t) {
                case n.DiceStateUpdated:
                    this.updateDiceImage();
                    break;
                case n.GameStateUpdated:
                    this.startDiceAnimation()
            }
        }
        onGameTick(e) {
            this.animateDice(e)
        }
        clickedDice(e) {
            r.Sound.playSound(r.Sound.SoundType.Click), this.stopAnimation(), this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor ? this.uiGameManager.gameState.currentActionState == o.GameStateEnums.ActionStates.None ? this.uiGameManager.socketGameSend.clickedDice() : new c.FloatingText("Finish action first", e) : new c.FloatingText("It is not your turn", e)
        }
        animateDice(e) {
            0 == this.easeAnimationCount && (this.easeAnimationCount = e), this.view.animate(e - this.easeAnimationCount)
        }
        updateDiceImage() {
            null != this.uiGameManager.gameState.lastEventDice && (this.view.diceBackground.texture = i.GameUIImages.getEventDiceBackground(this.uiGameManager.gameState.lastEventDice), this.view.diceIcon.texture = i.GameUIImages.getEventDiceIcon(this.uiGameManager.gameState.lastEventDice), this.stopAnimation())
        }
        startDiceAnimation() {
            this.uiGameManager.gameState.currentTurnState == o.GameStateEnums.TurnStates.GameEnd && this.stopAnimation(), this.uiGameManager.gameState.currentActionState != o.GameStateEnums.ActionStates.SelectDiceForAlchemist ? this.uiGameManager.gameState.currentTurnPlayerColor == this.uiGameManager.gameState.myColor && this.uiGameManager.gameState.currentTurnState == o.GameStateEnums.TurnStates.Dice && (this.uiGameManager.gameState.diceThrown || (this.uiGameManager.eventController.registerUIGameAnimation(this), this.view.tintActive())) : this.stopAnimation()
        }
        stopAnimation() {
            this.easeAnimationCount = 0, this.uiGameManager.eventController.unregisterUIGameAnimation(this), this.view.resetDice()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.EventDiceView = void 0;
    const i = a(17),
        o = a(6),
        n = a(13),
        r = a(26),
        s = a(28),
        c = a(22);
    class l extends i.SectionBgView {
        constructor(e) {
            const t = e.canvasController,
                a = t.appW - t.chatWidth - 1.25 * t.itemSize,
                i = t.appH - 3.3 * t.itemSize,
                s = t.itemSize / 2;
            super(a, i, s, s, t.app.stage, !0), this.diceSize = s, this.diceBackground = new n.SpriteView(s, 0, s, s, this, o.Loader.shared.resources.dice.texture), this.diceIcon = new n.SpriteView(1.2 * s, .2 * s, .6 * s, .6 * s, this, o.Loader.shared.resources.icon_barbarian_ship.texture), this.eventDiceCenter = new r.Point(this.diceBackground.x + this.diceBackground.width / 2, this.diceBackground.y + this.diceBackground.height / 2), this.eventImageCenter = new r.Point(this.diceIcon.x + this.diceIcon.width / 2, this.diceIcon.y + this.diceIcon.height / 2), this.diceBackground.setTip(c.EnglishTexts.EVENT_DICE_TIP_TITLE, [c.EnglishTexts.EVENT_DICE_TIP_BODY_1, c.EnglishTexts.EVENT_DICE_TIP_BODY_2])
        }
        animate(e) {
            const t = this.getAnimationSize(e);
            l.changeDiceSize(this.diceBackground, this.eventDiceCenter, t), l.changeDiceSize(this.diceIcon, this.eventImageCenter, .6 * t)
        }
        static changeDiceSize(e, t, a) {
            e.width = a, e.height = a, e.x = t.x - a / 2, e.y = t.y - a / 2
        }
        resetDice() {
            l.changeDiceSize(this.diceBackground, this.eventDiceCenter, this.diceSize), l.changeDiceSize(this.diceIcon, this.eventImageCenter, .6 * this.diceSize), this.tintPassive()
        }
        tintActive() {
            this.diceBackground.tint = s.GameColor.getColorHexValue(s.GameColor.Color.Gray4)
        }
        tintPassive() {
            this.diceBackground.tint = s.GameColor.getColorHexValue(s.GameColor.Color.Gray2)
        }
        getAnimationSize(e) {
            const t = 1 + .1 * Math.sin(.8 * e);
            return this.diceSize * t
        }
    }
    t.EventDiceView = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCityImprovement = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(552),
        n = a(320),
        r = a(553),
        s = a(554),
        c = a(555),
        l = a(322),
        h = a(22),
        d = a(557),
        u = a(558);
    t.UIGameCityImprovement = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.cityImprovementStates = [], this.initCityImprovementState(), this.initCityImprovementButton(), new s.UIGameMapMetropolisController(this.uiGameManager), new u.UIGameMetropolisAchievementController(this.uiGameManager), new c.UIGameCityImprovementProgressTrackerController(this.uiGameManager, this.cityImprovementStates), new d.UIGameCityImprovementAchievementController(this.uiGameManager)
        }
        initCityImprovementState() {
            for (const e of this.uiGameManager.gameState.players) this.cityImprovementStates.push(new o.PlayerCityImprovementState(e.color))
        }
        onEvent(e, t) {
            switch (t) {
                case i.CityImprovementStateReceived:
                    this.updateCityImprovementState(e);
                    break;
                case i.ForceShowCityImprovementButtons:
                    this.multiButton.forceShowButtons()
            }
        }
        getCityImprovementStateForPlayer(e) {
            for (const t of this.cityImprovementStates)
                if (t.playerColor == e) return t
        }
        updateCityImprovementState(e) {
            for (const t of e) {
                const e = this.getCityImprovementStateForPlayer(t.playerColor);
                null != e && e.deserialize(t)
            }
            this.uiGameManager.eventController.sendEvent(void 0, i.CityImprovementStateUpdated)
        }
        initCityImprovementButton() {
            if (this.uiGameManager.gameState.isPlayerSpectator()) return;
            const e = this.uiGameManager.actionsController.container;
            this.multiButton = new n.UIGameActionButtonMultiView(this.uiGameManager, 10, e), this.multiButton.setTip(h.EnglishTexts.CITY_IMPROVEMENT_BUTTON_TIP_TITLE, [""]);
            const t = this.getCityImprovementStateForPlayer(this.uiGameManager.gameState.myColor);
            if (null == t) return;
            const a = .4 * this.multiButton.viewContainer.absoluteWidth,
                i = .2 * this.multiButton.viewContainer.absoluteHeight,
                o = .05 * this.multiButton.viewContainer.absoluteHeight,
                s = new l.UIGamePlayerInformationCityImprovementProgressTrackerView(this.uiGameManager, t, 0, o, a, i, this.multiButton);
            this.multiButton.addAsset(s), this.multiButton.centerIconInX(s), this.uiGameManager.actionsController.addButton(this.multiButton);
            for (const a of t.cityImprovements) {
                const t = new r.UIGameActionButtonViewCityImprovement(this.uiGameManager, e, a, this.multiButton);
                this.multiButton.addButton(t)
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PlayerCityImprovementState = void 0;
    const i = a(61);
    class o {
        constructor(e) {
            this.playerColor = e, this.cityImprovements = [], this.initCityImprovements()
        }
        initCityImprovements() {
            this.cityImprovements.push(new i.CityImprovement(i.CityImprovementTypes.Politics)), this.cityImprovements.push(new i.CityImprovement(i.CityImprovementTypes.Science)), this.cityImprovements.push(new i.CityImprovement(i.CityImprovementTypes.Trade))
        }
        getCityImprovementForType(e) {
            for (const t of this.cityImprovements)
                if (t.improvementType == e) return t
        }
        getCurrentLevelForImprovementType(e) {
            for (const t of this.cityImprovements)
                if (t.improvementType == e) return t.level
        }
        getCostForNextUpgradeForType(e) {
            for (const t of this.cityImprovements)
                if (t.improvementType == e) return t.getCostForNextUpgrade()
        }
        upgradeCityType(e) {
            for (const t of this.cityImprovements)
                if (t.improvementType == e) return void(t.level += 1)
        }
        addMetropolisOfType(e) {
            for (const t of this.cityImprovements) t.improvementType == e && (t.hasMetropolis = !0)
        }
        removeMetropolisOfType(e) {
            for (const t of this.cityImprovements) t.improvementType == e && (t.hasMetropolis = !1)
        }
        hasMetropolisOfType(e) {
            for (const t of this.cityImprovements)
                if (t.improvementType == e && t.hasMetropolis) return !0;
            return !1
        }
        getMetropolisCount() {
            let e = 0;
            for (const t of this.cityImprovements) t.hasMetropolis && (e += 1);
            return e
        }
        getCityUpgradesThatPlayerCanPurchase() {
            const e = [];
            for (const t of this.cityImprovements) t.canPlayerPurchaseUpgrade.canTakeAction && e.push(t.improvementType);
            return e
        }
        getFullCityImprovementState() {
            const e = new o(this.playerColor);
            for (const t of e.cityImprovements) {
                const e = this.getCityImprovementForType(t.improvementType);
                null != e && t.deserialize(e)
            }
            return e
        }
        getHiddenCityImprovementState() {
            const e = this.getFullCityImprovementState();
            for (const t of e.cityImprovements) t.canPlayerPurchaseUpgrade = {
                canTakeAction: !1,
                errorMessageIfCantTakeAction: ""
            };
            return e
        }
        discountCityImprovementStates(e) {
            for (const t of this.cityImprovements) t.cityImprovementUpgradeDiscount = e
        }
        deserialize(e) {
            for (const t of e.cityImprovements) {
                const e = this.getCityImprovementForType(t.improvementType);
                null != e && e.deserialize(t)
            }
        }
        static getCityImprovementFramedSquareImageName(e) {
            switch (e) {
                case i.CityImprovementTypes.Politics:
                    return "icon_square_framed_politics";
                case i.CityImprovementTypes.Trade:
                    return "icon_square_framed_trade";
                case i.CityImprovementTypes.Science:
                    return "icon_square_framed_science"
            }
        }
    }
    t.PlayerCityImprovementState = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameActionButtonViewCityImprovement = void 0;
    const i = a(3);
    var o = i.GameStateEnums.TurnStates,
        n = i.GameStateEnums.UIGameEventEnums;
    const r = a(61),
        s = a(80),
        c = a(321),
        l = a(7);
    class h extends s.UIGameActionButtonView {
        constructor(e, t, a, i) {
            super(e, a.improvementType, t), this.cityImprovement = a, this.parentButton = i;
            const o = .4 * this.width,
                n = (this.width - o) / 2,
                s = new c.UIGameCityImprovementProgressTrackerSquareView(n, n, o, this, a.improvementType, 0);
            s.setActiveTexture(), this.addAsset(s), this.setUpdateAction(), this.updateHoverForNewPurchasePrice(), this.stateUpdated(), this.setTip(r.CityImprovementTypes[a.improvementType], [""])
        }
        buttonSpecificEvents(e, t) {
            switch (t) {
                case n.CityImprovementStateUpdated:
                case n.GameStateUpdated:
                    this.stateUpdated(), this.updateHoverForNewPurchasePrice(), this.parentButton.checkAndUpdateOpacityIfExpandedButtonsAreActive()
            }
        }
        setUpdateAction() {
            this.updateAction(() => {
                this.clickedCityUpgrade()
            })
        }
        clickedCityUpgrade() {
            this.canPerformBuyAction(this.cityImprovement.canPlayerPurchaseUpgrade) && this.uiGameManager.socketGameSend.confirmCityUpgrade(this.cityImprovement.improvementType)
        }
        updateHoverForNewPurchasePrice() {
            const e = this.cityImprovement.getCostForNextUpgrade();
            null != e ? this.setHoverAction(e) : this.setHoverAction([])
        }
        stateUpdated() {
            this.inactivateOpacity(), this.myPlayer.color == this.uiGameManager.gameState.currentTurnPlayerColor && this.cityImprovement.canPlayerPurchaseUpgrade.canTakeAction && this.updateOpacityForTurnState()
        }
        updateOpacityForTurnState() {
            this.allowableTurnStates() && (0, l.elementInArray)(i.GameStateEnums.ActionsThatCanBeCancelled.actions, this.uiGameManager.gameState.currentActionState) && (this.activateOpacity(), this.parentButton.activateOpacity())
        }
        allowableTurnStates() {
            return this.uiGameManager.gameState.currentTurnState == o.Turn || this.uiGameManager.gameState.currentTurnState == o.SpecialBuildPhase
        }
    }
    t.UIGameActionButtonViewCityImprovement = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMapMetropolisController = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(105),
        n = a(21),
        r = a(7),
        s = a(23),
        c = a(26);
    t.UIGameMapMetropolisController = class {
        constructor(e) {
            this.metropolisViews = [], this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.metropolisViews = [], this.drawMetropolises()
        }
        onEvent(e, t) {
            switch (t) {
                case i.MapStateUpdated:
                    this.drawMetropolises();
                    break;
                case i.RobberMoved:
                    this.setMetropolisLayer()
            }
        }
        drawMetropolises() {
            this.removeStolenMetropolises();
            for (const e of this.uiGameManager.gameState.mapState.tileState.tileCorners) e.buildingType == n.TileEnums.CornerBuildingTypes.City && e.doesCornerHaveMetropolis() && (this.cornerExists(e) || this.drawMetropolisOnCorner(e))
        }
        removeStolenMetropolises() {
            for (const e of this.metropolisViews) e.corner.doesCornerHaveMetropolis() || (e.parent.removeChild(e), (0, r.removeElementFromArray)(this.metropolisViews, e))
        }
        cornerExists(e) {
            for (const t of this.metropolisViews)
                if (t.corner.sameCorner(e)) return !0;
            return !1
        }
        drawMetropolisOnCorner(e) {
            const t = e.getMetropolis();
            if (null == t) return;
            const a = s.GameUIImages.getMetropolisForCornerBonusType(t),
                i = this.uiGameManager.mapController.mapView,
                n = e.hexCorner.toPixel(i.mapCenter, i.hexagonHeight / 2),
                r = n.x - .47 * i.cornerCircleR,
                l = n.y - 1.285 * i.cornerCircleR,
                h = l - i.hexagonHeight,
                d = 2 * this.uiGameManager.mapController.mapView.cornerCircleR,
                u = d,
                g = i.layers.metropolis,
                m = new o.UIGameMapCornerView(e, r, h, d, u, g, a, i),
                p = new c.Point(m.x, l);
            m.animationController.animateTo(p), this.metropolisViews.push(m), this.uiGameManager.mapController.mapView.sortChildren(), this.setMetropolisLayer()
        }
        setMetropolisLayer() {
            for (const e of this.uiGameManager.gameState.mapState.tileState.tiles)
                if (e.tilePieceTypes == n.TileEnums.TilePieceTypes.Robber) return void this.adjustLayeringOnMetropolisIcons(e)
        }
        adjustLayeringOnMetropolisIcons(e) {
            const t = this.uiGameManager.mapController.mapView;
            for (const a of this.metropolisViews) {
                const i = a.corner.hexCorner;
                for (const o of e.hexFace.corners()) {
                    if (!o.sameCorner(i)) continue;
                    const n = .5,
                        r = o.x == e.hexFace.x && o.y == e.hexFace.y - 1 ? t.layers.robber - n : t.layers.metropolis;
                    a.zIndex = r
                }
            }
            t.sortChildren()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCityImprovementProgressTrackerController = void 0;
    const i = a(22),
        o = a(322);
    t.UIGameCityImprovementProgressTrackerController = class {
        constructor(e, t) {
            this.uiGameManager = e, this.cityImprovementStates = t, this.playerInformationCityImprovementTrackerViews = [], this.initPlayerCityImprovementTrackerViews()
        }
        initPlayerCityImprovementTrackerViews() {
            for (const e of this.cityImprovementStates) {
                const t = this.uiGameManager.playersController.getPlayerInformationViewWithColor(e.playerColor);
                if (null == t) continue;
                const a = this.uiGameManager.gameState.isPlayerSpectator() ? this.uiGameManager.gameState.playOrder[0] : this.uiGameManager.gameState.myColor,
                    o = e.playerColor == a ? this.getMyCityImprovementProgressTrackerSectionView(t, e) : this.getOpponentCityImprovementProgressTrackerSectionView(t, e);
                this.playerInformationCityImprovementTrackerViews.push(o), o.setTip(i.EnglishTexts.CITY_IMPROVEMENT_BUTTON_TIP_TITLE, [i.EnglishTexts.CITY_IMPROVEMENT_BUTTON_TIP_BODY_1, i.EnglishTexts.CITY_IMPROVEMENT_BUTTON_TIP_BODY_2])
            }
        }
        getMyCityImprovementProgressTrackerSectionView(e, t) {
            const a = e.width,
                i = e.height,
                n = .6463 * a,
                r = .34 * i,
                s = .105 * a,
                c = .5556 * i;
            return new o.UIGamePlayerInformationCityImprovementProgressTrackerView(this.uiGameManager, t, n, r, s, c, e)
        }
        getOpponentCityImprovementProgressTrackerSectionView(e, t) {
            const a = e.width,
                i = .6463 * a,
                n = .105 * a,
                r = .9655 * e.height;
            return new o.UIGamePlayerInformationCityImprovementProgressTrackerView(this.uiGameManager, t, i, 0, n, r, e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCityImprovementProgressTrackerView = void 0;
    const i = a(27),
        o = a(61),
        n = a(321),
        r = a(6),
        s = a(13);
    class c extends i.SectionView {
        constructor(e, t, a, i, o) {
            super(e, t, a, a + 5 * a * 1, i, !0), this.cityImprovementType = o;
            const n = this.getMetropolisIconTextureForCityImprovementType(),
                r = .05 * this.width;
            this.metropolisIconView = new s.SpriteView(0, 0, this.width, this.width, this, n, r), this.hideMetropolisIcon(), this.overlapBetweenSquares = 1, this.maxCityImprovementLevel = 5, this.progressSquareViews = [], this.initProgressSquareViews()
        }
        initProgressSquareViews() {
            const e = this.width,
                t = e * this.overlapBetweenSquares;
            let a = t;
            for (let i = this.maxCityImprovementLevel; i > 0; i--) {
                const o = new n.UIGameCityImprovementProgressTrackerSquareView(0, a, e, this, this.cityImprovementType, i);
                this.progressSquareViews.push(o), a += t
            }
        }
        updateProgressTracker(e) {
            for (const t of this.progressSquareViews) t.progressLevel > e || t.setActiveTexture()
        }
        showMetropolisIcon() {
            null == this.metropolisIconView.parent && this.addChild(this.metropolisIconView)
        }
        hideMetropolisIcon() {
            null != this.metropolisIconView.parent && this.metropolisIconView.parent.removeChild(this.metropolisIconView)
        }
        getMetropolisIconTextureForCityImprovementType() {
            switch (this.cityImprovementType) {
                case o.CityImprovementTypes.Politics:
                    return r.Loader.shared.resources.icon_triangle_politics.texture;
                case o.CityImprovementTypes.Science:
                    return r.Loader.shared.resources.icon_triangle_science.texture;
                case o.CityImprovementTypes.Trade:
                    return r.Loader.shared.resources.icon_triangle_trade.texture
            }
        }
    }
    t.UIGameCityImprovementProgressTrackerView = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameCityImprovementAchievementController = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(61),
        n = a(13),
        r = a(6);
    t.UIGameCityImprovementAchievementController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this)
        }
        onEvent(e, t) {
            switch (t) {
                case i.UnlockedCityImprovments:
                    this.unlockedCityImprovements(e)
            }
        }
        unlockedCityImprovements(e) {
            switch (e) {
                case o.CityImprovementTypes.Politics:
                    this.unlockedFortress();
                    break;
                case o.CityImprovementTypes.Science:
                    this.unlockedAqueduct();
                    break;
                case o.CityImprovementTypes.Trade:
                    this.unlockedTradingHouse()
            }
        }
        unlockedFortress() {
            this.broadCastPlayerReceivedAchievement("Fortress", "icon_fortress", "Upgrade knights to level 3")
        }
        unlockedAqueduct() {
            this.broadCastPlayerReceivedAchievement("Aqueduct", "icon_aqueduct", "Select 1 resource from the bank when none of your numbers roll")
        }
        unlockedTradingHouse() {
            this.broadCastPlayerReceivedAchievement("Trading House", "icon_tradehouse", "Trade any commodity at a 2:1 rate")
        }
        broadCastPlayerReceivedAchievement(e, t, a) {
            const o = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor).username + " unlocked",
                s = r.Loader.shared.resources[t].texture,
                c = new r.Container,
                l = new n.SpriteView(0, 0, s.width, s.height, c, s);
            l.centerXInParent(), l.centerYInParent();
            const h = {
                title: o,
                subtitle: e,
                iconContainer: c,
                player: this.uiGameManager.gameState.myColor,
                achievementDurationInSeconds: 5,
                playSound: !1,
                bottomDescription: a,
                optionalIconStartingPoint: void 0,
                optionalIconStartingSize: void 0
            };
            this.uiGameManager.eventController.sendEvent(h, i.PlayerReceivedAchievement)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameMetropolisAchievementController = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(61),
        n = a(23),
        r = a(6),
        s = a(13);
    t.UIGameMetropolisAchievementController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this)
        }
        onEvent(e, t) {
            switch (t) {
                case i.PlayerReceivedMetropolis:
                    this.playerReceivedMetropolis(e)
            }
        }
        playerReceivedMetropolis(e) {
            const t = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.currentTurnPlayerColor),
                a = {
                    title: t.username + " placed",
                    subtitle: o.CityImprovementTypes[e] + " Metropolis",
                    iconContainer: this.getIconContainerWithCenteredMetropolisIcons(e),
                    player: t.color,
                    achievementDurationInSeconds: 5,
                    playSound: !1,
                    bottomDescription: "+2 Victory Points",
                    optionalIconStartingPoint: void 0,
                    optionalIconStartingSize: void 0
                };
            this.uiGameManager.eventController.sendEvent(a, i.PlayerReceivedAchievement)
        }
        getIconContainerWithCenteredMetropolisIcons(e) {
            const t = new r.Container,
                a = n.GameUIImages.getCityForPlayer(this.uiGameManager.gameState.currentTurnPlayerColor),
                i = new s.SpriteView(0, 0, a.width, a.height, t, a),
                c = o.CityImprovement.convertCityImprovementTypeToMetropolisType(e),
                l = n.GameUIImages.getMetropolisForCornerBonusType(c),
                h = new s.SpriteView(.26 * i.width, .01 * i.height, l.width, l.height, t, l),
                d = t.width - i.width / 2,
                u = new r.Graphics;
            u.drawRect(0, 0, 2 * d, t.height);
            const g = 2 * d - t.width;
            return t.addChild(u), i.x += g, h.x += g, t
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupController = void 0;
    const i = a(3);
    var o = i.GameStateEnums.UIGameEventEnums,
        n = i.GameStateEnums.ActionStates,
        r = i.GameStateEnums.TurnStates;
    const s = a(11),
        c = a(140),
        l = a(52),
        h = a(103),
        d = a(561),
        u = a(563),
        g = a(324),
        m = a(564),
        p = a(567),
        C = a(141),
        y = a(569),
        S = a(570);
    t.UIGamePopupController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.currentView = void 0, this.originalTurnState = r.GameSetup, this.allowableActionState = n.None;
            const t = this.uiGameManager.canvasController;
            this.popupW = t.popupWidth
        }
        onEvent(e, t) {
            switch (t) {
                case o.ConfirmUseDevelopmentCard:
                    this.showCardConfirmationPopup(e);
                    break;
                case o.SelectCardsFromBankUsingDevelopmentCard:
                    this.showCardSelectorWindowForDevelopmentCard(e);
                    break;
                case o.SelectCardsForPendingDistribution:
                    this.showCardSelectorWindowForPendingDistributions(e);
                    break;
                case o.SelectCardToGiveToAnotherPlayer:
                    this.showCardSelectorWindowForGivingCardToAnotherPlayer(e);
                    break;
                case o.SelectCardsToDiscard:
                    this.showCardDiscardPopup(e);
                    break;
                case o.StealDevelopmentCardFromPlayer:
                    this.showCardSelectorWindowToStealDevelopmentCard(e);
                    break;
                case o.StealResourceCardFromPlayer:
                    this.showCardSelectorWindowToStealResourceCard(e);
                    break;
                case o.SelectPlayerForDevelopmentCard:
                    this.showSelectPlayerUsingDevelopmentCard(e);
                    break;
                case o.SelectPlayerAndCard:
                    this.showSelectPlayerAndResourceCard(e);
                    break;
                case o.SelectDice:
                    this.showSelectDice(e);
                    break;
                case o.GameStateUpdated:
                    this.isWrongState() && this.closeUI();
                    break;
                case o.ClosePopupUI:
                    this.closeUI()
            }
        }
        setNewView(e, t) {
            this.closeUI(), this.currentView = e, this.allowableActionState = t, this.originalTurnState = this.uiGameManager.gameState.currentTurnState, e.interactive = !0
        }
        showCardConfirmationPopup(e) {
            const t = new C.UIGamePopupCardConfirmation(this.uiGameManager, e),
                a = n.None;
            this.setNewView(t, a)
        }
        showCardSelectorWindowForDevelopmentCard(e) {
            this.playSoundForCardSelectorWindow();
            const t = l.CardDataController.getCardDataForCard(e.developmentCardUsed);
            if (null == t) return;
            const a = h.UIGamePopupInformationView.getPopupInformationForCardData(t),
                i = new h.UIGamePopupInformationView(this.uiGameManager, 0, 0, this.popupW, a),
                o = new c.UIGamePopupSelectCards(this.uiGameManager, i, e.selectCardFormat);
            this.setNewView(o, e.selectCardFormat.allowableActionState)
        }
        showCardSelectorWindowForPendingDistributions(e) {
            const t = h.UIGamePopupInformationView.getPopupInformationForPendingDistributions(e);
            if (null == t) return;
            const a = new h.UIGamePopupInformationView(this.uiGameManager, 0, 0, this.popupW, t),
                i = new c.UIGamePopupSelectCards(this.uiGameManager, a, e.selectCardFormat);
            this.setNewView(i, e.selectCardFormat.allowableActionState)
        }
        showCardSelectorWindowForGivingCardToAnotherPlayer(e) {
            const t = l.CardDataController.getCardDataForCard(e.developmentCardUsed);
            if (null == t) return;
            const a = h.UIGamePopupInformationView.getPopupInformationForCardData(t),
                i = new h.UIGamePopupInformationView(this.uiGameManager, 0, 0, this.popupW, a);
            i.updateBody(e.body);
            const o = new S.UIGamePopupSelectCardToGiveToAnotherPlayer(this.uiGameManager, i, e);
            this.setNewView(o, e.selectCardFormat.allowableActionState)
        }
        showCardDiscardPopup(e) {
            const t = new y.UIGamePopupDiscardCards(this.uiGameManager, e);
            this.setNewView(t, e.selectCardFormat.allowableActionState)
        }
        showCardSelectorWindowToStealDevelopmentCard(e) {
            const t = l.CardDataController.getCardDataForCard(e.developmentCardUsed);
            if (null == t) return;
            const a = h.UIGamePopupInformationView.getPopupInformationForCardData(t),
                i = new h.UIGamePopupInformationView(this.uiGameManager, 0, 0, this.popupW, a),
                o = new d.UIGamePopupSelectDevelopmentCardFromPlayer(this.uiGameManager, i, e);
            this.setNewView(o, e.selectCardFormat.allowableActionState)
        }
        showCardSelectorWindowToStealResourceCard(e) {
            const t = l.CardDataController.getCardDataForCard(e.developmentCardUsed);
            if (null == t) return;
            const a = h.UIGamePopupInformationView.getPopupInformationForCardData(t),
                i = new h.UIGamePopupInformationView(this.uiGameManager, 0, 0, this.popupW, a, void 0, e.overrideText),
                o = new u.UIGamePopupSelectResourcesCardsFromPlayer(this.uiGameManager, i, e);
            this.setNewView(o, e.selectCardFormat.allowableActionState)
        }
        showSelectPlayerUsingDevelopmentCard(e) {
            const t = l.CardDataController.getCardDataForCard(e.developmentCardUsed);
            if (null == t) return;
            const a = h.UIGamePopupInformationView.getPopupInformationForCardData(t),
                i = new h.UIGamePopupInformationView(this.uiGameManager, 0, 0, this.popupW, a),
                o = new g.UIGamePopupSelectPlayers(this.uiGameManager, i, e.selectPlayerFormat, e.developmentCardUsed);
            this.setNewView(o, e.selectPlayerFormat.allowableActionState)
        }
        showSelectPlayerAndResourceCard(e) {
            const t = l.CardDataController.getCardDataForCard(e.developmentCardUsed);
            if (null == t) return;
            const a = h.UIGamePopupInformationView.getPopupInformationForCardData(t),
                i = new h.UIGamePopupInformationView(this.uiGameManager, 0, 0, this.popupW, a),
                o = new p.UIGamePopupSelectPlayerAndResourceCard(this.uiGameManager, i, e);
            this.setNewView(o, e.selectPlayerFormat.allowableActionState)
        }
        showSelectDice(e) {
            const t = l.CardDataController.getCardDataForCard(e.developmentCardUsed);
            if (null == t) return;
            const a = h.UIGamePopupInformationView.getPopupInformationForCardData(t),
                i = new h.UIGamePopupInformationView(this.uiGameManager, 0, 0, this.popupW, a),
                o = new m.UIGamePopupSelectDice(this.uiGameManager, i, e);
            this.setNewView(o, e.allowableActionState)
        }
        playSoundForCardSelectorWindow() {
            switch (this.uiGameManager.gameState.currentActionState) {
                case n.SelectCardsForPendingDistributions:
                    s.Sound.playSound(s.Sound.SoundType.YourTurn)
            }
        }
        isWrongState() {
            if (this.uiGameManager.gameState.currentTurnState != this.originalTurnState) return !0;
            return !(this.uiGameManager.gameState.currentActionState == this.allowableActionState)
        }
        closeUI() {
            null != this.currentView && (null != this.currentView.parent && this.currentView.parent.removeChild(this.currentView), this.currentView = void 0)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectCardContainerView = void 0;
    const i = a(79),
        o = a(27);
    class n extends o.SectionView {
        constructor(e, t, a, o, n, r, s, c) {
            const l = 1.4 * e.canvasController.itemSize;
            super(t, a, o, l, c), this.uiGameManager = e;
            const h = .45 * l,
                d = .55 * l;
            this.cardsToSelectFrom = new i.UIGameCardContainerView(this.uiGameManager, 0, 0, o, h, this), this.cardsToSelectFrom.setCardClickAction(n);
            this.cardsToSelectFrom.addMultipleCards(s, !1), this.cardsToSelectFrom.cardInventory.hideCardBadges();
            const u = this.cardsToSelectFrom.y + this.cardsToSelectFrom.height;
            this.cardsSelected = new i.UIGameCardContainerView(this.uiGameManager, 0, u, o, d, this, !0), this.cardsSelected.setCardClickAction(e => {
                this.cardsSelected.removeCard(e), r(e)
            })
        }
    }
    t.UIGamePopupSelectCardContainerView = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectDevelopmentCardFromPlayer = void 0;
    const i = a(140),
        o = a(323);
    class n extends i.UIGamePopupSelectCards {
        constructor(e, t, a) {
            super(e, t, a.selectCardFormat, !1);
            const i = this.selectCardContainer.cardsSelected,
                n = .3 * this.uiGameManager.canvasController.itemSize,
                r = n + this.selectCardContainer.cardsToSelectFrom.cardW,
                s = this.width - r - (this.width - this.confirmationButtons.checkButton.x) - n,
                c = i.y + this.selectCardContainer.y;
            this.condensedCardInformationController = new o.UIGamePopupCondensedCardInformationController(this.uiGameManager, this, r, c, s, this.selectCardFormat.validCardsToSelect), this.addVictimAvatarView(a.victim);
            const l = this.condensedCardInformationController.getLongestTextHeight(this.selectCardFormat.validCardsToSelect),
                h = l < this.selectCardContainer.cardsSelected.height ? 0 : l - this.selectCardContainer.cardsSelected.height;
            this.buildContainer(0, h)
        }
        clickedTopResource(e) {
            this.resetSelection();
            super.clickedTopResource(e, !1), this.condensedCardInformationController.showSelectedCardInformation(e)
        }
        resetSelection() {
            this.selectedEnoughCards() && this.selectCardContainer.cardsSelected.removeAllCards()
        }
        clickedSelectedResource(e) {
            super.clickedSelectedResource(e), this.condensedCardInformationController.removeSelectedCardInformation()
        }
    }
    t.UIGamePopupSelectDevelopmentCardFromPlayer = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupCondensedCardInformationView = void 0;
    const i = a(25),
        o = a(27),
        n = a(38);
    class r extends o.SectionView {
        constructor(e, t, a, o, r, s) {
            super(t, a, o, r, s), this.cardData = e;
            const c = .1 * r;
            this.titleTextView = new n.TextView(this.cardData.tipTitle, 0, c, o, r, this, i.GameFont.Size.Small), this.titleTextView.style.fontWeight = "bold", this.titleTextView.style.align = "left", this.titleTextView.repositionY(!1);
            const l = this.titleTextView.y + this.titleTextView.height;
            this.bodyTextView = new n.TextView(this.cardData.tipBody, 0, l, o, r, this, i.GameFont.Size.Small), this.bodyTextView.repositionY(!1), this.bodyTextView.style.align = "left"
        }
    }
    t.UIGamePopupCondensedCardInformationView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectResourcesCardsFromPlayer = void 0;
    const i = a(140);
    class o extends i.UIGamePopupSelectCards {
        constructor(e, t, a) {
            super(e, t, a.selectCardFormat), this.addVictimAvatarView(a.victim), this.selectCardContainer.cardsToSelectFrom.cardInventory.showCardBadges()
        }
        clickedTopResource(e) {
            this.selectedEnoughCards() || (super.clickedTopResource(e), this.selectCardContainer.cardsToSelectFrom.removeCard(e))
        }
        clickedSelectedResource(e) {
            super.clickedSelectedResource(e), this.selectCardContainer.cardsToSelectFrom.addNewCardOfType(e)
        }
    }
    t.UIGamePopupSelectResourcesCardsFromPlayer = o
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectDice = void 0;
    const i = a(64),
        o = a(63),
        n = a(565);
    class r extends i.SectionBgAdaptiveView {
        constructor(e, t, a) {
            super(), this.uiGameManager = e, this.selectDiceFormat = a, this.popupImageAndDescription = t;
            const i = this.uiGameManager.canvasController,
                r = i.popupWidth;
            i.app.stage.addChild(this), this.popupImageAndDescription = t, this.addChild(this.popupImageAndDescription);
            const s = () => {
                    this.clickedDiceAction()
                },
                c = .75 * i.itemSize,
                l = this.popupImageAndDescription.y + this.popupImageAndDescription.height;
            this.topDiceContainer = new n.UIGamePopupSelectDiceContainer(0, l, r, c, this, s, !0), this.topDiceContainer.drawRoundedBg();
            const h = this.topDiceContainer.y + this.topDiceContainer.height;
            this.bottomDiceContainer = new n.UIGamePopupSelectDiceContainer(0, h, r, c, this, s, !1);
            const d = .55 * i.itemSize,
                u = this.absoluteHeight - d;
            this.confirmationButtons = new o.UIGamePopupConfirmationButtons(0, u, r, d, () => {
                this.clickedCheckAction()
            }, () => {}, this), this.selectDiceFormat.cancelButtonActive ? this.confirmationButtons.showCancelButton() : this.confirmationButtons.hideCancelButton(), this.drawSectionBgAroundContent(), this.confirmationButtons.y = this.absoluteHeight - this.confirmationButtons.height;
            const g = i.appH - i.itemSize - this.absoluteHeight;
            this.y = g
        }
        clickedDiceAction() {
            this.areBothDiceSelected() && this.confirmationButtons.checkButton.activateOpacity()
        }
        clickedCheckAction() {
            if (!this.areBothDiceSelected()) return;
            const e = this.topDiceContainer.getSelectedDiceNumber(),
                t = this.bottomDiceContainer.getSelectedDiceNumber();
            if (null == e) return;
            if (null == t) return;
            const a = {
                dice1: e,
                dice2: t
            };
            this.uiGameManager.socketGameSend.confirmDiceSelection(a), this.closeUI()
        }
        areBothDiceSelected() {
            return !!this.topDiceContainer.isDiceSelected() && !!this.bottomDiceContainer.isDiceSelected()
        }
        closeUI() {
            null != this.parent && this.parent.removeChild(this)
        }
    }
    t.UIGamePopupSelectDice = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectDiceContainer = void 0;
    const i = a(17),
        o = a(566);
    class n extends i.SectionBgView {
        constructor(e, t, a, i, n, r, s) {
            super(e, t, a, i, n), this.diceViews = [];
            const c = () => {
                    r()
                },
                l = .12 * i,
                h = i - 2 * l;
            let d = l;
            for (let e = 1; e <= 6; e += 1) this.diceViews.push(new o.UIGamePopupSelectDiceView(this, e, d, l, h, c, this, s)), d += h + l / 2
        }
        resetAllDice() {
            for (const e of this.diceViews) e.forceResetOpacity()
        }
        getSelectedDiceNumber() {
            if (this.isDiceSelected())
                for (const e of this.diceViews)
                    if (e.selected) return e.diceNumber
        }
        isDiceSelected() {
            for (const e of this.diceViews)
                if (e.selected) return !0;
            return !1
        }
    }
    t.UIGamePopupSelectDiceContainer = n
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectDiceView = void 0;
    const i = a(13),
        o = a(23),
        n = a(6),
        r = a(31);
    class s extends i.SpriteView {
        constructor(e, t, a, r, s, c, l, h) {
            super(a, r, s, s, l, o.GameUIImages.getDiceImage(t, h)), this.diceSelectContainer = e, this.diceNumber = t, this.inactiveOpacityNumber = .5, this.selected = !1, l.addChild(this), this.centerYInParent(), this.inactiveOpacity();
            const d = n.Loader.shared.resources.dice_marker.texture,
                u = 1.05 * s,
                g = (u - s) / 2;
            this.selectionMarker = new i.SpriteView(this.x - g, this.y - g, u, u, l, d), this.hideSelectionMarker();
            this.setClickAction(() => {
                this.diceSelectContainer.resetAllDice(), this.selected = !0, c()
            }), this.setHover()
        }
        setHover() {
            this.setHoverAction(() => {
                this.activeOpacity()
            }, () => {
                this.inactiveOpacity()
            })
        }
        get selected() {
            return this._selected
        }
        set selected(e) {
            this._selected = e, this.inactiveOpacity(), e && (this.activeOpacity(), this.showSelectionMarker())
        }
        activeOpacity() {
            this.alpha = r.ACTIVE_OPACITY
        }
        inactiveOpacity() {
            this.selected || (this.alpha = this.inactiveOpacityNumber)
        }
        hideSelectionMarker() {
            null != this.selectionMarker.parent && this.selectionMarker.parent.removeChild(this.selectionMarker)
        }
        showSelectionMarker() {
            null == this.selectionMarker.parent && null != this.parent && this.parent.addChild(this.selectionMarker)
        }
        forceResetOpacity() {
            this.selected = !1, this.hideSelectionMarker()
        }
    }
    t.UIGamePopupSelectDiceView = s
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectPlayerAndResourceCard = void 0;
    const i = a(64),
        o = a(324),
        n = a(568);
    var r = a(3).GameStateEnums.UIGameEventEnums;
    const s = a(141),
        c = a(52);
    class l extends i.SectionBgAdaptiveView {
        constructor(e, t, a) {
            super(), this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.popupImageAndDescription = t, this.selectionFormat = a, this.activeView = void 0, this.buildPopupSelectPlayer()
        }
        onEvent(e, t) {
            switch (t) {
                case r.GameStateUpdated:
                    this.isValidActionState() || this.hideActiveView()
            }
        }
        setActiveView(e) {
            this.hideActiveView(), this.activeView = e, this.uiGameManager.canvasController.app.stage.addChild(this.activeView)
        }
        hideActiveView() {
            null != this.selectCardView && this.selectCardView.hide(), null != this.activeView && null != this.activeView.parent && this.activeView.parent.removeChild(this.activeView)
        }
        buildPopupSelectPlayer() {
            this.selectPlayerView = new o.UIGamePopupSelectPlayers(this.uiGameManager, this.popupImageAndDescription, this.selectionFormat.selectPlayerFormat, this.selectionFormat.developmentCardUsed);
            this.selectPlayerView.addCancelStateButton(() => {
                this.cancelEntireState()
            }), this.selectPlayerView.removeConfirmationButtons(), this.selectPlayerView.drawSectionBgAroundContent();
            const e = this.uiGameManager.canvasController,
                t = e.appH - e.itemSize - this.selectPlayerView.absoluteHeight;
            this.selectPlayerView.y = t;
            this.selectPlayerView.addSelectPlayerCallback(e => {
                this.selectPlayerAction(e)
            }), this.setActiveView(this.selectPlayerView)
        }
        selectPlayerAction(e) {
            this.uiGameManager.socketGameSend.selectPlayer(e), this.buildPopupSelectCard(e)
        }
        buildPopupSelectCard(e) {
            this.selectCardView = new n.UIGamePopupSelectCardToGiveToPlayer(this.uiGameManager, this.popupImageAndDescription, this.selectionFormat.selectCardFormat, () => {
                this.cancelSelectCard()
            }, e), this.setActiveView(this.selectCardView), this.selectCardView.showCardsToSelectFrom()
        }
        cancelSelectCard() {
            null != this.selectCardView && (this.uiGameManager.socketGameSend.cancelAction(), this.buildPopupSelectPlayer())
        }
        isValidActionState() {
            return this.uiGameManager.gameState.currentActionState == this.selectionFormat.selectCardFormat.allowableActionState
        }
        cancelEntireState() {
            const e = c.CardDataController.getCardDataForCard(this.selectionFormat.developmentCardUsed);
            if (null == e) return;
            const t = {
                    imageTextureName: e.imageFileName,
                    title: e.tipTitle,
                    body: "Are you sure you want to end Commercial Harbor usage? \nWARNING: This action is not reversible and you will lose the ability to trade with remaining players"
                },
                a = {
                    cardEnum: this.selectionFormat.developmentCardUsed,
                    popupInformation: t
                };
            this.cancelEntireStateView = new s.UIGamePopupCardConfirmation(this.uiGameManager, a);
            this.cancelEntireStateView.setCancelAction(() => {
                this.buildPopupSelectPlayer()
            });
            this.cancelEntireStateView.setCheckAction(() => {
                this.uiGameManager.socketGameSend.cancelAction(), this.hideActiveView()
            }), this.setActiveView(this.cancelEntireStateView)
        }
    }
    t.UIGamePopupSelectPlayerAndResourceCard = l
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectCardToGiveToPlayer = void 0;
    const i = a(6),
        o = a(64),
        n = a(79),
        r = a(63),
        s = a(50),
        c = a(104),
        l = a(7);
    class h extends o.SectionBgAdaptiveView {
        constructor(e, t, a, o, l) {
            super(), this.uiGameManager = e, this.selectCardFormat = a;
            const h = this.uiGameManager.canvasController;
            h.app.stage.addChild(this), this.popupImageAndDescription = t, this.addChild(this.popupImageAndDescription);
            const d = this.popupImageAndDescription.y + this.popupImageAndDescription.height,
                u = .85 * h.itemSize;
            this.cardsSelected = new n.UIGameCardContainerView(this.uiGameManager, 0, d, h.popupWidth, u, this), this.cardsSelected.setCardClickAction(e => {
                this.clickedSelectedCard(e)
            });
            const g = .05 * h.itemSize;
            this.selectionRectangle = new i.Graphics, this.selectionRectangle.lineStyle(2, 2171169);
            const m = h.margin,
                p = .1 * u + h.margin + m,
                C = this.cardsSelected.cardY + m,
                y = this.cardsSelected.cardW - 2 * m,
                S = this.cardsSelected.cardH - 2 * m;
            this.selectionRectangle.drawRect(p, C, y, S), this.cardsSelected.addChild(this.selectionRectangle);
            const v = .65 * u,
                _ = this.selectionRectangle.x + this.selectionRectangle.width + 4 * g,
                P = new c.TradeArrowView(_, 0, v, this.cardsSelected, !1, !0),
                T = this.uiGameManager.gameState.getPlayerWithColor(l),
                b = P.x + P.width + g;
            new s.UIGamePlayerAvatarView(b, 0, u, this.cardsSelected, T, !0);
            const f = h.appW - 10 * h.itemSize,
                I = h.itemSize,
                E = h.appH - I;
            this.cardsToSelectFrom = new n.UIGameCardContainerView(this.uiGameManager, 0, E, f, I, h.app.stage);
            const w = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor).getAllCardsInHand();
            this.cardsToSelectFrom.addMultipleCards(w, !1), this.cardsToSelectFrom.fadeAllCardsExcludingCardsOfType(this.selectCardFormat.validCardsToSelect), this.cardsToSelectFrom.setCardClickAction(e => {
                this.clickedCardToSelectFrom(e)
            });
            const k = .55 * h.itemSize,
                A = this.absoluteHeight - k;
            this.confirmationButtons = new r.UIGamePopupConfirmationButtons(0, A, h.popupWidth, k, () => {
                this.clickedCheckAction()
            }, () => {
                o()
            }, this), this.drawSectionBgAroundContent();
            const M = h.appH - h.itemSize - this.absoluteHeight;
            this.y = M
        }
        clickedCardToSelectFrom(e) {
            (0, l.elementInArray)(this.selectCardFormat.validCardsToSelect, e) && (1 == this.selectCardFormat.amountOfCardsToSelect && this.resetCardContainers(), this.selectedEnoughCards() || (this.cardsSelected.addNewCardOfType(e), this.cardsToSelectFrom.removeCard(e), this.updateCheckmark()))
        }
        clickedSelectedCard(e) {
            this.cardsSelected.removeCard(e), this.cardsToSelectFrom.addNewCardOfType(e), this.updateCheckmark()
        }
        clickedCheckAction() {
            if (!this.selectedEnoughCards()) return;
            const e = this.cardsSelected.cardInventory.getAllCardEnums();
            this.uiGameManager.socketGameSend.selectCards(e), this.hide()
        }
        selectedEnoughCards() {
            return this.cardsSelected.cardInventory.cardViews.length == this.selectCardFormat.amountOfCardsToSelect
        }
        resetCardContainers() {
            const e = this.cardsSelected.cardInventory.getAllCardEnums();
            for (const t of e) this.cardsSelected.removeCard(t), this.cardsToSelectFrom.addNewCardOfType(t)
        }
        updateCheckmark() {
            this.confirmationButtons.checkButton.inactivateOpacity(), this.selectedEnoughCards() && this.confirmationButtons.checkButton.activateOpacity()
        }
        hide() {
            null != this.parent && this.parent.removeChild(this), null != this.cardsToSelectFrom.parent && this.cardsToSelectFrom.parent.removeChild(this.cardsToSelectFrom)
        }
        showCardsToSelectFrom() {
            null == this.cardsToSelectFrom.parent && this.uiGameManager.canvasController.app.stage.addChild(this.cardsToSelectFrom)
        }
    }
    t.UIGamePopupSelectCardToGiveToPlayer = h
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupDiscardCards = void 0;
    const i = a(28),
        o = a(64),
        n = a(79),
        r = a(63),
        s = a(13),
        c = a(6),
        l = a(38),
        h = a(25),
        d = a(27),
        u = a(323),
        g = a(7);
    class m extends o.SectionBgAdaptiveView {
        constructor(e, t) {
            super(), this.uiGameManager = e, this.selectDiscardCardFormat = t, this.topText = this.selectDiscardCardFormat.title, this.amountToDiscard = t.selectCardFormat.amountOfCardsToSelect, this.isCondensedInformationActive = this.selectDiscardCardFormat.showCondensedCardInformation;
            const a = this.uiGameManager.canvasController,
                o = a.popupWidth;
            a.app.stage.addChild(this);
            const g = 1.25 * a.itemSize,
                m = .8 * g,
                p = c.Loader.shared.resources[this.selectDiscardCardFormat.imageName].texture,
                C = p.height / p.width,
                y = m / C,
                S = g / C * 1.3,
                v = new d.SectionView(0, 0, S, g, this);
            this.discardImage = new s.SpriteView(0, 0, y, m, v, p), this.discardImage.centerYInParent(), this.discardImage.centerXInParent();
            const _ = this.discardImage.x + this.discardImage.width,
                P = o - _,
                T = i.GameColor.getColor(i.GameColor.Color.RedDark),
                b = new d.SectionView(_, 0, P, g, this);
            this.textBox = new l.TextView(this.selectDiscardCardFormat.title, 0, 0, b.width, b.height, b, h.GameFont.Size.XL, T, !0);
            const f = () => {
                    this.updateTopText(), this.updateCheckMark()
                },
                I = .9 * a.itemSize,
                E = v.y + v.height;
            this.selectedCardContainer = new n.UIGameCardContainerView(this.uiGameManager, 0, E, o, I, this), this.selectedCardContainer.setCardAddAction(f), this.selectedCardContainer.setCardRemoveAction(f);
            const w = .55 * a.itemSize,
                k = this.absoluteHeight;
            this.confirmationButtons = new r.UIGamePopupConfirmationButtons(0, k, o, w, () => {
                this.checkAction()
            }, () => {}, this), this.selectDiscardCardFormat.selectCardFormat.cancelButtonActive ? this.confirmationButtons.showCancelButton() : this.confirmationButtons.hideCancelButton();
            const A = .1 * this.uiGameManager.canvasController.itemSize,
                M = A,
                G = this.width - M - (this.width - this.confirmationButtons.checkButton.x) - A,
                R = this.selectedCardContainer.y + this.selectedCardContainer.height;
            this.condensedCardInformationController = new u.UIGamePopupCondensedCardInformationController(this.uiGameManager, this, M, R, G, this.selectDiscardCardFormat.selectCardFormat.validCardsToSelect);
            const D = this.condensedCardInformationController.getLongestTextHeight(this.selectDiscardCardFormat.selectCardFormat.validCardsToSelect),
                x = D < this.confirmationButtons.height ? 0 : D - this.confirmationButtons.height;
            this.buildContainer(0, x);
            const O = a.itemSize,
                B = this.absoluteHeight,
                L = a.appW - 10 * a.itemSize;
            this.playerCardContainer = new n.UIGameCardContainerView(this.uiGameManager, 0, B, L, O, this, !1, !1), this.selectedCardContainer.setCardClickAction(e => {
                this.selectedCardContainer.removeCard(e);
                1 == this.selectDiscardCardFormat.selectCardFormat.amountOfCardsToSelect || this.playerCardContainer.addNewCardOfType(e), this.condensedCardInformationController.removeSelectedCardInformation(), f()
            });
            const N = e => {
                this.addCard(e)
            };
            this.playerCardContainer.setCardClickAction(e => {
                N(e)
            }), this.updatePlayerCards(), this.updateTopText()
        }
        buildContainer(e = 0, t = 0) {
            this.drawSectionBgAroundContent(e, t), this.confirmationButtons.y = this.absoluteHeight - this.confirmationButtons.height;
            const a = this.uiGameManager.canvasController,
                i = a.appH - a.itemSize - this.absoluteHeight;
            this.y = i
        }
        updateTopText() {
            let e = this.topText;
            e += "\n", e += "(" + this.selectedCardContainer.cardInventory.cardViews.length + "/" + this.amountToDiscard + ")";
            const t = this.hasEnoughCards() ? i.GameColor.getColor(i.GameColor.Color.GreenDark) : i.GameColor.getColor(i.GameColor.Color.RedDark);
            this.textBox.text = e, this.textBox.centerXInParent(), this.textBox.repositionY(!0), this.textBox.changeTextColor(t)
        }
        hasEnoughCards() {
            return this.selectedCardContainer.cardInventory.cardViews.length == this.amountToDiscard
        }
        updateCheckMark() {
            this.confirmationButtons.checkButton.inactivateOpacity(), this.hasEnoughCards() && this.confirmationButtons.checkButton.activateOpacity()
        }
        checkAction() {
            if (!this.hasEnoughCards()) return;
            const e = this.selectedCardContainer.cardInventory.getAllCardEnums();
            this.uiGameManager.socketGameSend.selectCards(e), this.closeUI()
        }
        addCard(e) {
            if (!(0, g.elementInArray)(this.selectDiscardCardFormat.selectCardFormat.validCardsToSelect, e)) return;
            if (1 == this.selectDiscardCardFormat.selectCardFormat.amountOfCardsToSelect && this.resetCardSelection(), this.hasEnoughCards()) return;
            if (!this.canPlayerAddCard(e)) return;
            this.selectedCardContainer.addNewCardOfType(e);
            1 == this.selectDiscardCardFormat.selectCardFormat.amountOfCardsToSelect || this.playerCardContainer.removeCard(e), this.isCondensedInformationActive && (this.condensedCardInformationController.removeSelectedCardInformation(), this.condensedCardInformationController.showSelectedCardInformation(e))
        }
        closeUI() {
            this.playerCardContainer.closeUI(), null != this.parent && this.parent.removeChild(this)
        }
        updatePlayerCards() {
            const e = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor).getAllCardsInHand();
            for (const t of e) this.playerCardContainer.addNewCardOfType(t, !1);
            this.playerCardContainer.fadeAllCardsExcludingCardsOfType(this.selectDiscardCardFormat.selectCardFormat.validCardsToSelect)
        }
        canPlayerAddCard(e) {
            const t = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor),
                a = this.selectedCardContainer.cardInventory.getCardTypeCount(e);
            if (t.totalResourceCardOfType(e) > a) return !0;
            return t.totalDevelopmentCardsOfType(e) > a
        }
        resetCardSelection() {
            this.selectedCardContainer.removeAllCards(), this.playerCardContainer.removeAllCards(), this.updatePlayerCards()
        }
    }
    t.UIGamePopupDiscardCards = m
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePopupSelectCardToGiveToAnotherPlayer = void 0;
    const i = a(50),
        o = a(64),
        n = a(79),
        r = a(63),
        s = a(7);
    class c extends o.SectionBgAdaptiveView {
        constructor(e, t, a) {
            super(), this.uiGameManager = e, this.popupImageAndDescription = t, this.selectCardFormat = a;
            const i = this.uiGameManager.canvasController,
                o = i.popupWidth;
            i.app.stage.addChild(this), this.popupImageAndDescription = t, this.addChild(this.popupImageAndDescription);
            const s = () => {
                    this.updateCheckMark()
                },
                c = .75 * i.itemSize,
                l = this.popupImageAndDescription.y + this.popupImageAndDescription.height;
            this.selectedCardContainer = new n.UIGameCardContainerView(this.uiGameManager, 0, l, o, c, this), this.selectedCardContainer.setCardAddAction(s), this.selectedCardContainer.setCardRemoveAction(s), this.addVictimAvatarView(this.selectCardFormat.playerReceivingCard);
            const h = .55 * i.itemSize,
                d = this.absoluteHeight;
            this.confirmationButtons = new r.UIGamePopupConfirmationButtons(0, d, o, h, () => {
                this.checkAction()
            }, () => {}, this), this.selectCardFormat.selectCardFormat.cancelButtonActive ? this.confirmationButtons.showCancelButton() : this.confirmationButtons.hideCancelButton(), this.buildContainer();
            const u = i.itemSize,
                g = this.absoluteHeight,
                m = i.appW - 10 * i.itemSize;
            this.playerCardContainer = new n.UIGameCardContainerView(this.uiGameManager, 0, g, m, u, this, !1, !1), this.selectedCardContainer.setCardClickAction(e => {
                this.selectedCardContainer.removeCard(e), this.playerCardContainer.addNewCardOfType(e), s()
            });
            const p = e => {
                this.addCard(e)
            };
            this.playerCardContainer.setCardClickAction(e => {
                p(e)
            }), this.updatePlayerCards()
        }
        buildContainer(e = 0, t = 0) {
            this.drawSectionBgAroundContent(e, t), this.confirmationButtons.y = this.absoluteHeight - this.confirmationButtons.height;
            const a = this.uiGameManager.canvasController,
                i = a.appH - a.itemSize - this.absoluteHeight;
            this.y = i
        }
        addVictimAvatarView(e) {
            const t = .1 * this.uiGameManager.canvasController.itemSize,
                a = this.selectedCardContainer.height,
                o = this.uiGameManager.gameState.getPlayerWithColor(e),
                n = this.selectedCardContainer.width - a - t,
                r = this.uiGameManager.canvasController.margin;
            this.victimAvatarView = new i.UIGamePlayerAvatarView(n, r, a, this.selectedCardContainer, o, !0)
        }
        hasEnoughCards() {
            return this.selectedCardContainer.cardInventory.cardViews.length == this.selectCardFormat.selectCardFormat.amountOfCardsToSelect
        }
        updateCheckMark() {
            this.confirmationButtons.checkButton.inactivateOpacity(), this.hasEnoughCards() && this.confirmationButtons.checkButton.activateOpacity()
        }
        addCard(e) {
            (0, s.elementInArray)(this.selectCardFormat.selectCardFormat.validCardsToSelect, e) && (1 == this.selectCardFormat.selectCardFormat.amountOfCardsToSelect && this.resetCardSelection(), this.hasEnoughCards() || this.canPlayerAddCard(e) && (this.selectedCardContainer.addNewCardOfType(e), this.playerCardContainer.removeCard(e)))
        }
        canPlayerAddCard(e) {
            const t = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor),
                a = this.selectedCardContainer.cardInventory.getCardTypeCount(e);
            if (t.totalResourceCardOfType(e) > a) return !0;
            return t.totalDevelopmentCardsOfType(e) > a
        }
        resetCardSelection() {
            this.selectedCardContainer.removeAllCards(), this.playerCardContainer.removeAllCards(), this.updatePlayerCards()
        }
        updatePlayerCards() {
            const e = this.uiGameManager.gameState.getPlayerWithColor(this.uiGameManager.gameState.myColor).getAllCardsInHand();
            for (const t of e) this.playerCardContainer.addNewCardOfType(t, !1);
            this.playerCardContainer.fadeAllCardsExcludingCardsOfType(this.selectCardFormat.selectCardFormat.validCardsToSelect)
        }
        checkAction() {
            if (!this.hasEnoughCards()) return;
            const e = this.selectedCardContainer.cardInventory.getAllCardEnums();
            this.uiGameManager.socketGameSend.selectCards(e), this.closeUI()
        }
        closeUI() {
            this.playerCardContainer.closeUI(), null != this.parent && this.parent.removeChild(this)
        }
    }
    t.UIGamePopupSelectCardToGiveToAnotherPlayer = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameBarbarianInvasion = void 0;
    const i = a(572);
    var o = a(3).GameStateEnums.UIGameEventEnums;
    const n = a(573),
        r = a(577);
    t.UIGameBarbarianInvasion = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.barbarianInvasionState = new i.BarbarianInvasionState, this.barbarianInvasionTrackerView = new n.UIGameBarbarianInvasionStateTrackerView(this.uiGameManager, this.barbarianInvasionState), this.playerInformationDefenderOfColonistViews = [], this.initPlayerInformationDefenderOfColonistViews()
        }
        onEvent(e, t) {
            switch (t) {
                case o.BarbarianInvasionStateUpdated:
                    this.updateBarbarianInvasionState(e)
            }
        }
        updateBarbarianInvasionState(e) {
            this.barbarianInvasionState.deserialize(e), this.barbarianInvasionTrackerView.updateProgressTracker()
        }
        initPlayerInformationDefenderOfColonistViews() {
            for (const e of this.uiGameManager.playersController.playerInformationViews) {
                const t = new r.UIGamePlayerInformationDefenderOfColonistView(this.uiGameManager, e);
                this.playerInformationDefenderOfColonistViews.push(t)
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.BarbarianInvasionState = void 0;
    t.BarbarianInvasionState = class {
        constructor() {
            this.knightStrength = 0, this.barbarianStrength = 0, this.barbarianProgress = 0
        }
        resetBarbarianState() {
            this.barbarianProgress = 0
        }
        deserialize(e) {
            for (const t of Object.keys(this)) this[t] = e[t]
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameBarbarianInvasionStateTrackerView = void 0;
    const i = a(27),
        o = a(574),
        n = a(575),
        r = a(6),
        s = a(22);
    class c extends i.SectionView {
        constructor(e, t) {
            const a = e.canvasController,
                i = 2.6 * a.itemSize,
                c = .85 * a.itemSize,
                l = 2 * c / 3,
                h = l * (Math.sqrt(3) / 2),
                d = .18 * h;
            super(0, i, c, 6.5 * (h + d) + d / 2, a.app.stage), this.uiGameManager = e, this.barbarianInvasionState = t, this.hexagonViews = [];
            let u = 0,
                g = 0;
            const m = .05 * l;
            for (let e = 0; e < 8; e += 1) this.hexagonViews.push(new o.UIGameBarbarianHexView(e, u, g, l, l, this)), u = (e + 1) % 2 * (l / 2 - m), g += 3 * h / 4 + d;
            this.currentActiveHex = this.hexagonViews[0], this.currentActiveHex.setActiveTexture(), this.setLastHexToAttackTexture();
            const p = a.appH / 300,
                C = l,
                y = this.currentActiveHex.getPointForBarbarianShip(),
                S = r.Loader.shared.resources.icon_barbarian_ship.texture;
            this.barbarianShipView = new n.UIGameSpriteWithNotificationView(y.x, y.y, C, C, this, S, p), this.barbarianShipView.counter.setNeutralNotificationTexture();
            const v = this.currentActiveHex.getPointForKnightSwords(),
                _ = r.Loader.shared.resources.icon_swords.texture;
            this.knightStrengthView = new n.UIGameSpriteWithNotificationView(v.x, v.y, C, C, this, _, p), this.barbarianShipView.spriteView.setTip(s.EnglishTexts.BARBARIAN_TOOL_TIP_TITLE, [s.EnglishTexts.BARBARIAN_TOOL_TIP_BODY_1, s.EnglishTexts.BARBARIAN_TOOL_TIP_BODY_2]), this.knightStrengthView.spriteView.setTip(s.EnglishTexts.KNIGHT_TOOL_TIP_TITLE, [s.EnglishTexts.KNIGHT_TOOL_TIP_BODY_1, s.EnglishTexts.KNIGHT_TOOL_TIP_BODY_2])
        }
        setLastHexToAttackTexture() {
            this.hexagonViews[this.hexagonViews.length - 1].setAttackTexture()
        }
        getHexagonForBarbarianStrength(e) {
            for (const t of this.hexagonViews)
                if (t.barbarianProgressMarker == e) return t
        }
        updateProgressTracker() {
            const e = this.getHexagonForBarbarianStrength(this.barbarianInvasionState.barbarianProgress);
            if (null == e) return;
            const t = e.getPointForBarbarianShip();
            this.barbarianShipView.animationController.animateTo(t), this.barbarianShipView.counter.updateCount(this.barbarianInvasionState.barbarianStrength);
            const a = e.getPointForKnightSwords();
            this.knightStrengthView.animationController.animateTo(a), this.knightStrengthView.counter.updateCount(this.barbarianInvasionState.knightStrength);
            this.barbarianInvasionState.knightStrength >= this.barbarianInvasionState.barbarianStrength ? this.knightStrengthView.counter.setWinningNotificationTexture() : this.knightStrengthView.counter.setLosingNotificationTexture(), e.setActiveTexture(), this.setLastHexToAttackTexture(), e.barbarianProgressMarker != this.currentActiveHex.barbarianProgressMarker && (this.currentActiveHex.setInactiveTexture(), this.currentActiveHex = e)
        }
    }
    t.UIGameBarbarianInvasionStateTrackerView = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameBarbarianHexView = void 0;
    const i = a(26),
        o = a(13),
        n = a(6);
    class r extends o.SpriteView {
        constructor(e, t, a, i, o, r) {
            super(t, a, i, o, r, n.Loader.shared.resources.barbarian_tracker_hex_inactive.texture), this.barbarianProgressMarker = e
        }
        setInactiveTexture() {
            const e = n.Loader.shared.resources.barbarian_tracker_hex_inactive.texture;
            this.texture = e
        }
        setActiveTexture() {
            const e = n.Loader.shared.resources.barbarian_tracker_hex_active.texture;
            this.texture = e
        }
        setAttackTexture() {
            const e = n.Loader.shared.resources.barbarian_tracker_hex_attack.texture;
            this.texture = e
        }
        getPointForBarbarianShip() {
            const e = this.x,
                t = this.y - .05 * this.height;
            return new i.Point(e, t)
        }
        getPointForKnightSwords() {
            const e = this.x + this.width,
                t = this.y - .05 * this.height;
            return new i.Point(e, t)
        }
    }
    t.UIGameBarbarianHexView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameSpriteWithNotificationView = void 0;
    const i = a(306),
        o = a(13),
        n = a(576);
    class r extends i.MovingSectionView {
        constructor(e, t, a, i, r, s, c) {
            super(e, t, a, i, r, c, c), this.spriteView = new o.SpriteView(0, 0, this.width, this.height, this, s);
            const l = .48 * this.width,
                h = .55 * this.width,
                d = .6 * this.height;
            this.counter = new n.NotificationCounterView(h, d, l, l, this)
        }
    }
    t.UIGameSpriteWithNotificationView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.NotificationCounterView = void 0;
    const i = a(28),
        o = a(27),
        n = a(13),
        r = a(38),
        s = a(6);
    class c extends o.SectionView {
        constructor(e, t, a, o, c) {
            super(e, t, a, o, c);
            const l = s.Loader.shared.resources.red_circle.texture;
            this.notificationCircle = new n.SpriteView(0, 0, this.width, this.height, this, l);
            this.countText = new r.TextView("0", 0, 0, this.width, this.height, this);
            const h = .75 * this.height;
            this.countText.style.fontSize = h, this.countText.style.fontWeight = "bolder", this.countText.style.fill = i.GameColor.getColor(i.GameColor.Color.OffWhite), this.countText.style.stroke = i.GameColor.getColor(i.GameColor.Color.DarkGrey), this.countText.style.strokeThickness = 2, this.countText.style.trim = !1, this.countText.style.wordWrap = !1, this.countText.centerXInParent(), this.countText.repositionY(!0)
        }
        updateCount(e) {
            this.countText.text = "" + e, this.countText.centerXInParent(), this.countText.repositionY(!0)
        }
        setNeutralNotificationTexture() {
            const e = s.Loader.shared.resources.grey_circle.texture;
            this.notificationCircle.texture = e
        }
        setWinningNotificationTexture() {
            const e = s.Loader.shared.resources.green_circle.texture;
            this.notificationCircle.texture = e
        }
        setLosingNotificationTexture() {
            const e = s.Loader.shared.resources.red_circle.texture;
            this.notificationCircle.texture = e
        }
    }
    t.NotificationCounterView = c
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationDefenderOfColonistView = void 0;
    const i = a(6),
        o = a(94),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums,
        s = n.GameStateEnums.VictoryPointTypes;
    const c = a(22);
    t.UIGamePlayerInformationDefenderOfColonistView = class {
        constructor(e, t) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerInformation = t;
            const a = this.uiGameManager.gameState.isPlayerSpectator() ? this.uiGameManager.gameState.playOrder[0] : this.uiGameManager.gameState.myColor;
            this.playerInformation.player.color == a ? this.createMyDefenderOfColonistView() : this.createOpponentDefenderOfColonistView(), this.defenderOfColonistView.view.setTip(c.EnglishTexts.PLAYER_INFORMATION_DEFENDER_OF_COLONIST_TITLE, [c.EnglishTexts.PLAYER_INFORMATION_DEFENDER_OF_COLONIST_BODY]), this.updateDefenderOfColonistCount(), this.toggleProgressDefenderOfColonistView()
        }
        onEvent(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.updateDefenderOfColonistCount();
                    break;
                case r.HoveredOverPlayerInformationArrow:
                    this.defenderOfColonistView.showView(this.playerInformation);
                    break;
                case r.PointerOutPlayerInformationView:
                    this.defenderOfColonistView.hideView()
            }
        }
        createMyDefenderOfColonistView() {
            const e = i.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .809 * t,
                r = .71 * a,
                s = .0804 * t,
                c = .22 * a,
                l = .8943 * t,
                h = r,
                d = .1 * t,
                u = c,
                g = .0786 * -s;
            this.defenderOfColonistView = new o.ItemCountView(n, r, s, c, this.playerInformation, e.icon_defender.texture, l, h, d, u, g), this.defenderOfColonistView.resetTextYPosition()
        }
        createOpponentDefenderOfColonistView() {
            const e = i.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .809 * t,
                r = .5545 * a,
                s = .0804 * t,
                c = .341 * a,
                l = .8943 * t,
                h = r,
                d = .1 * t,
                u = c,
                g = .0786 * -s;
            this.defenderOfColonistView = new o.ItemCountView(n, r, s, c, this.playerInformation, e.icon_defender.texture, l, h, d, u, g), this.defenderOfColonistView.resetTextYPosition()
        }
        updateDefenderOfColonistCount() {
            const e = this.playerInformation.player.victoryPointState.totalVictoryPointsOfType([s.DefenderOfColonist]);
            this.defenderOfColonistView.updateText(String(e))
        }
        toggleProgressDefenderOfColonistView() {
            null == this.defenderOfColonistView.view.parent ? this.defenderOfColonistView.showView(this.playerInformation) : this.defenderOfColonistView.hideView()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGameInventoryHighlightDiceController = void 0;
    const i = a(3);
    var o = i.GameStateEnums.UIGameEventEnums,
        n = i.GameStateEnums.ActionStates;
    const r = a(7),
        s = a(141),
        c = a(103),
        l = a(52),
        h = a(11);
    t.UIGameInventoryHighlightDiceController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.diceProbabilityViewsBeingHighlighted = [], this.selectedDiceNumbers = []
        }
        onEvent(e, t) {
            switch (t) {
                case o.HighlightDiceNumbersForInventor:
                    this.highlightDiceNumbers(e);
                    break;
                case o.GameStateUpdated:
                    this.gameStateUpdated()
            }
        }
        onGameTick(e) {
            for (const t of this.diceProbabilityViewsBeingHighlighted)(0, r.elementInArray)(this.selectedDiceNumbers, t) ? t.resetSize() : t.animate(e)
        }
        highlightDiceNumbers(e) {
            for (const t of e) {
                const e = this.uiGameManager.mapController.tileViews[t];
                null != e.probabilityView && (e.probabilityView.highlight(), this.diceProbabilityViewsBeingHighlighted.push(e.probabilityView))
            }
            this.startAnimation(), this.showInventorConfirmationPopup()
        }
        startAnimation() {
            this.uiGameManager.eventController.registerUIGameAnimation(this), this.setClickAction()
        }
        setClickAction() {
            const e = e => {
                this.clickedDiceNumber(e)
            };
            for (const t of this.diceProbabilityViewsBeingHighlighted) t.setClickAction(e)
        }
        endAnimation() {
            this.uiGameManager.eventController.unregisterUIGameAnimation(this), this.removeClickAction()
        }
        removeClickAction() {
            for (const e of this.diceProbabilityViewsBeingHighlighted) e.removeClickAction()
        }
        clickedDiceNumber(e) {
            h.Sound.playSound(h.Sound.SoundType.Click);
            (0, r.elementInArray)(this.selectedDiceNumbers, e) ? this.deselectDiceNumber(e): this.selectDiceNumber(e)
        }
        selectDiceNumber(e) {
            2 == this.selectedDiceNumbers.length || (this.selectedDiceNumbers.push(e), e.removeHighlight(), this.updateCheckButtonOpacity())
        }
        deselectDiceNumber(e) {
            (0, r.removeElementFromArray)(this.selectedDiceNumbers, e), e.highlight(), this.updateCheckButtonOpacity()
        }
        updateCheckButtonOpacity() {
            if (null == this.confirmationPopup) return;
            this.confirmationPopup.checkButtonInactiveOpacity();
            2 == this.selectedDiceNumbers.length && this.confirmationPopup.checkButtonActiveOpactiy()
        }
        showInventorConfirmationPopup() {
            const e = l.CardDataController.getCardDataForCard(i.GameStateEnums.CardEnum.ProgressCardScienceInventor);
            if (null == e) return;
            const t = c.UIGamePopupInformationView.getPopupInformationForCardData(e),
                a = {
                    cardEnum: e.cardEnum,
                    popupInformation: t
                };
            this.confirmationPopup = new s.UIGamePopupCardConfirmation(this.uiGameManager, a), this.confirmationPopup.checkButtonInactiveOpacity();
            this.confirmationPopup.setCheckAction(() => {
                this.checkAction()
            });
            this.confirmationPopup.setCancelAction(() => {
                this.cancelAction()
            })
        }
        checkAction() {
            if (!(2 == this.selectedDiceNumbers.length)) return;
            const e = this.getSelectedTileIndices();
            this.uiGameManager.socketGameSend.selectedTiles(e), this.closeUI()
        }
        getSelectedTileIndices() {
            const e = [];
            for (const t of this.selectedDiceNumbers) {
                const a = this.uiGameManager.gameState.mapState.tileState.getTileHexIndex(t.hexFace);
                null != a && e.push(a)
            }
            return e
        }
        cancelAction() {
            this.uiGameManager.socketGameSend.cancelAction(), this.closeUI()
        }
        closeUI() {
            null != this.confirmationPopup && (null != this.confirmationPopup.parent && this.confirmationPopup.parent.removeChild(this.confirmationPopup), this.confirmationPopup = void 0, this.resetAnimation(), this.endAnimation(), this.selectedDiceNumbers = [], this.diceProbabilityViewsBeingHighlighted = [])
        }
        resetAnimation() {
            for (const e of this.diceProbabilityViewsBeingHighlighted) e.resetSize(), e.removeHighlight()
        }
        gameStateUpdated() {
            this.uiGameManager.gameState.currentActionState != n.SelectTileProductionNumbersToSwap && this.closeUI()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationLargestArmyController = void 0;
    var i = a(3).GameStateEnums.UIGameEventEnums;
    const o = a(580),
        n = a(20),
        r = a(13),
        s = a(6);
    t.UIGamePlayerInformationLargestArmyController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerInformationLargestArmyViews = [], this.lastPlayerToHoldLargestArmy = this.getPlayerWithLargestArmy(), this.initPlayerInformationLargestArmyViews()
        }
        initPlayerInformationLargestArmyViews() {
            for (const e of this.uiGameManager.gameState.players) {
                const t = new o.UIGamePlayerInformationLargestArmyView(this.uiGameManager, e);
                this.playerInformationLargestArmyViews.push(t)
            }
        }
        getPlayerWithLargestArmy() {
            for (const e of this.uiGameManager.gameState.players)
                if (e.hasLargestArmy) return e.color;
            return n.PlayerColors.None
        }
        onEvent(e, t) {
            switch (t) {
                case i.PlayerControllerStateUpdated:
                    this.updateLargestArmyStatus()
            }
        }
        getPlayerInformationLargestArmyView(e) {
            for (const t of this.playerInformationLargestArmyViews)
                if (t.playerState.color == e) return t
        }
        updateLargestArmyStatus() {
            for (const e of this.uiGameManager.gameState.players) e.hasLargestArmy && e.color != this.lastPlayerToHoldLargestArmy && this.playerAchievedLargestArmy(e)
        }
        playerAchievedLargestArmy(e) {
            const t = this.lastPlayerToHoldLargestArmy !== n.PlayerColors.None,
                a = this.getPlayerInformationLargestArmyView(e.color);
            if (null == a) return;
            const o = a.getAchievementIconStartingPosition(),
                c = a.getAchievementIconScale(),
                l = t ? e.username + " Stole" : e.username + " Received",
                h = s.Loader.shared.resources.icon_largest_army.texture,
                d = new s.Container,
                u = new r.SpriteView(0, 0, h.width, h.height, d, h);
            u.centerXInParent(), u.centerYInParent();
            const g = {
                title: l,
                subtitle: "Largest Army",
                iconContainer: d,
                player: e.color,
                achievementDurationInSeconds: 1.5,
                playSound: !0,
                bottomDescription: "+2 Victory Points",
                optionalIconStartingPoint: o,
                optionalIconStartingSize: c
            };
            this.lastPlayerToHoldLargestArmy = e.color, this.uiGameManager.eventController.sendEvent(g, i.PlayerReceivedAchievement)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationLargestArmyView = void 0;
    const i = a(94),
        o = a(6),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums,
        s = n.GameStateEnums.CardEnum;
    const c = a(7),
        l = a(22);
    t.UIGamePlayerInformationLargestArmyView = class {
        constructor(e, t) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerState = t;
            const a = this.uiGameManager.playersController.getPlayerInformationViewWithColor(this.playerState.color);
            if (null == a) return;
            this.playerInformation = a;
            const i = this.uiGameManager.gameState.isPlayerSpectator() ? this.uiGameManager.gameState.playOrder[0] : this.uiGameManager.gameState.myColor;
            this.playerInformation.player.color == i ? this.createMyLargestArmyView() : this.createOpponentLargestArmyView(), this.largestArmyView.view.setTip(l.EnglishTexts.PLAYER_INFORMATION_LARGEST_ARMY_TITLE, [l.EnglishTexts.PLAYER_INFORMATION_LARGEST_ARMY_BODY]), this.updateLargestArmyCount()
        }
        onEvent(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.updateLargestArmyCount()
            }
        }
        createMyLargestArmyView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .6707 * t,
                r = .4833 * a,
                s = .0915 * t,
                c = .25 * a,
                l = .6667 * t,
                h = .77 * a,
                d = .1003 * t,
                u = .1 * a;
            this.largestArmyView = new i.ItemCountView(n, r, s, c, this.playerInformation, e.icon_largest_army.texture, l, h, d, u, 0)
        }
        createOpponentLargestArmyView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .6707 * t,
                r = .2155 * a,
                s = .0915 * t,
                c = .3879 * a,
                l = .6707 * t,
                h = .64 * a,
                d = .0915 * t,
                u = .1 * a;
            this.largestArmyView = new i.ItemCountView(n, r, s, c, this.playerInformation, e.icon_largest_army.texture, l, h, d, u, 0)
        }
        updateLargestArmyCount() {
            const e = (0, c.countOccurenceOfValueInArray)(this.playerState.developmentCardsUsed, s.Knight);
            this.largestArmyView.updateText(String(e));
            const t = o.Loader.shared.resources.icon_largest_army.texture,
                a = o.Loader.shared.resources.icon_largest_army_highlight.texture;
            this.playerState.hasLargestArmy ? this.largestArmyView.view.updateTexture(a) : this.largestArmyView.view.updateTexture(t)
        }
        getAchievementIconStartingPosition() {
            return this.largestArmyView.view.getGlobalPosition()
        }
        getAchievementIconScale() {
            return this.largestArmyView.view.scale.x
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationLongestRoadController = void 0;
    const i = a(20);
    var o = a(3).GameStateEnums.UIGameEventEnums;
    const n = a(582),
        r = a(6),
        s = a(13);
    t.UIGamePlayerInformationLongestRoadController = class {
        constructor(e) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerInformationLongestRoadViews = [], this.lastPlayerToHoldLongestRoad = this.getPlayerWithLongestRoad(), this.initPlayerLongestRoadViews()
        }
        onEvent(e, t) {
            switch (t) {
                case o.PlayerControllerStateUpdated:
                    this.updateLongestRoadStatus()
            }
        }
        getPlayerInformationLongestRoadView(e) {
            for (const t of this.playerInformationLongestRoadViews)
                if (t.playerState.color == e) return t
        }
        initPlayerLongestRoadViews() {
            for (const e of this.uiGameManager.gameState.players) {
                const t = new n.UIGamePlayerInformationLongestRoadView(this.uiGameManager, e);
                this.playerInformationLongestRoadViews.push(t)
            }
        }
        getPlayerWithLongestRoad() {
            for (const e of this.uiGameManager.gameState.players)
                if (e.hasLongestRoad) return e.color;
            return i.PlayerColors.None
        }
        updateLongestRoadStatus() {
            this.resetLastLongestRoadIfNoPlayerHasLongestRoad();
            for (const e of this.uiGameManager.gameState.players) e.hasLongestRoad && e.color != this.lastPlayerToHoldLongestRoad && this.playerAchievedLongestRoad(e)
        }
        resetLastLongestRoadIfNoPlayerHasLongestRoad() {
            for (const e of this.uiGameManager.gameState.players)
                if (e.hasLongestRoad) return;
            this.lastPlayerToHoldLongestRoad = i.PlayerColors.None
        }
        playerAchievedLongestRoad(e) {
            const t = this.lastPlayerToHoldLongestRoad !== i.PlayerColors.None,
                a = this.getPlayerInformationLongestRoadView(e.color);
            if (null == a) return;
            const n = a.getAchievementIconStartingPosition(),
                c = a.getAchievementIconScale(),
                l = t ? e.username + " Stole" : e.username + " Received",
                h = r.Loader.shared.resources.icon_longest_road.texture,
                d = new r.Container,
                u = new s.SpriteView(0, 0, h.width, h.height, d, h);
            u.centerXInParent(), u.centerYInParent();
            const g = {
                title: l,
                subtitle: "Longest Road",
                iconContainer: d,
                player: e.color,
                achievementDurationInSeconds: 1.5,
                playSound: !0,
                bottomDescription: "+2 Victory Points",
                optionalIconStartingPoint: n,
                optionalIconStartingSize: c
            };
            this.lastPlayerToHoldLongestRoad = e.color, this.uiGameManager.eventController.sendEvent(g, o.PlayerReceivedAchievement)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationLongestRoadView = void 0;
    const i = a(94),
        o = a(6),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums;
    const s = a(7),
        c = a(22);
    t.UIGamePlayerInformationLongestRoadView = class {
        constructor(e, t) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerState = t;
            const a = this.uiGameManager.playersController.getPlayerInformationViewWithColor(this.playerState.color);
            if (null == a) return;
            this.playerInformation = a;
            const i = this.uiGameManager.gameState.isPlayerSpectator() ? this.uiGameManager.gameState.playOrder[0] : this.uiGameManager.gameState.myColor,
                o = this.playerInformation.player.color == i;
            (0, s.elementInArray)(this.uiGameManager.optionalGameMechanics, n.OptionalGameMechanicEnum.CityImprovements) ? this.createCityImprovemenLongestRoadView(o): this.createDefaultLongestRoadView(o), this.longestRoadView.view.setTip(c.EnglishTexts.PLAYER_INFORMATION_LONGEST_ROAD_TITLE, [c.EnglishTexts.PLAYER_INFORMATION_LONGEST_ROAD_BODY]), this.updatePlayerLongestRoadCount()
        }
        onEvent(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.updatePlayerLongestRoadCount();
                    break;
                case r.HoveredOverPlayerInformationArrow:
                    this.longestRoadView.hideView();
                    break;
                case r.PointerOutPlayerInformationView:
                    this.longestRoadView.showView(this.playerInformation)
            }
        }
        createDefaultLongestRoadView(e) {
            e ? this.createMyDefaultLongestRoadView() : this.createOpponentDefaultLongestRoadView()
        }
        createCityImprovemenLongestRoadView(e) {
            e ? this.createMyCitiesAndKnightsLongestRoadView() : this.createOpponentCitiesAndKnightsLongestRoadView()
        }
        createMyDefaultLongestRoadView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .8369 * t,
                r = .4833 * a,
                s = .0915 * t,
                c = .25 * a,
                l = .82772 * t,
                h = .77 * a,
                d = .1098 * t,
                u = .1 * a,
                g = .015 * -t;
            this.longestRoadView = new i.ItemCountView(n, r, s, c, this.playerInformation, e.icon_longest_road.texture, l, h, d, u, g)
        }
        createOpponentDefaultLongestRoadView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .8369 * t,
                r = .2155 * a,
                s = .0915 * t,
                c = .3879 * a,
                l = .82772 * t,
                h = .64 * a,
                d = .1098 * t,
                u = .1 * a,
                g = .015 * -t;
            this.longestRoadView = new i.ItemCountView(n, r, s, c, this.playerInformation, e.icon_longest_road.texture, l, h, d, u, g)
        }
        createMyCitiesAndKnightsLongestRoadView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .809 * t,
                r = .4267 * a,
                s = .0804 * t,
                c = .22 * a,
                l = .8943 * t,
                h = r,
                d = .1 * t,
                u = c,
                g = .0786 * -s;
            this.longestRoadView = new i.ItemCountView(n, r, s, c, this.playerInformation, e.icon_longest_road.texture, l, h, d, u, g), this.longestRoadView.resetTextYPosition()
        }
        createOpponentCitiesAndKnightsLongestRoadView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .809 * t,
                r = .1045 * a,
                s = .0804 * t,
                c = .341 * a,
                l = .8943 * t,
                h = r,
                d = .1 * t,
                u = c,
                g = .078 * -s;
            this.longestRoadView = new i.ItemCountView(n, r, s, c, this.playerInformation, e.icon_longest_road.texture, l, h, d, u, g), this.longestRoadView.resetTextYPosition()
        }
        updatePlayerLongestRoadCount() {
            this.longestRoadView.updateText(String(this.playerState.longestRoad));
            const e = o.Loader.shared.resources.icon_longest_road.texture,
                t = o.Loader.shared.resources.icon_longest_road_highlight.texture;
            this.playerState.hasLongestRoad ? this.longestRoadView.view.updateTexture(t) : this.longestRoadView.view.updateTexture(e)
        }
        getAchievementIconStartingPosition() {
            return this.longestRoadView.view.getGlobalPosition()
        }
        getAchievementIconScale() {
            return this.longestRoadView.view.scale.x
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationProgressCardController = void 0;
    const i = a(6),
        o = a(309),
        n = a(584);
    t.UIGamePlayerInformationProgressCardController = class {
        constructor(e) {
            this.uiGameManager = e, this.updateAllPlayerInformationViewsToShowProgressCardIcon(), this.playerInformationProgressCardVictoryPointViews = [], this.initPlayerInformationProgressCardVictoryPointViews()
        }
        updateAllPlayerInformationViewsToShowProgressCardIcon() {
            const e = i.Loader.shared.resources.card_progress_back.texture;
            for (const t of this.uiGameManager.gameState.players) {
                const a = this.uiGameManager.playersController.getPlayerInformationViewWithColor(t.color);
                null != a && (a.developmentCardView.view.texture = e, a.developmentCardView.view.removeAllListeners(), this.setProgressCardToolTip(a))
            }
        }
        setProgressCardToolTip(e) {
            e.developmentCardView.view.setHoverAction(() => {
                this.showPlayerInformationProgressCardToolTip(e)
            }, () => {
                this.removePlayerInformationProgressCardToolTip()
            })
        }
        showPlayerInformationProgressCardToolTip(e) {
            if (e.player.color == this.uiGameManager.gameState.myColor) return;
            this.playerInformationProgressCardToolTipView = new o.UIGamePlayerInformationProgressCardToolTipView(this.uiGameManager, e.player.username, e.developmentCardView, e.player.developmentCards, !1)
        }
        removePlayerInformationProgressCardToolTip() {
            null != this.playerInformationProgressCardToolTipView && this.playerInformationProgressCardToolTipView.removeToolTip()
        }
        initPlayerInformationProgressCardVictoryPointViews() {
            for (const e of this.uiGameManager.playersController.playerInformationViews) {
                const t = new n.UIGamePlayerInformationProgressCardVictoryPointView(this.uiGameManager, e);
                this.playerInformationProgressCardVictoryPointViews.push(t)
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationProgressCardVictoryPointView = void 0;
    const i = a(94),
        o = a(6),
        n = a(3);
    var r = n.GameStateEnums.UIGameEventEnums,
        s = n.GameStateEnums.VictoryPointTypes;
    const c = a(22);
    t.UIGamePlayerInformationProgressCardVictoryPointView = class {
        constructor(e, t) {
            this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerInformation = t;
            const a = this.uiGameManager.gameState.isPlayerSpectator() ? this.uiGameManager.gameState.playOrder[0] : this.uiGameManager.gameState.myColor;
            this.playerInformation.player.color == a ? this.createMyProgressCardVictoryPointView() : this.createOpponentProgressCardVictoryPointView(), this.progressCardVictoryPiontView.view.setTip(c.EnglishTexts.PLAYER_INFORMATION_PROGRESS_CARD_VICTORY_POINT_TITLE, [c.EnglishTexts.PLAYER_INFORMATION_PROGRESS_CARD_VICTORY_POINT_BODY]), this.updateProgressCardVictoryPointCount(), this.toggleProgressCardVictoryPointView()
        }
        onEvent(e, t) {
            switch (t) {
                case r.PlayerControllerStateUpdated:
                    this.updateProgressCardVictoryPointCount();
                    break;
                case r.HoveredOverPlayerInformationArrow:
                    this.progressCardVictoryPiontView.showView(this.playerInformation);
                    break;
                case r.PointerOutPlayerInformationView:
                    this.progressCardVictoryPiontView.hideView()
            }
        }
        createMyProgressCardVictoryPointView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .809 * t,
                r = .4267 * a,
                s = .0804 * t,
                c = .22 * a,
                l = .8943 * t,
                h = r,
                d = .1 * t,
                u = c,
                g = .0786 * -s;
            this.progressCardVictoryPiontView = new i.ItemCountView(n, r, s, c, this.playerInformation, e.icon_trophy.texture, l, h, d, u, g), this.progressCardVictoryPiontView.resetTextYPosition()
        }
        createOpponentProgressCardVictoryPointView() {
            const e = o.Loader.shared.resources,
                t = this.playerInformation.width,
                a = this.playerInformation.height,
                n = .809 * t,
                r = .1045 * a,
                s = .0804 * t,
                c = .341 * a,
                l = .8943 * t,
                h = r,
                d = .1 * t,
                u = c,
                g = .078 * -s;
            this.progressCardVictoryPiontView = new i.ItemCountView(n, r, s, c, this.playerInformation, e.icon_trophy.texture, l, h, d, u, g), this.progressCardVictoryPiontView.resetTextYPosition()
        }
        updateProgressCardVictoryPointCount() {
            const e = this.playerInformation.player.victoryPointState.totalVictoryPointsOfType([s.ProgressCardVictoryPoint]);
            this.progressCardVictoryPiontView.updateText(String(e))
        }
        toggleProgressCardVictoryPointView() {
            null == this.progressCardVictoryPiontView.view.parent ? this.progressCardVictoryPiontView.showView(this.playerInformation) : this.progressCardVictoryPiontView.hideView()
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationArrayController = void 0;
    const i = a(586);
    t.UIGamePlayerInformationArrayController = class {
        constructor(e) {
            this.uiGameManager = e, this.initPlayerInformationArrayViews()
        }
        initPlayerInformationArrayViews() {
            for (const e of this.uiGameManager.playersController.playerInformationViews) new i.UIGamePlayerInformationArrayView(this.uiGameManager, e)
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIGamePlayerInformationArrayView = void 0;
    const i = a(27);
    var o = a(3).GameStateEnums.UIGameEventEnums;
    const n = a(308);
    class r extends i.SectionView {
        constructor(e, t) {
            const a = t.width,
                i = t.height,
                r = e.gameState.isPlayerSpectator() ? e.gameState.playOrder[0] : e.gameState.myColor,
                s = t.player.color == r;
            super(.9512 * a, s ? .5222 * i : .2586 * i, .0447 * a, s ? .3111 * i : .4828 * i, t, !0), this.uiGameManager = e, this.uiGameManager.eventController.registerUIGameMechanic(this), this.playerInformation = t, this.informationArrayView = new n.SpriteExpanionArrowView(0, 0, this), this.informationArrayView.interactive = !0, this.informationArrayView.on("pointerover", e => {
                this.uiGameManager.eventController.sendEvent(this.playerInformation, o.HoveredOverPlayerInformationArrow)
            })
        }
        onEvent(e, t) {
            switch (t) {
                case o.HoveredOverPlayerInformationArrow:
                    this.informationArrayView.arrowPointRight();
                    break;
                case o.PointerOutPlayerInformationView:
                    this.informationArrayView.arrowPointLeft()
            }
        }
    }
    t.UIGamePlayerInformationArrayView = r
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SocketLoadTest = void 0;
    const i = a(7),
        o = a(3),
        n = a(147),
        r = a(14),
        s = a(15),
        c = a(33),
        l = a(287),
        h = a(99),
        d = a(148),
        u = a(41),
        g = a(96),
        m = a(98);
    class p {
        constructor(e) {
            this.sockets = [], this.SOCKET_COUNT = 100, e || (this.button = document.getElementById("load_test"), null != this.button && (this.button.onclick = () => {
                this.createSockets(this.SOCKET_COUNT)
            }))
        }
        canAccessLoadTest(e) {
            return null != this.button && (!!e.userState.isLoggedIn && (e.userState.icon == s.LobbyImage.IconFounderHat && ("Dello" == e.userState.username || "Mello" == e.userState.username)))
        }
        activateLoadTest(e) {
            this.canAccessLoadTest(e) && (this.button.style.display = "block", this.startActions())
        }
        createSockets(e) {
            const t = e => {
                    r.CA.sendEvent(r.CA.Type.General, r.CA.Category.General, r.CA.Label.GeneralBrokenInternetConnection), g.UITopNotificationController.show(e, m.UITopNotificationType.Error, "Refresh", () => {
                        location.reload()
                    })
                },
                a = () => {};
            console.log("Creating " + e + " of clients");
            for (let i = 0; i < e; i += 1) {
                const e = new n.SocketClient(u.UIAPIEndpoints.socketURL(), t, a);
                this.sockets.push(e);
                new d.SocketGameListen(e, ""), new l.SocketLobbyListen(e), new h.SocketChat(e);
                e.setSocketId(o.NetworkEnums.State.InfoMessage.toString(), e => {
                    c.UIPopupController.createSimplePopup("Note", e)
                })
            }
            console.log("Finished creating clients")
        }
        startActions() {
            setInterval(() => {
                console.log("Running actions");
                for (const e of this.sockets) p.playGame(e)
            }, 1e3)
        }
        static playGame(e) {
            e.send(o.NetworkEnums.Action.ClickedStartFastBots.toString(), !0), e.send(o.NetworkEnums.Action.ClickedDice.toString(), !0), e.send(o.NetworkEnums.Action.SelectedTile.toString(), 0), e.send(o.NetworkEnums.Action.BuyDevelopmentCard.toString(), !0), e.send(o.NetworkEnums.Action.WantToBuildRoad.toString(), !0), e.send(o.NetworkEnums.Action.ConfirmBuildRoad.toString(), (0, i.randomNumberBetween)(0, 200)), e.send(o.NetworkEnums.Action.WantToBuildSettlement.toString(), !0), e.send(o.NetworkEnums.Action.ConfirmBuildSettlement.toString(), (0, i.randomNumberBetween)(0, 200)), e.send(o.NetworkEnums.Action.WantToBuildCity.toString(), !0), e.send(o.NetworkEnums.Action.ConfirmBuildCity.toString(), (0, i.randomNumberBetween)(0, 200)), e.send(o.NetworkEnums.Action.WantToBuildShip.toString(), !0), e.send(o.NetworkEnums.Action.CancelAction.toString(), !0), e.send(o.NetworkEnums.Action.PassedTurn.toString(), !0)
        }
        static doAction(e) {
            const t = (0, i.randomNumberBetween)(0, 100);
            switch (!0) {
                case t < 30:
                    const a = (0, i.randomStringId)((0, i.randomNumberBetween)(0, 12));
                    e.send(o.NetworkEnums.Action.UpdateNickName.toString(), a), console.log("updating name to " + a);
                    break;
                case t < 60:
                    const n = (0, i.randomStringId)((0, i.randomNumberBetween)(0, 12));
                    console.log("sending chat message: " + n), e.send(o.NetworkEnums.Action.ChatSubmit.toString(), n);
                    break;
                case t < 70:
                    e.send(o.NetworkEnums.Action.ClickedLobbyGameListButton.toString(), !0);
                    break;
                case t < 80:
                    e.send(o.NetworkEnums.Action.ClickedLobbyRoomRefreshButton.toString(), !0);
                    break;
                case t < 90:
                    break;
                case t < 100:
                    e.send(o.NetworkEnums.Action.ClickedSpectateGame.toString(), 0)
            }
        }
    }
    t.SocketLoadTest = p
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIDocument = void 0;
    const i = a(14),
        o = a(36),
        n = a(35),
        r = a(6);
    t.UIDocument = class {
        static directPage() {}
        static debugOptions() {
            n.UIUtilsEjsVariables.IS_PRODUCTION || (console.log("Is mobile " + r.utils.isMobile.any), console.log("Is phone " + r.utils.isMobile.phone), console.log("Webgl supported " + r.utils.isWebGLSupported()))
        }
        static webGLCheck() {
            if (r.utils.isWebGLSupported()) i.CA.sendEvent(i.CA.Type.General, i.CA.Category.General, i.CA.Label.GeneralWebGLEnabled);
            else {
                i.CA.sendEvent(i.CA.Type.General, i.CA.Category.General, i.CA.Label.GeneralWebGLDisabled);
                const e = new o.ViewPopup("WebGL Inactive", "To have a better game performance you should enable webGL in your browser", () => {
                    window.location.replace("https://blog.colonist.io/how-to-enable-webgl/")
                }, () => {}, !0);
                e.changeCheckButtonText("Ok"), e.changeXButtonText("Later"), e.show()
            }
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.UIVLIAdController = void 0;
    const i = a(590);
    t.UIVLIAdController = class {
        constructor() {
            i.AjaxEndPoints.getUserEmailHash(e => {
                window.hashString = e, console.log("Emailhash: " + e)
            })
        }
    }
}, function(e, t, a) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.AjaxEndPoints = void 0;
    const i = a(41),
        o = a(49);
    t.AjaxEndPoints = class {
        static async testEndPoint(e) {
            o.UIAjaxWrapper.getRequest("test", e, e => {
                console.log("Got response"), console.log(e)
            })
        }
        static async getUserEmailHash(e) {
            o.UIAjaxWrapper.getRequest(i.UIAPIEndpoints.apiVLIEmailHash(), void 0, t => {
                e(t.vliEmailHash)
            })
        }
    }
}]);